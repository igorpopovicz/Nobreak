
contr_nobreak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000159d0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021f0  08015a88  08015a88  00025a88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017c78  08017c78  00030354  2**0
                  CONTENTS
  4 .ARM          00000000  08017c78  08017c78  00030354  2**0
                  CONTENTS
  5 .preinit_array 00000000  08017c78  08017c78  00030354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017c78  08017c78  00027c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017c7c  08017c7c  00027c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08017c80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000950  20000354  08017fd4  00030354  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ca4  08017fd4  00030ca4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00030354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c3c0  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004312  00000000  00000000  0004c73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb0  00000000  00000000  00050a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019e8  00000000  00000000  00052600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa57  00000000  00000000  00053fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020c86  00000000  00000000  0006ea3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5391  00000000  00000000  0008f6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00134a56  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007d68  00000000  00000000  00134aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000354 	.word	0x20000354
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08015a70 	.word	0x08015a70

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000358 	.word	0x20000358
 80000fc:	08015a70 	.word	0x08015a70

08000100 <strcmp>:
 8000100:	7802      	ldrb	r2, [r0, #0]
 8000102:	780b      	ldrb	r3, [r1, #0]
 8000104:	2a00      	cmp	r2, #0
 8000106:	d003      	beq.n	8000110 <strcmp+0x10>
 8000108:	3001      	adds	r0, #1
 800010a:	3101      	adds	r1, #1
 800010c:	429a      	cmp	r2, r3
 800010e:	d0f7      	beq.n	8000100 <strcmp>
 8000110:	1ad0      	subs	r0, r2, r3
 8000112:	4770      	bx	lr

08000114 <strlen>:
 8000114:	2300      	movs	r3, #0
 8000116:	5cc2      	ldrb	r2, [r0, r3]
 8000118:	3301      	adds	r3, #1
 800011a:	2a00      	cmp	r2, #0
 800011c:	d1fb      	bne.n	8000116 <strlen+0x2>
 800011e:	1e58      	subs	r0, r3, #1
 8000120:	4770      	bx	lr
	...

08000124 <__gnu_thumb1_case_uqi>:
 8000124:	b402      	push	{r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0049      	lsls	r1, r1, #1
 800012c:	5c09      	ldrb	r1, [r1, r0]
 800012e:	0049      	lsls	r1, r1, #1
 8000130:	448e      	add	lr, r1
 8000132:	bc02      	pop	{r1}
 8000134:	4770      	bx	lr
 8000136:	46c0      	nop			; (mov r8, r8)

08000138 <__gnu_thumb1_case_shi>:
 8000138:	b403      	push	{r0, r1}
 800013a:	4671      	mov	r1, lr
 800013c:	0849      	lsrs	r1, r1, #1
 800013e:	0040      	lsls	r0, r0, #1
 8000140:	0049      	lsls	r1, r1, #1
 8000142:	5e09      	ldrsh	r1, [r1, r0]
 8000144:	0049      	lsls	r1, r1, #1
 8000146:	448e      	add	lr, r1
 8000148:	bc03      	pop	{r0, r1}
 800014a:	4770      	bx	lr

0800014c <__udivsi3>:
 800014c:	2200      	movs	r2, #0
 800014e:	0843      	lsrs	r3, r0, #1
 8000150:	428b      	cmp	r3, r1
 8000152:	d374      	bcc.n	800023e <__udivsi3+0xf2>
 8000154:	0903      	lsrs	r3, r0, #4
 8000156:	428b      	cmp	r3, r1
 8000158:	d35f      	bcc.n	800021a <__udivsi3+0xce>
 800015a:	0a03      	lsrs	r3, r0, #8
 800015c:	428b      	cmp	r3, r1
 800015e:	d344      	bcc.n	80001ea <__udivsi3+0x9e>
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d328      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d30d      	bcc.n	8000188 <__udivsi3+0x3c>
 800016c:	22ff      	movs	r2, #255	; 0xff
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	ba12      	rev	r2, r2
 8000172:	0c03      	lsrs	r3, r0, #16
 8000174:	428b      	cmp	r3, r1
 8000176:	d302      	bcc.n	800017e <__udivsi3+0x32>
 8000178:	1212      	asrs	r2, r2, #8
 800017a:	0209      	lsls	r1, r1, #8
 800017c:	d065      	beq.n	800024a <__udivsi3+0xfe>
 800017e:	0b03      	lsrs	r3, r0, #12
 8000180:	428b      	cmp	r3, r1
 8000182:	d319      	bcc.n	80001b8 <__udivsi3+0x6c>
 8000184:	e000      	b.n	8000188 <__udivsi3+0x3c>
 8000186:	0a09      	lsrs	r1, r1, #8
 8000188:	0bc3      	lsrs	r3, r0, #15
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x46>
 800018e:	03cb      	lsls	r3, r1, #15
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b83      	lsrs	r3, r0, #14
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x52>
 800019a:	038b      	lsls	r3, r1, #14
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b43      	lsrs	r3, r0, #13
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x5e>
 80001a6:	034b      	lsls	r3, r1, #13
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0b03      	lsrs	r3, r0, #12
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x6a>
 80001b2:	030b      	lsls	r3, r1, #12
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0ac3      	lsrs	r3, r0, #11
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x76>
 80001be:	02cb      	lsls	r3, r1, #11
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a83      	lsrs	r3, r0, #10
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x82>
 80001ca:	028b      	lsls	r3, r1, #10
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a43      	lsrs	r3, r0, #9
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x8e>
 80001d6:	024b      	lsls	r3, r1, #9
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0a03      	lsrs	r3, r0, #8
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x9a>
 80001e2:	020b      	lsls	r3, r1, #8
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	d2cd      	bcs.n	8000186 <__udivsi3+0x3a>
 80001ea:	09c3      	lsrs	r3, r0, #7
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xa8>
 80001f0:	01cb      	lsls	r3, r1, #7
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0983      	lsrs	r3, r0, #6
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xb4>
 80001fc:	018b      	lsls	r3, r1, #6
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0943      	lsrs	r3, r0, #5
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xc0>
 8000208:	014b      	lsls	r3, r1, #5
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0903      	lsrs	r3, r0, #4
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xcc>
 8000214:	010b      	lsls	r3, r1, #4
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	08c3      	lsrs	r3, r0, #3
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xd8>
 8000220:	00cb      	lsls	r3, r1, #3
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0883      	lsrs	r3, r0, #2
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xe4>
 800022c:	008b      	lsls	r3, r1, #2
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0843      	lsrs	r3, r0, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xf0>
 8000238:	004b      	lsls	r3, r1, #1
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	1a41      	subs	r1, r0, r1
 8000240:	d200      	bcs.n	8000244 <__udivsi3+0xf8>
 8000242:	4601      	mov	r1, r0
 8000244:	4152      	adcs	r2, r2
 8000246:	4610      	mov	r0, r2
 8000248:	4770      	bx	lr
 800024a:	e7ff      	b.n	800024c <__udivsi3+0x100>
 800024c:	b501      	push	{r0, lr}
 800024e:	2000      	movs	r0, #0
 8000250:	f000 f8f0 	bl	8000434 <__aeabi_idiv0>
 8000254:	bd02      	pop	{r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uidivmod>:
 8000258:	2900      	cmp	r1, #0
 800025a:	d0f7      	beq.n	800024c <__udivsi3+0x100>
 800025c:	e776      	b.n	800014c <__udivsi3>
 800025e:	4770      	bx	lr

08000260 <__divsi3>:
 8000260:	4603      	mov	r3, r0
 8000262:	430b      	orrs	r3, r1
 8000264:	d47f      	bmi.n	8000366 <__divsi3+0x106>
 8000266:	2200      	movs	r2, #0
 8000268:	0843      	lsrs	r3, r0, #1
 800026a:	428b      	cmp	r3, r1
 800026c:	d374      	bcc.n	8000358 <__divsi3+0xf8>
 800026e:	0903      	lsrs	r3, r0, #4
 8000270:	428b      	cmp	r3, r1
 8000272:	d35f      	bcc.n	8000334 <__divsi3+0xd4>
 8000274:	0a03      	lsrs	r3, r0, #8
 8000276:	428b      	cmp	r3, r1
 8000278:	d344      	bcc.n	8000304 <__divsi3+0xa4>
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d328      	bcc.n	80002d2 <__divsi3+0x72>
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d30d      	bcc.n	80002a2 <__divsi3+0x42>
 8000286:	22ff      	movs	r2, #255	; 0xff
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	ba12      	rev	r2, r2
 800028c:	0c03      	lsrs	r3, r0, #16
 800028e:	428b      	cmp	r3, r1
 8000290:	d302      	bcc.n	8000298 <__divsi3+0x38>
 8000292:	1212      	asrs	r2, r2, #8
 8000294:	0209      	lsls	r1, r1, #8
 8000296:	d065      	beq.n	8000364 <__divsi3+0x104>
 8000298:	0b03      	lsrs	r3, r0, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d319      	bcc.n	80002d2 <__divsi3+0x72>
 800029e:	e000      	b.n	80002a2 <__divsi3+0x42>
 80002a0:	0a09      	lsrs	r1, r1, #8
 80002a2:	0bc3      	lsrs	r3, r0, #15
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x4c>
 80002a8:	03cb      	lsls	r3, r1, #15
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b83      	lsrs	r3, r0, #14
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x58>
 80002b4:	038b      	lsls	r3, r1, #14
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b43      	lsrs	r3, r0, #13
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x64>
 80002c0:	034b      	lsls	r3, r1, #13
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0b03      	lsrs	r3, r0, #12
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x70>
 80002cc:	030b      	lsls	r3, r1, #12
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0ac3      	lsrs	r3, r0, #11
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x7c>
 80002d8:	02cb      	lsls	r3, r1, #11
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a83      	lsrs	r3, r0, #10
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x88>
 80002e4:	028b      	lsls	r3, r1, #10
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a43      	lsrs	r3, r0, #9
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0x94>
 80002f0:	024b      	lsls	r3, r1, #9
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	0a03      	lsrs	r3, r0, #8
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d301      	bcc.n	8000300 <__divsi3+0xa0>
 80002fc:	020b      	lsls	r3, r1, #8
 80002fe:	1ac0      	subs	r0, r0, r3
 8000300:	4152      	adcs	r2, r2
 8000302:	d2cd      	bcs.n	80002a0 <__divsi3+0x40>
 8000304:	09c3      	lsrs	r3, r0, #7
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xae>
 800030a:	01cb      	lsls	r3, r1, #7
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0983      	lsrs	r3, r0, #6
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xba>
 8000316:	018b      	lsls	r3, r1, #6
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0943      	lsrs	r3, r0, #5
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xc6>
 8000322:	014b      	lsls	r3, r1, #5
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0903      	lsrs	r3, r0, #4
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xd2>
 800032e:	010b      	lsls	r3, r1, #4
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	08c3      	lsrs	r3, r0, #3
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xde>
 800033a:	00cb      	lsls	r3, r1, #3
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0883      	lsrs	r3, r0, #2
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xea>
 8000346:	008b      	lsls	r3, r1, #2
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	0843      	lsrs	r3, r0, #1
 800034e:	428b      	cmp	r3, r1
 8000350:	d301      	bcc.n	8000356 <__divsi3+0xf6>
 8000352:	004b      	lsls	r3, r1, #1
 8000354:	1ac0      	subs	r0, r0, r3
 8000356:	4152      	adcs	r2, r2
 8000358:	1a41      	subs	r1, r0, r1
 800035a:	d200      	bcs.n	800035e <__divsi3+0xfe>
 800035c:	4601      	mov	r1, r0
 800035e:	4152      	adcs	r2, r2
 8000360:	4610      	mov	r0, r2
 8000362:	4770      	bx	lr
 8000364:	e05d      	b.n	8000422 <__divsi3+0x1c2>
 8000366:	0fca      	lsrs	r2, r1, #31
 8000368:	d000      	beq.n	800036c <__divsi3+0x10c>
 800036a:	4249      	negs	r1, r1
 800036c:	1003      	asrs	r3, r0, #32
 800036e:	d300      	bcc.n	8000372 <__divsi3+0x112>
 8000370:	4240      	negs	r0, r0
 8000372:	4053      	eors	r3, r2
 8000374:	2200      	movs	r2, #0
 8000376:	469c      	mov	ip, r3
 8000378:	0903      	lsrs	r3, r0, #4
 800037a:	428b      	cmp	r3, r1
 800037c:	d32d      	bcc.n	80003da <__divsi3+0x17a>
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d312      	bcc.n	80003aa <__divsi3+0x14a>
 8000384:	22fc      	movs	r2, #252	; 0xfc
 8000386:	0189      	lsls	r1, r1, #6
 8000388:	ba12      	rev	r2, r2
 800038a:	0a03      	lsrs	r3, r0, #8
 800038c:	428b      	cmp	r3, r1
 800038e:	d30c      	bcc.n	80003aa <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	1192      	asrs	r2, r2, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d308      	bcc.n	80003aa <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d304      	bcc.n	80003aa <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	d03a      	beq.n	800041a <__divsi3+0x1ba>
 80003a4:	1192      	asrs	r2, r2, #6
 80003a6:	e000      	b.n	80003aa <__divsi3+0x14a>
 80003a8:	0989      	lsrs	r1, r1, #6
 80003aa:	09c3      	lsrs	r3, r0, #7
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x154>
 80003b0:	01cb      	lsls	r3, r1, #7
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0983      	lsrs	r3, r0, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x160>
 80003bc:	018b      	lsls	r3, r1, #6
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0943      	lsrs	r3, r0, #5
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x16c>
 80003c8:	014b      	lsls	r3, r1, #5
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	0903      	lsrs	r3, r0, #4
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x178>
 80003d4:	010b      	lsls	r3, r1, #4
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	08c3      	lsrs	r3, r0, #3
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x184>
 80003e0:	00cb      	lsls	r3, r1, #3
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	0883      	lsrs	r3, r0, #2
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x190>
 80003ec:	008b      	lsls	r3, r1, #2
 80003ee:	1ac0      	subs	r0, r0, r3
 80003f0:	4152      	adcs	r2, r2
 80003f2:	d2d9      	bcs.n	80003a8 <__divsi3+0x148>
 80003f4:	0843      	lsrs	r3, r0, #1
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d301      	bcc.n	80003fe <__divsi3+0x19e>
 80003fa:	004b      	lsls	r3, r1, #1
 80003fc:	1ac0      	subs	r0, r0, r3
 80003fe:	4152      	adcs	r2, r2
 8000400:	1a41      	subs	r1, r0, r1
 8000402:	d200      	bcs.n	8000406 <__divsi3+0x1a6>
 8000404:	4601      	mov	r1, r0
 8000406:	4663      	mov	r3, ip
 8000408:	4152      	adcs	r2, r2
 800040a:	105b      	asrs	r3, r3, #1
 800040c:	4610      	mov	r0, r2
 800040e:	d301      	bcc.n	8000414 <__divsi3+0x1b4>
 8000410:	4240      	negs	r0, r0
 8000412:	2b00      	cmp	r3, #0
 8000414:	d500      	bpl.n	8000418 <__divsi3+0x1b8>
 8000416:	4249      	negs	r1, r1
 8000418:	4770      	bx	lr
 800041a:	4663      	mov	r3, ip
 800041c:	105b      	asrs	r3, r3, #1
 800041e:	d300      	bcc.n	8000422 <__divsi3+0x1c2>
 8000420:	4240      	negs	r0, r0
 8000422:	b501      	push	{r0, lr}
 8000424:	2000      	movs	r0, #0
 8000426:	f000 f805 	bl	8000434 <__aeabi_idiv0>
 800042a:	bd02      	pop	{r1, pc}

0800042c <__aeabi_idivmod>:
 800042c:	2900      	cmp	r1, #0
 800042e:	d0f8      	beq.n	8000422 <__divsi3+0x1c2>
 8000430:	e716      	b.n	8000260 <__divsi3>
 8000432:	4770      	bx	lr

08000434 <__aeabi_idiv0>:
 8000434:	4770      	bx	lr
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdrcmple>:
 8000438:	4684      	mov	ip, r0
 800043a:	0010      	movs	r0, r2
 800043c:	4662      	mov	r2, ip
 800043e:	468c      	mov	ip, r1
 8000440:	0019      	movs	r1, r3
 8000442:	4663      	mov	r3, ip
 8000444:	e000      	b.n	8000448 <__aeabi_cdcmpeq>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_cdcmpeq>:
 8000448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800044a:	f001 fc31 	bl	8001cb0 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	d401      	bmi.n	8000456 <__aeabi_cdcmpeq+0xe>
 8000452:	2100      	movs	r1, #0
 8000454:	42c8      	cmn	r0, r1
 8000456:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000458 <__aeabi_dcmpeq>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fb81 	bl	8001b60 <__eqdf2>
 800045e:	4240      	negs	r0, r0
 8000460:	3001      	adds	r0, #1
 8000462:	bd10      	pop	{r4, pc}

08000464 <__aeabi_dcmplt>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fc23 	bl	8001cb0 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	db01      	blt.n	8000472 <__aeabi_dcmplt+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmple>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 fc19 	bl	8001cb0 <__ledf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dd01      	ble.n	8000486 <__aeabi_dcmple+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpgt>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 fba9 	bl	8001be4 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	dc01      	bgt.n	800049a <__aeabi_dcmpgt+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_dcmpge>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	f001 fb9f 	bl	8001be4 <__gedf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	da01      	bge.n	80004ae <__aeabi_dcmpge+0xe>
 80004aa:	2000      	movs	r0, #0
 80004ac:	bd10      	pop	{r4, pc}
 80004ae:	2001      	movs	r0, #1
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_cfrcmple>:
 80004b4:	4684      	mov	ip, r0
 80004b6:	0008      	movs	r0, r1
 80004b8:	4661      	mov	r1, ip
 80004ba:	e7ff      	b.n	80004bc <__aeabi_cfcmpeq>

080004bc <__aeabi_cfcmpeq>:
 80004bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004be:	f000 f955 	bl	800076c <__lesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d401      	bmi.n	80004ca <__aeabi_cfcmpeq+0xe>
 80004c6:	2100      	movs	r1, #0
 80004c8:	42c8      	cmn	r0, r1
 80004ca:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004cc <__aeabi_fcmpeq>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 f8e1 	bl	8000694 <__eqsf2>
 80004d2:	4240      	negs	r0, r0
 80004d4:	3001      	adds	r0, #1
 80004d6:	bd10      	pop	{r4, pc}

080004d8 <__aeabi_fcmplt>:
 80004d8:	b510      	push	{r4, lr}
 80004da:	f000 f947 	bl	800076c <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	db01      	blt.n	80004e6 <__aeabi_fcmplt+0xe>
 80004e2:	2000      	movs	r0, #0
 80004e4:	bd10      	pop	{r4, pc}
 80004e6:	2001      	movs	r0, #1
 80004e8:	bd10      	pop	{r4, pc}
 80004ea:	46c0      	nop			; (mov r8, r8)

080004ec <__aeabi_fcmple>:
 80004ec:	b510      	push	{r4, lr}
 80004ee:	f000 f93d 	bl	800076c <__lesf2>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	dd01      	ble.n	80004fa <__aeabi_fcmple+0xe>
 80004f6:	2000      	movs	r0, #0
 80004f8:	bd10      	pop	{r4, pc}
 80004fa:	2001      	movs	r0, #1
 80004fc:	bd10      	pop	{r4, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)

08000500 <__aeabi_fcmpgt>:
 8000500:	b510      	push	{r4, lr}
 8000502:	f000 f8ed 	bl	80006e0 <__gesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	dc01      	bgt.n	800050e <__aeabi_fcmpgt+0xe>
 800050a:	2000      	movs	r0, #0
 800050c:	bd10      	pop	{r4, pc}
 800050e:	2001      	movs	r0, #1
 8000510:	bd10      	pop	{r4, pc}
 8000512:	46c0      	nop			; (mov r8, r8)

08000514 <__aeabi_fcmpge>:
 8000514:	b510      	push	{r4, lr}
 8000516:	f000 f8e3 	bl	80006e0 <__gesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	da01      	bge.n	8000522 <__aeabi_fcmpge+0xe>
 800051e:	2000      	movs	r0, #0
 8000520:	bd10      	pop	{r4, pc}
 8000522:	2001      	movs	r0, #1
 8000524:	bd10      	pop	{r4, pc}
 8000526:	46c0      	nop			; (mov r8, r8)

08000528 <__aeabi_lmul>:
 8000528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800052a:	46ce      	mov	lr, r9
 800052c:	4647      	mov	r7, r8
 800052e:	b580      	push	{r7, lr}
 8000530:	0007      	movs	r7, r0
 8000532:	4699      	mov	r9, r3
 8000534:	0c3b      	lsrs	r3, r7, #16
 8000536:	469c      	mov	ip, r3
 8000538:	0413      	lsls	r3, r2, #16
 800053a:	0c1b      	lsrs	r3, r3, #16
 800053c:	001d      	movs	r5, r3
 800053e:	000e      	movs	r6, r1
 8000540:	4661      	mov	r1, ip
 8000542:	0400      	lsls	r0, r0, #16
 8000544:	0c14      	lsrs	r4, r2, #16
 8000546:	0c00      	lsrs	r0, r0, #16
 8000548:	4345      	muls	r5, r0
 800054a:	434b      	muls	r3, r1
 800054c:	4360      	muls	r0, r4
 800054e:	4361      	muls	r1, r4
 8000550:	18c0      	adds	r0, r0, r3
 8000552:	0c2c      	lsrs	r4, r5, #16
 8000554:	1820      	adds	r0, r4, r0
 8000556:	468c      	mov	ip, r1
 8000558:	4283      	cmp	r3, r0
 800055a:	d903      	bls.n	8000564 <__aeabi_lmul+0x3c>
 800055c:	2380      	movs	r3, #128	; 0x80
 800055e:	025b      	lsls	r3, r3, #9
 8000560:	4698      	mov	r8, r3
 8000562:	44c4      	add	ip, r8
 8000564:	4649      	mov	r1, r9
 8000566:	4379      	muls	r1, r7
 8000568:	4372      	muls	r2, r6
 800056a:	0c03      	lsrs	r3, r0, #16
 800056c:	4463      	add	r3, ip
 800056e:	042d      	lsls	r5, r5, #16
 8000570:	0c2d      	lsrs	r5, r5, #16
 8000572:	18c9      	adds	r1, r1, r3
 8000574:	0400      	lsls	r0, r0, #16
 8000576:	1940      	adds	r0, r0, r5
 8000578:	1889      	adds	r1, r1, r2
 800057a:	bcc0      	pop	{r6, r7}
 800057c:	46b9      	mov	r9, r7
 800057e:	46b0      	mov	r8, r6
 8000580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000582:	46c0      	nop			; (mov r8, r8)

08000584 <__aeabi_f2uiz>:
 8000584:	219e      	movs	r1, #158	; 0x9e
 8000586:	b510      	push	{r4, lr}
 8000588:	05c9      	lsls	r1, r1, #23
 800058a:	1c04      	adds	r4, r0, #0
 800058c:	f7ff ffc2 	bl	8000514 <__aeabi_fcmpge>
 8000590:	2800      	cmp	r0, #0
 8000592:	d103      	bne.n	800059c <__aeabi_f2uiz+0x18>
 8000594:	1c20      	adds	r0, r4, #0
 8000596:	f000 fc01 	bl	8000d9c <__aeabi_f2iz>
 800059a:	bd10      	pop	{r4, pc}
 800059c:	219e      	movs	r1, #158	; 0x9e
 800059e:	1c20      	adds	r0, r4, #0
 80005a0:	05c9      	lsls	r1, r1, #23
 80005a2:	f000 fa4d 	bl	8000a40 <__aeabi_fsub>
 80005a6:	f000 fbf9 	bl	8000d9c <__aeabi_f2iz>
 80005aa:	2380      	movs	r3, #128	; 0x80
 80005ac:	061b      	lsls	r3, r3, #24
 80005ae:	469c      	mov	ip, r3
 80005b0:	4460      	add	r0, ip
 80005b2:	e7f2      	b.n	800059a <__aeabi_f2uiz+0x16>

080005b4 <__aeabi_d2uiz>:
 80005b4:	b570      	push	{r4, r5, r6, lr}
 80005b6:	2200      	movs	r2, #0
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <__aeabi_d2uiz+0x38>)
 80005ba:	0004      	movs	r4, r0
 80005bc:	000d      	movs	r5, r1
 80005be:	f7ff ff6f 	bl	80004a0 <__aeabi_dcmpge>
 80005c2:	2800      	cmp	r0, #0
 80005c4:	d104      	bne.n	80005d0 <__aeabi_d2uiz+0x1c>
 80005c6:	0020      	movs	r0, r4
 80005c8:	0029      	movs	r1, r5
 80005ca:	f002 f9f1 	bl	80029b0 <__aeabi_d2iz>
 80005ce:	bd70      	pop	{r4, r5, r6, pc}
 80005d0:	4b06      	ldr	r3, [pc, #24]	; (80005ec <__aeabi_d2uiz+0x38>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	0020      	movs	r0, r4
 80005d6:	0029      	movs	r1, r5
 80005d8:	f001 fe3a 	bl	8002250 <__aeabi_dsub>
 80005dc:	f002 f9e8 	bl	80029b0 <__aeabi_d2iz>
 80005e0:	2380      	movs	r3, #128	; 0x80
 80005e2:	061b      	lsls	r3, r3, #24
 80005e4:	469c      	mov	ip, r3
 80005e6:	4460      	add	r0, ip
 80005e8:	e7f1      	b.n	80005ce <__aeabi_d2uiz+0x1a>
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	41e00000 	.word	0x41e00000

080005f0 <__aeabi_d2lz>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	0005      	movs	r5, r0
 80005f4:	000c      	movs	r4, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	2300      	movs	r3, #0
 80005fa:	0028      	movs	r0, r5
 80005fc:	0021      	movs	r1, r4
 80005fe:	f7ff ff31 	bl	8000464 <__aeabi_dcmplt>
 8000602:	2800      	cmp	r0, #0
 8000604:	d108      	bne.n	8000618 <__aeabi_d2lz+0x28>
 8000606:	0028      	movs	r0, r5
 8000608:	0021      	movs	r1, r4
 800060a:	f000 f80f 	bl	800062c <__aeabi_d2ulz>
 800060e:	0002      	movs	r2, r0
 8000610:	000b      	movs	r3, r1
 8000612:	0010      	movs	r0, r2
 8000614:	0019      	movs	r1, r3
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	061b      	lsls	r3, r3, #24
 800061c:	18e1      	adds	r1, r4, r3
 800061e:	0028      	movs	r0, r5
 8000620:	f000 f804 	bl	800062c <__aeabi_d2ulz>
 8000624:	2300      	movs	r3, #0
 8000626:	4242      	negs	r2, r0
 8000628:	418b      	sbcs	r3, r1
 800062a:	e7f2      	b.n	8000612 <__aeabi_d2lz+0x22>

0800062c <__aeabi_d2ulz>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	2200      	movs	r2, #0
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <__aeabi_d2ulz+0x34>)
 8000632:	000d      	movs	r5, r1
 8000634:	0004      	movs	r4, r0
 8000636:	f001 fb9f 	bl	8001d78 <__aeabi_dmul>
 800063a:	f7ff ffbb 	bl	80005b4 <__aeabi_d2uiz>
 800063e:	0006      	movs	r6, r0
 8000640:	f002 fa1c 	bl	8002a7c <__aeabi_ui2d>
 8000644:	2200      	movs	r2, #0
 8000646:	4b07      	ldr	r3, [pc, #28]	; (8000664 <__aeabi_d2ulz+0x38>)
 8000648:	f001 fb96 	bl	8001d78 <__aeabi_dmul>
 800064c:	0002      	movs	r2, r0
 800064e:	000b      	movs	r3, r1
 8000650:	0020      	movs	r0, r4
 8000652:	0029      	movs	r1, r5
 8000654:	f001 fdfc 	bl	8002250 <__aeabi_dsub>
 8000658:	f7ff ffac 	bl	80005b4 <__aeabi_d2uiz>
 800065c:	0031      	movs	r1, r6
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	3df00000 	.word	0x3df00000
 8000664:	41f00000 	.word	0x41f00000

08000668 <__aeabi_l2d>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	0006      	movs	r6, r0
 800066c:	0008      	movs	r0, r1
 800066e:	f002 f9d5 	bl	8002a1c <__aeabi_i2d>
 8000672:	2200      	movs	r2, #0
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <__aeabi_l2d+0x28>)
 8000676:	f001 fb7f 	bl	8001d78 <__aeabi_dmul>
 800067a:	000d      	movs	r5, r1
 800067c:	0004      	movs	r4, r0
 800067e:	0030      	movs	r0, r6
 8000680:	f002 f9fc 	bl	8002a7c <__aeabi_ui2d>
 8000684:	002b      	movs	r3, r5
 8000686:	0022      	movs	r2, r4
 8000688:	f000 fc38 	bl	8000efc <__aeabi_dadd>
 800068c:	bd70      	pop	{r4, r5, r6, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	41f00000 	.word	0x41f00000

08000694 <__eqsf2>:
 8000694:	b570      	push	{r4, r5, r6, lr}
 8000696:	0042      	lsls	r2, r0, #1
 8000698:	0245      	lsls	r5, r0, #9
 800069a:	024e      	lsls	r6, r1, #9
 800069c:	004c      	lsls	r4, r1, #1
 800069e:	0fc3      	lsrs	r3, r0, #31
 80006a0:	0a6d      	lsrs	r5, r5, #9
 80006a2:	2001      	movs	r0, #1
 80006a4:	0e12      	lsrs	r2, r2, #24
 80006a6:	0a76      	lsrs	r6, r6, #9
 80006a8:	0e24      	lsrs	r4, r4, #24
 80006aa:	0fc9      	lsrs	r1, r1, #31
 80006ac:	2aff      	cmp	r2, #255	; 0xff
 80006ae:	d006      	beq.n	80006be <__eqsf2+0x2a>
 80006b0:	2cff      	cmp	r4, #255	; 0xff
 80006b2:	d003      	beq.n	80006bc <__eqsf2+0x28>
 80006b4:	42a2      	cmp	r2, r4
 80006b6:	d101      	bne.n	80006bc <__eqsf2+0x28>
 80006b8:	42b5      	cmp	r5, r6
 80006ba:	d006      	beq.n	80006ca <__eqsf2+0x36>
 80006bc:	bd70      	pop	{r4, r5, r6, pc}
 80006be:	2d00      	cmp	r5, #0
 80006c0:	d1fc      	bne.n	80006bc <__eqsf2+0x28>
 80006c2:	2cff      	cmp	r4, #255	; 0xff
 80006c4:	d1fa      	bne.n	80006bc <__eqsf2+0x28>
 80006c6:	2e00      	cmp	r6, #0
 80006c8:	d1f8      	bne.n	80006bc <__eqsf2+0x28>
 80006ca:	428b      	cmp	r3, r1
 80006cc:	d006      	beq.n	80006dc <__eqsf2+0x48>
 80006ce:	2001      	movs	r0, #1
 80006d0:	2a00      	cmp	r2, #0
 80006d2:	d1f3      	bne.n	80006bc <__eqsf2+0x28>
 80006d4:	0028      	movs	r0, r5
 80006d6:	1e43      	subs	r3, r0, #1
 80006d8:	4198      	sbcs	r0, r3
 80006da:	e7ef      	b.n	80006bc <__eqsf2+0x28>
 80006dc:	2000      	movs	r0, #0
 80006de:	e7ed      	b.n	80006bc <__eqsf2+0x28>

080006e0 <__gesf2>:
 80006e0:	b570      	push	{r4, r5, r6, lr}
 80006e2:	0042      	lsls	r2, r0, #1
 80006e4:	0245      	lsls	r5, r0, #9
 80006e6:	024e      	lsls	r6, r1, #9
 80006e8:	004c      	lsls	r4, r1, #1
 80006ea:	0fc3      	lsrs	r3, r0, #31
 80006ec:	0a6d      	lsrs	r5, r5, #9
 80006ee:	0e12      	lsrs	r2, r2, #24
 80006f0:	0a76      	lsrs	r6, r6, #9
 80006f2:	0e24      	lsrs	r4, r4, #24
 80006f4:	0fc8      	lsrs	r0, r1, #31
 80006f6:	2aff      	cmp	r2, #255	; 0xff
 80006f8:	d01b      	beq.n	8000732 <__gesf2+0x52>
 80006fa:	2cff      	cmp	r4, #255	; 0xff
 80006fc:	d00e      	beq.n	800071c <__gesf2+0x3c>
 80006fe:	2a00      	cmp	r2, #0
 8000700:	d11b      	bne.n	800073a <__gesf2+0x5a>
 8000702:	2c00      	cmp	r4, #0
 8000704:	d101      	bne.n	800070a <__gesf2+0x2a>
 8000706:	2e00      	cmp	r6, #0
 8000708:	d01c      	beq.n	8000744 <__gesf2+0x64>
 800070a:	2d00      	cmp	r5, #0
 800070c:	d00c      	beq.n	8000728 <__gesf2+0x48>
 800070e:	4283      	cmp	r3, r0
 8000710:	d01c      	beq.n	800074c <__gesf2+0x6c>
 8000712:	2102      	movs	r1, #2
 8000714:	1e58      	subs	r0, r3, #1
 8000716:	4008      	ands	r0, r1
 8000718:	3801      	subs	r0, #1
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	2e00      	cmp	r6, #0
 800071e:	d122      	bne.n	8000766 <__gesf2+0x86>
 8000720:	2a00      	cmp	r2, #0
 8000722:	d1f4      	bne.n	800070e <__gesf2+0x2e>
 8000724:	2d00      	cmp	r5, #0
 8000726:	d1f2      	bne.n	800070e <__gesf2+0x2e>
 8000728:	2800      	cmp	r0, #0
 800072a:	d1f6      	bne.n	800071a <__gesf2+0x3a>
 800072c:	2001      	movs	r0, #1
 800072e:	4240      	negs	r0, r0
 8000730:	e7f3      	b.n	800071a <__gesf2+0x3a>
 8000732:	2d00      	cmp	r5, #0
 8000734:	d117      	bne.n	8000766 <__gesf2+0x86>
 8000736:	2cff      	cmp	r4, #255	; 0xff
 8000738:	d0f0      	beq.n	800071c <__gesf2+0x3c>
 800073a:	2c00      	cmp	r4, #0
 800073c:	d1e7      	bne.n	800070e <__gesf2+0x2e>
 800073e:	2e00      	cmp	r6, #0
 8000740:	d1e5      	bne.n	800070e <__gesf2+0x2e>
 8000742:	e7e6      	b.n	8000712 <__gesf2+0x32>
 8000744:	2000      	movs	r0, #0
 8000746:	2d00      	cmp	r5, #0
 8000748:	d0e7      	beq.n	800071a <__gesf2+0x3a>
 800074a:	e7e2      	b.n	8000712 <__gesf2+0x32>
 800074c:	42a2      	cmp	r2, r4
 800074e:	dc05      	bgt.n	800075c <__gesf2+0x7c>
 8000750:	dbea      	blt.n	8000728 <__gesf2+0x48>
 8000752:	42b5      	cmp	r5, r6
 8000754:	d802      	bhi.n	800075c <__gesf2+0x7c>
 8000756:	d3e7      	bcc.n	8000728 <__gesf2+0x48>
 8000758:	2000      	movs	r0, #0
 800075a:	e7de      	b.n	800071a <__gesf2+0x3a>
 800075c:	4243      	negs	r3, r0
 800075e:	4158      	adcs	r0, r3
 8000760:	0040      	lsls	r0, r0, #1
 8000762:	3801      	subs	r0, #1
 8000764:	e7d9      	b.n	800071a <__gesf2+0x3a>
 8000766:	2002      	movs	r0, #2
 8000768:	4240      	negs	r0, r0
 800076a:	e7d6      	b.n	800071a <__gesf2+0x3a>

0800076c <__lesf2>:
 800076c:	b570      	push	{r4, r5, r6, lr}
 800076e:	0042      	lsls	r2, r0, #1
 8000770:	0245      	lsls	r5, r0, #9
 8000772:	024e      	lsls	r6, r1, #9
 8000774:	004c      	lsls	r4, r1, #1
 8000776:	0fc3      	lsrs	r3, r0, #31
 8000778:	0a6d      	lsrs	r5, r5, #9
 800077a:	0e12      	lsrs	r2, r2, #24
 800077c:	0a76      	lsrs	r6, r6, #9
 800077e:	0e24      	lsrs	r4, r4, #24
 8000780:	0fc8      	lsrs	r0, r1, #31
 8000782:	2aff      	cmp	r2, #255	; 0xff
 8000784:	d00b      	beq.n	800079e <__lesf2+0x32>
 8000786:	2cff      	cmp	r4, #255	; 0xff
 8000788:	d00d      	beq.n	80007a6 <__lesf2+0x3a>
 800078a:	2a00      	cmp	r2, #0
 800078c:	d11f      	bne.n	80007ce <__lesf2+0x62>
 800078e:	2c00      	cmp	r4, #0
 8000790:	d116      	bne.n	80007c0 <__lesf2+0x54>
 8000792:	2e00      	cmp	r6, #0
 8000794:	d114      	bne.n	80007c0 <__lesf2+0x54>
 8000796:	2000      	movs	r0, #0
 8000798:	2d00      	cmp	r5, #0
 800079a:	d010      	beq.n	80007be <__lesf2+0x52>
 800079c:	e009      	b.n	80007b2 <__lesf2+0x46>
 800079e:	2d00      	cmp	r5, #0
 80007a0:	d10c      	bne.n	80007bc <__lesf2+0x50>
 80007a2:	2cff      	cmp	r4, #255	; 0xff
 80007a4:	d113      	bne.n	80007ce <__lesf2+0x62>
 80007a6:	2e00      	cmp	r6, #0
 80007a8:	d108      	bne.n	80007bc <__lesf2+0x50>
 80007aa:	2a00      	cmp	r2, #0
 80007ac:	d008      	beq.n	80007c0 <__lesf2+0x54>
 80007ae:	4283      	cmp	r3, r0
 80007b0:	d012      	beq.n	80007d8 <__lesf2+0x6c>
 80007b2:	2102      	movs	r1, #2
 80007b4:	1e58      	subs	r0, r3, #1
 80007b6:	4008      	ands	r0, r1
 80007b8:	3801      	subs	r0, #1
 80007ba:	e000      	b.n	80007be <__lesf2+0x52>
 80007bc:	2002      	movs	r0, #2
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	2d00      	cmp	r5, #0
 80007c2:	d1f4      	bne.n	80007ae <__lesf2+0x42>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d1fa      	bne.n	80007be <__lesf2+0x52>
 80007c8:	2001      	movs	r0, #1
 80007ca:	4240      	negs	r0, r0
 80007cc:	e7f7      	b.n	80007be <__lesf2+0x52>
 80007ce:	2c00      	cmp	r4, #0
 80007d0:	d1ed      	bne.n	80007ae <__lesf2+0x42>
 80007d2:	2e00      	cmp	r6, #0
 80007d4:	d1eb      	bne.n	80007ae <__lesf2+0x42>
 80007d6:	e7ec      	b.n	80007b2 <__lesf2+0x46>
 80007d8:	42a2      	cmp	r2, r4
 80007da:	dc05      	bgt.n	80007e8 <__lesf2+0x7c>
 80007dc:	dbf2      	blt.n	80007c4 <__lesf2+0x58>
 80007de:	42b5      	cmp	r5, r6
 80007e0:	d802      	bhi.n	80007e8 <__lesf2+0x7c>
 80007e2:	d3ef      	bcc.n	80007c4 <__lesf2+0x58>
 80007e4:	2000      	movs	r0, #0
 80007e6:	e7ea      	b.n	80007be <__lesf2+0x52>
 80007e8:	4243      	negs	r3, r0
 80007ea:	4158      	adcs	r0, r3
 80007ec:	0040      	lsls	r0, r0, #1
 80007ee:	3801      	subs	r0, #1
 80007f0:	e7e5      	b.n	80007be <__lesf2+0x52>
 80007f2:	46c0      	nop			; (mov r8, r8)

080007f4 <__aeabi_fmul>:
 80007f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f6:	464f      	mov	r7, r9
 80007f8:	4646      	mov	r6, r8
 80007fa:	46d6      	mov	lr, sl
 80007fc:	0244      	lsls	r4, r0, #9
 80007fe:	0045      	lsls	r5, r0, #1
 8000800:	b5c0      	push	{r6, r7, lr}
 8000802:	0a64      	lsrs	r4, r4, #9
 8000804:	1c0f      	adds	r7, r1, #0
 8000806:	0e2d      	lsrs	r5, r5, #24
 8000808:	0fc6      	lsrs	r6, r0, #31
 800080a:	2d00      	cmp	r5, #0
 800080c:	d100      	bne.n	8000810 <__aeabi_fmul+0x1c>
 800080e:	e08d      	b.n	800092c <__aeabi_fmul+0x138>
 8000810:	2dff      	cmp	r5, #255	; 0xff
 8000812:	d100      	bne.n	8000816 <__aeabi_fmul+0x22>
 8000814:	e092      	b.n	800093c <__aeabi_fmul+0x148>
 8000816:	2300      	movs	r3, #0
 8000818:	2080      	movs	r0, #128	; 0x80
 800081a:	4699      	mov	r9, r3
 800081c:	469a      	mov	sl, r3
 800081e:	00e4      	lsls	r4, r4, #3
 8000820:	04c0      	lsls	r0, r0, #19
 8000822:	4304      	orrs	r4, r0
 8000824:	3d7f      	subs	r5, #127	; 0x7f
 8000826:	0278      	lsls	r0, r7, #9
 8000828:	0a43      	lsrs	r3, r0, #9
 800082a:	4698      	mov	r8, r3
 800082c:	007b      	lsls	r3, r7, #1
 800082e:	0e1b      	lsrs	r3, r3, #24
 8000830:	0fff      	lsrs	r7, r7, #31
 8000832:	2b00      	cmp	r3, #0
 8000834:	d100      	bne.n	8000838 <__aeabi_fmul+0x44>
 8000836:	e070      	b.n	800091a <__aeabi_fmul+0x126>
 8000838:	2bff      	cmp	r3, #255	; 0xff
 800083a:	d100      	bne.n	800083e <__aeabi_fmul+0x4a>
 800083c:	e086      	b.n	800094c <__aeabi_fmul+0x158>
 800083e:	4642      	mov	r2, r8
 8000840:	00d0      	lsls	r0, r2, #3
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	3b7f      	subs	r3, #127	; 0x7f
 8000846:	18ed      	adds	r5, r5, r3
 8000848:	2300      	movs	r3, #0
 800084a:	04d2      	lsls	r2, r2, #19
 800084c:	4302      	orrs	r2, r0
 800084e:	4690      	mov	r8, r2
 8000850:	469c      	mov	ip, r3
 8000852:	0031      	movs	r1, r6
 8000854:	464b      	mov	r3, r9
 8000856:	4079      	eors	r1, r7
 8000858:	1c68      	adds	r0, r5, #1
 800085a:	2b0f      	cmp	r3, #15
 800085c:	d81c      	bhi.n	8000898 <__aeabi_fmul+0xa4>
 800085e:	4a76      	ldr	r2, [pc, #472]	; (8000a38 <__aeabi_fmul+0x244>)
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	58d3      	ldr	r3, [r2, r3]
 8000864:	469f      	mov	pc, r3
 8000866:	0039      	movs	r1, r7
 8000868:	4644      	mov	r4, r8
 800086a:	46e2      	mov	sl, ip
 800086c:	4653      	mov	r3, sl
 800086e:	2b02      	cmp	r3, #2
 8000870:	d00f      	beq.n	8000892 <__aeabi_fmul+0x9e>
 8000872:	2b03      	cmp	r3, #3
 8000874:	d100      	bne.n	8000878 <__aeabi_fmul+0x84>
 8000876:	e0d7      	b.n	8000a28 <__aeabi_fmul+0x234>
 8000878:	2b01      	cmp	r3, #1
 800087a:	d137      	bne.n	80008ec <__aeabi_fmul+0xf8>
 800087c:	2000      	movs	r0, #0
 800087e:	2400      	movs	r4, #0
 8000880:	05c0      	lsls	r0, r0, #23
 8000882:	4320      	orrs	r0, r4
 8000884:	07c9      	lsls	r1, r1, #31
 8000886:	4308      	orrs	r0, r1
 8000888:	bce0      	pop	{r5, r6, r7}
 800088a:	46ba      	mov	sl, r7
 800088c:	46b1      	mov	r9, r6
 800088e:	46a8      	mov	r8, r5
 8000890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000892:	20ff      	movs	r0, #255	; 0xff
 8000894:	2400      	movs	r4, #0
 8000896:	e7f3      	b.n	8000880 <__aeabi_fmul+0x8c>
 8000898:	0c26      	lsrs	r6, r4, #16
 800089a:	0424      	lsls	r4, r4, #16
 800089c:	0c22      	lsrs	r2, r4, #16
 800089e:	4644      	mov	r4, r8
 80008a0:	0424      	lsls	r4, r4, #16
 80008a2:	0c24      	lsrs	r4, r4, #16
 80008a4:	4643      	mov	r3, r8
 80008a6:	0027      	movs	r7, r4
 80008a8:	0c1b      	lsrs	r3, r3, #16
 80008aa:	4357      	muls	r7, r2
 80008ac:	4374      	muls	r4, r6
 80008ae:	435a      	muls	r2, r3
 80008b0:	435e      	muls	r6, r3
 80008b2:	1912      	adds	r2, r2, r4
 80008b4:	0c3b      	lsrs	r3, r7, #16
 80008b6:	189b      	adds	r3, r3, r2
 80008b8:	429c      	cmp	r4, r3
 80008ba:	d903      	bls.n	80008c4 <__aeabi_fmul+0xd0>
 80008bc:	2280      	movs	r2, #128	; 0x80
 80008be:	0252      	lsls	r2, r2, #9
 80008c0:	4694      	mov	ip, r2
 80008c2:	4466      	add	r6, ip
 80008c4:	043f      	lsls	r7, r7, #16
 80008c6:	041a      	lsls	r2, r3, #16
 80008c8:	0c3f      	lsrs	r7, r7, #16
 80008ca:	19d2      	adds	r2, r2, r7
 80008cc:	0194      	lsls	r4, r2, #6
 80008ce:	1e67      	subs	r7, r4, #1
 80008d0:	41bc      	sbcs	r4, r7
 80008d2:	0c1b      	lsrs	r3, r3, #16
 80008d4:	0e92      	lsrs	r2, r2, #26
 80008d6:	199b      	adds	r3, r3, r6
 80008d8:	4314      	orrs	r4, r2
 80008da:	019b      	lsls	r3, r3, #6
 80008dc:	431c      	orrs	r4, r3
 80008de:	011b      	lsls	r3, r3, #4
 80008e0:	d400      	bmi.n	80008e4 <__aeabi_fmul+0xf0>
 80008e2:	e09b      	b.n	8000a1c <__aeabi_fmul+0x228>
 80008e4:	2301      	movs	r3, #1
 80008e6:	0862      	lsrs	r2, r4, #1
 80008e8:	401c      	ands	r4, r3
 80008ea:	4314      	orrs	r4, r2
 80008ec:	0002      	movs	r2, r0
 80008ee:	327f      	adds	r2, #127	; 0x7f
 80008f0:	2a00      	cmp	r2, #0
 80008f2:	dd64      	ble.n	80009be <__aeabi_fmul+0x1ca>
 80008f4:	0763      	lsls	r3, r4, #29
 80008f6:	d004      	beq.n	8000902 <__aeabi_fmul+0x10e>
 80008f8:	230f      	movs	r3, #15
 80008fa:	4023      	ands	r3, r4
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	d000      	beq.n	8000902 <__aeabi_fmul+0x10e>
 8000900:	3404      	adds	r4, #4
 8000902:	0123      	lsls	r3, r4, #4
 8000904:	d503      	bpl.n	800090e <__aeabi_fmul+0x11a>
 8000906:	0002      	movs	r2, r0
 8000908:	4b4c      	ldr	r3, [pc, #304]	; (8000a3c <__aeabi_fmul+0x248>)
 800090a:	3280      	adds	r2, #128	; 0x80
 800090c:	401c      	ands	r4, r3
 800090e:	2afe      	cmp	r2, #254	; 0xfe
 8000910:	dcbf      	bgt.n	8000892 <__aeabi_fmul+0x9e>
 8000912:	01a4      	lsls	r4, r4, #6
 8000914:	0a64      	lsrs	r4, r4, #9
 8000916:	b2d0      	uxtb	r0, r2
 8000918:	e7b2      	b.n	8000880 <__aeabi_fmul+0x8c>
 800091a:	4643      	mov	r3, r8
 800091c:	2b00      	cmp	r3, #0
 800091e:	d13d      	bne.n	800099c <__aeabi_fmul+0x1a8>
 8000920:	464a      	mov	r2, r9
 8000922:	3301      	adds	r3, #1
 8000924:	431a      	orrs	r2, r3
 8000926:	4691      	mov	r9, r2
 8000928:	469c      	mov	ip, r3
 800092a:	e792      	b.n	8000852 <__aeabi_fmul+0x5e>
 800092c:	2c00      	cmp	r4, #0
 800092e:	d129      	bne.n	8000984 <__aeabi_fmul+0x190>
 8000930:	2304      	movs	r3, #4
 8000932:	4699      	mov	r9, r3
 8000934:	3b03      	subs	r3, #3
 8000936:	2500      	movs	r5, #0
 8000938:	469a      	mov	sl, r3
 800093a:	e774      	b.n	8000826 <__aeabi_fmul+0x32>
 800093c:	2c00      	cmp	r4, #0
 800093e:	d11b      	bne.n	8000978 <__aeabi_fmul+0x184>
 8000940:	2308      	movs	r3, #8
 8000942:	4699      	mov	r9, r3
 8000944:	3b06      	subs	r3, #6
 8000946:	25ff      	movs	r5, #255	; 0xff
 8000948:	469a      	mov	sl, r3
 800094a:	e76c      	b.n	8000826 <__aeabi_fmul+0x32>
 800094c:	4643      	mov	r3, r8
 800094e:	35ff      	adds	r5, #255	; 0xff
 8000950:	2b00      	cmp	r3, #0
 8000952:	d10b      	bne.n	800096c <__aeabi_fmul+0x178>
 8000954:	2302      	movs	r3, #2
 8000956:	464a      	mov	r2, r9
 8000958:	431a      	orrs	r2, r3
 800095a:	4691      	mov	r9, r2
 800095c:	469c      	mov	ip, r3
 800095e:	e778      	b.n	8000852 <__aeabi_fmul+0x5e>
 8000960:	4653      	mov	r3, sl
 8000962:	0031      	movs	r1, r6
 8000964:	2b02      	cmp	r3, #2
 8000966:	d000      	beq.n	800096a <__aeabi_fmul+0x176>
 8000968:	e783      	b.n	8000872 <__aeabi_fmul+0x7e>
 800096a:	e792      	b.n	8000892 <__aeabi_fmul+0x9e>
 800096c:	2303      	movs	r3, #3
 800096e:	464a      	mov	r2, r9
 8000970:	431a      	orrs	r2, r3
 8000972:	4691      	mov	r9, r2
 8000974:	469c      	mov	ip, r3
 8000976:	e76c      	b.n	8000852 <__aeabi_fmul+0x5e>
 8000978:	230c      	movs	r3, #12
 800097a:	4699      	mov	r9, r3
 800097c:	3b09      	subs	r3, #9
 800097e:	25ff      	movs	r5, #255	; 0xff
 8000980:	469a      	mov	sl, r3
 8000982:	e750      	b.n	8000826 <__aeabi_fmul+0x32>
 8000984:	0020      	movs	r0, r4
 8000986:	f002 f96f 	bl	8002c68 <__clzsi2>
 800098a:	2576      	movs	r5, #118	; 0x76
 800098c:	1f43      	subs	r3, r0, #5
 800098e:	409c      	lsls	r4, r3
 8000990:	2300      	movs	r3, #0
 8000992:	426d      	negs	r5, r5
 8000994:	4699      	mov	r9, r3
 8000996:	469a      	mov	sl, r3
 8000998:	1a2d      	subs	r5, r5, r0
 800099a:	e744      	b.n	8000826 <__aeabi_fmul+0x32>
 800099c:	4640      	mov	r0, r8
 800099e:	f002 f963 	bl	8002c68 <__clzsi2>
 80009a2:	4642      	mov	r2, r8
 80009a4:	1f43      	subs	r3, r0, #5
 80009a6:	409a      	lsls	r2, r3
 80009a8:	2300      	movs	r3, #0
 80009aa:	1a2d      	subs	r5, r5, r0
 80009ac:	4690      	mov	r8, r2
 80009ae:	469c      	mov	ip, r3
 80009b0:	3d76      	subs	r5, #118	; 0x76
 80009b2:	e74e      	b.n	8000852 <__aeabi_fmul+0x5e>
 80009b4:	2480      	movs	r4, #128	; 0x80
 80009b6:	2100      	movs	r1, #0
 80009b8:	20ff      	movs	r0, #255	; 0xff
 80009ba:	03e4      	lsls	r4, r4, #15
 80009bc:	e760      	b.n	8000880 <__aeabi_fmul+0x8c>
 80009be:	2301      	movs	r3, #1
 80009c0:	1a9b      	subs	r3, r3, r2
 80009c2:	2b1b      	cmp	r3, #27
 80009c4:	dd00      	ble.n	80009c8 <__aeabi_fmul+0x1d4>
 80009c6:	e759      	b.n	800087c <__aeabi_fmul+0x88>
 80009c8:	0022      	movs	r2, r4
 80009ca:	309e      	adds	r0, #158	; 0x9e
 80009cc:	40da      	lsrs	r2, r3
 80009ce:	4084      	lsls	r4, r0
 80009d0:	0013      	movs	r3, r2
 80009d2:	1e62      	subs	r2, r4, #1
 80009d4:	4194      	sbcs	r4, r2
 80009d6:	431c      	orrs	r4, r3
 80009d8:	0763      	lsls	r3, r4, #29
 80009da:	d004      	beq.n	80009e6 <__aeabi_fmul+0x1f2>
 80009dc:	230f      	movs	r3, #15
 80009de:	4023      	ands	r3, r4
 80009e0:	2b04      	cmp	r3, #4
 80009e2:	d000      	beq.n	80009e6 <__aeabi_fmul+0x1f2>
 80009e4:	3404      	adds	r4, #4
 80009e6:	0163      	lsls	r3, r4, #5
 80009e8:	d51a      	bpl.n	8000a20 <__aeabi_fmul+0x22c>
 80009ea:	2001      	movs	r0, #1
 80009ec:	2400      	movs	r4, #0
 80009ee:	e747      	b.n	8000880 <__aeabi_fmul+0x8c>
 80009f0:	2080      	movs	r0, #128	; 0x80
 80009f2:	03c0      	lsls	r0, r0, #15
 80009f4:	4204      	tst	r4, r0
 80009f6:	d009      	beq.n	8000a0c <__aeabi_fmul+0x218>
 80009f8:	4643      	mov	r3, r8
 80009fa:	4203      	tst	r3, r0
 80009fc:	d106      	bne.n	8000a0c <__aeabi_fmul+0x218>
 80009fe:	4644      	mov	r4, r8
 8000a00:	4304      	orrs	r4, r0
 8000a02:	0264      	lsls	r4, r4, #9
 8000a04:	0039      	movs	r1, r7
 8000a06:	20ff      	movs	r0, #255	; 0xff
 8000a08:	0a64      	lsrs	r4, r4, #9
 8000a0a:	e739      	b.n	8000880 <__aeabi_fmul+0x8c>
 8000a0c:	2080      	movs	r0, #128	; 0x80
 8000a0e:	03c0      	lsls	r0, r0, #15
 8000a10:	4304      	orrs	r4, r0
 8000a12:	0264      	lsls	r4, r4, #9
 8000a14:	0031      	movs	r1, r6
 8000a16:	20ff      	movs	r0, #255	; 0xff
 8000a18:	0a64      	lsrs	r4, r4, #9
 8000a1a:	e731      	b.n	8000880 <__aeabi_fmul+0x8c>
 8000a1c:	0028      	movs	r0, r5
 8000a1e:	e765      	b.n	80008ec <__aeabi_fmul+0xf8>
 8000a20:	01a4      	lsls	r4, r4, #6
 8000a22:	2000      	movs	r0, #0
 8000a24:	0a64      	lsrs	r4, r4, #9
 8000a26:	e72b      	b.n	8000880 <__aeabi_fmul+0x8c>
 8000a28:	2080      	movs	r0, #128	; 0x80
 8000a2a:	03c0      	lsls	r0, r0, #15
 8000a2c:	4304      	orrs	r4, r0
 8000a2e:	0264      	lsls	r4, r4, #9
 8000a30:	20ff      	movs	r0, #255	; 0xff
 8000a32:	0a64      	lsrs	r4, r4, #9
 8000a34:	e724      	b.n	8000880 <__aeabi_fmul+0x8c>
 8000a36:	46c0      	nop			; (mov r8, r8)
 8000a38:	08015dac 	.word	0x08015dac
 8000a3c:	f7ffffff 	.word	0xf7ffffff

08000a40 <__aeabi_fsub>:
 8000a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a42:	46ce      	mov	lr, r9
 8000a44:	4647      	mov	r7, r8
 8000a46:	0243      	lsls	r3, r0, #9
 8000a48:	0a5b      	lsrs	r3, r3, #9
 8000a4a:	024e      	lsls	r6, r1, #9
 8000a4c:	00da      	lsls	r2, r3, #3
 8000a4e:	4694      	mov	ip, r2
 8000a50:	0a72      	lsrs	r2, r6, #9
 8000a52:	4691      	mov	r9, r2
 8000a54:	0045      	lsls	r5, r0, #1
 8000a56:	004a      	lsls	r2, r1, #1
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	0e2d      	lsrs	r5, r5, #24
 8000a5c:	001f      	movs	r7, r3
 8000a5e:	0fc4      	lsrs	r4, r0, #31
 8000a60:	0e12      	lsrs	r2, r2, #24
 8000a62:	0fc9      	lsrs	r1, r1, #31
 8000a64:	09b6      	lsrs	r6, r6, #6
 8000a66:	2aff      	cmp	r2, #255	; 0xff
 8000a68:	d05b      	beq.n	8000b22 <__aeabi_fsub+0xe2>
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	4041      	eors	r1, r0
 8000a6e:	428c      	cmp	r4, r1
 8000a70:	d039      	beq.n	8000ae6 <__aeabi_fsub+0xa6>
 8000a72:	1aa8      	subs	r0, r5, r2
 8000a74:	2800      	cmp	r0, #0
 8000a76:	dd5a      	ble.n	8000b2e <__aeabi_fsub+0xee>
 8000a78:	2a00      	cmp	r2, #0
 8000a7a:	d06a      	beq.n	8000b52 <__aeabi_fsub+0x112>
 8000a7c:	2dff      	cmp	r5, #255	; 0xff
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_fsub+0x42>
 8000a80:	e0d9      	b.n	8000c36 <__aeabi_fsub+0x1f6>
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	04d2      	lsls	r2, r2, #19
 8000a86:	4316      	orrs	r6, r2
 8000a88:	281b      	cmp	r0, #27
 8000a8a:	dc00      	bgt.n	8000a8e <__aeabi_fsub+0x4e>
 8000a8c:	e0e9      	b.n	8000c62 <__aeabi_fsub+0x222>
 8000a8e:	2001      	movs	r0, #1
 8000a90:	4663      	mov	r3, ip
 8000a92:	1a18      	subs	r0, r3, r0
 8000a94:	0143      	lsls	r3, r0, #5
 8000a96:	d400      	bmi.n	8000a9a <__aeabi_fsub+0x5a>
 8000a98:	e0b4      	b.n	8000c04 <__aeabi_fsub+0x1c4>
 8000a9a:	0180      	lsls	r0, r0, #6
 8000a9c:	0987      	lsrs	r7, r0, #6
 8000a9e:	0038      	movs	r0, r7
 8000aa0:	f002 f8e2 	bl	8002c68 <__clzsi2>
 8000aa4:	3805      	subs	r0, #5
 8000aa6:	4087      	lsls	r7, r0
 8000aa8:	4285      	cmp	r5, r0
 8000aaa:	dc00      	bgt.n	8000aae <__aeabi_fsub+0x6e>
 8000aac:	e0cc      	b.n	8000c48 <__aeabi_fsub+0x208>
 8000aae:	1a2d      	subs	r5, r5, r0
 8000ab0:	48b5      	ldr	r0, [pc, #724]	; (8000d88 <__aeabi_fsub+0x348>)
 8000ab2:	4038      	ands	r0, r7
 8000ab4:	0743      	lsls	r3, r0, #29
 8000ab6:	d004      	beq.n	8000ac2 <__aeabi_fsub+0x82>
 8000ab8:	230f      	movs	r3, #15
 8000aba:	4003      	ands	r3, r0
 8000abc:	2b04      	cmp	r3, #4
 8000abe:	d000      	beq.n	8000ac2 <__aeabi_fsub+0x82>
 8000ac0:	3004      	adds	r0, #4
 8000ac2:	0143      	lsls	r3, r0, #5
 8000ac4:	d400      	bmi.n	8000ac8 <__aeabi_fsub+0x88>
 8000ac6:	e0a0      	b.n	8000c0a <__aeabi_fsub+0x1ca>
 8000ac8:	1c6a      	adds	r2, r5, #1
 8000aca:	2dfe      	cmp	r5, #254	; 0xfe
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fsub+0x90>
 8000ace:	e08d      	b.n	8000bec <__aeabi_fsub+0x1ac>
 8000ad0:	0180      	lsls	r0, r0, #6
 8000ad2:	0a47      	lsrs	r7, r0, #9
 8000ad4:	b2d2      	uxtb	r2, r2
 8000ad6:	05d0      	lsls	r0, r2, #23
 8000ad8:	4338      	orrs	r0, r7
 8000ada:	07e4      	lsls	r4, r4, #31
 8000adc:	4320      	orrs	r0, r4
 8000ade:	bcc0      	pop	{r6, r7}
 8000ae0:	46b9      	mov	r9, r7
 8000ae2:	46b0      	mov	r8, r6
 8000ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ae6:	1aa8      	subs	r0, r5, r2
 8000ae8:	4680      	mov	r8, r0
 8000aea:	2800      	cmp	r0, #0
 8000aec:	dd45      	ble.n	8000b7a <__aeabi_fsub+0x13a>
 8000aee:	2a00      	cmp	r2, #0
 8000af0:	d070      	beq.n	8000bd4 <__aeabi_fsub+0x194>
 8000af2:	2dff      	cmp	r5, #255	; 0xff
 8000af4:	d100      	bne.n	8000af8 <__aeabi_fsub+0xb8>
 8000af6:	e09e      	b.n	8000c36 <__aeabi_fsub+0x1f6>
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	04db      	lsls	r3, r3, #19
 8000afc:	431e      	orrs	r6, r3
 8000afe:	4643      	mov	r3, r8
 8000b00:	2b1b      	cmp	r3, #27
 8000b02:	dc00      	bgt.n	8000b06 <__aeabi_fsub+0xc6>
 8000b04:	e0d2      	b.n	8000cac <__aeabi_fsub+0x26c>
 8000b06:	2001      	movs	r0, #1
 8000b08:	4460      	add	r0, ip
 8000b0a:	0143      	lsls	r3, r0, #5
 8000b0c:	d57a      	bpl.n	8000c04 <__aeabi_fsub+0x1c4>
 8000b0e:	3501      	adds	r5, #1
 8000b10:	2dff      	cmp	r5, #255	; 0xff
 8000b12:	d06b      	beq.n	8000bec <__aeabi_fsub+0x1ac>
 8000b14:	2301      	movs	r3, #1
 8000b16:	4a9d      	ldr	r2, [pc, #628]	; (8000d8c <__aeabi_fsub+0x34c>)
 8000b18:	4003      	ands	r3, r0
 8000b1a:	0840      	lsrs	r0, r0, #1
 8000b1c:	4010      	ands	r0, r2
 8000b1e:	4318      	orrs	r0, r3
 8000b20:	e7c8      	b.n	8000ab4 <__aeabi_fsub+0x74>
 8000b22:	2e00      	cmp	r6, #0
 8000b24:	d020      	beq.n	8000b68 <__aeabi_fsub+0x128>
 8000b26:	428c      	cmp	r4, r1
 8000b28:	d023      	beq.n	8000b72 <__aeabi_fsub+0x132>
 8000b2a:	0028      	movs	r0, r5
 8000b2c:	38ff      	subs	r0, #255	; 0xff
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	d039      	beq.n	8000ba6 <__aeabi_fsub+0x166>
 8000b32:	1b57      	subs	r7, r2, r5
 8000b34:	2d00      	cmp	r5, #0
 8000b36:	d000      	beq.n	8000b3a <__aeabi_fsub+0xfa>
 8000b38:	e09d      	b.n	8000c76 <__aeabi_fsub+0x236>
 8000b3a:	4663      	mov	r3, ip
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_fsub+0x102>
 8000b40:	e0db      	b.n	8000cfa <__aeabi_fsub+0x2ba>
 8000b42:	1e7b      	subs	r3, r7, #1
 8000b44:	2f01      	cmp	r7, #1
 8000b46:	d100      	bne.n	8000b4a <__aeabi_fsub+0x10a>
 8000b48:	e10d      	b.n	8000d66 <__aeabi_fsub+0x326>
 8000b4a:	2fff      	cmp	r7, #255	; 0xff
 8000b4c:	d071      	beq.n	8000c32 <__aeabi_fsub+0x1f2>
 8000b4e:	001f      	movs	r7, r3
 8000b50:	e098      	b.n	8000c84 <__aeabi_fsub+0x244>
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d100      	bne.n	8000b58 <__aeabi_fsub+0x118>
 8000b56:	e0a7      	b.n	8000ca8 <__aeabi_fsub+0x268>
 8000b58:	1e42      	subs	r2, r0, #1
 8000b5a:	2801      	cmp	r0, #1
 8000b5c:	d100      	bne.n	8000b60 <__aeabi_fsub+0x120>
 8000b5e:	e0e6      	b.n	8000d2e <__aeabi_fsub+0x2ee>
 8000b60:	28ff      	cmp	r0, #255	; 0xff
 8000b62:	d068      	beq.n	8000c36 <__aeabi_fsub+0x1f6>
 8000b64:	0010      	movs	r0, r2
 8000b66:	e78f      	b.n	8000a88 <__aeabi_fsub+0x48>
 8000b68:	2001      	movs	r0, #1
 8000b6a:	4041      	eors	r1, r0
 8000b6c:	42a1      	cmp	r1, r4
 8000b6e:	d000      	beq.n	8000b72 <__aeabi_fsub+0x132>
 8000b70:	e77f      	b.n	8000a72 <__aeabi_fsub+0x32>
 8000b72:	20ff      	movs	r0, #255	; 0xff
 8000b74:	4240      	negs	r0, r0
 8000b76:	4680      	mov	r8, r0
 8000b78:	44a8      	add	r8, r5
 8000b7a:	4640      	mov	r0, r8
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	d038      	beq.n	8000bf2 <__aeabi_fsub+0x1b2>
 8000b80:	1b51      	subs	r1, r2, r5
 8000b82:	2d00      	cmp	r5, #0
 8000b84:	d100      	bne.n	8000b88 <__aeabi_fsub+0x148>
 8000b86:	e0ae      	b.n	8000ce6 <__aeabi_fsub+0x2a6>
 8000b88:	2aff      	cmp	r2, #255	; 0xff
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fsub+0x14e>
 8000b8c:	e0df      	b.n	8000d4e <__aeabi_fsub+0x30e>
 8000b8e:	2380      	movs	r3, #128	; 0x80
 8000b90:	4660      	mov	r0, ip
 8000b92:	04db      	lsls	r3, r3, #19
 8000b94:	4318      	orrs	r0, r3
 8000b96:	4684      	mov	ip, r0
 8000b98:	291b      	cmp	r1, #27
 8000b9a:	dc00      	bgt.n	8000b9e <__aeabi_fsub+0x15e>
 8000b9c:	e0d9      	b.n	8000d52 <__aeabi_fsub+0x312>
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	0015      	movs	r5, r2
 8000ba2:	1980      	adds	r0, r0, r6
 8000ba4:	e7b1      	b.n	8000b0a <__aeabi_fsub+0xca>
 8000ba6:	20fe      	movs	r0, #254	; 0xfe
 8000ba8:	1c6a      	adds	r2, r5, #1
 8000baa:	4210      	tst	r0, r2
 8000bac:	d171      	bne.n	8000c92 <__aeabi_fsub+0x252>
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_fsub+0x174>
 8000bb2:	e0a6      	b.n	8000d02 <__aeabi_fsub+0x2c2>
 8000bb4:	4663      	mov	r3, ip
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d100      	bne.n	8000bbc <__aeabi_fsub+0x17c>
 8000bba:	e0d9      	b.n	8000d70 <__aeabi_fsub+0x330>
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d100      	bne.n	8000bc4 <__aeabi_fsub+0x184>
 8000bc2:	e788      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000bc4:	1b98      	subs	r0, r3, r6
 8000bc6:	0143      	lsls	r3, r0, #5
 8000bc8:	d400      	bmi.n	8000bcc <__aeabi_fsub+0x18c>
 8000bca:	e0e1      	b.n	8000d90 <__aeabi_fsub+0x350>
 8000bcc:	4663      	mov	r3, ip
 8000bce:	000c      	movs	r4, r1
 8000bd0:	1af0      	subs	r0, r6, r3
 8000bd2:	e76f      	b.n	8000ab4 <__aeabi_fsub+0x74>
 8000bd4:	2e00      	cmp	r6, #0
 8000bd6:	d100      	bne.n	8000bda <__aeabi_fsub+0x19a>
 8000bd8:	e0b7      	b.n	8000d4a <__aeabi_fsub+0x30a>
 8000bda:	0002      	movs	r2, r0
 8000bdc:	3a01      	subs	r2, #1
 8000bde:	2801      	cmp	r0, #1
 8000be0:	d100      	bne.n	8000be4 <__aeabi_fsub+0x1a4>
 8000be2:	e09c      	b.n	8000d1e <__aeabi_fsub+0x2de>
 8000be4:	28ff      	cmp	r0, #255	; 0xff
 8000be6:	d026      	beq.n	8000c36 <__aeabi_fsub+0x1f6>
 8000be8:	4690      	mov	r8, r2
 8000bea:	e788      	b.n	8000afe <__aeabi_fsub+0xbe>
 8000bec:	22ff      	movs	r2, #255	; 0xff
 8000bee:	2700      	movs	r7, #0
 8000bf0:	e771      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000bf2:	20fe      	movs	r0, #254	; 0xfe
 8000bf4:	1c6a      	adds	r2, r5, #1
 8000bf6:	4210      	tst	r0, r2
 8000bf8:	d064      	beq.n	8000cc4 <__aeabi_fsub+0x284>
 8000bfa:	2aff      	cmp	r2, #255	; 0xff
 8000bfc:	d0f6      	beq.n	8000bec <__aeabi_fsub+0x1ac>
 8000bfe:	0015      	movs	r5, r2
 8000c00:	4466      	add	r6, ip
 8000c02:	0870      	lsrs	r0, r6, #1
 8000c04:	0743      	lsls	r3, r0, #29
 8000c06:	d000      	beq.n	8000c0a <__aeabi_fsub+0x1ca>
 8000c08:	e756      	b.n	8000ab8 <__aeabi_fsub+0x78>
 8000c0a:	08c3      	lsrs	r3, r0, #3
 8000c0c:	2dff      	cmp	r5, #255	; 0xff
 8000c0e:	d012      	beq.n	8000c36 <__aeabi_fsub+0x1f6>
 8000c10:	025b      	lsls	r3, r3, #9
 8000c12:	0a5f      	lsrs	r7, r3, #9
 8000c14:	b2ea      	uxtb	r2, r5
 8000c16:	e75e      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000c18:	4662      	mov	r2, ip
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d100      	bne.n	8000c20 <__aeabi_fsub+0x1e0>
 8000c1e:	e096      	b.n	8000d4e <__aeabi_fsub+0x30e>
 8000c20:	2e00      	cmp	r6, #0
 8000c22:	d008      	beq.n	8000c36 <__aeabi_fsub+0x1f6>
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	03d2      	lsls	r2, r2, #15
 8000c28:	4213      	tst	r3, r2
 8000c2a:	d004      	beq.n	8000c36 <__aeabi_fsub+0x1f6>
 8000c2c:	4648      	mov	r0, r9
 8000c2e:	4210      	tst	r0, r2
 8000c30:	d101      	bne.n	8000c36 <__aeabi_fsub+0x1f6>
 8000c32:	000c      	movs	r4, r1
 8000c34:	464b      	mov	r3, r9
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d0d8      	beq.n	8000bec <__aeabi_fsub+0x1ac>
 8000c3a:	2780      	movs	r7, #128	; 0x80
 8000c3c:	03ff      	lsls	r7, r7, #15
 8000c3e:	431f      	orrs	r7, r3
 8000c40:	027f      	lsls	r7, r7, #9
 8000c42:	22ff      	movs	r2, #255	; 0xff
 8000c44:	0a7f      	lsrs	r7, r7, #9
 8000c46:	e746      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000c48:	2320      	movs	r3, #32
 8000c4a:	003a      	movs	r2, r7
 8000c4c:	1b45      	subs	r5, r0, r5
 8000c4e:	0038      	movs	r0, r7
 8000c50:	3501      	adds	r5, #1
 8000c52:	40ea      	lsrs	r2, r5
 8000c54:	1b5d      	subs	r5, r3, r5
 8000c56:	40a8      	lsls	r0, r5
 8000c58:	1e43      	subs	r3, r0, #1
 8000c5a:	4198      	sbcs	r0, r3
 8000c5c:	2500      	movs	r5, #0
 8000c5e:	4310      	orrs	r0, r2
 8000c60:	e728      	b.n	8000ab4 <__aeabi_fsub+0x74>
 8000c62:	2320      	movs	r3, #32
 8000c64:	1a1b      	subs	r3, r3, r0
 8000c66:	0032      	movs	r2, r6
 8000c68:	409e      	lsls	r6, r3
 8000c6a:	40c2      	lsrs	r2, r0
 8000c6c:	0030      	movs	r0, r6
 8000c6e:	1e43      	subs	r3, r0, #1
 8000c70:	4198      	sbcs	r0, r3
 8000c72:	4310      	orrs	r0, r2
 8000c74:	e70c      	b.n	8000a90 <__aeabi_fsub+0x50>
 8000c76:	2aff      	cmp	r2, #255	; 0xff
 8000c78:	d0db      	beq.n	8000c32 <__aeabi_fsub+0x1f2>
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	4660      	mov	r0, ip
 8000c7e:	04db      	lsls	r3, r3, #19
 8000c80:	4318      	orrs	r0, r3
 8000c82:	4684      	mov	ip, r0
 8000c84:	2f1b      	cmp	r7, #27
 8000c86:	dd56      	ble.n	8000d36 <__aeabi_fsub+0x2f6>
 8000c88:	2001      	movs	r0, #1
 8000c8a:	000c      	movs	r4, r1
 8000c8c:	0015      	movs	r5, r2
 8000c8e:	1a30      	subs	r0, r6, r0
 8000c90:	e700      	b.n	8000a94 <__aeabi_fsub+0x54>
 8000c92:	4663      	mov	r3, ip
 8000c94:	1b9f      	subs	r7, r3, r6
 8000c96:	017b      	lsls	r3, r7, #5
 8000c98:	d43d      	bmi.n	8000d16 <__aeabi_fsub+0x2d6>
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d000      	beq.n	8000ca0 <__aeabi_fsub+0x260>
 8000c9e:	e6fe      	b.n	8000a9e <__aeabi_fsub+0x5e>
 8000ca0:	2400      	movs	r4, #0
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2700      	movs	r7, #0
 8000ca6:	e716      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000ca8:	0005      	movs	r5, r0
 8000caa:	e7af      	b.n	8000c0c <__aeabi_fsub+0x1cc>
 8000cac:	0032      	movs	r2, r6
 8000cae:	4643      	mov	r3, r8
 8000cb0:	4641      	mov	r1, r8
 8000cb2:	40da      	lsrs	r2, r3
 8000cb4:	2320      	movs	r3, #32
 8000cb6:	1a5b      	subs	r3, r3, r1
 8000cb8:	409e      	lsls	r6, r3
 8000cba:	0030      	movs	r0, r6
 8000cbc:	1e43      	subs	r3, r0, #1
 8000cbe:	4198      	sbcs	r0, r3
 8000cc0:	4310      	orrs	r0, r2
 8000cc2:	e721      	b.n	8000b08 <__aeabi_fsub+0xc8>
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d1a7      	bne.n	8000c18 <__aeabi_fsub+0x1d8>
 8000cc8:	4663      	mov	r3, ip
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d059      	beq.n	8000d82 <__aeabi_fsub+0x342>
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2e00      	cmp	r6, #0
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_fsub+0x296>
 8000cd4:	e6ff      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000cd6:	0030      	movs	r0, r6
 8000cd8:	4460      	add	r0, ip
 8000cda:	0143      	lsls	r3, r0, #5
 8000cdc:	d592      	bpl.n	8000c04 <__aeabi_fsub+0x1c4>
 8000cde:	4b2a      	ldr	r3, [pc, #168]	; (8000d88 <__aeabi_fsub+0x348>)
 8000ce0:	3501      	adds	r5, #1
 8000ce2:	4018      	ands	r0, r3
 8000ce4:	e78e      	b.n	8000c04 <__aeabi_fsub+0x1c4>
 8000ce6:	4663      	mov	r3, ip
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d047      	beq.n	8000d7c <__aeabi_fsub+0x33c>
 8000cec:	1e4b      	subs	r3, r1, #1
 8000cee:	2901      	cmp	r1, #1
 8000cf0:	d015      	beq.n	8000d1e <__aeabi_fsub+0x2de>
 8000cf2:	29ff      	cmp	r1, #255	; 0xff
 8000cf4:	d02b      	beq.n	8000d4e <__aeabi_fsub+0x30e>
 8000cf6:	0019      	movs	r1, r3
 8000cf8:	e74e      	b.n	8000b98 <__aeabi_fsub+0x158>
 8000cfa:	000c      	movs	r4, r1
 8000cfc:	464b      	mov	r3, r9
 8000cfe:	003d      	movs	r5, r7
 8000d00:	e784      	b.n	8000c0c <__aeabi_fsub+0x1cc>
 8000d02:	4662      	mov	r2, ip
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	d18b      	bne.n	8000c20 <__aeabi_fsub+0x1e0>
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d192      	bne.n	8000c32 <__aeabi_fsub+0x1f2>
 8000d0c:	2780      	movs	r7, #128	; 0x80
 8000d0e:	2400      	movs	r4, #0
 8000d10:	22ff      	movs	r2, #255	; 0xff
 8000d12:	03ff      	lsls	r7, r7, #15
 8000d14:	e6df      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000d16:	4663      	mov	r3, ip
 8000d18:	000c      	movs	r4, r1
 8000d1a:	1af7      	subs	r7, r6, r3
 8000d1c:	e6bf      	b.n	8000a9e <__aeabi_fsub+0x5e>
 8000d1e:	0030      	movs	r0, r6
 8000d20:	4460      	add	r0, ip
 8000d22:	2501      	movs	r5, #1
 8000d24:	0143      	lsls	r3, r0, #5
 8000d26:	d400      	bmi.n	8000d2a <__aeabi_fsub+0x2ea>
 8000d28:	e76c      	b.n	8000c04 <__aeabi_fsub+0x1c4>
 8000d2a:	2502      	movs	r5, #2
 8000d2c:	e6f2      	b.n	8000b14 <__aeabi_fsub+0xd4>
 8000d2e:	4663      	mov	r3, ip
 8000d30:	2501      	movs	r5, #1
 8000d32:	1b98      	subs	r0, r3, r6
 8000d34:	e6ae      	b.n	8000a94 <__aeabi_fsub+0x54>
 8000d36:	2320      	movs	r3, #32
 8000d38:	4664      	mov	r4, ip
 8000d3a:	4660      	mov	r0, ip
 8000d3c:	40fc      	lsrs	r4, r7
 8000d3e:	1bdf      	subs	r7, r3, r7
 8000d40:	40b8      	lsls	r0, r7
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	4320      	orrs	r0, r4
 8000d48:	e79f      	b.n	8000c8a <__aeabi_fsub+0x24a>
 8000d4a:	0005      	movs	r5, r0
 8000d4c:	e75e      	b.n	8000c0c <__aeabi_fsub+0x1cc>
 8000d4e:	464b      	mov	r3, r9
 8000d50:	e771      	b.n	8000c36 <__aeabi_fsub+0x1f6>
 8000d52:	2320      	movs	r3, #32
 8000d54:	4665      	mov	r5, ip
 8000d56:	4660      	mov	r0, ip
 8000d58:	40cd      	lsrs	r5, r1
 8000d5a:	1a59      	subs	r1, r3, r1
 8000d5c:	4088      	lsls	r0, r1
 8000d5e:	1e43      	subs	r3, r0, #1
 8000d60:	4198      	sbcs	r0, r3
 8000d62:	4328      	orrs	r0, r5
 8000d64:	e71c      	b.n	8000ba0 <__aeabi_fsub+0x160>
 8000d66:	4663      	mov	r3, ip
 8000d68:	000c      	movs	r4, r1
 8000d6a:	2501      	movs	r5, #1
 8000d6c:	1af0      	subs	r0, r6, r3
 8000d6e:	e691      	b.n	8000a94 <__aeabi_fsub+0x54>
 8000d70:	2e00      	cmp	r6, #0
 8000d72:	d095      	beq.n	8000ca0 <__aeabi_fsub+0x260>
 8000d74:	000c      	movs	r4, r1
 8000d76:	464f      	mov	r7, r9
 8000d78:	2200      	movs	r2, #0
 8000d7a:	e6ac      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000d7c:	464b      	mov	r3, r9
 8000d7e:	000d      	movs	r5, r1
 8000d80:	e744      	b.n	8000c0c <__aeabi_fsub+0x1cc>
 8000d82:	464f      	mov	r7, r9
 8000d84:	2200      	movs	r2, #0
 8000d86:	e6a6      	b.n	8000ad6 <__aeabi_fsub+0x96>
 8000d88:	fbffffff 	.word	0xfbffffff
 8000d8c:	7dffffff 	.word	0x7dffffff
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d000      	beq.n	8000d96 <__aeabi_fsub+0x356>
 8000d94:	e736      	b.n	8000c04 <__aeabi_fsub+0x1c4>
 8000d96:	2400      	movs	r4, #0
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e69c      	b.n	8000ad6 <__aeabi_fsub+0x96>

08000d9c <__aeabi_f2iz>:
 8000d9c:	0241      	lsls	r1, r0, #9
 8000d9e:	0042      	lsls	r2, r0, #1
 8000da0:	0fc3      	lsrs	r3, r0, #31
 8000da2:	0a49      	lsrs	r1, r1, #9
 8000da4:	2000      	movs	r0, #0
 8000da6:	0e12      	lsrs	r2, r2, #24
 8000da8:	2a7e      	cmp	r2, #126	; 0x7e
 8000daa:	dd03      	ble.n	8000db4 <__aeabi_f2iz+0x18>
 8000dac:	2a9d      	cmp	r2, #157	; 0x9d
 8000dae:	dd02      	ble.n	8000db6 <__aeabi_f2iz+0x1a>
 8000db0:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <__aeabi_f2iz+0x3c>)
 8000db2:	1898      	adds	r0, r3, r2
 8000db4:	4770      	bx	lr
 8000db6:	2080      	movs	r0, #128	; 0x80
 8000db8:	0400      	lsls	r0, r0, #16
 8000dba:	4301      	orrs	r1, r0
 8000dbc:	2a95      	cmp	r2, #149	; 0x95
 8000dbe:	dc07      	bgt.n	8000dd0 <__aeabi_f2iz+0x34>
 8000dc0:	2096      	movs	r0, #150	; 0x96
 8000dc2:	1a82      	subs	r2, r0, r2
 8000dc4:	40d1      	lsrs	r1, r2
 8000dc6:	4248      	negs	r0, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_f2iz+0x18>
 8000dcc:	0008      	movs	r0, r1
 8000dce:	e7f1      	b.n	8000db4 <__aeabi_f2iz+0x18>
 8000dd0:	3a96      	subs	r2, #150	; 0x96
 8000dd2:	4091      	lsls	r1, r2
 8000dd4:	e7f7      	b.n	8000dc6 <__aeabi_f2iz+0x2a>
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	7fffffff 	.word	0x7fffffff

08000ddc <__aeabi_i2f>:
 8000ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dde:	2800      	cmp	r0, #0
 8000de0:	d013      	beq.n	8000e0a <__aeabi_i2f+0x2e>
 8000de2:	17c3      	asrs	r3, r0, #31
 8000de4:	18c6      	adds	r6, r0, r3
 8000de6:	405e      	eors	r6, r3
 8000de8:	0fc4      	lsrs	r4, r0, #31
 8000dea:	0030      	movs	r0, r6
 8000dec:	f001 ff3c 	bl	8002c68 <__clzsi2>
 8000df0:	239e      	movs	r3, #158	; 0x9e
 8000df2:	0005      	movs	r5, r0
 8000df4:	1a1b      	subs	r3, r3, r0
 8000df6:	2b96      	cmp	r3, #150	; 0x96
 8000df8:	dc0f      	bgt.n	8000e1a <__aeabi_i2f+0x3e>
 8000dfa:	2808      	cmp	r0, #8
 8000dfc:	dd01      	ble.n	8000e02 <__aeabi_i2f+0x26>
 8000dfe:	3d08      	subs	r5, #8
 8000e00:	40ae      	lsls	r6, r5
 8000e02:	0276      	lsls	r6, r6, #9
 8000e04:	0a76      	lsrs	r6, r6, #9
 8000e06:	b2d8      	uxtb	r0, r3
 8000e08:	e002      	b.n	8000e10 <__aeabi_i2f+0x34>
 8000e0a:	2400      	movs	r4, #0
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	2600      	movs	r6, #0
 8000e10:	05c0      	lsls	r0, r0, #23
 8000e12:	4330      	orrs	r0, r6
 8000e14:	07e4      	lsls	r4, r4, #31
 8000e16:	4320      	orrs	r0, r4
 8000e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e1a:	2b99      	cmp	r3, #153	; 0x99
 8000e1c:	dd0c      	ble.n	8000e38 <__aeabi_i2f+0x5c>
 8000e1e:	2205      	movs	r2, #5
 8000e20:	0031      	movs	r1, r6
 8000e22:	1a12      	subs	r2, r2, r0
 8000e24:	40d1      	lsrs	r1, r2
 8000e26:	000a      	movs	r2, r1
 8000e28:	0001      	movs	r1, r0
 8000e2a:	0030      	movs	r0, r6
 8000e2c:	311b      	adds	r1, #27
 8000e2e:	4088      	lsls	r0, r1
 8000e30:	1e41      	subs	r1, r0, #1
 8000e32:	4188      	sbcs	r0, r1
 8000e34:	4302      	orrs	r2, r0
 8000e36:	0016      	movs	r6, r2
 8000e38:	2d05      	cmp	r5, #5
 8000e3a:	dc12      	bgt.n	8000e62 <__aeabi_i2f+0x86>
 8000e3c:	0031      	movs	r1, r6
 8000e3e:	4f0d      	ldr	r7, [pc, #52]	; (8000e74 <__aeabi_i2f+0x98>)
 8000e40:	4039      	ands	r1, r7
 8000e42:	0772      	lsls	r2, r6, #29
 8000e44:	d009      	beq.n	8000e5a <__aeabi_i2f+0x7e>
 8000e46:	200f      	movs	r0, #15
 8000e48:	4030      	ands	r0, r6
 8000e4a:	2804      	cmp	r0, #4
 8000e4c:	d005      	beq.n	8000e5a <__aeabi_i2f+0x7e>
 8000e4e:	3104      	adds	r1, #4
 8000e50:	014a      	lsls	r2, r1, #5
 8000e52:	d502      	bpl.n	8000e5a <__aeabi_i2f+0x7e>
 8000e54:	239f      	movs	r3, #159	; 0x9f
 8000e56:	4039      	ands	r1, r7
 8000e58:	1b5b      	subs	r3, r3, r5
 8000e5a:	0189      	lsls	r1, r1, #6
 8000e5c:	0a4e      	lsrs	r6, r1, #9
 8000e5e:	b2d8      	uxtb	r0, r3
 8000e60:	e7d6      	b.n	8000e10 <__aeabi_i2f+0x34>
 8000e62:	1f6a      	subs	r2, r5, #5
 8000e64:	4096      	lsls	r6, r2
 8000e66:	0031      	movs	r1, r6
 8000e68:	4f02      	ldr	r7, [pc, #8]	; (8000e74 <__aeabi_i2f+0x98>)
 8000e6a:	4039      	ands	r1, r7
 8000e6c:	0772      	lsls	r2, r6, #29
 8000e6e:	d0f4      	beq.n	8000e5a <__aeabi_i2f+0x7e>
 8000e70:	e7e9      	b.n	8000e46 <__aeabi_i2f+0x6a>
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	fbffffff 	.word	0xfbffffff

08000e78 <__aeabi_ui2f>:
 8000e78:	b570      	push	{r4, r5, r6, lr}
 8000e7a:	1e05      	subs	r5, r0, #0
 8000e7c:	d00e      	beq.n	8000e9c <__aeabi_ui2f+0x24>
 8000e7e:	f001 fef3 	bl	8002c68 <__clzsi2>
 8000e82:	239e      	movs	r3, #158	; 0x9e
 8000e84:	0004      	movs	r4, r0
 8000e86:	1a1b      	subs	r3, r3, r0
 8000e88:	2b96      	cmp	r3, #150	; 0x96
 8000e8a:	dc0c      	bgt.n	8000ea6 <__aeabi_ui2f+0x2e>
 8000e8c:	2808      	cmp	r0, #8
 8000e8e:	dd01      	ble.n	8000e94 <__aeabi_ui2f+0x1c>
 8000e90:	3c08      	subs	r4, #8
 8000e92:	40a5      	lsls	r5, r4
 8000e94:	026d      	lsls	r5, r5, #9
 8000e96:	0a6d      	lsrs	r5, r5, #9
 8000e98:	b2d8      	uxtb	r0, r3
 8000e9a:	e001      	b.n	8000ea0 <__aeabi_ui2f+0x28>
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	2500      	movs	r5, #0
 8000ea0:	05c0      	lsls	r0, r0, #23
 8000ea2:	4328      	orrs	r0, r5
 8000ea4:	bd70      	pop	{r4, r5, r6, pc}
 8000ea6:	2b99      	cmp	r3, #153	; 0x99
 8000ea8:	dd09      	ble.n	8000ebe <__aeabi_ui2f+0x46>
 8000eaa:	0002      	movs	r2, r0
 8000eac:	0029      	movs	r1, r5
 8000eae:	321b      	adds	r2, #27
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	1e4a      	subs	r2, r1, #1
 8000eb4:	4191      	sbcs	r1, r2
 8000eb6:	2205      	movs	r2, #5
 8000eb8:	1a12      	subs	r2, r2, r0
 8000eba:	40d5      	lsrs	r5, r2
 8000ebc:	430d      	orrs	r5, r1
 8000ebe:	2c05      	cmp	r4, #5
 8000ec0:	dc12      	bgt.n	8000ee8 <__aeabi_ui2f+0x70>
 8000ec2:	0029      	movs	r1, r5
 8000ec4:	4e0c      	ldr	r6, [pc, #48]	; (8000ef8 <__aeabi_ui2f+0x80>)
 8000ec6:	4031      	ands	r1, r6
 8000ec8:	076a      	lsls	r2, r5, #29
 8000eca:	d009      	beq.n	8000ee0 <__aeabi_ui2f+0x68>
 8000ecc:	200f      	movs	r0, #15
 8000ece:	4028      	ands	r0, r5
 8000ed0:	2804      	cmp	r0, #4
 8000ed2:	d005      	beq.n	8000ee0 <__aeabi_ui2f+0x68>
 8000ed4:	3104      	adds	r1, #4
 8000ed6:	014a      	lsls	r2, r1, #5
 8000ed8:	d502      	bpl.n	8000ee0 <__aeabi_ui2f+0x68>
 8000eda:	239f      	movs	r3, #159	; 0x9f
 8000edc:	4031      	ands	r1, r6
 8000ede:	1b1b      	subs	r3, r3, r4
 8000ee0:	0189      	lsls	r1, r1, #6
 8000ee2:	0a4d      	lsrs	r5, r1, #9
 8000ee4:	b2d8      	uxtb	r0, r3
 8000ee6:	e7db      	b.n	8000ea0 <__aeabi_ui2f+0x28>
 8000ee8:	1f62      	subs	r2, r4, #5
 8000eea:	4095      	lsls	r5, r2
 8000eec:	0029      	movs	r1, r5
 8000eee:	4e02      	ldr	r6, [pc, #8]	; (8000ef8 <__aeabi_ui2f+0x80>)
 8000ef0:	4031      	ands	r1, r6
 8000ef2:	076a      	lsls	r2, r5, #29
 8000ef4:	d0f4      	beq.n	8000ee0 <__aeabi_ui2f+0x68>
 8000ef6:	e7e9      	b.n	8000ecc <__aeabi_ui2f+0x54>
 8000ef8:	fbffffff 	.word	0xfbffffff

08000efc <__aeabi_dadd>:
 8000efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efe:	464f      	mov	r7, r9
 8000f00:	4646      	mov	r6, r8
 8000f02:	46d6      	mov	lr, sl
 8000f04:	000d      	movs	r5, r1
 8000f06:	0004      	movs	r4, r0
 8000f08:	b5c0      	push	{r6, r7, lr}
 8000f0a:	001f      	movs	r7, r3
 8000f0c:	0011      	movs	r1, r2
 8000f0e:	0328      	lsls	r0, r5, #12
 8000f10:	0f62      	lsrs	r2, r4, #29
 8000f12:	0a40      	lsrs	r0, r0, #9
 8000f14:	4310      	orrs	r0, r2
 8000f16:	007a      	lsls	r2, r7, #1
 8000f18:	0d52      	lsrs	r2, r2, #21
 8000f1a:	00e3      	lsls	r3, r4, #3
 8000f1c:	033c      	lsls	r4, r7, #12
 8000f1e:	4691      	mov	r9, r2
 8000f20:	0a64      	lsrs	r4, r4, #9
 8000f22:	0ffa      	lsrs	r2, r7, #31
 8000f24:	0f4f      	lsrs	r7, r1, #29
 8000f26:	006e      	lsls	r6, r5, #1
 8000f28:	4327      	orrs	r7, r4
 8000f2a:	4692      	mov	sl, r2
 8000f2c:	46b8      	mov	r8, r7
 8000f2e:	0d76      	lsrs	r6, r6, #21
 8000f30:	0fed      	lsrs	r5, r5, #31
 8000f32:	00c9      	lsls	r1, r1, #3
 8000f34:	4295      	cmp	r5, r2
 8000f36:	d100      	bne.n	8000f3a <__aeabi_dadd+0x3e>
 8000f38:	e099      	b.n	800106e <__aeabi_dadd+0x172>
 8000f3a:	464c      	mov	r4, r9
 8000f3c:	1b34      	subs	r4, r6, r4
 8000f3e:	46a4      	mov	ip, r4
 8000f40:	2c00      	cmp	r4, #0
 8000f42:	dc00      	bgt.n	8000f46 <__aeabi_dadd+0x4a>
 8000f44:	e07c      	b.n	8001040 <__aeabi_dadd+0x144>
 8000f46:	464a      	mov	r2, r9
 8000f48:	2a00      	cmp	r2, #0
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_dadd+0x52>
 8000f4c:	e0b8      	b.n	80010c0 <__aeabi_dadd+0x1c4>
 8000f4e:	4ac5      	ldr	r2, [pc, #788]	; (8001264 <__aeabi_dadd+0x368>)
 8000f50:	4296      	cmp	r6, r2
 8000f52:	d100      	bne.n	8000f56 <__aeabi_dadd+0x5a>
 8000f54:	e11c      	b.n	8001190 <__aeabi_dadd+0x294>
 8000f56:	2280      	movs	r2, #128	; 0x80
 8000f58:	003c      	movs	r4, r7
 8000f5a:	0412      	lsls	r2, r2, #16
 8000f5c:	4314      	orrs	r4, r2
 8000f5e:	46a0      	mov	r8, r4
 8000f60:	4662      	mov	r2, ip
 8000f62:	2a38      	cmp	r2, #56	; 0x38
 8000f64:	dd00      	ble.n	8000f68 <__aeabi_dadd+0x6c>
 8000f66:	e161      	b.n	800122c <__aeabi_dadd+0x330>
 8000f68:	2a1f      	cmp	r2, #31
 8000f6a:	dd00      	ble.n	8000f6e <__aeabi_dadd+0x72>
 8000f6c:	e1cc      	b.n	8001308 <__aeabi_dadd+0x40c>
 8000f6e:	4664      	mov	r4, ip
 8000f70:	2220      	movs	r2, #32
 8000f72:	1b12      	subs	r2, r2, r4
 8000f74:	4644      	mov	r4, r8
 8000f76:	4094      	lsls	r4, r2
 8000f78:	000f      	movs	r7, r1
 8000f7a:	46a1      	mov	r9, r4
 8000f7c:	4664      	mov	r4, ip
 8000f7e:	4091      	lsls	r1, r2
 8000f80:	40e7      	lsrs	r7, r4
 8000f82:	464c      	mov	r4, r9
 8000f84:	1e4a      	subs	r2, r1, #1
 8000f86:	4191      	sbcs	r1, r2
 8000f88:	433c      	orrs	r4, r7
 8000f8a:	4642      	mov	r2, r8
 8000f8c:	4321      	orrs	r1, r4
 8000f8e:	4664      	mov	r4, ip
 8000f90:	40e2      	lsrs	r2, r4
 8000f92:	1a80      	subs	r0, r0, r2
 8000f94:	1a5c      	subs	r4, r3, r1
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	419b      	sbcs	r3, r3
 8000f9a:	425f      	negs	r7, r3
 8000f9c:	1bc7      	subs	r7, r0, r7
 8000f9e:	023b      	lsls	r3, r7, #8
 8000fa0:	d400      	bmi.n	8000fa4 <__aeabi_dadd+0xa8>
 8000fa2:	e0d0      	b.n	8001146 <__aeabi_dadd+0x24a>
 8000fa4:	027f      	lsls	r7, r7, #9
 8000fa6:	0a7f      	lsrs	r7, r7, #9
 8000fa8:	2f00      	cmp	r7, #0
 8000faa:	d100      	bne.n	8000fae <__aeabi_dadd+0xb2>
 8000fac:	e0ff      	b.n	80011ae <__aeabi_dadd+0x2b2>
 8000fae:	0038      	movs	r0, r7
 8000fb0:	f001 fe5a 	bl	8002c68 <__clzsi2>
 8000fb4:	0001      	movs	r1, r0
 8000fb6:	3908      	subs	r1, #8
 8000fb8:	2320      	movs	r3, #32
 8000fba:	0022      	movs	r2, r4
 8000fbc:	1a5b      	subs	r3, r3, r1
 8000fbe:	408f      	lsls	r7, r1
 8000fc0:	40da      	lsrs	r2, r3
 8000fc2:	408c      	lsls	r4, r1
 8000fc4:	4317      	orrs	r7, r2
 8000fc6:	42b1      	cmp	r1, r6
 8000fc8:	da00      	bge.n	8000fcc <__aeabi_dadd+0xd0>
 8000fca:	e0ff      	b.n	80011cc <__aeabi_dadd+0x2d0>
 8000fcc:	1b89      	subs	r1, r1, r6
 8000fce:	1c4b      	adds	r3, r1, #1
 8000fd0:	2b1f      	cmp	r3, #31
 8000fd2:	dd00      	ble.n	8000fd6 <__aeabi_dadd+0xda>
 8000fd4:	e0a8      	b.n	8001128 <__aeabi_dadd+0x22c>
 8000fd6:	2220      	movs	r2, #32
 8000fd8:	0039      	movs	r1, r7
 8000fda:	1ad2      	subs	r2, r2, r3
 8000fdc:	0020      	movs	r0, r4
 8000fde:	4094      	lsls	r4, r2
 8000fe0:	4091      	lsls	r1, r2
 8000fe2:	40d8      	lsrs	r0, r3
 8000fe4:	1e62      	subs	r2, r4, #1
 8000fe6:	4194      	sbcs	r4, r2
 8000fe8:	40df      	lsrs	r7, r3
 8000fea:	2600      	movs	r6, #0
 8000fec:	4301      	orrs	r1, r0
 8000fee:	430c      	orrs	r4, r1
 8000ff0:	0763      	lsls	r3, r4, #29
 8000ff2:	d009      	beq.n	8001008 <__aeabi_dadd+0x10c>
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	4023      	ands	r3, r4
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d005      	beq.n	8001008 <__aeabi_dadd+0x10c>
 8000ffc:	1d23      	adds	r3, r4, #4
 8000ffe:	42a3      	cmp	r3, r4
 8001000:	41a4      	sbcs	r4, r4
 8001002:	4264      	negs	r4, r4
 8001004:	193f      	adds	r7, r7, r4
 8001006:	001c      	movs	r4, r3
 8001008:	023b      	lsls	r3, r7, #8
 800100a:	d400      	bmi.n	800100e <__aeabi_dadd+0x112>
 800100c:	e09e      	b.n	800114c <__aeabi_dadd+0x250>
 800100e:	4b95      	ldr	r3, [pc, #596]	; (8001264 <__aeabi_dadd+0x368>)
 8001010:	3601      	adds	r6, #1
 8001012:	429e      	cmp	r6, r3
 8001014:	d100      	bne.n	8001018 <__aeabi_dadd+0x11c>
 8001016:	e0b7      	b.n	8001188 <__aeabi_dadd+0x28c>
 8001018:	4a93      	ldr	r2, [pc, #588]	; (8001268 <__aeabi_dadd+0x36c>)
 800101a:	08e4      	lsrs	r4, r4, #3
 800101c:	4017      	ands	r7, r2
 800101e:	077b      	lsls	r3, r7, #29
 8001020:	0571      	lsls	r1, r6, #21
 8001022:	027f      	lsls	r7, r7, #9
 8001024:	4323      	orrs	r3, r4
 8001026:	0b3f      	lsrs	r7, r7, #12
 8001028:	0d4a      	lsrs	r2, r1, #21
 800102a:	0512      	lsls	r2, r2, #20
 800102c:	433a      	orrs	r2, r7
 800102e:	07ed      	lsls	r5, r5, #31
 8001030:	432a      	orrs	r2, r5
 8001032:	0018      	movs	r0, r3
 8001034:	0011      	movs	r1, r2
 8001036:	bce0      	pop	{r5, r6, r7}
 8001038:	46ba      	mov	sl, r7
 800103a:	46b1      	mov	r9, r6
 800103c:	46a8      	mov	r8, r5
 800103e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001040:	2c00      	cmp	r4, #0
 8001042:	d04b      	beq.n	80010dc <__aeabi_dadd+0x1e0>
 8001044:	464c      	mov	r4, r9
 8001046:	1ba4      	subs	r4, r4, r6
 8001048:	46a4      	mov	ip, r4
 800104a:	2e00      	cmp	r6, #0
 800104c:	d000      	beq.n	8001050 <__aeabi_dadd+0x154>
 800104e:	e123      	b.n	8001298 <__aeabi_dadd+0x39c>
 8001050:	0004      	movs	r4, r0
 8001052:	431c      	orrs	r4, r3
 8001054:	d100      	bne.n	8001058 <__aeabi_dadd+0x15c>
 8001056:	e1af      	b.n	80013b8 <__aeabi_dadd+0x4bc>
 8001058:	4662      	mov	r2, ip
 800105a:	1e54      	subs	r4, r2, #1
 800105c:	2a01      	cmp	r2, #1
 800105e:	d100      	bne.n	8001062 <__aeabi_dadd+0x166>
 8001060:	e215      	b.n	800148e <__aeabi_dadd+0x592>
 8001062:	4d80      	ldr	r5, [pc, #512]	; (8001264 <__aeabi_dadd+0x368>)
 8001064:	45ac      	cmp	ip, r5
 8001066:	d100      	bne.n	800106a <__aeabi_dadd+0x16e>
 8001068:	e1c8      	b.n	80013fc <__aeabi_dadd+0x500>
 800106a:	46a4      	mov	ip, r4
 800106c:	e11b      	b.n	80012a6 <__aeabi_dadd+0x3aa>
 800106e:	464a      	mov	r2, r9
 8001070:	1ab2      	subs	r2, r6, r2
 8001072:	4694      	mov	ip, r2
 8001074:	2a00      	cmp	r2, #0
 8001076:	dc00      	bgt.n	800107a <__aeabi_dadd+0x17e>
 8001078:	e0ac      	b.n	80011d4 <__aeabi_dadd+0x2d8>
 800107a:	464a      	mov	r2, r9
 800107c:	2a00      	cmp	r2, #0
 800107e:	d043      	beq.n	8001108 <__aeabi_dadd+0x20c>
 8001080:	4a78      	ldr	r2, [pc, #480]	; (8001264 <__aeabi_dadd+0x368>)
 8001082:	4296      	cmp	r6, r2
 8001084:	d100      	bne.n	8001088 <__aeabi_dadd+0x18c>
 8001086:	e1af      	b.n	80013e8 <__aeabi_dadd+0x4ec>
 8001088:	2280      	movs	r2, #128	; 0x80
 800108a:	003c      	movs	r4, r7
 800108c:	0412      	lsls	r2, r2, #16
 800108e:	4314      	orrs	r4, r2
 8001090:	46a0      	mov	r8, r4
 8001092:	4662      	mov	r2, ip
 8001094:	2a38      	cmp	r2, #56	; 0x38
 8001096:	dc67      	bgt.n	8001168 <__aeabi_dadd+0x26c>
 8001098:	2a1f      	cmp	r2, #31
 800109a:	dc00      	bgt.n	800109e <__aeabi_dadd+0x1a2>
 800109c:	e15f      	b.n	800135e <__aeabi_dadd+0x462>
 800109e:	4647      	mov	r7, r8
 80010a0:	3a20      	subs	r2, #32
 80010a2:	40d7      	lsrs	r7, r2
 80010a4:	4662      	mov	r2, ip
 80010a6:	2a20      	cmp	r2, #32
 80010a8:	d005      	beq.n	80010b6 <__aeabi_dadd+0x1ba>
 80010aa:	4664      	mov	r4, ip
 80010ac:	2240      	movs	r2, #64	; 0x40
 80010ae:	1b12      	subs	r2, r2, r4
 80010b0:	4644      	mov	r4, r8
 80010b2:	4094      	lsls	r4, r2
 80010b4:	4321      	orrs	r1, r4
 80010b6:	1e4a      	subs	r2, r1, #1
 80010b8:	4191      	sbcs	r1, r2
 80010ba:	000c      	movs	r4, r1
 80010bc:	433c      	orrs	r4, r7
 80010be:	e057      	b.n	8001170 <__aeabi_dadd+0x274>
 80010c0:	003a      	movs	r2, r7
 80010c2:	430a      	orrs	r2, r1
 80010c4:	d100      	bne.n	80010c8 <__aeabi_dadd+0x1cc>
 80010c6:	e105      	b.n	80012d4 <__aeabi_dadd+0x3d8>
 80010c8:	0022      	movs	r2, r4
 80010ca:	3a01      	subs	r2, #1
 80010cc:	2c01      	cmp	r4, #1
 80010ce:	d100      	bne.n	80010d2 <__aeabi_dadd+0x1d6>
 80010d0:	e182      	b.n	80013d8 <__aeabi_dadd+0x4dc>
 80010d2:	4c64      	ldr	r4, [pc, #400]	; (8001264 <__aeabi_dadd+0x368>)
 80010d4:	45a4      	cmp	ip, r4
 80010d6:	d05b      	beq.n	8001190 <__aeabi_dadd+0x294>
 80010d8:	4694      	mov	ip, r2
 80010da:	e741      	b.n	8000f60 <__aeabi_dadd+0x64>
 80010dc:	4c63      	ldr	r4, [pc, #396]	; (800126c <__aeabi_dadd+0x370>)
 80010de:	1c77      	adds	r7, r6, #1
 80010e0:	4227      	tst	r7, r4
 80010e2:	d000      	beq.n	80010e6 <__aeabi_dadd+0x1ea>
 80010e4:	e0c4      	b.n	8001270 <__aeabi_dadd+0x374>
 80010e6:	0004      	movs	r4, r0
 80010e8:	431c      	orrs	r4, r3
 80010ea:	2e00      	cmp	r6, #0
 80010ec:	d000      	beq.n	80010f0 <__aeabi_dadd+0x1f4>
 80010ee:	e169      	b.n	80013c4 <__aeabi_dadd+0x4c8>
 80010f0:	2c00      	cmp	r4, #0
 80010f2:	d100      	bne.n	80010f6 <__aeabi_dadd+0x1fa>
 80010f4:	e1bf      	b.n	8001476 <__aeabi_dadd+0x57a>
 80010f6:	4644      	mov	r4, r8
 80010f8:	430c      	orrs	r4, r1
 80010fa:	d000      	beq.n	80010fe <__aeabi_dadd+0x202>
 80010fc:	e1d0      	b.n	80014a0 <__aeabi_dadd+0x5a4>
 80010fe:	0742      	lsls	r2, r0, #29
 8001100:	08db      	lsrs	r3, r3, #3
 8001102:	4313      	orrs	r3, r2
 8001104:	08c0      	lsrs	r0, r0, #3
 8001106:	e029      	b.n	800115c <__aeabi_dadd+0x260>
 8001108:	003a      	movs	r2, r7
 800110a:	430a      	orrs	r2, r1
 800110c:	d100      	bne.n	8001110 <__aeabi_dadd+0x214>
 800110e:	e170      	b.n	80013f2 <__aeabi_dadd+0x4f6>
 8001110:	4662      	mov	r2, ip
 8001112:	4664      	mov	r4, ip
 8001114:	3a01      	subs	r2, #1
 8001116:	2c01      	cmp	r4, #1
 8001118:	d100      	bne.n	800111c <__aeabi_dadd+0x220>
 800111a:	e0e0      	b.n	80012de <__aeabi_dadd+0x3e2>
 800111c:	4c51      	ldr	r4, [pc, #324]	; (8001264 <__aeabi_dadd+0x368>)
 800111e:	45a4      	cmp	ip, r4
 8001120:	d100      	bne.n	8001124 <__aeabi_dadd+0x228>
 8001122:	e161      	b.n	80013e8 <__aeabi_dadd+0x4ec>
 8001124:	4694      	mov	ip, r2
 8001126:	e7b4      	b.n	8001092 <__aeabi_dadd+0x196>
 8001128:	003a      	movs	r2, r7
 800112a:	391f      	subs	r1, #31
 800112c:	40ca      	lsrs	r2, r1
 800112e:	0011      	movs	r1, r2
 8001130:	2b20      	cmp	r3, #32
 8001132:	d003      	beq.n	800113c <__aeabi_dadd+0x240>
 8001134:	2240      	movs	r2, #64	; 0x40
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	409f      	lsls	r7, r3
 800113a:	433c      	orrs	r4, r7
 800113c:	1e63      	subs	r3, r4, #1
 800113e:	419c      	sbcs	r4, r3
 8001140:	2700      	movs	r7, #0
 8001142:	2600      	movs	r6, #0
 8001144:	430c      	orrs	r4, r1
 8001146:	0763      	lsls	r3, r4, #29
 8001148:	d000      	beq.n	800114c <__aeabi_dadd+0x250>
 800114a:	e753      	b.n	8000ff4 <__aeabi_dadd+0xf8>
 800114c:	46b4      	mov	ip, r6
 800114e:	08e4      	lsrs	r4, r4, #3
 8001150:	077b      	lsls	r3, r7, #29
 8001152:	4323      	orrs	r3, r4
 8001154:	08f8      	lsrs	r0, r7, #3
 8001156:	4a43      	ldr	r2, [pc, #268]	; (8001264 <__aeabi_dadd+0x368>)
 8001158:	4594      	cmp	ip, r2
 800115a:	d01d      	beq.n	8001198 <__aeabi_dadd+0x29c>
 800115c:	4662      	mov	r2, ip
 800115e:	0307      	lsls	r7, r0, #12
 8001160:	0552      	lsls	r2, r2, #21
 8001162:	0b3f      	lsrs	r7, r7, #12
 8001164:	0d52      	lsrs	r2, r2, #21
 8001166:	e760      	b.n	800102a <__aeabi_dadd+0x12e>
 8001168:	4644      	mov	r4, r8
 800116a:	430c      	orrs	r4, r1
 800116c:	1e62      	subs	r2, r4, #1
 800116e:	4194      	sbcs	r4, r2
 8001170:	18e4      	adds	r4, r4, r3
 8001172:	429c      	cmp	r4, r3
 8001174:	419b      	sbcs	r3, r3
 8001176:	425f      	negs	r7, r3
 8001178:	183f      	adds	r7, r7, r0
 800117a:	023b      	lsls	r3, r7, #8
 800117c:	d5e3      	bpl.n	8001146 <__aeabi_dadd+0x24a>
 800117e:	4b39      	ldr	r3, [pc, #228]	; (8001264 <__aeabi_dadd+0x368>)
 8001180:	3601      	adds	r6, #1
 8001182:	429e      	cmp	r6, r3
 8001184:	d000      	beq.n	8001188 <__aeabi_dadd+0x28c>
 8001186:	e0b5      	b.n	80012f4 <__aeabi_dadd+0x3f8>
 8001188:	0032      	movs	r2, r6
 800118a:	2700      	movs	r7, #0
 800118c:	2300      	movs	r3, #0
 800118e:	e74c      	b.n	800102a <__aeabi_dadd+0x12e>
 8001190:	0742      	lsls	r2, r0, #29
 8001192:	08db      	lsrs	r3, r3, #3
 8001194:	4313      	orrs	r3, r2
 8001196:	08c0      	lsrs	r0, r0, #3
 8001198:	001a      	movs	r2, r3
 800119a:	4302      	orrs	r2, r0
 800119c:	d100      	bne.n	80011a0 <__aeabi_dadd+0x2a4>
 800119e:	e1e1      	b.n	8001564 <__aeabi_dadd+0x668>
 80011a0:	2780      	movs	r7, #128	; 0x80
 80011a2:	033f      	lsls	r7, r7, #12
 80011a4:	4307      	orrs	r7, r0
 80011a6:	033f      	lsls	r7, r7, #12
 80011a8:	4a2e      	ldr	r2, [pc, #184]	; (8001264 <__aeabi_dadd+0x368>)
 80011aa:	0b3f      	lsrs	r7, r7, #12
 80011ac:	e73d      	b.n	800102a <__aeabi_dadd+0x12e>
 80011ae:	0020      	movs	r0, r4
 80011b0:	f001 fd5a 	bl	8002c68 <__clzsi2>
 80011b4:	0001      	movs	r1, r0
 80011b6:	3118      	adds	r1, #24
 80011b8:	291f      	cmp	r1, #31
 80011ba:	dc00      	bgt.n	80011be <__aeabi_dadd+0x2c2>
 80011bc:	e6fc      	b.n	8000fb8 <__aeabi_dadd+0xbc>
 80011be:	3808      	subs	r0, #8
 80011c0:	4084      	lsls	r4, r0
 80011c2:	0027      	movs	r7, r4
 80011c4:	2400      	movs	r4, #0
 80011c6:	42b1      	cmp	r1, r6
 80011c8:	db00      	blt.n	80011cc <__aeabi_dadd+0x2d0>
 80011ca:	e6ff      	b.n	8000fcc <__aeabi_dadd+0xd0>
 80011cc:	4a26      	ldr	r2, [pc, #152]	; (8001268 <__aeabi_dadd+0x36c>)
 80011ce:	1a76      	subs	r6, r6, r1
 80011d0:	4017      	ands	r7, r2
 80011d2:	e70d      	b.n	8000ff0 <__aeabi_dadd+0xf4>
 80011d4:	2a00      	cmp	r2, #0
 80011d6:	d02f      	beq.n	8001238 <__aeabi_dadd+0x33c>
 80011d8:	464a      	mov	r2, r9
 80011da:	1b92      	subs	r2, r2, r6
 80011dc:	4694      	mov	ip, r2
 80011de:	2e00      	cmp	r6, #0
 80011e0:	d100      	bne.n	80011e4 <__aeabi_dadd+0x2e8>
 80011e2:	e0ad      	b.n	8001340 <__aeabi_dadd+0x444>
 80011e4:	4a1f      	ldr	r2, [pc, #124]	; (8001264 <__aeabi_dadd+0x368>)
 80011e6:	4591      	cmp	r9, r2
 80011e8:	d100      	bne.n	80011ec <__aeabi_dadd+0x2f0>
 80011ea:	e10f      	b.n	800140c <__aeabi_dadd+0x510>
 80011ec:	2280      	movs	r2, #128	; 0x80
 80011ee:	0412      	lsls	r2, r2, #16
 80011f0:	4310      	orrs	r0, r2
 80011f2:	4662      	mov	r2, ip
 80011f4:	2a38      	cmp	r2, #56	; 0x38
 80011f6:	dd00      	ble.n	80011fa <__aeabi_dadd+0x2fe>
 80011f8:	e10f      	b.n	800141a <__aeabi_dadd+0x51e>
 80011fa:	2a1f      	cmp	r2, #31
 80011fc:	dd00      	ble.n	8001200 <__aeabi_dadd+0x304>
 80011fe:	e180      	b.n	8001502 <__aeabi_dadd+0x606>
 8001200:	4664      	mov	r4, ip
 8001202:	2220      	movs	r2, #32
 8001204:	001e      	movs	r6, r3
 8001206:	1b12      	subs	r2, r2, r4
 8001208:	4667      	mov	r7, ip
 800120a:	0004      	movs	r4, r0
 800120c:	4093      	lsls	r3, r2
 800120e:	4094      	lsls	r4, r2
 8001210:	40fe      	lsrs	r6, r7
 8001212:	1e5a      	subs	r2, r3, #1
 8001214:	4193      	sbcs	r3, r2
 8001216:	40f8      	lsrs	r0, r7
 8001218:	4334      	orrs	r4, r6
 800121a:	431c      	orrs	r4, r3
 800121c:	4480      	add	r8, r0
 800121e:	1864      	adds	r4, r4, r1
 8001220:	428c      	cmp	r4, r1
 8001222:	41bf      	sbcs	r7, r7
 8001224:	427f      	negs	r7, r7
 8001226:	464e      	mov	r6, r9
 8001228:	4447      	add	r7, r8
 800122a:	e7a6      	b.n	800117a <__aeabi_dadd+0x27e>
 800122c:	4642      	mov	r2, r8
 800122e:	430a      	orrs	r2, r1
 8001230:	0011      	movs	r1, r2
 8001232:	1e4a      	subs	r2, r1, #1
 8001234:	4191      	sbcs	r1, r2
 8001236:	e6ad      	b.n	8000f94 <__aeabi_dadd+0x98>
 8001238:	4c0c      	ldr	r4, [pc, #48]	; (800126c <__aeabi_dadd+0x370>)
 800123a:	1c72      	adds	r2, r6, #1
 800123c:	4222      	tst	r2, r4
 800123e:	d000      	beq.n	8001242 <__aeabi_dadd+0x346>
 8001240:	e0a1      	b.n	8001386 <__aeabi_dadd+0x48a>
 8001242:	0002      	movs	r2, r0
 8001244:	431a      	orrs	r2, r3
 8001246:	2e00      	cmp	r6, #0
 8001248:	d000      	beq.n	800124c <__aeabi_dadd+0x350>
 800124a:	e0fa      	b.n	8001442 <__aeabi_dadd+0x546>
 800124c:	2a00      	cmp	r2, #0
 800124e:	d100      	bne.n	8001252 <__aeabi_dadd+0x356>
 8001250:	e145      	b.n	80014de <__aeabi_dadd+0x5e2>
 8001252:	003a      	movs	r2, r7
 8001254:	430a      	orrs	r2, r1
 8001256:	d000      	beq.n	800125a <__aeabi_dadd+0x35e>
 8001258:	e146      	b.n	80014e8 <__aeabi_dadd+0x5ec>
 800125a:	0742      	lsls	r2, r0, #29
 800125c:	08db      	lsrs	r3, r3, #3
 800125e:	4313      	orrs	r3, r2
 8001260:	08c0      	lsrs	r0, r0, #3
 8001262:	e77b      	b.n	800115c <__aeabi_dadd+0x260>
 8001264:	000007ff 	.word	0x000007ff
 8001268:	ff7fffff 	.word	0xff7fffff
 800126c:	000007fe 	.word	0x000007fe
 8001270:	4647      	mov	r7, r8
 8001272:	1a5c      	subs	r4, r3, r1
 8001274:	1bc2      	subs	r2, r0, r7
 8001276:	42a3      	cmp	r3, r4
 8001278:	41bf      	sbcs	r7, r7
 800127a:	427f      	negs	r7, r7
 800127c:	46b9      	mov	r9, r7
 800127e:	0017      	movs	r7, r2
 8001280:	464a      	mov	r2, r9
 8001282:	1abf      	subs	r7, r7, r2
 8001284:	023a      	lsls	r2, r7, #8
 8001286:	d500      	bpl.n	800128a <__aeabi_dadd+0x38e>
 8001288:	e08d      	b.n	80013a6 <__aeabi_dadd+0x4aa>
 800128a:	0023      	movs	r3, r4
 800128c:	433b      	orrs	r3, r7
 800128e:	d000      	beq.n	8001292 <__aeabi_dadd+0x396>
 8001290:	e68a      	b.n	8000fa8 <__aeabi_dadd+0xac>
 8001292:	2000      	movs	r0, #0
 8001294:	2500      	movs	r5, #0
 8001296:	e761      	b.n	800115c <__aeabi_dadd+0x260>
 8001298:	4cb4      	ldr	r4, [pc, #720]	; (800156c <__aeabi_dadd+0x670>)
 800129a:	45a1      	cmp	r9, r4
 800129c:	d100      	bne.n	80012a0 <__aeabi_dadd+0x3a4>
 800129e:	e0ad      	b.n	80013fc <__aeabi_dadd+0x500>
 80012a0:	2480      	movs	r4, #128	; 0x80
 80012a2:	0424      	lsls	r4, r4, #16
 80012a4:	4320      	orrs	r0, r4
 80012a6:	4664      	mov	r4, ip
 80012a8:	2c38      	cmp	r4, #56	; 0x38
 80012aa:	dc3d      	bgt.n	8001328 <__aeabi_dadd+0x42c>
 80012ac:	4662      	mov	r2, ip
 80012ae:	2c1f      	cmp	r4, #31
 80012b0:	dd00      	ble.n	80012b4 <__aeabi_dadd+0x3b8>
 80012b2:	e0b7      	b.n	8001424 <__aeabi_dadd+0x528>
 80012b4:	2520      	movs	r5, #32
 80012b6:	001e      	movs	r6, r3
 80012b8:	1b2d      	subs	r5, r5, r4
 80012ba:	0004      	movs	r4, r0
 80012bc:	40ab      	lsls	r3, r5
 80012be:	40ac      	lsls	r4, r5
 80012c0:	40d6      	lsrs	r6, r2
 80012c2:	40d0      	lsrs	r0, r2
 80012c4:	4642      	mov	r2, r8
 80012c6:	1e5d      	subs	r5, r3, #1
 80012c8:	41ab      	sbcs	r3, r5
 80012ca:	4334      	orrs	r4, r6
 80012cc:	1a12      	subs	r2, r2, r0
 80012ce:	4690      	mov	r8, r2
 80012d0:	4323      	orrs	r3, r4
 80012d2:	e02c      	b.n	800132e <__aeabi_dadd+0x432>
 80012d4:	0742      	lsls	r2, r0, #29
 80012d6:	08db      	lsrs	r3, r3, #3
 80012d8:	4313      	orrs	r3, r2
 80012da:	08c0      	lsrs	r0, r0, #3
 80012dc:	e73b      	b.n	8001156 <__aeabi_dadd+0x25a>
 80012de:	185c      	adds	r4, r3, r1
 80012e0:	429c      	cmp	r4, r3
 80012e2:	419b      	sbcs	r3, r3
 80012e4:	4440      	add	r0, r8
 80012e6:	425b      	negs	r3, r3
 80012e8:	18c7      	adds	r7, r0, r3
 80012ea:	2601      	movs	r6, #1
 80012ec:	023b      	lsls	r3, r7, #8
 80012ee:	d400      	bmi.n	80012f2 <__aeabi_dadd+0x3f6>
 80012f0:	e729      	b.n	8001146 <__aeabi_dadd+0x24a>
 80012f2:	2602      	movs	r6, #2
 80012f4:	4a9e      	ldr	r2, [pc, #632]	; (8001570 <__aeabi_dadd+0x674>)
 80012f6:	0863      	lsrs	r3, r4, #1
 80012f8:	4017      	ands	r7, r2
 80012fa:	2201      	movs	r2, #1
 80012fc:	4014      	ands	r4, r2
 80012fe:	431c      	orrs	r4, r3
 8001300:	07fb      	lsls	r3, r7, #31
 8001302:	431c      	orrs	r4, r3
 8001304:	087f      	lsrs	r7, r7, #1
 8001306:	e673      	b.n	8000ff0 <__aeabi_dadd+0xf4>
 8001308:	4644      	mov	r4, r8
 800130a:	3a20      	subs	r2, #32
 800130c:	40d4      	lsrs	r4, r2
 800130e:	4662      	mov	r2, ip
 8001310:	2a20      	cmp	r2, #32
 8001312:	d005      	beq.n	8001320 <__aeabi_dadd+0x424>
 8001314:	4667      	mov	r7, ip
 8001316:	2240      	movs	r2, #64	; 0x40
 8001318:	1bd2      	subs	r2, r2, r7
 800131a:	4647      	mov	r7, r8
 800131c:	4097      	lsls	r7, r2
 800131e:	4339      	orrs	r1, r7
 8001320:	1e4a      	subs	r2, r1, #1
 8001322:	4191      	sbcs	r1, r2
 8001324:	4321      	orrs	r1, r4
 8001326:	e635      	b.n	8000f94 <__aeabi_dadd+0x98>
 8001328:	4303      	orrs	r3, r0
 800132a:	1e58      	subs	r0, r3, #1
 800132c:	4183      	sbcs	r3, r0
 800132e:	1acc      	subs	r4, r1, r3
 8001330:	42a1      	cmp	r1, r4
 8001332:	41bf      	sbcs	r7, r7
 8001334:	4643      	mov	r3, r8
 8001336:	427f      	negs	r7, r7
 8001338:	4655      	mov	r5, sl
 800133a:	464e      	mov	r6, r9
 800133c:	1bdf      	subs	r7, r3, r7
 800133e:	e62e      	b.n	8000f9e <__aeabi_dadd+0xa2>
 8001340:	0002      	movs	r2, r0
 8001342:	431a      	orrs	r2, r3
 8001344:	d100      	bne.n	8001348 <__aeabi_dadd+0x44c>
 8001346:	e0bd      	b.n	80014c4 <__aeabi_dadd+0x5c8>
 8001348:	4662      	mov	r2, ip
 800134a:	4664      	mov	r4, ip
 800134c:	3a01      	subs	r2, #1
 800134e:	2c01      	cmp	r4, #1
 8001350:	d100      	bne.n	8001354 <__aeabi_dadd+0x458>
 8001352:	e0e5      	b.n	8001520 <__aeabi_dadd+0x624>
 8001354:	4c85      	ldr	r4, [pc, #532]	; (800156c <__aeabi_dadd+0x670>)
 8001356:	45a4      	cmp	ip, r4
 8001358:	d058      	beq.n	800140c <__aeabi_dadd+0x510>
 800135a:	4694      	mov	ip, r2
 800135c:	e749      	b.n	80011f2 <__aeabi_dadd+0x2f6>
 800135e:	4664      	mov	r4, ip
 8001360:	2220      	movs	r2, #32
 8001362:	1b12      	subs	r2, r2, r4
 8001364:	4644      	mov	r4, r8
 8001366:	4094      	lsls	r4, r2
 8001368:	000f      	movs	r7, r1
 800136a:	46a1      	mov	r9, r4
 800136c:	4664      	mov	r4, ip
 800136e:	4091      	lsls	r1, r2
 8001370:	40e7      	lsrs	r7, r4
 8001372:	464c      	mov	r4, r9
 8001374:	1e4a      	subs	r2, r1, #1
 8001376:	4191      	sbcs	r1, r2
 8001378:	433c      	orrs	r4, r7
 800137a:	4642      	mov	r2, r8
 800137c:	430c      	orrs	r4, r1
 800137e:	4661      	mov	r1, ip
 8001380:	40ca      	lsrs	r2, r1
 8001382:	1880      	adds	r0, r0, r2
 8001384:	e6f4      	b.n	8001170 <__aeabi_dadd+0x274>
 8001386:	4c79      	ldr	r4, [pc, #484]	; (800156c <__aeabi_dadd+0x670>)
 8001388:	42a2      	cmp	r2, r4
 800138a:	d100      	bne.n	800138e <__aeabi_dadd+0x492>
 800138c:	e6fd      	b.n	800118a <__aeabi_dadd+0x28e>
 800138e:	1859      	adds	r1, r3, r1
 8001390:	4299      	cmp	r1, r3
 8001392:	419b      	sbcs	r3, r3
 8001394:	4440      	add	r0, r8
 8001396:	425f      	negs	r7, r3
 8001398:	19c7      	adds	r7, r0, r7
 800139a:	07fc      	lsls	r4, r7, #31
 800139c:	0849      	lsrs	r1, r1, #1
 800139e:	0016      	movs	r6, r2
 80013a0:	430c      	orrs	r4, r1
 80013a2:	087f      	lsrs	r7, r7, #1
 80013a4:	e6cf      	b.n	8001146 <__aeabi_dadd+0x24a>
 80013a6:	1acc      	subs	r4, r1, r3
 80013a8:	42a1      	cmp	r1, r4
 80013aa:	41bf      	sbcs	r7, r7
 80013ac:	4643      	mov	r3, r8
 80013ae:	427f      	negs	r7, r7
 80013b0:	1a18      	subs	r0, r3, r0
 80013b2:	4655      	mov	r5, sl
 80013b4:	1bc7      	subs	r7, r0, r7
 80013b6:	e5f7      	b.n	8000fa8 <__aeabi_dadd+0xac>
 80013b8:	08c9      	lsrs	r1, r1, #3
 80013ba:	077b      	lsls	r3, r7, #29
 80013bc:	4655      	mov	r5, sl
 80013be:	430b      	orrs	r3, r1
 80013c0:	08f8      	lsrs	r0, r7, #3
 80013c2:	e6c8      	b.n	8001156 <__aeabi_dadd+0x25a>
 80013c4:	2c00      	cmp	r4, #0
 80013c6:	d000      	beq.n	80013ca <__aeabi_dadd+0x4ce>
 80013c8:	e081      	b.n	80014ce <__aeabi_dadd+0x5d2>
 80013ca:	4643      	mov	r3, r8
 80013cc:	430b      	orrs	r3, r1
 80013ce:	d115      	bne.n	80013fc <__aeabi_dadd+0x500>
 80013d0:	2080      	movs	r0, #128	; 0x80
 80013d2:	2500      	movs	r5, #0
 80013d4:	0300      	lsls	r0, r0, #12
 80013d6:	e6e3      	b.n	80011a0 <__aeabi_dadd+0x2a4>
 80013d8:	1a5c      	subs	r4, r3, r1
 80013da:	42a3      	cmp	r3, r4
 80013dc:	419b      	sbcs	r3, r3
 80013de:	1bc7      	subs	r7, r0, r7
 80013e0:	425b      	negs	r3, r3
 80013e2:	2601      	movs	r6, #1
 80013e4:	1aff      	subs	r7, r7, r3
 80013e6:	e5da      	b.n	8000f9e <__aeabi_dadd+0xa2>
 80013e8:	0742      	lsls	r2, r0, #29
 80013ea:	08db      	lsrs	r3, r3, #3
 80013ec:	4313      	orrs	r3, r2
 80013ee:	08c0      	lsrs	r0, r0, #3
 80013f0:	e6d2      	b.n	8001198 <__aeabi_dadd+0x29c>
 80013f2:	0742      	lsls	r2, r0, #29
 80013f4:	08db      	lsrs	r3, r3, #3
 80013f6:	4313      	orrs	r3, r2
 80013f8:	08c0      	lsrs	r0, r0, #3
 80013fa:	e6ac      	b.n	8001156 <__aeabi_dadd+0x25a>
 80013fc:	4643      	mov	r3, r8
 80013fe:	4642      	mov	r2, r8
 8001400:	08c9      	lsrs	r1, r1, #3
 8001402:	075b      	lsls	r3, r3, #29
 8001404:	4655      	mov	r5, sl
 8001406:	430b      	orrs	r3, r1
 8001408:	08d0      	lsrs	r0, r2, #3
 800140a:	e6c5      	b.n	8001198 <__aeabi_dadd+0x29c>
 800140c:	4643      	mov	r3, r8
 800140e:	4642      	mov	r2, r8
 8001410:	075b      	lsls	r3, r3, #29
 8001412:	08c9      	lsrs	r1, r1, #3
 8001414:	430b      	orrs	r3, r1
 8001416:	08d0      	lsrs	r0, r2, #3
 8001418:	e6be      	b.n	8001198 <__aeabi_dadd+0x29c>
 800141a:	4303      	orrs	r3, r0
 800141c:	001c      	movs	r4, r3
 800141e:	1e63      	subs	r3, r4, #1
 8001420:	419c      	sbcs	r4, r3
 8001422:	e6fc      	b.n	800121e <__aeabi_dadd+0x322>
 8001424:	0002      	movs	r2, r0
 8001426:	3c20      	subs	r4, #32
 8001428:	40e2      	lsrs	r2, r4
 800142a:	0014      	movs	r4, r2
 800142c:	4662      	mov	r2, ip
 800142e:	2a20      	cmp	r2, #32
 8001430:	d003      	beq.n	800143a <__aeabi_dadd+0x53e>
 8001432:	2540      	movs	r5, #64	; 0x40
 8001434:	1aad      	subs	r5, r5, r2
 8001436:	40a8      	lsls	r0, r5
 8001438:	4303      	orrs	r3, r0
 800143a:	1e58      	subs	r0, r3, #1
 800143c:	4183      	sbcs	r3, r0
 800143e:	4323      	orrs	r3, r4
 8001440:	e775      	b.n	800132e <__aeabi_dadd+0x432>
 8001442:	2a00      	cmp	r2, #0
 8001444:	d0e2      	beq.n	800140c <__aeabi_dadd+0x510>
 8001446:	003a      	movs	r2, r7
 8001448:	430a      	orrs	r2, r1
 800144a:	d0cd      	beq.n	80013e8 <__aeabi_dadd+0x4ec>
 800144c:	0742      	lsls	r2, r0, #29
 800144e:	08db      	lsrs	r3, r3, #3
 8001450:	4313      	orrs	r3, r2
 8001452:	2280      	movs	r2, #128	; 0x80
 8001454:	08c0      	lsrs	r0, r0, #3
 8001456:	0312      	lsls	r2, r2, #12
 8001458:	4210      	tst	r0, r2
 800145a:	d006      	beq.n	800146a <__aeabi_dadd+0x56e>
 800145c:	08fc      	lsrs	r4, r7, #3
 800145e:	4214      	tst	r4, r2
 8001460:	d103      	bne.n	800146a <__aeabi_dadd+0x56e>
 8001462:	0020      	movs	r0, r4
 8001464:	08cb      	lsrs	r3, r1, #3
 8001466:	077a      	lsls	r2, r7, #29
 8001468:	4313      	orrs	r3, r2
 800146a:	0f5a      	lsrs	r2, r3, #29
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	0752      	lsls	r2, r2, #29
 8001470:	08db      	lsrs	r3, r3, #3
 8001472:	4313      	orrs	r3, r2
 8001474:	e690      	b.n	8001198 <__aeabi_dadd+0x29c>
 8001476:	4643      	mov	r3, r8
 8001478:	430b      	orrs	r3, r1
 800147a:	d100      	bne.n	800147e <__aeabi_dadd+0x582>
 800147c:	e709      	b.n	8001292 <__aeabi_dadd+0x396>
 800147e:	4643      	mov	r3, r8
 8001480:	4642      	mov	r2, r8
 8001482:	08c9      	lsrs	r1, r1, #3
 8001484:	075b      	lsls	r3, r3, #29
 8001486:	4655      	mov	r5, sl
 8001488:	430b      	orrs	r3, r1
 800148a:	08d0      	lsrs	r0, r2, #3
 800148c:	e666      	b.n	800115c <__aeabi_dadd+0x260>
 800148e:	1acc      	subs	r4, r1, r3
 8001490:	42a1      	cmp	r1, r4
 8001492:	4189      	sbcs	r1, r1
 8001494:	1a3f      	subs	r7, r7, r0
 8001496:	4249      	negs	r1, r1
 8001498:	4655      	mov	r5, sl
 800149a:	2601      	movs	r6, #1
 800149c:	1a7f      	subs	r7, r7, r1
 800149e:	e57e      	b.n	8000f9e <__aeabi_dadd+0xa2>
 80014a0:	4642      	mov	r2, r8
 80014a2:	1a5c      	subs	r4, r3, r1
 80014a4:	1a87      	subs	r7, r0, r2
 80014a6:	42a3      	cmp	r3, r4
 80014a8:	4192      	sbcs	r2, r2
 80014aa:	4252      	negs	r2, r2
 80014ac:	1abf      	subs	r7, r7, r2
 80014ae:	023a      	lsls	r2, r7, #8
 80014b0:	d53d      	bpl.n	800152e <__aeabi_dadd+0x632>
 80014b2:	1acc      	subs	r4, r1, r3
 80014b4:	42a1      	cmp	r1, r4
 80014b6:	4189      	sbcs	r1, r1
 80014b8:	4643      	mov	r3, r8
 80014ba:	4249      	negs	r1, r1
 80014bc:	1a1f      	subs	r7, r3, r0
 80014be:	4655      	mov	r5, sl
 80014c0:	1a7f      	subs	r7, r7, r1
 80014c2:	e595      	b.n	8000ff0 <__aeabi_dadd+0xf4>
 80014c4:	077b      	lsls	r3, r7, #29
 80014c6:	08c9      	lsrs	r1, r1, #3
 80014c8:	430b      	orrs	r3, r1
 80014ca:	08f8      	lsrs	r0, r7, #3
 80014cc:	e643      	b.n	8001156 <__aeabi_dadd+0x25a>
 80014ce:	4644      	mov	r4, r8
 80014d0:	08db      	lsrs	r3, r3, #3
 80014d2:	430c      	orrs	r4, r1
 80014d4:	d130      	bne.n	8001538 <__aeabi_dadd+0x63c>
 80014d6:	0742      	lsls	r2, r0, #29
 80014d8:	4313      	orrs	r3, r2
 80014da:	08c0      	lsrs	r0, r0, #3
 80014dc:	e65c      	b.n	8001198 <__aeabi_dadd+0x29c>
 80014de:	077b      	lsls	r3, r7, #29
 80014e0:	08c9      	lsrs	r1, r1, #3
 80014e2:	430b      	orrs	r3, r1
 80014e4:	08f8      	lsrs	r0, r7, #3
 80014e6:	e639      	b.n	800115c <__aeabi_dadd+0x260>
 80014e8:	185c      	adds	r4, r3, r1
 80014ea:	429c      	cmp	r4, r3
 80014ec:	419b      	sbcs	r3, r3
 80014ee:	4440      	add	r0, r8
 80014f0:	425b      	negs	r3, r3
 80014f2:	18c7      	adds	r7, r0, r3
 80014f4:	023b      	lsls	r3, r7, #8
 80014f6:	d400      	bmi.n	80014fa <__aeabi_dadd+0x5fe>
 80014f8:	e625      	b.n	8001146 <__aeabi_dadd+0x24a>
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <__aeabi_dadd+0x674>)
 80014fc:	2601      	movs	r6, #1
 80014fe:	401f      	ands	r7, r3
 8001500:	e621      	b.n	8001146 <__aeabi_dadd+0x24a>
 8001502:	0004      	movs	r4, r0
 8001504:	3a20      	subs	r2, #32
 8001506:	40d4      	lsrs	r4, r2
 8001508:	4662      	mov	r2, ip
 800150a:	2a20      	cmp	r2, #32
 800150c:	d004      	beq.n	8001518 <__aeabi_dadd+0x61c>
 800150e:	2240      	movs	r2, #64	; 0x40
 8001510:	4666      	mov	r6, ip
 8001512:	1b92      	subs	r2, r2, r6
 8001514:	4090      	lsls	r0, r2
 8001516:	4303      	orrs	r3, r0
 8001518:	1e5a      	subs	r2, r3, #1
 800151a:	4193      	sbcs	r3, r2
 800151c:	431c      	orrs	r4, r3
 800151e:	e67e      	b.n	800121e <__aeabi_dadd+0x322>
 8001520:	185c      	adds	r4, r3, r1
 8001522:	428c      	cmp	r4, r1
 8001524:	4189      	sbcs	r1, r1
 8001526:	4440      	add	r0, r8
 8001528:	4249      	negs	r1, r1
 800152a:	1847      	adds	r7, r0, r1
 800152c:	e6dd      	b.n	80012ea <__aeabi_dadd+0x3ee>
 800152e:	0023      	movs	r3, r4
 8001530:	433b      	orrs	r3, r7
 8001532:	d100      	bne.n	8001536 <__aeabi_dadd+0x63a>
 8001534:	e6ad      	b.n	8001292 <__aeabi_dadd+0x396>
 8001536:	e606      	b.n	8001146 <__aeabi_dadd+0x24a>
 8001538:	0744      	lsls	r4, r0, #29
 800153a:	4323      	orrs	r3, r4
 800153c:	2480      	movs	r4, #128	; 0x80
 800153e:	08c0      	lsrs	r0, r0, #3
 8001540:	0324      	lsls	r4, r4, #12
 8001542:	4220      	tst	r0, r4
 8001544:	d008      	beq.n	8001558 <__aeabi_dadd+0x65c>
 8001546:	4642      	mov	r2, r8
 8001548:	08d6      	lsrs	r6, r2, #3
 800154a:	4226      	tst	r6, r4
 800154c:	d104      	bne.n	8001558 <__aeabi_dadd+0x65c>
 800154e:	4655      	mov	r5, sl
 8001550:	0030      	movs	r0, r6
 8001552:	08cb      	lsrs	r3, r1, #3
 8001554:	0751      	lsls	r1, r2, #29
 8001556:	430b      	orrs	r3, r1
 8001558:	0f5a      	lsrs	r2, r3, #29
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	08db      	lsrs	r3, r3, #3
 800155e:	0752      	lsls	r2, r2, #29
 8001560:	4313      	orrs	r3, r2
 8001562:	e619      	b.n	8001198 <__aeabi_dadd+0x29c>
 8001564:	2300      	movs	r3, #0
 8001566:	4a01      	ldr	r2, [pc, #4]	; (800156c <__aeabi_dadd+0x670>)
 8001568:	001f      	movs	r7, r3
 800156a:	e55e      	b.n	800102a <__aeabi_dadd+0x12e>
 800156c:	000007ff 	.word	0x000007ff
 8001570:	ff7fffff 	.word	0xff7fffff

08001574 <__aeabi_ddiv>:
 8001574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001576:	4657      	mov	r7, sl
 8001578:	464e      	mov	r6, r9
 800157a:	4645      	mov	r5, r8
 800157c:	46de      	mov	lr, fp
 800157e:	b5e0      	push	{r5, r6, r7, lr}
 8001580:	4681      	mov	r9, r0
 8001582:	0005      	movs	r5, r0
 8001584:	030c      	lsls	r4, r1, #12
 8001586:	0048      	lsls	r0, r1, #1
 8001588:	4692      	mov	sl, r2
 800158a:	001f      	movs	r7, r3
 800158c:	b085      	sub	sp, #20
 800158e:	0b24      	lsrs	r4, r4, #12
 8001590:	0d40      	lsrs	r0, r0, #21
 8001592:	0fce      	lsrs	r6, r1, #31
 8001594:	2800      	cmp	r0, #0
 8001596:	d100      	bne.n	800159a <__aeabi_ddiv+0x26>
 8001598:	e156      	b.n	8001848 <__aeabi_ddiv+0x2d4>
 800159a:	4bd4      	ldr	r3, [pc, #848]	; (80018ec <__aeabi_ddiv+0x378>)
 800159c:	4298      	cmp	r0, r3
 800159e:	d100      	bne.n	80015a2 <__aeabi_ddiv+0x2e>
 80015a0:	e172      	b.n	8001888 <__aeabi_ddiv+0x314>
 80015a2:	0f6b      	lsrs	r3, r5, #29
 80015a4:	00e4      	lsls	r4, r4, #3
 80015a6:	431c      	orrs	r4, r3
 80015a8:	2380      	movs	r3, #128	; 0x80
 80015aa:	041b      	lsls	r3, r3, #16
 80015ac:	4323      	orrs	r3, r4
 80015ae:	4698      	mov	r8, r3
 80015b0:	4bcf      	ldr	r3, [pc, #828]	; (80018f0 <__aeabi_ddiv+0x37c>)
 80015b2:	00ed      	lsls	r5, r5, #3
 80015b4:	469b      	mov	fp, r3
 80015b6:	2300      	movs	r3, #0
 80015b8:	4699      	mov	r9, r3
 80015ba:	4483      	add	fp, r0
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	033c      	lsls	r4, r7, #12
 80015c0:	007b      	lsls	r3, r7, #1
 80015c2:	4650      	mov	r0, sl
 80015c4:	0b24      	lsrs	r4, r4, #12
 80015c6:	0d5b      	lsrs	r3, r3, #21
 80015c8:	0fff      	lsrs	r7, r7, #31
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d100      	bne.n	80015d0 <__aeabi_ddiv+0x5c>
 80015ce:	e11f      	b.n	8001810 <__aeabi_ddiv+0x29c>
 80015d0:	4ac6      	ldr	r2, [pc, #792]	; (80018ec <__aeabi_ddiv+0x378>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d100      	bne.n	80015d8 <__aeabi_ddiv+0x64>
 80015d6:	e162      	b.n	800189e <__aeabi_ddiv+0x32a>
 80015d8:	49c5      	ldr	r1, [pc, #788]	; (80018f0 <__aeabi_ddiv+0x37c>)
 80015da:	0f42      	lsrs	r2, r0, #29
 80015dc:	468c      	mov	ip, r1
 80015de:	00e4      	lsls	r4, r4, #3
 80015e0:	4659      	mov	r1, fp
 80015e2:	4314      	orrs	r4, r2
 80015e4:	2280      	movs	r2, #128	; 0x80
 80015e6:	4463      	add	r3, ip
 80015e8:	0412      	lsls	r2, r2, #16
 80015ea:	1acb      	subs	r3, r1, r3
 80015ec:	4314      	orrs	r4, r2
 80015ee:	469b      	mov	fp, r3
 80015f0:	00c2      	lsls	r2, r0, #3
 80015f2:	2000      	movs	r0, #0
 80015f4:	0033      	movs	r3, r6
 80015f6:	407b      	eors	r3, r7
 80015f8:	469a      	mov	sl, r3
 80015fa:	464b      	mov	r3, r9
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d827      	bhi.n	8001650 <__aeabi_ddiv+0xdc>
 8001600:	49bc      	ldr	r1, [pc, #752]	; (80018f4 <__aeabi_ddiv+0x380>)
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	58cb      	ldr	r3, [r1, r3]
 8001606:	469f      	mov	pc, r3
 8001608:	46b2      	mov	sl, r6
 800160a:	9b00      	ldr	r3, [sp, #0]
 800160c:	2b02      	cmp	r3, #2
 800160e:	d016      	beq.n	800163e <__aeabi_ddiv+0xca>
 8001610:	2b03      	cmp	r3, #3
 8001612:	d100      	bne.n	8001616 <__aeabi_ddiv+0xa2>
 8001614:	e28e      	b.n	8001b34 <__aeabi_ddiv+0x5c0>
 8001616:	2b01      	cmp	r3, #1
 8001618:	d000      	beq.n	800161c <__aeabi_ddiv+0xa8>
 800161a:	e0d9      	b.n	80017d0 <__aeabi_ddiv+0x25c>
 800161c:	2300      	movs	r3, #0
 800161e:	2400      	movs	r4, #0
 8001620:	2500      	movs	r5, #0
 8001622:	4652      	mov	r2, sl
 8001624:	051b      	lsls	r3, r3, #20
 8001626:	4323      	orrs	r3, r4
 8001628:	07d2      	lsls	r2, r2, #31
 800162a:	4313      	orrs	r3, r2
 800162c:	0028      	movs	r0, r5
 800162e:	0019      	movs	r1, r3
 8001630:	b005      	add	sp, #20
 8001632:	bcf0      	pop	{r4, r5, r6, r7}
 8001634:	46bb      	mov	fp, r7
 8001636:	46b2      	mov	sl, r6
 8001638:	46a9      	mov	r9, r5
 800163a:	46a0      	mov	r8, r4
 800163c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800163e:	2400      	movs	r4, #0
 8001640:	2500      	movs	r5, #0
 8001642:	4baa      	ldr	r3, [pc, #680]	; (80018ec <__aeabi_ddiv+0x378>)
 8001644:	e7ed      	b.n	8001622 <__aeabi_ddiv+0xae>
 8001646:	46ba      	mov	sl, r7
 8001648:	46a0      	mov	r8, r4
 800164a:	0015      	movs	r5, r2
 800164c:	9000      	str	r0, [sp, #0]
 800164e:	e7dc      	b.n	800160a <__aeabi_ddiv+0x96>
 8001650:	4544      	cmp	r4, r8
 8001652:	d200      	bcs.n	8001656 <__aeabi_ddiv+0xe2>
 8001654:	e1c7      	b.n	80019e6 <__aeabi_ddiv+0x472>
 8001656:	d100      	bne.n	800165a <__aeabi_ddiv+0xe6>
 8001658:	e1c2      	b.n	80019e0 <__aeabi_ddiv+0x46c>
 800165a:	2301      	movs	r3, #1
 800165c:	425b      	negs	r3, r3
 800165e:	469c      	mov	ip, r3
 8001660:	002e      	movs	r6, r5
 8001662:	4640      	mov	r0, r8
 8001664:	2500      	movs	r5, #0
 8001666:	44e3      	add	fp, ip
 8001668:	0223      	lsls	r3, r4, #8
 800166a:	0e14      	lsrs	r4, r2, #24
 800166c:	431c      	orrs	r4, r3
 800166e:	0c1b      	lsrs	r3, r3, #16
 8001670:	4699      	mov	r9, r3
 8001672:	0423      	lsls	r3, r4, #16
 8001674:	0c1f      	lsrs	r7, r3, #16
 8001676:	0212      	lsls	r2, r2, #8
 8001678:	4649      	mov	r1, r9
 800167a:	9200      	str	r2, [sp, #0]
 800167c:	9701      	str	r7, [sp, #4]
 800167e:	f7fe fdeb 	bl	8000258 <__aeabi_uidivmod>
 8001682:	0002      	movs	r2, r0
 8001684:	437a      	muls	r2, r7
 8001686:	040b      	lsls	r3, r1, #16
 8001688:	0c31      	lsrs	r1, r6, #16
 800168a:	4680      	mov	r8, r0
 800168c:	4319      	orrs	r1, r3
 800168e:	428a      	cmp	r2, r1
 8001690:	d907      	bls.n	80016a2 <__aeabi_ddiv+0x12e>
 8001692:	2301      	movs	r3, #1
 8001694:	425b      	negs	r3, r3
 8001696:	469c      	mov	ip, r3
 8001698:	1909      	adds	r1, r1, r4
 800169a:	44e0      	add	r8, ip
 800169c:	428c      	cmp	r4, r1
 800169e:	d800      	bhi.n	80016a2 <__aeabi_ddiv+0x12e>
 80016a0:	e207      	b.n	8001ab2 <__aeabi_ddiv+0x53e>
 80016a2:	1a88      	subs	r0, r1, r2
 80016a4:	4649      	mov	r1, r9
 80016a6:	f7fe fdd7 	bl	8000258 <__aeabi_uidivmod>
 80016aa:	0409      	lsls	r1, r1, #16
 80016ac:	468c      	mov	ip, r1
 80016ae:	0431      	lsls	r1, r6, #16
 80016b0:	4666      	mov	r6, ip
 80016b2:	9a01      	ldr	r2, [sp, #4]
 80016b4:	0c09      	lsrs	r1, r1, #16
 80016b6:	4342      	muls	r2, r0
 80016b8:	0003      	movs	r3, r0
 80016ba:	4331      	orrs	r1, r6
 80016bc:	428a      	cmp	r2, r1
 80016be:	d904      	bls.n	80016ca <__aeabi_ddiv+0x156>
 80016c0:	1909      	adds	r1, r1, r4
 80016c2:	3b01      	subs	r3, #1
 80016c4:	428c      	cmp	r4, r1
 80016c6:	d800      	bhi.n	80016ca <__aeabi_ddiv+0x156>
 80016c8:	e1ed      	b.n	8001aa6 <__aeabi_ddiv+0x532>
 80016ca:	1a88      	subs	r0, r1, r2
 80016cc:	4642      	mov	r2, r8
 80016ce:	0412      	lsls	r2, r2, #16
 80016d0:	431a      	orrs	r2, r3
 80016d2:	4690      	mov	r8, r2
 80016d4:	4641      	mov	r1, r8
 80016d6:	9b00      	ldr	r3, [sp, #0]
 80016d8:	040e      	lsls	r6, r1, #16
 80016da:	0c1b      	lsrs	r3, r3, #16
 80016dc:	001f      	movs	r7, r3
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	9b00      	ldr	r3, [sp, #0]
 80016e2:	0c36      	lsrs	r6, r6, #16
 80016e4:	041b      	lsls	r3, r3, #16
 80016e6:	0c19      	lsrs	r1, r3, #16
 80016e8:	000b      	movs	r3, r1
 80016ea:	4373      	muls	r3, r6
 80016ec:	0c12      	lsrs	r2, r2, #16
 80016ee:	437e      	muls	r6, r7
 80016f0:	9103      	str	r1, [sp, #12]
 80016f2:	4351      	muls	r1, r2
 80016f4:	437a      	muls	r2, r7
 80016f6:	0c1f      	lsrs	r7, r3, #16
 80016f8:	46bc      	mov	ip, r7
 80016fa:	1876      	adds	r6, r6, r1
 80016fc:	4466      	add	r6, ip
 80016fe:	42b1      	cmp	r1, r6
 8001700:	d903      	bls.n	800170a <__aeabi_ddiv+0x196>
 8001702:	2180      	movs	r1, #128	; 0x80
 8001704:	0249      	lsls	r1, r1, #9
 8001706:	468c      	mov	ip, r1
 8001708:	4462      	add	r2, ip
 800170a:	0c31      	lsrs	r1, r6, #16
 800170c:	188a      	adds	r2, r1, r2
 800170e:	0431      	lsls	r1, r6, #16
 8001710:	041e      	lsls	r6, r3, #16
 8001712:	0c36      	lsrs	r6, r6, #16
 8001714:	198e      	adds	r6, r1, r6
 8001716:	4290      	cmp	r0, r2
 8001718:	d302      	bcc.n	8001720 <__aeabi_ddiv+0x1ac>
 800171a:	d112      	bne.n	8001742 <__aeabi_ddiv+0x1ce>
 800171c:	42b5      	cmp	r5, r6
 800171e:	d210      	bcs.n	8001742 <__aeabi_ddiv+0x1ce>
 8001720:	4643      	mov	r3, r8
 8001722:	1e59      	subs	r1, r3, #1
 8001724:	9b00      	ldr	r3, [sp, #0]
 8001726:	469c      	mov	ip, r3
 8001728:	4465      	add	r5, ip
 800172a:	001f      	movs	r7, r3
 800172c:	429d      	cmp	r5, r3
 800172e:	419b      	sbcs	r3, r3
 8001730:	425b      	negs	r3, r3
 8001732:	191b      	adds	r3, r3, r4
 8001734:	18c0      	adds	r0, r0, r3
 8001736:	4284      	cmp	r4, r0
 8001738:	d200      	bcs.n	800173c <__aeabi_ddiv+0x1c8>
 800173a:	e1a0      	b.n	8001a7e <__aeabi_ddiv+0x50a>
 800173c:	d100      	bne.n	8001740 <__aeabi_ddiv+0x1cc>
 800173e:	e19b      	b.n	8001a78 <__aeabi_ddiv+0x504>
 8001740:	4688      	mov	r8, r1
 8001742:	1bae      	subs	r6, r5, r6
 8001744:	42b5      	cmp	r5, r6
 8001746:	41ad      	sbcs	r5, r5
 8001748:	1a80      	subs	r0, r0, r2
 800174a:	426d      	negs	r5, r5
 800174c:	1b40      	subs	r0, r0, r5
 800174e:	4284      	cmp	r4, r0
 8001750:	d100      	bne.n	8001754 <__aeabi_ddiv+0x1e0>
 8001752:	e1d5      	b.n	8001b00 <__aeabi_ddiv+0x58c>
 8001754:	4649      	mov	r1, r9
 8001756:	f7fe fd7f 	bl	8000258 <__aeabi_uidivmod>
 800175a:	9a01      	ldr	r2, [sp, #4]
 800175c:	040b      	lsls	r3, r1, #16
 800175e:	4342      	muls	r2, r0
 8001760:	0c31      	lsrs	r1, r6, #16
 8001762:	0005      	movs	r5, r0
 8001764:	4319      	orrs	r1, r3
 8001766:	428a      	cmp	r2, r1
 8001768:	d900      	bls.n	800176c <__aeabi_ddiv+0x1f8>
 800176a:	e16c      	b.n	8001a46 <__aeabi_ddiv+0x4d2>
 800176c:	1a88      	subs	r0, r1, r2
 800176e:	4649      	mov	r1, r9
 8001770:	f7fe fd72 	bl	8000258 <__aeabi_uidivmod>
 8001774:	9a01      	ldr	r2, [sp, #4]
 8001776:	0436      	lsls	r6, r6, #16
 8001778:	4342      	muls	r2, r0
 800177a:	0409      	lsls	r1, r1, #16
 800177c:	0c36      	lsrs	r6, r6, #16
 800177e:	0003      	movs	r3, r0
 8001780:	430e      	orrs	r6, r1
 8001782:	42b2      	cmp	r2, r6
 8001784:	d900      	bls.n	8001788 <__aeabi_ddiv+0x214>
 8001786:	e153      	b.n	8001a30 <__aeabi_ddiv+0x4bc>
 8001788:	9803      	ldr	r0, [sp, #12]
 800178a:	1ab6      	subs	r6, r6, r2
 800178c:	0002      	movs	r2, r0
 800178e:	042d      	lsls	r5, r5, #16
 8001790:	431d      	orrs	r5, r3
 8001792:	9f02      	ldr	r7, [sp, #8]
 8001794:	042b      	lsls	r3, r5, #16
 8001796:	0c1b      	lsrs	r3, r3, #16
 8001798:	435a      	muls	r2, r3
 800179a:	437b      	muls	r3, r7
 800179c:	469c      	mov	ip, r3
 800179e:	0c29      	lsrs	r1, r5, #16
 80017a0:	4348      	muls	r0, r1
 80017a2:	0c13      	lsrs	r3, r2, #16
 80017a4:	4484      	add	ip, r0
 80017a6:	4463      	add	r3, ip
 80017a8:	4379      	muls	r1, r7
 80017aa:	4298      	cmp	r0, r3
 80017ac:	d903      	bls.n	80017b6 <__aeabi_ddiv+0x242>
 80017ae:	2080      	movs	r0, #128	; 0x80
 80017b0:	0240      	lsls	r0, r0, #9
 80017b2:	4684      	mov	ip, r0
 80017b4:	4461      	add	r1, ip
 80017b6:	0c18      	lsrs	r0, r3, #16
 80017b8:	0412      	lsls	r2, r2, #16
 80017ba:	041b      	lsls	r3, r3, #16
 80017bc:	0c12      	lsrs	r2, r2, #16
 80017be:	1841      	adds	r1, r0, r1
 80017c0:	189b      	adds	r3, r3, r2
 80017c2:	428e      	cmp	r6, r1
 80017c4:	d200      	bcs.n	80017c8 <__aeabi_ddiv+0x254>
 80017c6:	e0ff      	b.n	80019c8 <__aeabi_ddiv+0x454>
 80017c8:	d100      	bne.n	80017cc <__aeabi_ddiv+0x258>
 80017ca:	e0fa      	b.n	80019c2 <__aeabi_ddiv+0x44e>
 80017cc:	2301      	movs	r3, #1
 80017ce:	431d      	orrs	r5, r3
 80017d0:	4a49      	ldr	r2, [pc, #292]	; (80018f8 <__aeabi_ddiv+0x384>)
 80017d2:	445a      	add	r2, fp
 80017d4:	2a00      	cmp	r2, #0
 80017d6:	dc00      	bgt.n	80017da <__aeabi_ddiv+0x266>
 80017d8:	e0aa      	b.n	8001930 <__aeabi_ddiv+0x3bc>
 80017da:	076b      	lsls	r3, r5, #29
 80017dc:	d000      	beq.n	80017e0 <__aeabi_ddiv+0x26c>
 80017de:	e13d      	b.n	8001a5c <__aeabi_ddiv+0x4e8>
 80017e0:	08ed      	lsrs	r5, r5, #3
 80017e2:	4643      	mov	r3, r8
 80017e4:	01db      	lsls	r3, r3, #7
 80017e6:	d506      	bpl.n	80017f6 <__aeabi_ddiv+0x282>
 80017e8:	4642      	mov	r2, r8
 80017ea:	4b44      	ldr	r3, [pc, #272]	; (80018fc <__aeabi_ddiv+0x388>)
 80017ec:	401a      	ands	r2, r3
 80017ee:	4690      	mov	r8, r2
 80017f0:	2280      	movs	r2, #128	; 0x80
 80017f2:	00d2      	lsls	r2, r2, #3
 80017f4:	445a      	add	r2, fp
 80017f6:	4b42      	ldr	r3, [pc, #264]	; (8001900 <__aeabi_ddiv+0x38c>)
 80017f8:	429a      	cmp	r2, r3
 80017fa:	dd00      	ble.n	80017fe <__aeabi_ddiv+0x28a>
 80017fc:	e71f      	b.n	800163e <__aeabi_ddiv+0xca>
 80017fe:	4643      	mov	r3, r8
 8001800:	075b      	lsls	r3, r3, #29
 8001802:	431d      	orrs	r5, r3
 8001804:	4643      	mov	r3, r8
 8001806:	0552      	lsls	r2, r2, #21
 8001808:	025c      	lsls	r4, r3, #9
 800180a:	0b24      	lsrs	r4, r4, #12
 800180c:	0d53      	lsrs	r3, r2, #21
 800180e:	e708      	b.n	8001622 <__aeabi_ddiv+0xae>
 8001810:	4652      	mov	r2, sl
 8001812:	4322      	orrs	r2, r4
 8001814:	d100      	bne.n	8001818 <__aeabi_ddiv+0x2a4>
 8001816:	e07b      	b.n	8001910 <__aeabi_ddiv+0x39c>
 8001818:	2c00      	cmp	r4, #0
 800181a:	d100      	bne.n	800181e <__aeabi_ddiv+0x2aa>
 800181c:	e0fa      	b.n	8001a14 <__aeabi_ddiv+0x4a0>
 800181e:	0020      	movs	r0, r4
 8001820:	f001 fa22 	bl	8002c68 <__clzsi2>
 8001824:	0002      	movs	r2, r0
 8001826:	3a0b      	subs	r2, #11
 8001828:	231d      	movs	r3, #29
 800182a:	0001      	movs	r1, r0
 800182c:	1a9b      	subs	r3, r3, r2
 800182e:	4652      	mov	r2, sl
 8001830:	3908      	subs	r1, #8
 8001832:	40da      	lsrs	r2, r3
 8001834:	408c      	lsls	r4, r1
 8001836:	4314      	orrs	r4, r2
 8001838:	4652      	mov	r2, sl
 800183a:	408a      	lsls	r2, r1
 800183c:	4b31      	ldr	r3, [pc, #196]	; (8001904 <__aeabi_ddiv+0x390>)
 800183e:	4458      	add	r0, fp
 8001840:	469b      	mov	fp, r3
 8001842:	4483      	add	fp, r0
 8001844:	2000      	movs	r0, #0
 8001846:	e6d5      	b.n	80015f4 <__aeabi_ddiv+0x80>
 8001848:	464b      	mov	r3, r9
 800184a:	4323      	orrs	r3, r4
 800184c:	4698      	mov	r8, r3
 800184e:	d044      	beq.n	80018da <__aeabi_ddiv+0x366>
 8001850:	2c00      	cmp	r4, #0
 8001852:	d100      	bne.n	8001856 <__aeabi_ddiv+0x2e2>
 8001854:	e0ce      	b.n	80019f4 <__aeabi_ddiv+0x480>
 8001856:	0020      	movs	r0, r4
 8001858:	f001 fa06 	bl	8002c68 <__clzsi2>
 800185c:	0001      	movs	r1, r0
 800185e:	0002      	movs	r2, r0
 8001860:	390b      	subs	r1, #11
 8001862:	231d      	movs	r3, #29
 8001864:	1a5b      	subs	r3, r3, r1
 8001866:	4649      	mov	r1, r9
 8001868:	0010      	movs	r0, r2
 800186a:	40d9      	lsrs	r1, r3
 800186c:	3808      	subs	r0, #8
 800186e:	4084      	lsls	r4, r0
 8001870:	000b      	movs	r3, r1
 8001872:	464d      	mov	r5, r9
 8001874:	4323      	orrs	r3, r4
 8001876:	4698      	mov	r8, r3
 8001878:	4085      	lsls	r5, r0
 800187a:	4823      	ldr	r0, [pc, #140]	; (8001908 <__aeabi_ddiv+0x394>)
 800187c:	1a83      	subs	r3, r0, r2
 800187e:	469b      	mov	fp, r3
 8001880:	2300      	movs	r3, #0
 8001882:	4699      	mov	r9, r3
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	e69a      	b.n	80015be <__aeabi_ddiv+0x4a>
 8001888:	464b      	mov	r3, r9
 800188a:	4323      	orrs	r3, r4
 800188c:	4698      	mov	r8, r3
 800188e:	d11d      	bne.n	80018cc <__aeabi_ddiv+0x358>
 8001890:	2308      	movs	r3, #8
 8001892:	4699      	mov	r9, r3
 8001894:	3b06      	subs	r3, #6
 8001896:	2500      	movs	r5, #0
 8001898:	4683      	mov	fp, r0
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	e68f      	b.n	80015be <__aeabi_ddiv+0x4a>
 800189e:	4652      	mov	r2, sl
 80018a0:	4322      	orrs	r2, r4
 80018a2:	d109      	bne.n	80018b8 <__aeabi_ddiv+0x344>
 80018a4:	2302      	movs	r3, #2
 80018a6:	4649      	mov	r1, r9
 80018a8:	4319      	orrs	r1, r3
 80018aa:	4b18      	ldr	r3, [pc, #96]	; (800190c <__aeabi_ddiv+0x398>)
 80018ac:	4689      	mov	r9, r1
 80018ae:	469c      	mov	ip, r3
 80018b0:	2400      	movs	r4, #0
 80018b2:	2002      	movs	r0, #2
 80018b4:	44e3      	add	fp, ip
 80018b6:	e69d      	b.n	80015f4 <__aeabi_ddiv+0x80>
 80018b8:	2303      	movs	r3, #3
 80018ba:	464a      	mov	r2, r9
 80018bc:	431a      	orrs	r2, r3
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <__aeabi_ddiv+0x398>)
 80018c0:	4691      	mov	r9, r2
 80018c2:	469c      	mov	ip, r3
 80018c4:	4652      	mov	r2, sl
 80018c6:	2003      	movs	r0, #3
 80018c8:	44e3      	add	fp, ip
 80018ca:	e693      	b.n	80015f4 <__aeabi_ddiv+0x80>
 80018cc:	230c      	movs	r3, #12
 80018ce:	4699      	mov	r9, r3
 80018d0:	3b09      	subs	r3, #9
 80018d2:	46a0      	mov	r8, r4
 80018d4:	4683      	mov	fp, r0
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	e671      	b.n	80015be <__aeabi_ddiv+0x4a>
 80018da:	2304      	movs	r3, #4
 80018dc:	4699      	mov	r9, r3
 80018de:	2300      	movs	r3, #0
 80018e0:	469b      	mov	fp, r3
 80018e2:	3301      	adds	r3, #1
 80018e4:	2500      	movs	r5, #0
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	e669      	b.n	80015be <__aeabi_ddiv+0x4a>
 80018ea:	46c0      	nop			; (mov r8, r8)
 80018ec:	000007ff 	.word	0x000007ff
 80018f0:	fffffc01 	.word	0xfffffc01
 80018f4:	08015dec 	.word	0x08015dec
 80018f8:	000003ff 	.word	0x000003ff
 80018fc:	feffffff 	.word	0xfeffffff
 8001900:	000007fe 	.word	0x000007fe
 8001904:	000003f3 	.word	0x000003f3
 8001908:	fffffc0d 	.word	0xfffffc0d
 800190c:	fffff801 	.word	0xfffff801
 8001910:	4649      	mov	r1, r9
 8001912:	2301      	movs	r3, #1
 8001914:	4319      	orrs	r1, r3
 8001916:	4689      	mov	r9, r1
 8001918:	2400      	movs	r4, #0
 800191a:	2001      	movs	r0, #1
 800191c:	e66a      	b.n	80015f4 <__aeabi_ddiv+0x80>
 800191e:	2300      	movs	r3, #0
 8001920:	2480      	movs	r4, #128	; 0x80
 8001922:	469a      	mov	sl, r3
 8001924:	2500      	movs	r5, #0
 8001926:	4b8a      	ldr	r3, [pc, #552]	; (8001b50 <__aeabi_ddiv+0x5dc>)
 8001928:	0324      	lsls	r4, r4, #12
 800192a:	e67a      	b.n	8001622 <__aeabi_ddiv+0xae>
 800192c:	2501      	movs	r5, #1
 800192e:	426d      	negs	r5, r5
 8001930:	2301      	movs	r3, #1
 8001932:	1a9b      	subs	r3, r3, r2
 8001934:	2b38      	cmp	r3, #56	; 0x38
 8001936:	dd00      	ble.n	800193a <__aeabi_ddiv+0x3c6>
 8001938:	e670      	b.n	800161c <__aeabi_ddiv+0xa8>
 800193a:	2b1f      	cmp	r3, #31
 800193c:	dc00      	bgt.n	8001940 <__aeabi_ddiv+0x3cc>
 800193e:	e0bf      	b.n	8001ac0 <__aeabi_ddiv+0x54c>
 8001940:	211f      	movs	r1, #31
 8001942:	4249      	negs	r1, r1
 8001944:	1a8a      	subs	r2, r1, r2
 8001946:	4641      	mov	r1, r8
 8001948:	40d1      	lsrs	r1, r2
 800194a:	000a      	movs	r2, r1
 800194c:	2b20      	cmp	r3, #32
 800194e:	d004      	beq.n	800195a <__aeabi_ddiv+0x3e6>
 8001950:	4641      	mov	r1, r8
 8001952:	4b80      	ldr	r3, [pc, #512]	; (8001b54 <__aeabi_ddiv+0x5e0>)
 8001954:	445b      	add	r3, fp
 8001956:	4099      	lsls	r1, r3
 8001958:	430d      	orrs	r5, r1
 800195a:	1e6b      	subs	r3, r5, #1
 800195c:	419d      	sbcs	r5, r3
 800195e:	2307      	movs	r3, #7
 8001960:	432a      	orrs	r2, r5
 8001962:	001d      	movs	r5, r3
 8001964:	2400      	movs	r4, #0
 8001966:	4015      	ands	r5, r2
 8001968:	4213      	tst	r3, r2
 800196a:	d100      	bne.n	800196e <__aeabi_ddiv+0x3fa>
 800196c:	e0d4      	b.n	8001b18 <__aeabi_ddiv+0x5a4>
 800196e:	210f      	movs	r1, #15
 8001970:	2300      	movs	r3, #0
 8001972:	4011      	ands	r1, r2
 8001974:	2904      	cmp	r1, #4
 8001976:	d100      	bne.n	800197a <__aeabi_ddiv+0x406>
 8001978:	e0cb      	b.n	8001b12 <__aeabi_ddiv+0x59e>
 800197a:	1d11      	adds	r1, r2, #4
 800197c:	4291      	cmp	r1, r2
 800197e:	4192      	sbcs	r2, r2
 8001980:	4252      	negs	r2, r2
 8001982:	189b      	adds	r3, r3, r2
 8001984:	000a      	movs	r2, r1
 8001986:	0219      	lsls	r1, r3, #8
 8001988:	d400      	bmi.n	800198c <__aeabi_ddiv+0x418>
 800198a:	e0c2      	b.n	8001b12 <__aeabi_ddiv+0x59e>
 800198c:	2301      	movs	r3, #1
 800198e:	2400      	movs	r4, #0
 8001990:	2500      	movs	r5, #0
 8001992:	e646      	b.n	8001622 <__aeabi_ddiv+0xae>
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	4641      	mov	r1, r8
 8001998:	031b      	lsls	r3, r3, #12
 800199a:	4219      	tst	r1, r3
 800199c:	d008      	beq.n	80019b0 <__aeabi_ddiv+0x43c>
 800199e:	421c      	tst	r4, r3
 80019a0:	d106      	bne.n	80019b0 <__aeabi_ddiv+0x43c>
 80019a2:	431c      	orrs	r4, r3
 80019a4:	0324      	lsls	r4, r4, #12
 80019a6:	46ba      	mov	sl, r7
 80019a8:	0015      	movs	r5, r2
 80019aa:	4b69      	ldr	r3, [pc, #420]	; (8001b50 <__aeabi_ddiv+0x5dc>)
 80019ac:	0b24      	lsrs	r4, r4, #12
 80019ae:	e638      	b.n	8001622 <__aeabi_ddiv+0xae>
 80019b0:	2480      	movs	r4, #128	; 0x80
 80019b2:	4643      	mov	r3, r8
 80019b4:	0324      	lsls	r4, r4, #12
 80019b6:	431c      	orrs	r4, r3
 80019b8:	0324      	lsls	r4, r4, #12
 80019ba:	46b2      	mov	sl, r6
 80019bc:	4b64      	ldr	r3, [pc, #400]	; (8001b50 <__aeabi_ddiv+0x5dc>)
 80019be:	0b24      	lsrs	r4, r4, #12
 80019c0:	e62f      	b.n	8001622 <__aeabi_ddiv+0xae>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d100      	bne.n	80019c8 <__aeabi_ddiv+0x454>
 80019c6:	e703      	b.n	80017d0 <__aeabi_ddiv+0x25c>
 80019c8:	19a6      	adds	r6, r4, r6
 80019ca:	1e68      	subs	r0, r5, #1
 80019cc:	42a6      	cmp	r6, r4
 80019ce:	d200      	bcs.n	80019d2 <__aeabi_ddiv+0x45e>
 80019d0:	e08d      	b.n	8001aee <__aeabi_ddiv+0x57a>
 80019d2:	428e      	cmp	r6, r1
 80019d4:	d200      	bcs.n	80019d8 <__aeabi_ddiv+0x464>
 80019d6:	e0a3      	b.n	8001b20 <__aeabi_ddiv+0x5ac>
 80019d8:	d100      	bne.n	80019dc <__aeabi_ddiv+0x468>
 80019da:	e0b3      	b.n	8001b44 <__aeabi_ddiv+0x5d0>
 80019dc:	0005      	movs	r5, r0
 80019de:	e6f5      	b.n	80017cc <__aeabi_ddiv+0x258>
 80019e0:	42aa      	cmp	r2, r5
 80019e2:	d900      	bls.n	80019e6 <__aeabi_ddiv+0x472>
 80019e4:	e639      	b.n	800165a <__aeabi_ddiv+0xe6>
 80019e6:	4643      	mov	r3, r8
 80019e8:	07de      	lsls	r6, r3, #31
 80019ea:	0858      	lsrs	r0, r3, #1
 80019ec:	086b      	lsrs	r3, r5, #1
 80019ee:	431e      	orrs	r6, r3
 80019f0:	07ed      	lsls	r5, r5, #31
 80019f2:	e639      	b.n	8001668 <__aeabi_ddiv+0xf4>
 80019f4:	4648      	mov	r0, r9
 80019f6:	f001 f937 	bl	8002c68 <__clzsi2>
 80019fa:	0001      	movs	r1, r0
 80019fc:	0002      	movs	r2, r0
 80019fe:	3115      	adds	r1, #21
 8001a00:	3220      	adds	r2, #32
 8001a02:	291c      	cmp	r1, #28
 8001a04:	dc00      	bgt.n	8001a08 <__aeabi_ddiv+0x494>
 8001a06:	e72c      	b.n	8001862 <__aeabi_ddiv+0x2ee>
 8001a08:	464b      	mov	r3, r9
 8001a0a:	3808      	subs	r0, #8
 8001a0c:	4083      	lsls	r3, r0
 8001a0e:	2500      	movs	r5, #0
 8001a10:	4698      	mov	r8, r3
 8001a12:	e732      	b.n	800187a <__aeabi_ddiv+0x306>
 8001a14:	f001 f928 	bl	8002c68 <__clzsi2>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	001a      	movs	r2, r3
 8001a1c:	3215      	adds	r2, #21
 8001a1e:	3020      	adds	r0, #32
 8001a20:	2a1c      	cmp	r2, #28
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_ddiv+0x4b2>
 8001a24:	e700      	b.n	8001828 <__aeabi_ddiv+0x2b4>
 8001a26:	4654      	mov	r4, sl
 8001a28:	3b08      	subs	r3, #8
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	409c      	lsls	r4, r3
 8001a2e:	e705      	b.n	800183c <__aeabi_ddiv+0x2c8>
 8001a30:	1936      	adds	r6, r6, r4
 8001a32:	3b01      	subs	r3, #1
 8001a34:	42b4      	cmp	r4, r6
 8001a36:	d900      	bls.n	8001a3a <__aeabi_ddiv+0x4c6>
 8001a38:	e6a6      	b.n	8001788 <__aeabi_ddiv+0x214>
 8001a3a:	42b2      	cmp	r2, r6
 8001a3c:	d800      	bhi.n	8001a40 <__aeabi_ddiv+0x4cc>
 8001a3e:	e6a3      	b.n	8001788 <__aeabi_ddiv+0x214>
 8001a40:	1e83      	subs	r3, r0, #2
 8001a42:	1936      	adds	r6, r6, r4
 8001a44:	e6a0      	b.n	8001788 <__aeabi_ddiv+0x214>
 8001a46:	1909      	adds	r1, r1, r4
 8001a48:	3d01      	subs	r5, #1
 8001a4a:	428c      	cmp	r4, r1
 8001a4c:	d900      	bls.n	8001a50 <__aeabi_ddiv+0x4dc>
 8001a4e:	e68d      	b.n	800176c <__aeabi_ddiv+0x1f8>
 8001a50:	428a      	cmp	r2, r1
 8001a52:	d800      	bhi.n	8001a56 <__aeabi_ddiv+0x4e2>
 8001a54:	e68a      	b.n	800176c <__aeabi_ddiv+0x1f8>
 8001a56:	1e85      	subs	r5, r0, #2
 8001a58:	1909      	adds	r1, r1, r4
 8001a5a:	e687      	b.n	800176c <__aeabi_ddiv+0x1f8>
 8001a5c:	230f      	movs	r3, #15
 8001a5e:	402b      	ands	r3, r5
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d100      	bne.n	8001a66 <__aeabi_ddiv+0x4f2>
 8001a64:	e6bc      	b.n	80017e0 <__aeabi_ddiv+0x26c>
 8001a66:	2305      	movs	r3, #5
 8001a68:	425b      	negs	r3, r3
 8001a6a:	42ab      	cmp	r3, r5
 8001a6c:	419b      	sbcs	r3, r3
 8001a6e:	3504      	adds	r5, #4
 8001a70:	425b      	negs	r3, r3
 8001a72:	08ed      	lsrs	r5, r5, #3
 8001a74:	4498      	add	r8, r3
 8001a76:	e6b4      	b.n	80017e2 <__aeabi_ddiv+0x26e>
 8001a78:	42af      	cmp	r7, r5
 8001a7a:	d900      	bls.n	8001a7e <__aeabi_ddiv+0x50a>
 8001a7c:	e660      	b.n	8001740 <__aeabi_ddiv+0x1cc>
 8001a7e:	4282      	cmp	r2, r0
 8001a80:	d804      	bhi.n	8001a8c <__aeabi_ddiv+0x518>
 8001a82:	d000      	beq.n	8001a86 <__aeabi_ddiv+0x512>
 8001a84:	e65c      	b.n	8001740 <__aeabi_ddiv+0x1cc>
 8001a86:	42ae      	cmp	r6, r5
 8001a88:	d800      	bhi.n	8001a8c <__aeabi_ddiv+0x518>
 8001a8a:	e659      	b.n	8001740 <__aeabi_ddiv+0x1cc>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	425b      	negs	r3, r3
 8001a90:	469c      	mov	ip, r3
 8001a92:	9b00      	ldr	r3, [sp, #0]
 8001a94:	44e0      	add	r8, ip
 8001a96:	469c      	mov	ip, r3
 8001a98:	4465      	add	r5, ip
 8001a9a:	429d      	cmp	r5, r3
 8001a9c:	419b      	sbcs	r3, r3
 8001a9e:	425b      	negs	r3, r3
 8001aa0:	191b      	adds	r3, r3, r4
 8001aa2:	18c0      	adds	r0, r0, r3
 8001aa4:	e64d      	b.n	8001742 <__aeabi_ddiv+0x1ce>
 8001aa6:	428a      	cmp	r2, r1
 8001aa8:	d800      	bhi.n	8001aac <__aeabi_ddiv+0x538>
 8001aaa:	e60e      	b.n	80016ca <__aeabi_ddiv+0x156>
 8001aac:	1e83      	subs	r3, r0, #2
 8001aae:	1909      	adds	r1, r1, r4
 8001ab0:	e60b      	b.n	80016ca <__aeabi_ddiv+0x156>
 8001ab2:	428a      	cmp	r2, r1
 8001ab4:	d800      	bhi.n	8001ab8 <__aeabi_ddiv+0x544>
 8001ab6:	e5f4      	b.n	80016a2 <__aeabi_ddiv+0x12e>
 8001ab8:	1e83      	subs	r3, r0, #2
 8001aba:	4698      	mov	r8, r3
 8001abc:	1909      	adds	r1, r1, r4
 8001abe:	e5f0      	b.n	80016a2 <__aeabi_ddiv+0x12e>
 8001ac0:	4925      	ldr	r1, [pc, #148]	; (8001b58 <__aeabi_ddiv+0x5e4>)
 8001ac2:	0028      	movs	r0, r5
 8001ac4:	4459      	add	r1, fp
 8001ac6:	408d      	lsls	r5, r1
 8001ac8:	4642      	mov	r2, r8
 8001aca:	408a      	lsls	r2, r1
 8001acc:	1e69      	subs	r1, r5, #1
 8001ace:	418d      	sbcs	r5, r1
 8001ad0:	4641      	mov	r1, r8
 8001ad2:	40d8      	lsrs	r0, r3
 8001ad4:	40d9      	lsrs	r1, r3
 8001ad6:	4302      	orrs	r2, r0
 8001ad8:	432a      	orrs	r2, r5
 8001ada:	000b      	movs	r3, r1
 8001adc:	0751      	lsls	r1, r2, #29
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_ddiv+0x56e>
 8001ae0:	e751      	b.n	8001986 <__aeabi_ddiv+0x412>
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	4011      	ands	r1, r2
 8001ae6:	2904      	cmp	r1, #4
 8001ae8:	d000      	beq.n	8001aec <__aeabi_ddiv+0x578>
 8001aea:	e746      	b.n	800197a <__aeabi_ddiv+0x406>
 8001aec:	e74b      	b.n	8001986 <__aeabi_ddiv+0x412>
 8001aee:	0005      	movs	r5, r0
 8001af0:	428e      	cmp	r6, r1
 8001af2:	d000      	beq.n	8001af6 <__aeabi_ddiv+0x582>
 8001af4:	e66a      	b.n	80017cc <__aeabi_ddiv+0x258>
 8001af6:	9a00      	ldr	r2, [sp, #0]
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d000      	beq.n	8001afe <__aeabi_ddiv+0x58a>
 8001afc:	e666      	b.n	80017cc <__aeabi_ddiv+0x258>
 8001afe:	e667      	b.n	80017d0 <__aeabi_ddiv+0x25c>
 8001b00:	4a16      	ldr	r2, [pc, #88]	; (8001b5c <__aeabi_ddiv+0x5e8>)
 8001b02:	445a      	add	r2, fp
 8001b04:	2a00      	cmp	r2, #0
 8001b06:	dc00      	bgt.n	8001b0a <__aeabi_ddiv+0x596>
 8001b08:	e710      	b.n	800192c <__aeabi_ddiv+0x3b8>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	2500      	movs	r5, #0
 8001b0e:	4498      	add	r8, r3
 8001b10:	e667      	b.n	80017e2 <__aeabi_ddiv+0x26e>
 8001b12:	075d      	lsls	r5, r3, #29
 8001b14:	025b      	lsls	r3, r3, #9
 8001b16:	0b1c      	lsrs	r4, r3, #12
 8001b18:	08d2      	lsrs	r2, r2, #3
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	4315      	orrs	r5, r2
 8001b1e:	e580      	b.n	8001622 <__aeabi_ddiv+0xae>
 8001b20:	9800      	ldr	r0, [sp, #0]
 8001b22:	3d02      	subs	r5, #2
 8001b24:	0042      	lsls	r2, r0, #1
 8001b26:	4282      	cmp	r2, r0
 8001b28:	41bf      	sbcs	r7, r7
 8001b2a:	427f      	negs	r7, r7
 8001b2c:	193c      	adds	r4, r7, r4
 8001b2e:	1936      	adds	r6, r6, r4
 8001b30:	9200      	str	r2, [sp, #0]
 8001b32:	e7dd      	b.n	8001af0 <__aeabi_ddiv+0x57c>
 8001b34:	2480      	movs	r4, #128	; 0x80
 8001b36:	4643      	mov	r3, r8
 8001b38:	0324      	lsls	r4, r4, #12
 8001b3a:	431c      	orrs	r4, r3
 8001b3c:	0324      	lsls	r4, r4, #12
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <__aeabi_ddiv+0x5dc>)
 8001b40:	0b24      	lsrs	r4, r4, #12
 8001b42:	e56e      	b.n	8001622 <__aeabi_ddiv+0xae>
 8001b44:	9a00      	ldr	r2, [sp, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d3ea      	bcc.n	8001b20 <__aeabi_ddiv+0x5ac>
 8001b4a:	0005      	movs	r5, r0
 8001b4c:	e7d3      	b.n	8001af6 <__aeabi_ddiv+0x582>
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	000007ff 	.word	0x000007ff
 8001b54:	0000043e 	.word	0x0000043e
 8001b58:	0000041e 	.word	0x0000041e
 8001b5c:	000003ff 	.word	0x000003ff

08001b60 <__eqdf2>:
 8001b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b62:	464e      	mov	r6, r9
 8001b64:	4645      	mov	r5, r8
 8001b66:	46de      	mov	lr, fp
 8001b68:	4657      	mov	r7, sl
 8001b6a:	4690      	mov	r8, r2
 8001b6c:	b5e0      	push	{r5, r6, r7, lr}
 8001b6e:	0017      	movs	r7, r2
 8001b70:	031a      	lsls	r2, r3, #12
 8001b72:	0b12      	lsrs	r2, r2, #12
 8001b74:	0005      	movs	r5, r0
 8001b76:	4684      	mov	ip, r0
 8001b78:	4819      	ldr	r0, [pc, #100]	; (8001be0 <__eqdf2+0x80>)
 8001b7a:	030e      	lsls	r6, r1, #12
 8001b7c:	004c      	lsls	r4, r1, #1
 8001b7e:	4691      	mov	r9, r2
 8001b80:	005a      	lsls	r2, r3, #1
 8001b82:	0fdb      	lsrs	r3, r3, #31
 8001b84:	469b      	mov	fp, r3
 8001b86:	0b36      	lsrs	r6, r6, #12
 8001b88:	0d64      	lsrs	r4, r4, #21
 8001b8a:	0fc9      	lsrs	r1, r1, #31
 8001b8c:	0d52      	lsrs	r2, r2, #21
 8001b8e:	4284      	cmp	r4, r0
 8001b90:	d019      	beq.n	8001bc6 <__eqdf2+0x66>
 8001b92:	4282      	cmp	r2, r0
 8001b94:	d010      	beq.n	8001bb8 <__eqdf2+0x58>
 8001b96:	2001      	movs	r0, #1
 8001b98:	4294      	cmp	r4, r2
 8001b9a:	d10e      	bne.n	8001bba <__eqdf2+0x5a>
 8001b9c:	454e      	cmp	r6, r9
 8001b9e:	d10c      	bne.n	8001bba <__eqdf2+0x5a>
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	45c4      	cmp	ip, r8
 8001ba4:	d109      	bne.n	8001bba <__eqdf2+0x5a>
 8001ba6:	4559      	cmp	r1, fp
 8001ba8:	d017      	beq.n	8001bda <__eqdf2+0x7a>
 8001baa:	2c00      	cmp	r4, #0
 8001bac:	d105      	bne.n	8001bba <__eqdf2+0x5a>
 8001bae:	0030      	movs	r0, r6
 8001bb0:	4328      	orrs	r0, r5
 8001bb2:	1e43      	subs	r3, r0, #1
 8001bb4:	4198      	sbcs	r0, r3
 8001bb6:	e000      	b.n	8001bba <__eqdf2+0x5a>
 8001bb8:	2001      	movs	r0, #1
 8001bba:	bcf0      	pop	{r4, r5, r6, r7}
 8001bbc:	46bb      	mov	fp, r7
 8001bbe:	46b2      	mov	sl, r6
 8001bc0:	46a9      	mov	r9, r5
 8001bc2:	46a0      	mov	r8, r4
 8001bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bc6:	0033      	movs	r3, r6
 8001bc8:	2001      	movs	r0, #1
 8001bca:	432b      	orrs	r3, r5
 8001bcc:	d1f5      	bne.n	8001bba <__eqdf2+0x5a>
 8001bce:	42a2      	cmp	r2, r4
 8001bd0:	d1f3      	bne.n	8001bba <__eqdf2+0x5a>
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	433b      	orrs	r3, r7
 8001bd6:	d1f0      	bne.n	8001bba <__eqdf2+0x5a>
 8001bd8:	e7e2      	b.n	8001ba0 <__eqdf2+0x40>
 8001bda:	2000      	movs	r0, #0
 8001bdc:	e7ed      	b.n	8001bba <__eqdf2+0x5a>
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	000007ff 	.word	0x000007ff

08001be4 <__gedf2>:
 8001be4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001be6:	4647      	mov	r7, r8
 8001be8:	46ce      	mov	lr, r9
 8001bea:	0004      	movs	r4, r0
 8001bec:	0018      	movs	r0, r3
 8001bee:	0016      	movs	r6, r2
 8001bf0:	031b      	lsls	r3, r3, #12
 8001bf2:	0b1b      	lsrs	r3, r3, #12
 8001bf4:	4d2d      	ldr	r5, [pc, #180]	; (8001cac <__gedf2+0xc8>)
 8001bf6:	004a      	lsls	r2, r1, #1
 8001bf8:	4699      	mov	r9, r3
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	0043      	lsls	r3, r0, #1
 8001bfe:	030f      	lsls	r7, r1, #12
 8001c00:	46a4      	mov	ip, r4
 8001c02:	46b0      	mov	r8, r6
 8001c04:	0b3f      	lsrs	r7, r7, #12
 8001c06:	0d52      	lsrs	r2, r2, #21
 8001c08:	0fc9      	lsrs	r1, r1, #31
 8001c0a:	0d5b      	lsrs	r3, r3, #21
 8001c0c:	0fc0      	lsrs	r0, r0, #31
 8001c0e:	42aa      	cmp	r2, r5
 8001c10:	d021      	beq.n	8001c56 <__gedf2+0x72>
 8001c12:	42ab      	cmp	r3, r5
 8001c14:	d013      	beq.n	8001c3e <__gedf2+0x5a>
 8001c16:	2a00      	cmp	r2, #0
 8001c18:	d122      	bne.n	8001c60 <__gedf2+0x7c>
 8001c1a:	433c      	orrs	r4, r7
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d102      	bne.n	8001c26 <__gedf2+0x42>
 8001c20:	464d      	mov	r5, r9
 8001c22:	432e      	orrs	r6, r5
 8001c24:	d022      	beq.n	8001c6c <__gedf2+0x88>
 8001c26:	2c00      	cmp	r4, #0
 8001c28:	d010      	beq.n	8001c4c <__gedf2+0x68>
 8001c2a:	4281      	cmp	r1, r0
 8001c2c:	d022      	beq.n	8001c74 <__gedf2+0x90>
 8001c2e:	2002      	movs	r0, #2
 8001c30:	3901      	subs	r1, #1
 8001c32:	4008      	ands	r0, r1
 8001c34:	3801      	subs	r0, #1
 8001c36:	bcc0      	pop	{r6, r7}
 8001c38:	46b9      	mov	r9, r7
 8001c3a:	46b0      	mov	r8, r6
 8001c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c3e:	464d      	mov	r5, r9
 8001c40:	432e      	orrs	r6, r5
 8001c42:	d129      	bne.n	8001c98 <__gedf2+0xb4>
 8001c44:	2a00      	cmp	r2, #0
 8001c46:	d1f0      	bne.n	8001c2a <__gedf2+0x46>
 8001c48:	433c      	orrs	r4, r7
 8001c4a:	d1ee      	bne.n	8001c2a <__gedf2+0x46>
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	d1f2      	bne.n	8001c36 <__gedf2+0x52>
 8001c50:	2001      	movs	r0, #1
 8001c52:	4240      	negs	r0, r0
 8001c54:	e7ef      	b.n	8001c36 <__gedf2+0x52>
 8001c56:	003d      	movs	r5, r7
 8001c58:	4325      	orrs	r5, r4
 8001c5a:	d11d      	bne.n	8001c98 <__gedf2+0xb4>
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d0ee      	beq.n	8001c3e <__gedf2+0x5a>
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1e2      	bne.n	8001c2a <__gedf2+0x46>
 8001c64:	464c      	mov	r4, r9
 8001c66:	4326      	orrs	r6, r4
 8001c68:	d1df      	bne.n	8001c2a <__gedf2+0x46>
 8001c6a:	e7e0      	b.n	8001c2e <__gedf2+0x4a>
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	2c00      	cmp	r4, #0
 8001c70:	d0e1      	beq.n	8001c36 <__gedf2+0x52>
 8001c72:	e7dc      	b.n	8001c2e <__gedf2+0x4a>
 8001c74:	429a      	cmp	r2, r3
 8001c76:	dc0a      	bgt.n	8001c8e <__gedf2+0xaa>
 8001c78:	dbe8      	blt.n	8001c4c <__gedf2+0x68>
 8001c7a:	454f      	cmp	r7, r9
 8001c7c:	d8d7      	bhi.n	8001c2e <__gedf2+0x4a>
 8001c7e:	d00e      	beq.n	8001c9e <__gedf2+0xba>
 8001c80:	2000      	movs	r0, #0
 8001c82:	454f      	cmp	r7, r9
 8001c84:	d2d7      	bcs.n	8001c36 <__gedf2+0x52>
 8001c86:	2900      	cmp	r1, #0
 8001c88:	d0e2      	beq.n	8001c50 <__gedf2+0x6c>
 8001c8a:	0008      	movs	r0, r1
 8001c8c:	e7d3      	b.n	8001c36 <__gedf2+0x52>
 8001c8e:	4243      	negs	r3, r0
 8001c90:	4158      	adcs	r0, r3
 8001c92:	0040      	lsls	r0, r0, #1
 8001c94:	3801      	subs	r0, #1
 8001c96:	e7ce      	b.n	8001c36 <__gedf2+0x52>
 8001c98:	2002      	movs	r0, #2
 8001c9a:	4240      	negs	r0, r0
 8001c9c:	e7cb      	b.n	8001c36 <__gedf2+0x52>
 8001c9e:	45c4      	cmp	ip, r8
 8001ca0:	d8c5      	bhi.n	8001c2e <__gedf2+0x4a>
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	45c4      	cmp	ip, r8
 8001ca6:	d2c6      	bcs.n	8001c36 <__gedf2+0x52>
 8001ca8:	e7ed      	b.n	8001c86 <__gedf2+0xa2>
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	000007ff 	.word	0x000007ff

08001cb0 <__ledf2>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	4647      	mov	r7, r8
 8001cb4:	46ce      	mov	lr, r9
 8001cb6:	0004      	movs	r4, r0
 8001cb8:	0018      	movs	r0, r3
 8001cba:	0016      	movs	r6, r2
 8001cbc:	031b      	lsls	r3, r3, #12
 8001cbe:	0b1b      	lsrs	r3, r3, #12
 8001cc0:	4d2c      	ldr	r5, [pc, #176]	; (8001d74 <__ledf2+0xc4>)
 8001cc2:	004a      	lsls	r2, r1, #1
 8001cc4:	4699      	mov	r9, r3
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	0043      	lsls	r3, r0, #1
 8001cca:	030f      	lsls	r7, r1, #12
 8001ccc:	46a4      	mov	ip, r4
 8001cce:	46b0      	mov	r8, r6
 8001cd0:	0b3f      	lsrs	r7, r7, #12
 8001cd2:	0d52      	lsrs	r2, r2, #21
 8001cd4:	0fc9      	lsrs	r1, r1, #31
 8001cd6:	0d5b      	lsrs	r3, r3, #21
 8001cd8:	0fc0      	lsrs	r0, r0, #31
 8001cda:	42aa      	cmp	r2, r5
 8001cdc:	d00d      	beq.n	8001cfa <__ledf2+0x4a>
 8001cde:	42ab      	cmp	r3, r5
 8001ce0:	d010      	beq.n	8001d04 <__ledf2+0x54>
 8001ce2:	2a00      	cmp	r2, #0
 8001ce4:	d127      	bne.n	8001d36 <__ledf2+0x86>
 8001ce6:	433c      	orrs	r4, r7
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d111      	bne.n	8001d10 <__ledf2+0x60>
 8001cec:	464d      	mov	r5, r9
 8001cee:	432e      	orrs	r6, r5
 8001cf0:	d10e      	bne.n	8001d10 <__ledf2+0x60>
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	2c00      	cmp	r4, #0
 8001cf6:	d015      	beq.n	8001d24 <__ledf2+0x74>
 8001cf8:	e00e      	b.n	8001d18 <__ledf2+0x68>
 8001cfa:	003d      	movs	r5, r7
 8001cfc:	4325      	orrs	r5, r4
 8001cfe:	d110      	bne.n	8001d22 <__ledf2+0x72>
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d118      	bne.n	8001d36 <__ledf2+0x86>
 8001d04:	464d      	mov	r5, r9
 8001d06:	432e      	orrs	r6, r5
 8001d08:	d10b      	bne.n	8001d22 <__ledf2+0x72>
 8001d0a:	2a00      	cmp	r2, #0
 8001d0c:	d102      	bne.n	8001d14 <__ledf2+0x64>
 8001d0e:	433c      	orrs	r4, r7
 8001d10:	2c00      	cmp	r4, #0
 8001d12:	d00b      	beq.n	8001d2c <__ledf2+0x7c>
 8001d14:	4281      	cmp	r1, r0
 8001d16:	d014      	beq.n	8001d42 <__ledf2+0x92>
 8001d18:	2002      	movs	r0, #2
 8001d1a:	3901      	subs	r1, #1
 8001d1c:	4008      	ands	r0, r1
 8001d1e:	3801      	subs	r0, #1
 8001d20:	e000      	b.n	8001d24 <__ledf2+0x74>
 8001d22:	2002      	movs	r0, #2
 8001d24:	bcc0      	pop	{r6, r7}
 8001d26:	46b9      	mov	r9, r7
 8001d28:	46b0      	mov	r8, r6
 8001d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2c:	2800      	cmp	r0, #0
 8001d2e:	d1f9      	bne.n	8001d24 <__ledf2+0x74>
 8001d30:	2001      	movs	r0, #1
 8001d32:	4240      	negs	r0, r0
 8001d34:	e7f6      	b.n	8001d24 <__ledf2+0x74>
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1ec      	bne.n	8001d14 <__ledf2+0x64>
 8001d3a:	464c      	mov	r4, r9
 8001d3c:	4326      	orrs	r6, r4
 8001d3e:	d1e9      	bne.n	8001d14 <__ledf2+0x64>
 8001d40:	e7ea      	b.n	8001d18 <__ledf2+0x68>
 8001d42:	429a      	cmp	r2, r3
 8001d44:	dd04      	ble.n	8001d50 <__ledf2+0xa0>
 8001d46:	4243      	negs	r3, r0
 8001d48:	4158      	adcs	r0, r3
 8001d4a:	0040      	lsls	r0, r0, #1
 8001d4c:	3801      	subs	r0, #1
 8001d4e:	e7e9      	b.n	8001d24 <__ledf2+0x74>
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dbeb      	blt.n	8001d2c <__ledf2+0x7c>
 8001d54:	454f      	cmp	r7, r9
 8001d56:	d8df      	bhi.n	8001d18 <__ledf2+0x68>
 8001d58:	d006      	beq.n	8001d68 <__ledf2+0xb8>
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	454f      	cmp	r7, r9
 8001d5e:	d2e1      	bcs.n	8001d24 <__ledf2+0x74>
 8001d60:	2900      	cmp	r1, #0
 8001d62:	d0e5      	beq.n	8001d30 <__ledf2+0x80>
 8001d64:	0008      	movs	r0, r1
 8001d66:	e7dd      	b.n	8001d24 <__ledf2+0x74>
 8001d68:	45c4      	cmp	ip, r8
 8001d6a:	d8d5      	bhi.n	8001d18 <__ledf2+0x68>
 8001d6c:	2000      	movs	r0, #0
 8001d6e:	45c4      	cmp	ip, r8
 8001d70:	d2d8      	bcs.n	8001d24 <__ledf2+0x74>
 8001d72:	e7f5      	b.n	8001d60 <__ledf2+0xb0>
 8001d74:	000007ff 	.word	0x000007ff

08001d78 <__aeabi_dmul>:
 8001d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d7a:	4657      	mov	r7, sl
 8001d7c:	464e      	mov	r6, r9
 8001d7e:	4645      	mov	r5, r8
 8001d80:	46de      	mov	lr, fp
 8001d82:	b5e0      	push	{r5, r6, r7, lr}
 8001d84:	4698      	mov	r8, r3
 8001d86:	030c      	lsls	r4, r1, #12
 8001d88:	004b      	lsls	r3, r1, #1
 8001d8a:	0006      	movs	r6, r0
 8001d8c:	4692      	mov	sl, r2
 8001d8e:	b087      	sub	sp, #28
 8001d90:	0b24      	lsrs	r4, r4, #12
 8001d92:	0d5b      	lsrs	r3, r3, #21
 8001d94:	0fcf      	lsrs	r7, r1, #31
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d100      	bne.n	8001d9c <__aeabi_dmul+0x24>
 8001d9a:	e15c      	b.n	8002056 <__aeabi_dmul+0x2de>
 8001d9c:	4ad9      	ldr	r2, [pc, #868]	; (8002104 <__aeabi_dmul+0x38c>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d100      	bne.n	8001da4 <__aeabi_dmul+0x2c>
 8001da2:	e175      	b.n	8002090 <__aeabi_dmul+0x318>
 8001da4:	0f42      	lsrs	r2, r0, #29
 8001da6:	00e4      	lsls	r4, r4, #3
 8001da8:	4314      	orrs	r4, r2
 8001daa:	2280      	movs	r2, #128	; 0x80
 8001dac:	0412      	lsls	r2, r2, #16
 8001dae:	4314      	orrs	r4, r2
 8001db0:	4ad5      	ldr	r2, [pc, #852]	; (8002108 <__aeabi_dmul+0x390>)
 8001db2:	00c5      	lsls	r5, r0, #3
 8001db4:	4694      	mov	ip, r2
 8001db6:	4463      	add	r3, ip
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	4699      	mov	r9, r3
 8001dbe:	469b      	mov	fp, r3
 8001dc0:	4643      	mov	r3, r8
 8001dc2:	4642      	mov	r2, r8
 8001dc4:	031e      	lsls	r6, r3, #12
 8001dc6:	0fd2      	lsrs	r2, r2, #31
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4650      	mov	r0, sl
 8001dcc:	4690      	mov	r8, r2
 8001dce:	0b36      	lsrs	r6, r6, #12
 8001dd0:	0d5b      	lsrs	r3, r3, #21
 8001dd2:	d100      	bne.n	8001dd6 <__aeabi_dmul+0x5e>
 8001dd4:	e120      	b.n	8002018 <__aeabi_dmul+0x2a0>
 8001dd6:	4acb      	ldr	r2, [pc, #812]	; (8002104 <__aeabi_dmul+0x38c>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d100      	bne.n	8001dde <__aeabi_dmul+0x66>
 8001ddc:	e162      	b.n	80020a4 <__aeabi_dmul+0x32c>
 8001dde:	49ca      	ldr	r1, [pc, #808]	; (8002108 <__aeabi_dmul+0x390>)
 8001de0:	0f42      	lsrs	r2, r0, #29
 8001de2:	468c      	mov	ip, r1
 8001de4:	9900      	ldr	r1, [sp, #0]
 8001de6:	4463      	add	r3, ip
 8001de8:	00f6      	lsls	r6, r6, #3
 8001dea:	468c      	mov	ip, r1
 8001dec:	4316      	orrs	r6, r2
 8001dee:	2280      	movs	r2, #128	; 0x80
 8001df0:	449c      	add	ip, r3
 8001df2:	0412      	lsls	r2, r2, #16
 8001df4:	4663      	mov	r3, ip
 8001df6:	4316      	orrs	r6, r2
 8001df8:	00c2      	lsls	r2, r0, #3
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	9900      	ldr	r1, [sp, #0]
 8001e00:	4643      	mov	r3, r8
 8001e02:	3101      	adds	r1, #1
 8001e04:	468c      	mov	ip, r1
 8001e06:	4649      	mov	r1, r9
 8001e08:	407b      	eors	r3, r7
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	290f      	cmp	r1, #15
 8001e0e:	d826      	bhi.n	8001e5e <__aeabi_dmul+0xe6>
 8001e10:	4bbe      	ldr	r3, [pc, #760]	; (800210c <__aeabi_dmul+0x394>)
 8001e12:	0089      	lsls	r1, r1, #2
 8001e14:	5859      	ldr	r1, [r3, r1]
 8001e16:	468f      	mov	pc, r1
 8001e18:	4643      	mov	r3, r8
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	0034      	movs	r4, r6
 8001e1e:	0015      	movs	r5, r2
 8001e20:	4683      	mov	fp, r0
 8001e22:	465b      	mov	r3, fp
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d016      	beq.n	8001e56 <__aeabi_dmul+0xde>
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_dmul+0xb6>
 8001e2c:	e203      	b.n	8002236 <__aeabi_dmul+0x4be>
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d000      	beq.n	8001e34 <__aeabi_dmul+0xbc>
 8001e32:	e0cd      	b.n	8001fd0 <__aeabi_dmul+0x258>
 8001e34:	2200      	movs	r2, #0
 8001e36:	2400      	movs	r4, #0
 8001e38:	2500      	movs	r5, #0
 8001e3a:	9b01      	ldr	r3, [sp, #4]
 8001e3c:	0512      	lsls	r2, r2, #20
 8001e3e:	4322      	orrs	r2, r4
 8001e40:	07db      	lsls	r3, r3, #31
 8001e42:	431a      	orrs	r2, r3
 8001e44:	0028      	movs	r0, r5
 8001e46:	0011      	movs	r1, r2
 8001e48:	b007      	add	sp, #28
 8001e4a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e4c:	46bb      	mov	fp, r7
 8001e4e:	46b2      	mov	sl, r6
 8001e50:	46a9      	mov	r9, r5
 8001e52:	46a0      	mov	r8, r4
 8001e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e56:	2400      	movs	r4, #0
 8001e58:	2500      	movs	r5, #0
 8001e5a:	4aaa      	ldr	r2, [pc, #680]	; (8002104 <__aeabi_dmul+0x38c>)
 8001e5c:	e7ed      	b.n	8001e3a <__aeabi_dmul+0xc2>
 8001e5e:	0c28      	lsrs	r0, r5, #16
 8001e60:	042d      	lsls	r5, r5, #16
 8001e62:	0c2d      	lsrs	r5, r5, #16
 8001e64:	002b      	movs	r3, r5
 8001e66:	0c11      	lsrs	r1, r2, #16
 8001e68:	0412      	lsls	r2, r2, #16
 8001e6a:	0c12      	lsrs	r2, r2, #16
 8001e6c:	4353      	muls	r3, r2
 8001e6e:	4698      	mov	r8, r3
 8001e70:	0013      	movs	r3, r2
 8001e72:	002f      	movs	r7, r5
 8001e74:	4343      	muls	r3, r0
 8001e76:	4699      	mov	r9, r3
 8001e78:	434f      	muls	r7, r1
 8001e7a:	444f      	add	r7, r9
 8001e7c:	46bb      	mov	fp, r7
 8001e7e:	4647      	mov	r7, r8
 8001e80:	000b      	movs	r3, r1
 8001e82:	0c3f      	lsrs	r7, r7, #16
 8001e84:	46ba      	mov	sl, r7
 8001e86:	4343      	muls	r3, r0
 8001e88:	44da      	add	sl, fp
 8001e8a:	9302      	str	r3, [sp, #8]
 8001e8c:	45d1      	cmp	r9, sl
 8001e8e:	d904      	bls.n	8001e9a <__aeabi_dmul+0x122>
 8001e90:	2780      	movs	r7, #128	; 0x80
 8001e92:	027f      	lsls	r7, r7, #9
 8001e94:	46b9      	mov	r9, r7
 8001e96:	444b      	add	r3, r9
 8001e98:	9302      	str	r3, [sp, #8]
 8001e9a:	4653      	mov	r3, sl
 8001e9c:	0c1b      	lsrs	r3, r3, #16
 8001e9e:	469b      	mov	fp, r3
 8001ea0:	4653      	mov	r3, sl
 8001ea2:	041f      	lsls	r7, r3, #16
 8001ea4:	4643      	mov	r3, r8
 8001ea6:	041b      	lsls	r3, r3, #16
 8001ea8:	0c1b      	lsrs	r3, r3, #16
 8001eaa:	4698      	mov	r8, r3
 8001eac:	003b      	movs	r3, r7
 8001eae:	4443      	add	r3, r8
 8001eb0:	9304      	str	r3, [sp, #16]
 8001eb2:	0c33      	lsrs	r3, r6, #16
 8001eb4:	0436      	lsls	r6, r6, #16
 8001eb6:	0c36      	lsrs	r6, r6, #16
 8001eb8:	4698      	mov	r8, r3
 8001eba:	0033      	movs	r3, r6
 8001ebc:	4343      	muls	r3, r0
 8001ebe:	4699      	mov	r9, r3
 8001ec0:	4643      	mov	r3, r8
 8001ec2:	4343      	muls	r3, r0
 8001ec4:	002f      	movs	r7, r5
 8001ec6:	469a      	mov	sl, r3
 8001ec8:	4643      	mov	r3, r8
 8001eca:	4377      	muls	r7, r6
 8001ecc:	435d      	muls	r5, r3
 8001ece:	0c38      	lsrs	r0, r7, #16
 8001ed0:	444d      	add	r5, r9
 8001ed2:	1945      	adds	r5, r0, r5
 8001ed4:	45a9      	cmp	r9, r5
 8001ed6:	d903      	bls.n	8001ee0 <__aeabi_dmul+0x168>
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	025b      	lsls	r3, r3, #9
 8001edc:	4699      	mov	r9, r3
 8001ede:	44ca      	add	sl, r9
 8001ee0:	043f      	lsls	r7, r7, #16
 8001ee2:	0c28      	lsrs	r0, r5, #16
 8001ee4:	0c3f      	lsrs	r7, r7, #16
 8001ee6:	042d      	lsls	r5, r5, #16
 8001ee8:	19ed      	adds	r5, r5, r7
 8001eea:	0c27      	lsrs	r7, r4, #16
 8001eec:	0424      	lsls	r4, r4, #16
 8001eee:	0c24      	lsrs	r4, r4, #16
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	0020      	movs	r0, r4
 8001ef4:	4350      	muls	r0, r2
 8001ef6:	437a      	muls	r2, r7
 8001ef8:	4691      	mov	r9, r2
 8001efa:	003a      	movs	r2, r7
 8001efc:	4453      	add	r3, sl
 8001efe:	9305      	str	r3, [sp, #20]
 8001f00:	0c03      	lsrs	r3, r0, #16
 8001f02:	469a      	mov	sl, r3
 8001f04:	434a      	muls	r2, r1
 8001f06:	4361      	muls	r1, r4
 8001f08:	4449      	add	r1, r9
 8001f0a:	4451      	add	r1, sl
 8001f0c:	44ab      	add	fp, r5
 8001f0e:	4589      	cmp	r9, r1
 8001f10:	d903      	bls.n	8001f1a <__aeabi_dmul+0x1a2>
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	025b      	lsls	r3, r3, #9
 8001f16:	4699      	mov	r9, r3
 8001f18:	444a      	add	r2, r9
 8001f1a:	0400      	lsls	r0, r0, #16
 8001f1c:	0c0b      	lsrs	r3, r1, #16
 8001f1e:	0c00      	lsrs	r0, r0, #16
 8001f20:	0409      	lsls	r1, r1, #16
 8001f22:	1809      	adds	r1, r1, r0
 8001f24:	0020      	movs	r0, r4
 8001f26:	4699      	mov	r9, r3
 8001f28:	4643      	mov	r3, r8
 8001f2a:	4370      	muls	r0, r6
 8001f2c:	435c      	muls	r4, r3
 8001f2e:	437e      	muls	r6, r7
 8001f30:	435f      	muls	r7, r3
 8001f32:	0c03      	lsrs	r3, r0, #16
 8001f34:	4698      	mov	r8, r3
 8001f36:	19a4      	adds	r4, r4, r6
 8001f38:	4444      	add	r4, r8
 8001f3a:	444a      	add	r2, r9
 8001f3c:	9703      	str	r7, [sp, #12]
 8001f3e:	42a6      	cmp	r6, r4
 8001f40:	d904      	bls.n	8001f4c <__aeabi_dmul+0x1d4>
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	025b      	lsls	r3, r3, #9
 8001f46:	4698      	mov	r8, r3
 8001f48:	4447      	add	r7, r8
 8001f4a:	9703      	str	r7, [sp, #12]
 8001f4c:	0423      	lsls	r3, r4, #16
 8001f4e:	9e02      	ldr	r6, [sp, #8]
 8001f50:	469a      	mov	sl, r3
 8001f52:	9b05      	ldr	r3, [sp, #20]
 8001f54:	445e      	add	r6, fp
 8001f56:	4698      	mov	r8, r3
 8001f58:	42ae      	cmp	r6, r5
 8001f5a:	41ad      	sbcs	r5, r5
 8001f5c:	1876      	adds	r6, r6, r1
 8001f5e:	428e      	cmp	r6, r1
 8001f60:	4189      	sbcs	r1, r1
 8001f62:	0400      	lsls	r0, r0, #16
 8001f64:	0c00      	lsrs	r0, r0, #16
 8001f66:	4450      	add	r0, sl
 8001f68:	4440      	add	r0, r8
 8001f6a:	426d      	negs	r5, r5
 8001f6c:	1947      	adds	r7, r0, r5
 8001f6e:	46b8      	mov	r8, r7
 8001f70:	4693      	mov	fp, r2
 8001f72:	4249      	negs	r1, r1
 8001f74:	4689      	mov	r9, r1
 8001f76:	44c3      	add	fp, r8
 8001f78:	44d9      	add	r9, fp
 8001f7a:	4298      	cmp	r0, r3
 8001f7c:	4180      	sbcs	r0, r0
 8001f7e:	45a8      	cmp	r8, r5
 8001f80:	41ad      	sbcs	r5, r5
 8001f82:	4593      	cmp	fp, r2
 8001f84:	4192      	sbcs	r2, r2
 8001f86:	4589      	cmp	r9, r1
 8001f88:	4189      	sbcs	r1, r1
 8001f8a:	426d      	negs	r5, r5
 8001f8c:	4240      	negs	r0, r0
 8001f8e:	4328      	orrs	r0, r5
 8001f90:	0c24      	lsrs	r4, r4, #16
 8001f92:	4252      	negs	r2, r2
 8001f94:	4249      	negs	r1, r1
 8001f96:	430a      	orrs	r2, r1
 8001f98:	9b03      	ldr	r3, [sp, #12]
 8001f9a:	1900      	adds	r0, r0, r4
 8001f9c:	1880      	adds	r0, r0, r2
 8001f9e:	18c7      	adds	r7, r0, r3
 8001fa0:	464b      	mov	r3, r9
 8001fa2:	0ddc      	lsrs	r4, r3, #23
 8001fa4:	9b04      	ldr	r3, [sp, #16]
 8001fa6:	0275      	lsls	r5, r6, #9
 8001fa8:	431d      	orrs	r5, r3
 8001faa:	1e6a      	subs	r2, r5, #1
 8001fac:	4195      	sbcs	r5, r2
 8001fae:	464b      	mov	r3, r9
 8001fb0:	0df6      	lsrs	r6, r6, #23
 8001fb2:	027f      	lsls	r7, r7, #9
 8001fb4:	4335      	orrs	r5, r6
 8001fb6:	025a      	lsls	r2, r3, #9
 8001fb8:	433c      	orrs	r4, r7
 8001fba:	4315      	orrs	r5, r2
 8001fbc:	01fb      	lsls	r3, r7, #7
 8001fbe:	d400      	bmi.n	8001fc2 <__aeabi_dmul+0x24a>
 8001fc0:	e11c      	b.n	80021fc <__aeabi_dmul+0x484>
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	086a      	lsrs	r2, r5, #1
 8001fc6:	400d      	ands	r5, r1
 8001fc8:	4315      	orrs	r5, r2
 8001fca:	07e2      	lsls	r2, r4, #31
 8001fcc:	4315      	orrs	r5, r2
 8001fce:	0864      	lsrs	r4, r4, #1
 8001fd0:	494f      	ldr	r1, [pc, #316]	; (8002110 <__aeabi_dmul+0x398>)
 8001fd2:	4461      	add	r1, ip
 8001fd4:	2900      	cmp	r1, #0
 8001fd6:	dc00      	bgt.n	8001fda <__aeabi_dmul+0x262>
 8001fd8:	e0b0      	b.n	800213c <__aeabi_dmul+0x3c4>
 8001fda:	076b      	lsls	r3, r5, #29
 8001fdc:	d009      	beq.n	8001ff2 <__aeabi_dmul+0x27a>
 8001fde:	220f      	movs	r2, #15
 8001fe0:	402a      	ands	r2, r5
 8001fe2:	2a04      	cmp	r2, #4
 8001fe4:	d005      	beq.n	8001ff2 <__aeabi_dmul+0x27a>
 8001fe6:	1d2a      	adds	r2, r5, #4
 8001fe8:	42aa      	cmp	r2, r5
 8001fea:	41ad      	sbcs	r5, r5
 8001fec:	426d      	negs	r5, r5
 8001fee:	1964      	adds	r4, r4, r5
 8001ff0:	0015      	movs	r5, r2
 8001ff2:	01e3      	lsls	r3, r4, #7
 8001ff4:	d504      	bpl.n	8002000 <__aeabi_dmul+0x288>
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	4a46      	ldr	r2, [pc, #280]	; (8002114 <__aeabi_dmul+0x39c>)
 8001ffa:	00c9      	lsls	r1, r1, #3
 8001ffc:	4014      	ands	r4, r2
 8001ffe:	4461      	add	r1, ip
 8002000:	4a45      	ldr	r2, [pc, #276]	; (8002118 <__aeabi_dmul+0x3a0>)
 8002002:	4291      	cmp	r1, r2
 8002004:	dd00      	ble.n	8002008 <__aeabi_dmul+0x290>
 8002006:	e726      	b.n	8001e56 <__aeabi_dmul+0xde>
 8002008:	0762      	lsls	r2, r4, #29
 800200a:	08ed      	lsrs	r5, r5, #3
 800200c:	0264      	lsls	r4, r4, #9
 800200e:	0549      	lsls	r1, r1, #21
 8002010:	4315      	orrs	r5, r2
 8002012:	0b24      	lsrs	r4, r4, #12
 8002014:	0d4a      	lsrs	r2, r1, #21
 8002016:	e710      	b.n	8001e3a <__aeabi_dmul+0xc2>
 8002018:	4652      	mov	r2, sl
 800201a:	4332      	orrs	r2, r6
 800201c:	d100      	bne.n	8002020 <__aeabi_dmul+0x2a8>
 800201e:	e07f      	b.n	8002120 <__aeabi_dmul+0x3a8>
 8002020:	2e00      	cmp	r6, #0
 8002022:	d100      	bne.n	8002026 <__aeabi_dmul+0x2ae>
 8002024:	e0dc      	b.n	80021e0 <__aeabi_dmul+0x468>
 8002026:	0030      	movs	r0, r6
 8002028:	f000 fe1e 	bl	8002c68 <__clzsi2>
 800202c:	0002      	movs	r2, r0
 800202e:	3a0b      	subs	r2, #11
 8002030:	231d      	movs	r3, #29
 8002032:	0001      	movs	r1, r0
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	4652      	mov	r2, sl
 8002038:	3908      	subs	r1, #8
 800203a:	40da      	lsrs	r2, r3
 800203c:	408e      	lsls	r6, r1
 800203e:	4316      	orrs	r6, r2
 8002040:	4652      	mov	r2, sl
 8002042:	408a      	lsls	r2, r1
 8002044:	9b00      	ldr	r3, [sp, #0]
 8002046:	4935      	ldr	r1, [pc, #212]	; (800211c <__aeabi_dmul+0x3a4>)
 8002048:	1a18      	subs	r0, r3, r0
 800204a:	0003      	movs	r3, r0
 800204c:	468c      	mov	ip, r1
 800204e:	4463      	add	r3, ip
 8002050:	2000      	movs	r0, #0
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	e6d3      	b.n	8001dfe <__aeabi_dmul+0x86>
 8002056:	0025      	movs	r5, r4
 8002058:	4305      	orrs	r5, r0
 800205a:	d04a      	beq.n	80020f2 <__aeabi_dmul+0x37a>
 800205c:	2c00      	cmp	r4, #0
 800205e:	d100      	bne.n	8002062 <__aeabi_dmul+0x2ea>
 8002060:	e0b0      	b.n	80021c4 <__aeabi_dmul+0x44c>
 8002062:	0020      	movs	r0, r4
 8002064:	f000 fe00 	bl	8002c68 <__clzsi2>
 8002068:	0001      	movs	r1, r0
 800206a:	0002      	movs	r2, r0
 800206c:	390b      	subs	r1, #11
 800206e:	231d      	movs	r3, #29
 8002070:	0010      	movs	r0, r2
 8002072:	1a5b      	subs	r3, r3, r1
 8002074:	0031      	movs	r1, r6
 8002076:	0035      	movs	r5, r6
 8002078:	3808      	subs	r0, #8
 800207a:	4084      	lsls	r4, r0
 800207c:	40d9      	lsrs	r1, r3
 800207e:	4085      	lsls	r5, r0
 8002080:	430c      	orrs	r4, r1
 8002082:	4826      	ldr	r0, [pc, #152]	; (800211c <__aeabi_dmul+0x3a4>)
 8002084:	1a83      	subs	r3, r0, r2
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	2300      	movs	r3, #0
 800208a:	4699      	mov	r9, r3
 800208c:	469b      	mov	fp, r3
 800208e:	e697      	b.n	8001dc0 <__aeabi_dmul+0x48>
 8002090:	0005      	movs	r5, r0
 8002092:	4325      	orrs	r5, r4
 8002094:	d126      	bne.n	80020e4 <__aeabi_dmul+0x36c>
 8002096:	2208      	movs	r2, #8
 8002098:	9300      	str	r3, [sp, #0]
 800209a:	2302      	movs	r3, #2
 800209c:	2400      	movs	r4, #0
 800209e:	4691      	mov	r9, r2
 80020a0:	469b      	mov	fp, r3
 80020a2:	e68d      	b.n	8001dc0 <__aeabi_dmul+0x48>
 80020a4:	4652      	mov	r2, sl
 80020a6:	9b00      	ldr	r3, [sp, #0]
 80020a8:	4332      	orrs	r2, r6
 80020aa:	d110      	bne.n	80020ce <__aeabi_dmul+0x356>
 80020ac:	4915      	ldr	r1, [pc, #84]	; (8002104 <__aeabi_dmul+0x38c>)
 80020ae:	2600      	movs	r6, #0
 80020b0:	468c      	mov	ip, r1
 80020b2:	4463      	add	r3, ip
 80020b4:	4649      	mov	r1, r9
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2302      	movs	r3, #2
 80020ba:	4319      	orrs	r1, r3
 80020bc:	4689      	mov	r9, r1
 80020be:	2002      	movs	r0, #2
 80020c0:	e69d      	b.n	8001dfe <__aeabi_dmul+0x86>
 80020c2:	465b      	mov	r3, fp
 80020c4:	9701      	str	r7, [sp, #4]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d000      	beq.n	80020cc <__aeabi_dmul+0x354>
 80020ca:	e6ad      	b.n	8001e28 <__aeabi_dmul+0xb0>
 80020cc:	e6c3      	b.n	8001e56 <__aeabi_dmul+0xde>
 80020ce:	4a0d      	ldr	r2, [pc, #52]	; (8002104 <__aeabi_dmul+0x38c>)
 80020d0:	2003      	movs	r0, #3
 80020d2:	4694      	mov	ip, r2
 80020d4:	4463      	add	r3, ip
 80020d6:	464a      	mov	r2, r9
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	2303      	movs	r3, #3
 80020dc:	431a      	orrs	r2, r3
 80020de:	4691      	mov	r9, r2
 80020e0:	4652      	mov	r2, sl
 80020e2:	e68c      	b.n	8001dfe <__aeabi_dmul+0x86>
 80020e4:	220c      	movs	r2, #12
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2303      	movs	r3, #3
 80020ea:	0005      	movs	r5, r0
 80020ec:	4691      	mov	r9, r2
 80020ee:	469b      	mov	fp, r3
 80020f0:	e666      	b.n	8001dc0 <__aeabi_dmul+0x48>
 80020f2:	2304      	movs	r3, #4
 80020f4:	4699      	mov	r9, r3
 80020f6:	2300      	movs	r3, #0
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	2400      	movs	r4, #0
 80020fe:	469b      	mov	fp, r3
 8002100:	e65e      	b.n	8001dc0 <__aeabi_dmul+0x48>
 8002102:	46c0      	nop			; (mov r8, r8)
 8002104:	000007ff 	.word	0x000007ff
 8002108:	fffffc01 	.word	0xfffffc01
 800210c:	08015e2c 	.word	0x08015e2c
 8002110:	000003ff 	.word	0x000003ff
 8002114:	feffffff 	.word	0xfeffffff
 8002118:	000007fe 	.word	0x000007fe
 800211c:	fffffc0d 	.word	0xfffffc0d
 8002120:	4649      	mov	r1, r9
 8002122:	2301      	movs	r3, #1
 8002124:	4319      	orrs	r1, r3
 8002126:	4689      	mov	r9, r1
 8002128:	2600      	movs	r6, #0
 800212a:	2001      	movs	r0, #1
 800212c:	e667      	b.n	8001dfe <__aeabi_dmul+0x86>
 800212e:	2300      	movs	r3, #0
 8002130:	2480      	movs	r4, #128	; 0x80
 8002132:	2500      	movs	r5, #0
 8002134:	4a43      	ldr	r2, [pc, #268]	; (8002244 <__aeabi_dmul+0x4cc>)
 8002136:	9301      	str	r3, [sp, #4]
 8002138:	0324      	lsls	r4, r4, #12
 800213a:	e67e      	b.n	8001e3a <__aeabi_dmul+0xc2>
 800213c:	2001      	movs	r0, #1
 800213e:	1a40      	subs	r0, r0, r1
 8002140:	2838      	cmp	r0, #56	; 0x38
 8002142:	dd00      	ble.n	8002146 <__aeabi_dmul+0x3ce>
 8002144:	e676      	b.n	8001e34 <__aeabi_dmul+0xbc>
 8002146:	281f      	cmp	r0, #31
 8002148:	dd5b      	ble.n	8002202 <__aeabi_dmul+0x48a>
 800214a:	221f      	movs	r2, #31
 800214c:	0023      	movs	r3, r4
 800214e:	4252      	negs	r2, r2
 8002150:	1a51      	subs	r1, r2, r1
 8002152:	40cb      	lsrs	r3, r1
 8002154:	0019      	movs	r1, r3
 8002156:	2820      	cmp	r0, #32
 8002158:	d003      	beq.n	8002162 <__aeabi_dmul+0x3ea>
 800215a:	4a3b      	ldr	r2, [pc, #236]	; (8002248 <__aeabi_dmul+0x4d0>)
 800215c:	4462      	add	r2, ip
 800215e:	4094      	lsls	r4, r2
 8002160:	4325      	orrs	r5, r4
 8002162:	1e6a      	subs	r2, r5, #1
 8002164:	4195      	sbcs	r5, r2
 8002166:	002a      	movs	r2, r5
 8002168:	430a      	orrs	r2, r1
 800216a:	2107      	movs	r1, #7
 800216c:	000d      	movs	r5, r1
 800216e:	2400      	movs	r4, #0
 8002170:	4015      	ands	r5, r2
 8002172:	4211      	tst	r1, r2
 8002174:	d05b      	beq.n	800222e <__aeabi_dmul+0x4b6>
 8002176:	210f      	movs	r1, #15
 8002178:	2400      	movs	r4, #0
 800217a:	4011      	ands	r1, r2
 800217c:	2904      	cmp	r1, #4
 800217e:	d053      	beq.n	8002228 <__aeabi_dmul+0x4b0>
 8002180:	1d11      	adds	r1, r2, #4
 8002182:	4291      	cmp	r1, r2
 8002184:	4192      	sbcs	r2, r2
 8002186:	4252      	negs	r2, r2
 8002188:	18a4      	adds	r4, r4, r2
 800218a:	000a      	movs	r2, r1
 800218c:	0223      	lsls	r3, r4, #8
 800218e:	d54b      	bpl.n	8002228 <__aeabi_dmul+0x4b0>
 8002190:	2201      	movs	r2, #1
 8002192:	2400      	movs	r4, #0
 8002194:	2500      	movs	r5, #0
 8002196:	e650      	b.n	8001e3a <__aeabi_dmul+0xc2>
 8002198:	2380      	movs	r3, #128	; 0x80
 800219a:	031b      	lsls	r3, r3, #12
 800219c:	421c      	tst	r4, r3
 800219e:	d009      	beq.n	80021b4 <__aeabi_dmul+0x43c>
 80021a0:	421e      	tst	r6, r3
 80021a2:	d107      	bne.n	80021b4 <__aeabi_dmul+0x43c>
 80021a4:	4333      	orrs	r3, r6
 80021a6:	031c      	lsls	r4, r3, #12
 80021a8:	4643      	mov	r3, r8
 80021aa:	0015      	movs	r5, r2
 80021ac:	0b24      	lsrs	r4, r4, #12
 80021ae:	4a25      	ldr	r2, [pc, #148]	; (8002244 <__aeabi_dmul+0x4cc>)
 80021b0:	9301      	str	r3, [sp, #4]
 80021b2:	e642      	b.n	8001e3a <__aeabi_dmul+0xc2>
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	0312      	lsls	r2, r2, #12
 80021b8:	4314      	orrs	r4, r2
 80021ba:	0324      	lsls	r4, r4, #12
 80021bc:	4a21      	ldr	r2, [pc, #132]	; (8002244 <__aeabi_dmul+0x4cc>)
 80021be:	0b24      	lsrs	r4, r4, #12
 80021c0:	9701      	str	r7, [sp, #4]
 80021c2:	e63a      	b.n	8001e3a <__aeabi_dmul+0xc2>
 80021c4:	f000 fd50 	bl	8002c68 <__clzsi2>
 80021c8:	0001      	movs	r1, r0
 80021ca:	0002      	movs	r2, r0
 80021cc:	3115      	adds	r1, #21
 80021ce:	3220      	adds	r2, #32
 80021d0:	291c      	cmp	r1, #28
 80021d2:	dc00      	bgt.n	80021d6 <__aeabi_dmul+0x45e>
 80021d4:	e74b      	b.n	800206e <__aeabi_dmul+0x2f6>
 80021d6:	0034      	movs	r4, r6
 80021d8:	3808      	subs	r0, #8
 80021da:	2500      	movs	r5, #0
 80021dc:	4084      	lsls	r4, r0
 80021de:	e750      	b.n	8002082 <__aeabi_dmul+0x30a>
 80021e0:	f000 fd42 	bl	8002c68 <__clzsi2>
 80021e4:	0003      	movs	r3, r0
 80021e6:	001a      	movs	r2, r3
 80021e8:	3215      	adds	r2, #21
 80021ea:	3020      	adds	r0, #32
 80021ec:	2a1c      	cmp	r2, #28
 80021ee:	dc00      	bgt.n	80021f2 <__aeabi_dmul+0x47a>
 80021f0:	e71e      	b.n	8002030 <__aeabi_dmul+0x2b8>
 80021f2:	4656      	mov	r6, sl
 80021f4:	3b08      	subs	r3, #8
 80021f6:	2200      	movs	r2, #0
 80021f8:	409e      	lsls	r6, r3
 80021fa:	e723      	b.n	8002044 <__aeabi_dmul+0x2cc>
 80021fc:	9b00      	ldr	r3, [sp, #0]
 80021fe:	469c      	mov	ip, r3
 8002200:	e6e6      	b.n	8001fd0 <__aeabi_dmul+0x258>
 8002202:	4912      	ldr	r1, [pc, #72]	; (800224c <__aeabi_dmul+0x4d4>)
 8002204:	0022      	movs	r2, r4
 8002206:	4461      	add	r1, ip
 8002208:	002e      	movs	r6, r5
 800220a:	408d      	lsls	r5, r1
 800220c:	408a      	lsls	r2, r1
 800220e:	40c6      	lsrs	r6, r0
 8002210:	1e69      	subs	r1, r5, #1
 8002212:	418d      	sbcs	r5, r1
 8002214:	4332      	orrs	r2, r6
 8002216:	432a      	orrs	r2, r5
 8002218:	40c4      	lsrs	r4, r0
 800221a:	0753      	lsls	r3, r2, #29
 800221c:	d0b6      	beq.n	800218c <__aeabi_dmul+0x414>
 800221e:	210f      	movs	r1, #15
 8002220:	4011      	ands	r1, r2
 8002222:	2904      	cmp	r1, #4
 8002224:	d1ac      	bne.n	8002180 <__aeabi_dmul+0x408>
 8002226:	e7b1      	b.n	800218c <__aeabi_dmul+0x414>
 8002228:	0765      	lsls	r5, r4, #29
 800222a:	0264      	lsls	r4, r4, #9
 800222c:	0b24      	lsrs	r4, r4, #12
 800222e:	08d2      	lsrs	r2, r2, #3
 8002230:	4315      	orrs	r5, r2
 8002232:	2200      	movs	r2, #0
 8002234:	e601      	b.n	8001e3a <__aeabi_dmul+0xc2>
 8002236:	2280      	movs	r2, #128	; 0x80
 8002238:	0312      	lsls	r2, r2, #12
 800223a:	4314      	orrs	r4, r2
 800223c:	0324      	lsls	r4, r4, #12
 800223e:	4a01      	ldr	r2, [pc, #4]	; (8002244 <__aeabi_dmul+0x4cc>)
 8002240:	0b24      	lsrs	r4, r4, #12
 8002242:	e5fa      	b.n	8001e3a <__aeabi_dmul+0xc2>
 8002244:	000007ff 	.word	0x000007ff
 8002248:	0000043e 	.word	0x0000043e
 800224c:	0000041e 	.word	0x0000041e

08002250 <__aeabi_dsub>:
 8002250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002252:	4657      	mov	r7, sl
 8002254:	464e      	mov	r6, r9
 8002256:	4645      	mov	r5, r8
 8002258:	46de      	mov	lr, fp
 800225a:	b5e0      	push	{r5, r6, r7, lr}
 800225c:	001e      	movs	r6, r3
 800225e:	0017      	movs	r7, r2
 8002260:	004a      	lsls	r2, r1, #1
 8002262:	030b      	lsls	r3, r1, #12
 8002264:	0d52      	lsrs	r2, r2, #21
 8002266:	0a5b      	lsrs	r3, r3, #9
 8002268:	4690      	mov	r8, r2
 800226a:	0f42      	lsrs	r2, r0, #29
 800226c:	431a      	orrs	r2, r3
 800226e:	0fcd      	lsrs	r5, r1, #31
 8002270:	4ccd      	ldr	r4, [pc, #820]	; (80025a8 <__aeabi_dsub+0x358>)
 8002272:	0331      	lsls	r1, r6, #12
 8002274:	00c3      	lsls	r3, r0, #3
 8002276:	4694      	mov	ip, r2
 8002278:	0070      	lsls	r0, r6, #1
 800227a:	0f7a      	lsrs	r2, r7, #29
 800227c:	0a49      	lsrs	r1, r1, #9
 800227e:	00ff      	lsls	r7, r7, #3
 8002280:	469a      	mov	sl, r3
 8002282:	46b9      	mov	r9, r7
 8002284:	0d40      	lsrs	r0, r0, #21
 8002286:	0ff6      	lsrs	r6, r6, #31
 8002288:	4311      	orrs	r1, r2
 800228a:	42a0      	cmp	r0, r4
 800228c:	d100      	bne.n	8002290 <__aeabi_dsub+0x40>
 800228e:	e0b1      	b.n	80023f4 <__aeabi_dsub+0x1a4>
 8002290:	2201      	movs	r2, #1
 8002292:	4056      	eors	r6, r2
 8002294:	46b3      	mov	fp, r6
 8002296:	42b5      	cmp	r5, r6
 8002298:	d100      	bne.n	800229c <__aeabi_dsub+0x4c>
 800229a:	e088      	b.n	80023ae <__aeabi_dsub+0x15e>
 800229c:	4642      	mov	r2, r8
 800229e:	1a12      	subs	r2, r2, r0
 80022a0:	2a00      	cmp	r2, #0
 80022a2:	dc00      	bgt.n	80022a6 <__aeabi_dsub+0x56>
 80022a4:	e0ae      	b.n	8002404 <__aeabi_dsub+0x1b4>
 80022a6:	2800      	cmp	r0, #0
 80022a8:	d100      	bne.n	80022ac <__aeabi_dsub+0x5c>
 80022aa:	e0c1      	b.n	8002430 <__aeabi_dsub+0x1e0>
 80022ac:	48be      	ldr	r0, [pc, #760]	; (80025a8 <__aeabi_dsub+0x358>)
 80022ae:	4580      	cmp	r8, r0
 80022b0:	d100      	bne.n	80022b4 <__aeabi_dsub+0x64>
 80022b2:	e151      	b.n	8002558 <__aeabi_dsub+0x308>
 80022b4:	2080      	movs	r0, #128	; 0x80
 80022b6:	0400      	lsls	r0, r0, #16
 80022b8:	4301      	orrs	r1, r0
 80022ba:	2a38      	cmp	r2, #56	; 0x38
 80022bc:	dd00      	ble.n	80022c0 <__aeabi_dsub+0x70>
 80022be:	e17b      	b.n	80025b8 <__aeabi_dsub+0x368>
 80022c0:	2a1f      	cmp	r2, #31
 80022c2:	dd00      	ble.n	80022c6 <__aeabi_dsub+0x76>
 80022c4:	e1ee      	b.n	80026a4 <__aeabi_dsub+0x454>
 80022c6:	2020      	movs	r0, #32
 80022c8:	003e      	movs	r6, r7
 80022ca:	1a80      	subs	r0, r0, r2
 80022cc:	000c      	movs	r4, r1
 80022ce:	40d6      	lsrs	r6, r2
 80022d0:	40d1      	lsrs	r1, r2
 80022d2:	4087      	lsls	r7, r0
 80022d4:	4662      	mov	r2, ip
 80022d6:	4084      	lsls	r4, r0
 80022d8:	1a52      	subs	r2, r2, r1
 80022da:	1e78      	subs	r0, r7, #1
 80022dc:	4187      	sbcs	r7, r0
 80022de:	4694      	mov	ip, r2
 80022e0:	4334      	orrs	r4, r6
 80022e2:	4327      	orrs	r7, r4
 80022e4:	1bdc      	subs	r4, r3, r7
 80022e6:	42a3      	cmp	r3, r4
 80022e8:	419b      	sbcs	r3, r3
 80022ea:	4662      	mov	r2, ip
 80022ec:	425b      	negs	r3, r3
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	4699      	mov	r9, r3
 80022f2:	464b      	mov	r3, r9
 80022f4:	021b      	lsls	r3, r3, #8
 80022f6:	d400      	bmi.n	80022fa <__aeabi_dsub+0xaa>
 80022f8:	e118      	b.n	800252c <__aeabi_dsub+0x2dc>
 80022fa:	464b      	mov	r3, r9
 80022fc:	0258      	lsls	r0, r3, #9
 80022fe:	0a43      	lsrs	r3, r0, #9
 8002300:	4699      	mov	r9, r3
 8002302:	464b      	mov	r3, r9
 8002304:	2b00      	cmp	r3, #0
 8002306:	d100      	bne.n	800230a <__aeabi_dsub+0xba>
 8002308:	e137      	b.n	800257a <__aeabi_dsub+0x32a>
 800230a:	4648      	mov	r0, r9
 800230c:	f000 fcac 	bl	8002c68 <__clzsi2>
 8002310:	0001      	movs	r1, r0
 8002312:	3908      	subs	r1, #8
 8002314:	2320      	movs	r3, #32
 8002316:	0022      	movs	r2, r4
 8002318:	4648      	mov	r0, r9
 800231a:	1a5b      	subs	r3, r3, r1
 800231c:	40da      	lsrs	r2, r3
 800231e:	4088      	lsls	r0, r1
 8002320:	408c      	lsls	r4, r1
 8002322:	4643      	mov	r3, r8
 8002324:	4310      	orrs	r0, r2
 8002326:	4588      	cmp	r8, r1
 8002328:	dd00      	ble.n	800232c <__aeabi_dsub+0xdc>
 800232a:	e136      	b.n	800259a <__aeabi_dsub+0x34a>
 800232c:	1ac9      	subs	r1, r1, r3
 800232e:	1c4b      	adds	r3, r1, #1
 8002330:	2b1f      	cmp	r3, #31
 8002332:	dd00      	ble.n	8002336 <__aeabi_dsub+0xe6>
 8002334:	e0ea      	b.n	800250c <__aeabi_dsub+0x2bc>
 8002336:	2220      	movs	r2, #32
 8002338:	0026      	movs	r6, r4
 800233a:	1ad2      	subs	r2, r2, r3
 800233c:	0001      	movs	r1, r0
 800233e:	4094      	lsls	r4, r2
 8002340:	40de      	lsrs	r6, r3
 8002342:	40d8      	lsrs	r0, r3
 8002344:	2300      	movs	r3, #0
 8002346:	4091      	lsls	r1, r2
 8002348:	1e62      	subs	r2, r4, #1
 800234a:	4194      	sbcs	r4, r2
 800234c:	4681      	mov	r9, r0
 800234e:	4698      	mov	r8, r3
 8002350:	4331      	orrs	r1, r6
 8002352:	430c      	orrs	r4, r1
 8002354:	0763      	lsls	r3, r4, #29
 8002356:	d009      	beq.n	800236c <__aeabi_dsub+0x11c>
 8002358:	230f      	movs	r3, #15
 800235a:	4023      	ands	r3, r4
 800235c:	2b04      	cmp	r3, #4
 800235e:	d005      	beq.n	800236c <__aeabi_dsub+0x11c>
 8002360:	1d23      	adds	r3, r4, #4
 8002362:	42a3      	cmp	r3, r4
 8002364:	41a4      	sbcs	r4, r4
 8002366:	4264      	negs	r4, r4
 8002368:	44a1      	add	r9, r4
 800236a:	001c      	movs	r4, r3
 800236c:	464b      	mov	r3, r9
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	d400      	bmi.n	8002374 <__aeabi_dsub+0x124>
 8002372:	e0de      	b.n	8002532 <__aeabi_dsub+0x2e2>
 8002374:	4641      	mov	r1, r8
 8002376:	4b8c      	ldr	r3, [pc, #560]	; (80025a8 <__aeabi_dsub+0x358>)
 8002378:	3101      	adds	r1, #1
 800237a:	4299      	cmp	r1, r3
 800237c:	d100      	bne.n	8002380 <__aeabi_dsub+0x130>
 800237e:	e0e7      	b.n	8002550 <__aeabi_dsub+0x300>
 8002380:	464b      	mov	r3, r9
 8002382:	488a      	ldr	r0, [pc, #552]	; (80025ac <__aeabi_dsub+0x35c>)
 8002384:	08e4      	lsrs	r4, r4, #3
 8002386:	4003      	ands	r3, r0
 8002388:	0018      	movs	r0, r3
 800238a:	0549      	lsls	r1, r1, #21
 800238c:	075b      	lsls	r3, r3, #29
 800238e:	0240      	lsls	r0, r0, #9
 8002390:	4323      	orrs	r3, r4
 8002392:	0d4a      	lsrs	r2, r1, #21
 8002394:	0b04      	lsrs	r4, r0, #12
 8002396:	0512      	lsls	r2, r2, #20
 8002398:	07ed      	lsls	r5, r5, #31
 800239a:	4322      	orrs	r2, r4
 800239c:	432a      	orrs	r2, r5
 800239e:	0018      	movs	r0, r3
 80023a0:	0011      	movs	r1, r2
 80023a2:	bcf0      	pop	{r4, r5, r6, r7}
 80023a4:	46bb      	mov	fp, r7
 80023a6:	46b2      	mov	sl, r6
 80023a8:	46a9      	mov	r9, r5
 80023aa:	46a0      	mov	r8, r4
 80023ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023ae:	4642      	mov	r2, r8
 80023b0:	1a12      	subs	r2, r2, r0
 80023b2:	2a00      	cmp	r2, #0
 80023b4:	dd52      	ble.n	800245c <__aeabi_dsub+0x20c>
 80023b6:	2800      	cmp	r0, #0
 80023b8:	d100      	bne.n	80023bc <__aeabi_dsub+0x16c>
 80023ba:	e09c      	b.n	80024f6 <__aeabi_dsub+0x2a6>
 80023bc:	45a0      	cmp	r8, r4
 80023be:	d100      	bne.n	80023c2 <__aeabi_dsub+0x172>
 80023c0:	e0ca      	b.n	8002558 <__aeabi_dsub+0x308>
 80023c2:	2080      	movs	r0, #128	; 0x80
 80023c4:	0400      	lsls	r0, r0, #16
 80023c6:	4301      	orrs	r1, r0
 80023c8:	2a38      	cmp	r2, #56	; 0x38
 80023ca:	dd00      	ble.n	80023ce <__aeabi_dsub+0x17e>
 80023cc:	e149      	b.n	8002662 <__aeabi_dsub+0x412>
 80023ce:	2a1f      	cmp	r2, #31
 80023d0:	dc00      	bgt.n	80023d4 <__aeabi_dsub+0x184>
 80023d2:	e197      	b.n	8002704 <__aeabi_dsub+0x4b4>
 80023d4:	0010      	movs	r0, r2
 80023d6:	000e      	movs	r6, r1
 80023d8:	3820      	subs	r0, #32
 80023da:	40c6      	lsrs	r6, r0
 80023dc:	2a20      	cmp	r2, #32
 80023de:	d004      	beq.n	80023ea <__aeabi_dsub+0x19a>
 80023e0:	2040      	movs	r0, #64	; 0x40
 80023e2:	1a82      	subs	r2, r0, r2
 80023e4:	4091      	lsls	r1, r2
 80023e6:	430f      	orrs	r7, r1
 80023e8:	46b9      	mov	r9, r7
 80023ea:	464c      	mov	r4, r9
 80023ec:	1e62      	subs	r2, r4, #1
 80023ee:	4194      	sbcs	r4, r2
 80023f0:	4334      	orrs	r4, r6
 80023f2:	e13a      	b.n	800266a <__aeabi_dsub+0x41a>
 80023f4:	000a      	movs	r2, r1
 80023f6:	433a      	orrs	r2, r7
 80023f8:	d028      	beq.n	800244c <__aeabi_dsub+0x1fc>
 80023fa:	46b3      	mov	fp, r6
 80023fc:	42b5      	cmp	r5, r6
 80023fe:	d02b      	beq.n	8002458 <__aeabi_dsub+0x208>
 8002400:	4a6b      	ldr	r2, [pc, #428]	; (80025b0 <__aeabi_dsub+0x360>)
 8002402:	4442      	add	r2, r8
 8002404:	2a00      	cmp	r2, #0
 8002406:	d05d      	beq.n	80024c4 <__aeabi_dsub+0x274>
 8002408:	4642      	mov	r2, r8
 800240a:	4644      	mov	r4, r8
 800240c:	1a82      	subs	r2, r0, r2
 800240e:	2c00      	cmp	r4, #0
 8002410:	d000      	beq.n	8002414 <__aeabi_dsub+0x1c4>
 8002412:	e0f5      	b.n	8002600 <__aeabi_dsub+0x3b0>
 8002414:	4665      	mov	r5, ip
 8002416:	431d      	orrs	r5, r3
 8002418:	d100      	bne.n	800241c <__aeabi_dsub+0x1cc>
 800241a:	e19c      	b.n	8002756 <__aeabi_dsub+0x506>
 800241c:	1e55      	subs	r5, r2, #1
 800241e:	2a01      	cmp	r2, #1
 8002420:	d100      	bne.n	8002424 <__aeabi_dsub+0x1d4>
 8002422:	e1fb      	b.n	800281c <__aeabi_dsub+0x5cc>
 8002424:	4c60      	ldr	r4, [pc, #384]	; (80025a8 <__aeabi_dsub+0x358>)
 8002426:	42a2      	cmp	r2, r4
 8002428:	d100      	bne.n	800242c <__aeabi_dsub+0x1dc>
 800242a:	e1bd      	b.n	80027a8 <__aeabi_dsub+0x558>
 800242c:	002a      	movs	r2, r5
 800242e:	e0f0      	b.n	8002612 <__aeabi_dsub+0x3c2>
 8002430:	0008      	movs	r0, r1
 8002432:	4338      	orrs	r0, r7
 8002434:	d100      	bne.n	8002438 <__aeabi_dsub+0x1e8>
 8002436:	e0c3      	b.n	80025c0 <__aeabi_dsub+0x370>
 8002438:	1e50      	subs	r0, r2, #1
 800243a:	2a01      	cmp	r2, #1
 800243c:	d100      	bne.n	8002440 <__aeabi_dsub+0x1f0>
 800243e:	e1a8      	b.n	8002792 <__aeabi_dsub+0x542>
 8002440:	4c59      	ldr	r4, [pc, #356]	; (80025a8 <__aeabi_dsub+0x358>)
 8002442:	42a2      	cmp	r2, r4
 8002444:	d100      	bne.n	8002448 <__aeabi_dsub+0x1f8>
 8002446:	e087      	b.n	8002558 <__aeabi_dsub+0x308>
 8002448:	0002      	movs	r2, r0
 800244a:	e736      	b.n	80022ba <__aeabi_dsub+0x6a>
 800244c:	2201      	movs	r2, #1
 800244e:	4056      	eors	r6, r2
 8002450:	46b3      	mov	fp, r6
 8002452:	42b5      	cmp	r5, r6
 8002454:	d000      	beq.n	8002458 <__aeabi_dsub+0x208>
 8002456:	e721      	b.n	800229c <__aeabi_dsub+0x4c>
 8002458:	4a55      	ldr	r2, [pc, #340]	; (80025b0 <__aeabi_dsub+0x360>)
 800245a:	4442      	add	r2, r8
 800245c:	2a00      	cmp	r2, #0
 800245e:	d100      	bne.n	8002462 <__aeabi_dsub+0x212>
 8002460:	e0b5      	b.n	80025ce <__aeabi_dsub+0x37e>
 8002462:	4642      	mov	r2, r8
 8002464:	4644      	mov	r4, r8
 8002466:	1a82      	subs	r2, r0, r2
 8002468:	2c00      	cmp	r4, #0
 800246a:	d100      	bne.n	800246e <__aeabi_dsub+0x21e>
 800246c:	e138      	b.n	80026e0 <__aeabi_dsub+0x490>
 800246e:	4e4e      	ldr	r6, [pc, #312]	; (80025a8 <__aeabi_dsub+0x358>)
 8002470:	42b0      	cmp	r0, r6
 8002472:	d100      	bne.n	8002476 <__aeabi_dsub+0x226>
 8002474:	e1de      	b.n	8002834 <__aeabi_dsub+0x5e4>
 8002476:	2680      	movs	r6, #128	; 0x80
 8002478:	4664      	mov	r4, ip
 800247a:	0436      	lsls	r6, r6, #16
 800247c:	4334      	orrs	r4, r6
 800247e:	46a4      	mov	ip, r4
 8002480:	2a38      	cmp	r2, #56	; 0x38
 8002482:	dd00      	ble.n	8002486 <__aeabi_dsub+0x236>
 8002484:	e196      	b.n	80027b4 <__aeabi_dsub+0x564>
 8002486:	2a1f      	cmp	r2, #31
 8002488:	dd00      	ble.n	800248c <__aeabi_dsub+0x23c>
 800248a:	e224      	b.n	80028d6 <__aeabi_dsub+0x686>
 800248c:	2620      	movs	r6, #32
 800248e:	1ab4      	subs	r4, r6, r2
 8002490:	46a2      	mov	sl, r4
 8002492:	4664      	mov	r4, ip
 8002494:	4656      	mov	r6, sl
 8002496:	40b4      	lsls	r4, r6
 8002498:	46a1      	mov	r9, r4
 800249a:	001c      	movs	r4, r3
 800249c:	464e      	mov	r6, r9
 800249e:	40d4      	lsrs	r4, r2
 80024a0:	4326      	orrs	r6, r4
 80024a2:	0034      	movs	r4, r6
 80024a4:	4656      	mov	r6, sl
 80024a6:	40b3      	lsls	r3, r6
 80024a8:	1e5e      	subs	r6, r3, #1
 80024aa:	41b3      	sbcs	r3, r6
 80024ac:	431c      	orrs	r4, r3
 80024ae:	4663      	mov	r3, ip
 80024b0:	40d3      	lsrs	r3, r2
 80024b2:	18c9      	adds	r1, r1, r3
 80024b4:	19e4      	adds	r4, r4, r7
 80024b6:	42bc      	cmp	r4, r7
 80024b8:	41bf      	sbcs	r7, r7
 80024ba:	427f      	negs	r7, r7
 80024bc:	46b9      	mov	r9, r7
 80024be:	4680      	mov	r8, r0
 80024c0:	4489      	add	r9, r1
 80024c2:	e0d8      	b.n	8002676 <__aeabi_dsub+0x426>
 80024c4:	4640      	mov	r0, r8
 80024c6:	4c3b      	ldr	r4, [pc, #236]	; (80025b4 <__aeabi_dsub+0x364>)
 80024c8:	3001      	adds	r0, #1
 80024ca:	4220      	tst	r0, r4
 80024cc:	d000      	beq.n	80024d0 <__aeabi_dsub+0x280>
 80024ce:	e0b4      	b.n	800263a <__aeabi_dsub+0x3ea>
 80024d0:	4640      	mov	r0, r8
 80024d2:	2800      	cmp	r0, #0
 80024d4:	d000      	beq.n	80024d8 <__aeabi_dsub+0x288>
 80024d6:	e144      	b.n	8002762 <__aeabi_dsub+0x512>
 80024d8:	4660      	mov	r0, ip
 80024da:	4318      	orrs	r0, r3
 80024dc:	d100      	bne.n	80024e0 <__aeabi_dsub+0x290>
 80024de:	e190      	b.n	8002802 <__aeabi_dsub+0x5b2>
 80024e0:	0008      	movs	r0, r1
 80024e2:	4338      	orrs	r0, r7
 80024e4:	d000      	beq.n	80024e8 <__aeabi_dsub+0x298>
 80024e6:	e1aa      	b.n	800283e <__aeabi_dsub+0x5ee>
 80024e8:	4661      	mov	r1, ip
 80024ea:	08db      	lsrs	r3, r3, #3
 80024ec:	0749      	lsls	r1, r1, #29
 80024ee:	430b      	orrs	r3, r1
 80024f0:	4661      	mov	r1, ip
 80024f2:	08cc      	lsrs	r4, r1, #3
 80024f4:	e027      	b.n	8002546 <__aeabi_dsub+0x2f6>
 80024f6:	0008      	movs	r0, r1
 80024f8:	4338      	orrs	r0, r7
 80024fa:	d061      	beq.n	80025c0 <__aeabi_dsub+0x370>
 80024fc:	1e50      	subs	r0, r2, #1
 80024fe:	2a01      	cmp	r2, #1
 8002500:	d100      	bne.n	8002504 <__aeabi_dsub+0x2b4>
 8002502:	e139      	b.n	8002778 <__aeabi_dsub+0x528>
 8002504:	42a2      	cmp	r2, r4
 8002506:	d027      	beq.n	8002558 <__aeabi_dsub+0x308>
 8002508:	0002      	movs	r2, r0
 800250a:	e75d      	b.n	80023c8 <__aeabi_dsub+0x178>
 800250c:	0002      	movs	r2, r0
 800250e:	391f      	subs	r1, #31
 8002510:	40ca      	lsrs	r2, r1
 8002512:	0011      	movs	r1, r2
 8002514:	2b20      	cmp	r3, #32
 8002516:	d003      	beq.n	8002520 <__aeabi_dsub+0x2d0>
 8002518:	2240      	movs	r2, #64	; 0x40
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	4098      	lsls	r0, r3
 800251e:	4304      	orrs	r4, r0
 8002520:	1e63      	subs	r3, r4, #1
 8002522:	419c      	sbcs	r4, r3
 8002524:	2300      	movs	r3, #0
 8002526:	4699      	mov	r9, r3
 8002528:	4698      	mov	r8, r3
 800252a:	430c      	orrs	r4, r1
 800252c:	0763      	lsls	r3, r4, #29
 800252e:	d000      	beq.n	8002532 <__aeabi_dsub+0x2e2>
 8002530:	e712      	b.n	8002358 <__aeabi_dsub+0x108>
 8002532:	464b      	mov	r3, r9
 8002534:	464a      	mov	r2, r9
 8002536:	08e4      	lsrs	r4, r4, #3
 8002538:	075b      	lsls	r3, r3, #29
 800253a:	4323      	orrs	r3, r4
 800253c:	08d4      	lsrs	r4, r2, #3
 800253e:	4642      	mov	r2, r8
 8002540:	4919      	ldr	r1, [pc, #100]	; (80025a8 <__aeabi_dsub+0x358>)
 8002542:	428a      	cmp	r2, r1
 8002544:	d00e      	beq.n	8002564 <__aeabi_dsub+0x314>
 8002546:	0324      	lsls	r4, r4, #12
 8002548:	0552      	lsls	r2, r2, #21
 800254a:	0b24      	lsrs	r4, r4, #12
 800254c:	0d52      	lsrs	r2, r2, #21
 800254e:	e722      	b.n	8002396 <__aeabi_dsub+0x146>
 8002550:	000a      	movs	r2, r1
 8002552:	2400      	movs	r4, #0
 8002554:	2300      	movs	r3, #0
 8002556:	e71e      	b.n	8002396 <__aeabi_dsub+0x146>
 8002558:	08db      	lsrs	r3, r3, #3
 800255a:	4662      	mov	r2, ip
 800255c:	0752      	lsls	r2, r2, #29
 800255e:	4313      	orrs	r3, r2
 8002560:	4662      	mov	r2, ip
 8002562:	08d4      	lsrs	r4, r2, #3
 8002564:	001a      	movs	r2, r3
 8002566:	4322      	orrs	r2, r4
 8002568:	d100      	bne.n	800256c <__aeabi_dsub+0x31c>
 800256a:	e1fc      	b.n	8002966 <__aeabi_dsub+0x716>
 800256c:	2280      	movs	r2, #128	; 0x80
 800256e:	0312      	lsls	r2, r2, #12
 8002570:	4314      	orrs	r4, r2
 8002572:	0324      	lsls	r4, r4, #12
 8002574:	4a0c      	ldr	r2, [pc, #48]	; (80025a8 <__aeabi_dsub+0x358>)
 8002576:	0b24      	lsrs	r4, r4, #12
 8002578:	e70d      	b.n	8002396 <__aeabi_dsub+0x146>
 800257a:	0020      	movs	r0, r4
 800257c:	f000 fb74 	bl	8002c68 <__clzsi2>
 8002580:	0001      	movs	r1, r0
 8002582:	3118      	adds	r1, #24
 8002584:	291f      	cmp	r1, #31
 8002586:	dc00      	bgt.n	800258a <__aeabi_dsub+0x33a>
 8002588:	e6c4      	b.n	8002314 <__aeabi_dsub+0xc4>
 800258a:	3808      	subs	r0, #8
 800258c:	4084      	lsls	r4, r0
 800258e:	4643      	mov	r3, r8
 8002590:	0020      	movs	r0, r4
 8002592:	2400      	movs	r4, #0
 8002594:	4588      	cmp	r8, r1
 8002596:	dc00      	bgt.n	800259a <__aeabi_dsub+0x34a>
 8002598:	e6c8      	b.n	800232c <__aeabi_dsub+0xdc>
 800259a:	4a04      	ldr	r2, [pc, #16]	; (80025ac <__aeabi_dsub+0x35c>)
 800259c:	1a5b      	subs	r3, r3, r1
 800259e:	4010      	ands	r0, r2
 80025a0:	4698      	mov	r8, r3
 80025a2:	4681      	mov	r9, r0
 80025a4:	e6d6      	b.n	8002354 <__aeabi_dsub+0x104>
 80025a6:	46c0      	nop			; (mov r8, r8)
 80025a8:	000007ff 	.word	0x000007ff
 80025ac:	ff7fffff 	.word	0xff7fffff
 80025b0:	fffff801 	.word	0xfffff801
 80025b4:	000007fe 	.word	0x000007fe
 80025b8:	430f      	orrs	r7, r1
 80025ba:	1e7a      	subs	r2, r7, #1
 80025bc:	4197      	sbcs	r7, r2
 80025be:	e691      	b.n	80022e4 <__aeabi_dsub+0x94>
 80025c0:	4661      	mov	r1, ip
 80025c2:	08db      	lsrs	r3, r3, #3
 80025c4:	0749      	lsls	r1, r1, #29
 80025c6:	430b      	orrs	r3, r1
 80025c8:	4661      	mov	r1, ip
 80025ca:	08cc      	lsrs	r4, r1, #3
 80025cc:	e7b8      	b.n	8002540 <__aeabi_dsub+0x2f0>
 80025ce:	4640      	mov	r0, r8
 80025d0:	4cd3      	ldr	r4, [pc, #844]	; (8002920 <__aeabi_dsub+0x6d0>)
 80025d2:	3001      	adds	r0, #1
 80025d4:	4220      	tst	r0, r4
 80025d6:	d000      	beq.n	80025da <__aeabi_dsub+0x38a>
 80025d8:	e0a2      	b.n	8002720 <__aeabi_dsub+0x4d0>
 80025da:	4640      	mov	r0, r8
 80025dc:	2800      	cmp	r0, #0
 80025de:	d000      	beq.n	80025e2 <__aeabi_dsub+0x392>
 80025e0:	e101      	b.n	80027e6 <__aeabi_dsub+0x596>
 80025e2:	4660      	mov	r0, ip
 80025e4:	4318      	orrs	r0, r3
 80025e6:	d100      	bne.n	80025ea <__aeabi_dsub+0x39a>
 80025e8:	e15e      	b.n	80028a8 <__aeabi_dsub+0x658>
 80025ea:	0008      	movs	r0, r1
 80025ec:	4338      	orrs	r0, r7
 80025ee:	d000      	beq.n	80025f2 <__aeabi_dsub+0x3a2>
 80025f0:	e15f      	b.n	80028b2 <__aeabi_dsub+0x662>
 80025f2:	4661      	mov	r1, ip
 80025f4:	08db      	lsrs	r3, r3, #3
 80025f6:	0749      	lsls	r1, r1, #29
 80025f8:	430b      	orrs	r3, r1
 80025fa:	4661      	mov	r1, ip
 80025fc:	08cc      	lsrs	r4, r1, #3
 80025fe:	e7a2      	b.n	8002546 <__aeabi_dsub+0x2f6>
 8002600:	4dc8      	ldr	r5, [pc, #800]	; (8002924 <__aeabi_dsub+0x6d4>)
 8002602:	42a8      	cmp	r0, r5
 8002604:	d100      	bne.n	8002608 <__aeabi_dsub+0x3b8>
 8002606:	e0cf      	b.n	80027a8 <__aeabi_dsub+0x558>
 8002608:	2580      	movs	r5, #128	; 0x80
 800260a:	4664      	mov	r4, ip
 800260c:	042d      	lsls	r5, r5, #16
 800260e:	432c      	orrs	r4, r5
 8002610:	46a4      	mov	ip, r4
 8002612:	2a38      	cmp	r2, #56	; 0x38
 8002614:	dc56      	bgt.n	80026c4 <__aeabi_dsub+0x474>
 8002616:	2a1f      	cmp	r2, #31
 8002618:	dd00      	ble.n	800261c <__aeabi_dsub+0x3cc>
 800261a:	e0d1      	b.n	80027c0 <__aeabi_dsub+0x570>
 800261c:	2520      	movs	r5, #32
 800261e:	001e      	movs	r6, r3
 8002620:	1aad      	subs	r5, r5, r2
 8002622:	4664      	mov	r4, ip
 8002624:	40ab      	lsls	r3, r5
 8002626:	40ac      	lsls	r4, r5
 8002628:	40d6      	lsrs	r6, r2
 800262a:	1e5d      	subs	r5, r3, #1
 800262c:	41ab      	sbcs	r3, r5
 800262e:	4334      	orrs	r4, r6
 8002630:	4323      	orrs	r3, r4
 8002632:	4664      	mov	r4, ip
 8002634:	40d4      	lsrs	r4, r2
 8002636:	1b09      	subs	r1, r1, r4
 8002638:	e049      	b.n	80026ce <__aeabi_dsub+0x47e>
 800263a:	4660      	mov	r0, ip
 800263c:	1bdc      	subs	r4, r3, r7
 800263e:	1a46      	subs	r6, r0, r1
 8002640:	42a3      	cmp	r3, r4
 8002642:	4180      	sbcs	r0, r0
 8002644:	4240      	negs	r0, r0
 8002646:	4681      	mov	r9, r0
 8002648:	0030      	movs	r0, r6
 800264a:	464e      	mov	r6, r9
 800264c:	1b80      	subs	r0, r0, r6
 800264e:	4681      	mov	r9, r0
 8002650:	0200      	lsls	r0, r0, #8
 8002652:	d476      	bmi.n	8002742 <__aeabi_dsub+0x4f2>
 8002654:	464b      	mov	r3, r9
 8002656:	4323      	orrs	r3, r4
 8002658:	d000      	beq.n	800265c <__aeabi_dsub+0x40c>
 800265a:	e652      	b.n	8002302 <__aeabi_dsub+0xb2>
 800265c:	2400      	movs	r4, #0
 800265e:	2500      	movs	r5, #0
 8002660:	e771      	b.n	8002546 <__aeabi_dsub+0x2f6>
 8002662:	4339      	orrs	r1, r7
 8002664:	000c      	movs	r4, r1
 8002666:	1e62      	subs	r2, r4, #1
 8002668:	4194      	sbcs	r4, r2
 800266a:	18e4      	adds	r4, r4, r3
 800266c:	429c      	cmp	r4, r3
 800266e:	419b      	sbcs	r3, r3
 8002670:	425b      	negs	r3, r3
 8002672:	4463      	add	r3, ip
 8002674:	4699      	mov	r9, r3
 8002676:	464b      	mov	r3, r9
 8002678:	021b      	lsls	r3, r3, #8
 800267a:	d400      	bmi.n	800267e <__aeabi_dsub+0x42e>
 800267c:	e756      	b.n	800252c <__aeabi_dsub+0x2dc>
 800267e:	2301      	movs	r3, #1
 8002680:	469c      	mov	ip, r3
 8002682:	4ba8      	ldr	r3, [pc, #672]	; (8002924 <__aeabi_dsub+0x6d4>)
 8002684:	44e0      	add	r8, ip
 8002686:	4598      	cmp	r8, r3
 8002688:	d038      	beq.n	80026fc <__aeabi_dsub+0x4ac>
 800268a:	464b      	mov	r3, r9
 800268c:	48a6      	ldr	r0, [pc, #664]	; (8002928 <__aeabi_dsub+0x6d8>)
 800268e:	2201      	movs	r2, #1
 8002690:	4003      	ands	r3, r0
 8002692:	0018      	movs	r0, r3
 8002694:	0863      	lsrs	r3, r4, #1
 8002696:	4014      	ands	r4, r2
 8002698:	431c      	orrs	r4, r3
 800269a:	07c3      	lsls	r3, r0, #31
 800269c:	431c      	orrs	r4, r3
 800269e:	0843      	lsrs	r3, r0, #1
 80026a0:	4699      	mov	r9, r3
 80026a2:	e657      	b.n	8002354 <__aeabi_dsub+0x104>
 80026a4:	0010      	movs	r0, r2
 80026a6:	000e      	movs	r6, r1
 80026a8:	3820      	subs	r0, #32
 80026aa:	40c6      	lsrs	r6, r0
 80026ac:	2a20      	cmp	r2, #32
 80026ae:	d004      	beq.n	80026ba <__aeabi_dsub+0x46a>
 80026b0:	2040      	movs	r0, #64	; 0x40
 80026b2:	1a82      	subs	r2, r0, r2
 80026b4:	4091      	lsls	r1, r2
 80026b6:	430f      	orrs	r7, r1
 80026b8:	46b9      	mov	r9, r7
 80026ba:	464f      	mov	r7, r9
 80026bc:	1e7a      	subs	r2, r7, #1
 80026be:	4197      	sbcs	r7, r2
 80026c0:	4337      	orrs	r7, r6
 80026c2:	e60f      	b.n	80022e4 <__aeabi_dsub+0x94>
 80026c4:	4662      	mov	r2, ip
 80026c6:	431a      	orrs	r2, r3
 80026c8:	0013      	movs	r3, r2
 80026ca:	1e5a      	subs	r2, r3, #1
 80026cc:	4193      	sbcs	r3, r2
 80026ce:	1afc      	subs	r4, r7, r3
 80026d0:	42a7      	cmp	r7, r4
 80026d2:	41bf      	sbcs	r7, r7
 80026d4:	427f      	negs	r7, r7
 80026d6:	1bcb      	subs	r3, r1, r7
 80026d8:	4699      	mov	r9, r3
 80026da:	465d      	mov	r5, fp
 80026dc:	4680      	mov	r8, r0
 80026de:	e608      	b.n	80022f2 <__aeabi_dsub+0xa2>
 80026e0:	4666      	mov	r6, ip
 80026e2:	431e      	orrs	r6, r3
 80026e4:	d100      	bne.n	80026e8 <__aeabi_dsub+0x498>
 80026e6:	e0be      	b.n	8002866 <__aeabi_dsub+0x616>
 80026e8:	1e56      	subs	r6, r2, #1
 80026ea:	2a01      	cmp	r2, #1
 80026ec:	d100      	bne.n	80026f0 <__aeabi_dsub+0x4a0>
 80026ee:	e109      	b.n	8002904 <__aeabi_dsub+0x6b4>
 80026f0:	4c8c      	ldr	r4, [pc, #560]	; (8002924 <__aeabi_dsub+0x6d4>)
 80026f2:	42a2      	cmp	r2, r4
 80026f4:	d100      	bne.n	80026f8 <__aeabi_dsub+0x4a8>
 80026f6:	e119      	b.n	800292c <__aeabi_dsub+0x6dc>
 80026f8:	0032      	movs	r2, r6
 80026fa:	e6c1      	b.n	8002480 <__aeabi_dsub+0x230>
 80026fc:	4642      	mov	r2, r8
 80026fe:	2400      	movs	r4, #0
 8002700:	2300      	movs	r3, #0
 8002702:	e648      	b.n	8002396 <__aeabi_dsub+0x146>
 8002704:	2020      	movs	r0, #32
 8002706:	000c      	movs	r4, r1
 8002708:	1a80      	subs	r0, r0, r2
 800270a:	003e      	movs	r6, r7
 800270c:	4087      	lsls	r7, r0
 800270e:	4084      	lsls	r4, r0
 8002710:	40d6      	lsrs	r6, r2
 8002712:	1e78      	subs	r0, r7, #1
 8002714:	4187      	sbcs	r7, r0
 8002716:	40d1      	lsrs	r1, r2
 8002718:	4334      	orrs	r4, r6
 800271a:	433c      	orrs	r4, r7
 800271c:	448c      	add	ip, r1
 800271e:	e7a4      	b.n	800266a <__aeabi_dsub+0x41a>
 8002720:	4a80      	ldr	r2, [pc, #512]	; (8002924 <__aeabi_dsub+0x6d4>)
 8002722:	4290      	cmp	r0, r2
 8002724:	d100      	bne.n	8002728 <__aeabi_dsub+0x4d8>
 8002726:	e0e9      	b.n	80028fc <__aeabi_dsub+0x6ac>
 8002728:	19df      	adds	r7, r3, r7
 800272a:	429f      	cmp	r7, r3
 800272c:	419b      	sbcs	r3, r3
 800272e:	4461      	add	r1, ip
 8002730:	425b      	negs	r3, r3
 8002732:	18c9      	adds	r1, r1, r3
 8002734:	07cc      	lsls	r4, r1, #31
 8002736:	087f      	lsrs	r7, r7, #1
 8002738:	084b      	lsrs	r3, r1, #1
 800273a:	4699      	mov	r9, r3
 800273c:	4680      	mov	r8, r0
 800273e:	433c      	orrs	r4, r7
 8002740:	e6f4      	b.n	800252c <__aeabi_dsub+0x2dc>
 8002742:	1afc      	subs	r4, r7, r3
 8002744:	42a7      	cmp	r7, r4
 8002746:	41bf      	sbcs	r7, r7
 8002748:	4663      	mov	r3, ip
 800274a:	427f      	negs	r7, r7
 800274c:	1ac9      	subs	r1, r1, r3
 800274e:	1bcb      	subs	r3, r1, r7
 8002750:	4699      	mov	r9, r3
 8002752:	465d      	mov	r5, fp
 8002754:	e5d5      	b.n	8002302 <__aeabi_dsub+0xb2>
 8002756:	08ff      	lsrs	r7, r7, #3
 8002758:	074b      	lsls	r3, r1, #29
 800275a:	465d      	mov	r5, fp
 800275c:	433b      	orrs	r3, r7
 800275e:	08cc      	lsrs	r4, r1, #3
 8002760:	e6ee      	b.n	8002540 <__aeabi_dsub+0x2f0>
 8002762:	4662      	mov	r2, ip
 8002764:	431a      	orrs	r2, r3
 8002766:	d000      	beq.n	800276a <__aeabi_dsub+0x51a>
 8002768:	e082      	b.n	8002870 <__aeabi_dsub+0x620>
 800276a:	000b      	movs	r3, r1
 800276c:	433b      	orrs	r3, r7
 800276e:	d11b      	bne.n	80027a8 <__aeabi_dsub+0x558>
 8002770:	2480      	movs	r4, #128	; 0x80
 8002772:	2500      	movs	r5, #0
 8002774:	0324      	lsls	r4, r4, #12
 8002776:	e6f9      	b.n	800256c <__aeabi_dsub+0x31c>
 8002778:	19dc      	adds	r4, r3, r7
 800277a:	429c      	cmp	r4, r3
 800277c:	419b      	sbcs	r3, r3
 800277e:	4461      	add	r1, ip
 8002780:	4689      	mov	r9, r1
 8002782:	425b      	negs	r3, r3
 8002784:	4499      	add	r9, r3
 8002786:	464b      	mov	r3, r9
 8002788:	021b      	lsls	r3, r3, #8
 800278a:	d444      	bmi.n	8002816 <__aeabi_dsub+0x5c6>
 800278c:	2301      	movs	r3, #1
 800278e:	4698      	mov	r8, r3
 8002790:	e6cc      	b.n	800252c <__aeabi_dsub+0x2dc>
 8002792:	1bdc      	subs	r4, r3, r7
 8002794:	4662      	mov	r2, ip
 8002796:	42a3      	cmp	r3, r4
 8002798:	419b      	sbcs	r3, r3
 800279a:	1a51      	subs	r1, r2, r1
 800279c:	425b      	negs	r3, r3
 800279e:	1acb      	subs	r3, r1, r3
 80027a0:	4699      	mov	r9, r3
 80027a2:	2301      	movs	r3, #1
 80027a4:	4698      	mov	r8, r3
 80027a6:	e5a4      	b.n	80022f2 <__aeabi_dsub+0xa2>
 80027a8:	08ff      	lsrs	r7, r7, #3
 80027aa:	074b      	lsls	r3, r1, #29
 80027ac:	465d      	mov	r5, fp
 80027ae:	433b      	orrs	r3, r7
 80027b0:	08cc      	lsrs	r4, r1, #3
 80027b2:	e6d7      	b.n	8002564 <__aeabi_dsub+0x314>
 80027b4:	4662      	mov	r2, ip
 80027b6:	431a      	orrs	r2, r3
 80027b8:	0014      	movs	r4, r2
 80027ba:	1e63      	subs	r3, r4, #1
 80027bc:	419c      	sbcs	r4, r3
 80027be:	e679      	b.n	80024b4 <__aeabi_dsub+0x264>
 80027c0:	0015      	movs	r5, r2
 80027c2:	4664      	mov	r4, ip
 80027c4:	3d20      	subs	r5, #32
 80027c6:	40ec      	lsrs	r4, r5
 80027c8:	46a0      	mov	r8, r4
 80027ca:	2a20      	cmp	r2, #32
 80027cc:	d005      	beq.n	80027da <__aeabi_dsub+0x58a>
 80027ce:	2540      	movs	r5, #64	; 0x40
 80027d0:	4664      	mov	r4, ip
 80027d2:	1aaa      	subs	r2, r5, r2
 80027d4:	4094      	lsls	r4, r2
 80027d6:	4323      	orrs	r3, r4
 80027d8:	469a      	mov	sl, r3
 80027da:	4654      	mov	r4, sl
 80027dc:	1e63      	subs	r3, r4, #1
 80027de:	419c      	sbcs	r4, r3
 80027e0:	4643      	mov	r3, r8
 80027e2:	4323      	orrs	r3, r4
 80027e4:	e773      	b.n	80026ce <__aeabi_dsub+0x47e>
 80027e6:	4662      	mov	r2, ip
 80027e8:	431a      	orrs	r2, r3
 80027ea:	d023      	beq.n	8002834 <__aeabi_dsub+0x5e4>
 80027ec:	000a      	movs	r2, r1
 80027ee:	433a      	orrs	r2, r7
 80027f0:	d000      	beq.n	80027f4 <__aeabi_dsub+0x5a4>
 80027f2:	e0a0      	b.n	8002936 <__aeabi_dsub+0x6e6>
 80027f4:	4662      	mov	r2, ip
 80027f6:	08db      	lsrs	r3, r3, #3
 80027f8:	0752      	lsls	r2, r2, #29
 80027fa:	4313      	orrs	r3, r2
 80027fc:	4662      	mov	r2, ip
 80027fe:	08d4      	lsrs	r4, r2, #3
 8002800:	e6b0      	b.n	8002564 <__aeabi_dsub+0x314>
 8002802:	000b      	movs	r3, r1
 8002804:	433b      	orrs	r3, r7
 8002806:	d100      	bne.n	800280a <__aeabi_dsub+0x5ba>
 8002808:	e728      	b.n	800265c <__aeabi_dsub+0x40c>
 800280a:	08ff      	lsrs	r7, r7, #3
 800280c:	074b      	lsls	r3, r1, #29
 800280e:	465d      	mov	r5, fp
 8002810:	433b      	orrs	r3, r7
 8002812:	08cc      	lsrs	r4, r1, #3
 8002814:	e697      	b.n	8002546 <__aeabi_dsub+0x2f6>
 8002816:	2302      	movs	r3, #2
 8002818:	4698      	mov	r8, r3
 800281a:	e736      	b.n	800268a <__aeabi_dsub+0x43a>
 800281c:	1afc      	subs	r4, r7, r3
 800281e:	42a7      	cmp	r7, r4
 8002820:	41bf      	sbcs	r7, r7
 8002822:	4663      	mov	r3, ip
 8002824:	427f      	negs	r7, r7
 8002826:	1ac9      	subs	r1, r1, r3
 8002828:	1bcb      	subs	r3, r1, r7
 800282a:	4699      	mov	r9, r3
 800282c:	2301      	movs	r3, #1
 800282e:	465d      	mov	r5, fp
 8002830:	4698      	mov	r8, r3
 8002832:	e55e      	b.n	80022f2 <__aeabi_dsub+0xa2>
 8002834:	074b      	lsls	r3, r1, #29
 8002836:	08ff      	lsrs	r7, r7, #3
 8002838:	433b      	orrs	r3, r7
 800283a:	08cc      	lsrs	r4, r1, #3
 800283c:	e692      	b.n	8002564 <__aeabi_dsub+0x314>
 800283e:	1bdc      	subs	r4, r3, r7
 8002840:	4660      	mov	r0, ip
 8002842:	42a3      	cmp	r3, r4
 8002844:	41b6      	sbcs	r6, r6
 8002846:	1a40      	subs	r0, r0, r1
 8002848:	4276      	negs	r6, r6
 800284a:	1b80      	subs	r0, r0, r6
 800284c:	4681      	mov	r9, r0
 800284e:	0200      	lsls	r0, r0, #8
 8002850:	d560      	bpl.n	8002914 <__aeabi_dsub+0x6c4>
 8002852:	1afc      	subs	r4, r7, r3
 8002854:	42a7      	cmp	r7, r4
 8002856:	41bf      	sbcs	r7, r7
 8002858:	4663      	mov	r3, ip
 800285a:	427f      	negs	r7, r7
 800285c:	1ac9      	subs	r1, r1, r3
 800285e:	1bcb      	subs	r3, r1, r7
 8002860:	4699      	mov	r9, r3
 8002862:	465d      	mov	r5, fp
 8002864:	e576      	b.n	8002354 <__aeabi_dsub+0x104>
 8002866:	08ff      	lsrs	r7, r7, #3
 8002868:	074b      	lsls	r3, r1, #29
 800286a:	433b      	orrs	r3, r7
 800286c:	08cc      	lsrs	r4, r1, #3
 800286e:	e667      	b.n	8002540 <__aeabi_dsub+0x2f0>
 8002870:	000a      	movs	r2, r1
 8002872:	08db      	lsrs	r3, r3, #3
 8002874:	433a      	orrs	r2, r7
 8002876:	d100      	bne.n	800287a <__aeabi_dsub+0x62a>
 8002878:	e66f      	b.n	800255a <__aeabi_dsub+0x30a>
 800287a:	4662      	mov	r2, ip
 800287c:	0752      	lsls	r2, r2, #29
 800287e:	4313      	orrs	r3, r2
 8002880:	4662      	mov	r2, ip
 8002882:	08d4      	lsrs	r4, r2, #3
 8002884:	2280      	movs	r2, #128	; 0x80
 8002886:	0312      	lsls	r2, r2, #12
 8002888:	4214      	tst	r4, r2
 800288a:	d007      	beq.n	800289c <__aeabi_dsub+0x64c>
 800288c:	08c8      	lsrs	r0, r1, #3
 800288e:	4210      	tst	r0, r2
 8002890:	d104      	bne.n	800289c <__aeabi_dsub+0x64c>
 8002892:	465d      	mov	r5, fp
 8002894:	0004      	movs	r4, r0
 8002896:	08fb      	lsrs	r3, r7, #3
 8002898:	0749      	lsls	r1, r1, #29
 800289a:	430b      	orrs	r3, r1
 800289c:	0f5a      	lsrs	r2, r3, #29
 800289e:	00db      	lsls	r3, r3, #3
 80028a0:	08db      	lsrs	r3, r3, #3
 80028a2:	0752      	lsls	r2, r2, #29
 80028a4:	4313      	orrs	r3, r2
 80028a6:	e65d      	b.n	8002564 <__aeabi_dsub+0x314>
 80028a8:	074b      	lsls	r3, r1, #29
 80028aa:	08ff      	lsrs	r7, r7, #3
 80028ac:	433b      	orrs	r3, r7
 80028ae:	08cc      	lsrs	r4, r1, #3
 80028b0:	e649      	b.n	8002546 <__aeabi_dsub+0x2f6>
 80028b2:	19dc      	adds	r4, r3, r7
 80028b4:	429c      	cmp	r4, r3
 80028b6:	419b      	sbcs	r3, r3
 80028b8:	4461      	add	r1, ip
 80028ba:	4689      	mov	r9, r1
 80028bc:	425b      	negs	r3, r3
 80028be:	4499      	add	r9, r3
 80028c0:	464b      	mov	r3, r9
 80028c2:	021b      	lsls	r3, r3, #8
 80028c4:	d400      	bmi.n	80028c8 <__aeabi_dsub+0x678>
 80028c6:	e631      	b.n	800252c <__aeabi_dsub+0x2dc>
 80028c8:	464a      	mov	r2, r9
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <__aeabi_dsub+0x6d8>)
 80028cc:	401a      	ands	r2, r3
 80028ce:	2301      	movs	r3, #1
 80028d0:	4691      	mov	r9, r2
 80028d2:	4698      	mov	r8, r3
 80028d4:	e62a      	b.n	800252c <__aeabi_dsub+0x2dc>
 80028d6:	0016      	movs	r6, r2
 80028d8:	4664      	mov	r4, ip
 80028da:	3e20      	subs	r6, #32
 80028dc:	40f4      	lsrs	r4, r6
 80028de:	46a0      	mov	r8, r4
 80028e0:	2a20      	cmp	r2, #32
 80028e2:	d005      	beq.n	80028f0 <__aeabi_dsub+0x6a0>
 80028e4:	2640      	movs	r6, #64	; 0x40
 80028e6:	4664      	mov	r4, ip
 80028e8:	1ab2      	subs	r2, r6, r2
 80028ea:	4094      	lsls	r4, r2
 80028ec:	4323      	orrs	r3, r4
 80028ee:	469a      	mov	sl, r3
 80028f0:	4654      	mov	r4, sl
 80028f2:	1e63      	subs	r3, r4, #1
 80028f4:	419c      	sbcs	r4, r3
 80028f6:	4643      	mov	r3, r8
 80028f8:	431c      	orrs	r4, r3
 80028fa:	e5db      	b.n	80024b4 <__aeabi_dsub+0x264>
 80028fc:	0002      	movs	r2, r0
 80028fe:	2400      	movs	r4, #0
 8002900:	2300      	movs	r3, #0
 8002902:	e548      	b.n	8002396 <__aeabi_dsub+0x146>
 8002904:	19dc      	adds	r4, r3, r7
 8002906:	42bc      	cmp	r4, r7
 8002908:	41bf      	sbcs	r7, r7
 800290a:	4461      	add	r1, ip
 800290c:	4689      	mov	r9, r1
 800290e:	427f      	negs	r7, r7
 8002910:	44b9      	add	r9, r7
 8002912:	e738      	b.n	8002786 <__aeabi_dsub+0x536>
 8002914:	464b      	mov	r3, r9
 8002916:	4323      	orrs	r3, r4
 8002918:	d100      	bne.n	800291c <__aeabi_dsub+0x6cc>
 800291a:	e69f      	b.n	800265c <__aeabi_dsub+0x40c>
 800291c:	e606      	b.n	800252c <__aeabi_dsub+0x2dc>
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	000007fe 	.word	0x000007fe
 8002924:	000007ff 	.word	0x000007ff
 8002928:	ff7fffff 	.word	0xff7fffff
 800292c:	08ff      	lsrs	r7, r7, #3
 800292e:	074b      	lsls	r3, r1, #29
 8002930:	433b      	orrs	r3, r7
 8002932:	08cc      	lsrs	r4, r1, #3
 8002934:	e616      	b.n	8002564 <__aeabi_dsub+0x314>
 8002936:	4662      	mov	r2, ip
 8002938:	08db      	lsrs	r3, r3, #3
 800293a:	0752      	lsls	r2, r2, #29
 800293c:	4313      	orrs	r3, r2
 800293e:	4662      	mov	r2, ip
 8002940:	08d4      	lsrs	r4, r2, #3
 8002942:	2280      	movs	r2, #128	; 0x80
 8002944:	0312      	lsls	r2, r2, #12
 8002946:	4214      	tst	r4, r2
 8002948:	d007      	beq.n	800295a <__aeabi_dsub+0x70a>
 800294a:	08c8      	lsrs	r0, r1, #3
 800294c:	4210      	tst	r0, r2
 800294e:	d104      	bne.n	800295a <__aeabi_dsub+0x70a>
 8002950:	465d      	mov	r5, fp
 8002952:	0004      	movs	r4, r0
 8002954:	08fb      	lsrs	r3, r7, #3
 8002956:	0749      	lsls	r1, r1, #29
 8002958:	430b      	orrs	r3, r1
 800295a:	0f5a      	lsrs	r2, r3, #29
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	0752      	lsls	r2, r2, #29
 8002960:	08db      	lsrs	r3, r3, #3
 8002962:	4313      	orrs	r3, r2
 8002964:	e5fe      	b.n	8002564 <__aeabi_dsub+0x314>
 8002966:	2300      	movs	r3, #0
 8002968:	4a01      	ldr	r2, [pc, #4]	; (8002970 <__aeabi_dsub+0x720>)
 800296a:	001c      	movs	r4, r3
 800296c:	e513      	b.n	8002396 <__aeabi_dsub+0x146>
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	000007ff 	.word	0x000007ff

08002974 <__aeabi_dcmpun>:
 8002974:	b570      	push	{r4, r5, r6, lr}
 8002976:	0005      	movs	r5, r0
 8002978:	480c      	ldr	r0, [pc, #48]	; (80029ac <__aeabi_dcmpun+0x38>)
 800297a:	031c      	lsls	r4, r3, #12
 800297c:	0016      	movs	r6, r2
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	030a      	lsls	r2, r1, #12
 8002982:	0049      	lsls	r1, r1, #1
 8002984:	0b12      	lsrs	r2, r2, #12
 8002986:	0d49      	lsrs	r1, r1, #21
 8002988:	0b24      	lsrs	r4, r4, #12
 800298a:	0d5b      	lsrs	r3, r3, #21
 800298c:	4281      	cmp	r1, r0
 800298e:	d008      	beq.n	80029a2 <__aeabi_dcmpun+0x2e>
 8002990:	4a06      	ldr	r2, [pc, #24]	; (80029ac <__aeabi_dcmpun+0x38>)
 8002992:	2000      	movs	r0, #0
 8002994:	4293      	cmp	r3, r2
 8002996:	d103      	bne.n	80029a0 <__aeabi_dcmpun+0x2c>
 8002998:	0020      	movs	r0, r4
 800299a:	4330      	orrs	r0, r6
 800299c:	1e43      	subs	r3, r0, #1
 800299e:	4198      	sbcs	r0, r3
 80029a0:	bd70      	pop	{r4, r5, r6, pc}
 80029a2:	2001      	movs	r0, #1
 80029a4:	432a      	orrs	r2, r5
 80029a6:	d1fb      	bne.n	80029a0 <__aeabi_dcmpun+0x2c>
 80029a8:	e7f2      	b.n	8002990 <__aeabi_dcmpun+0x1c>
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	000007ff 	.word	0x000007ff

080029b0 <__aeabi_d2iz>:
 80029b0:	000a      	movs	r2, r1
 80029b2:	b530      	push	{r4, r5, lr}
 80029b4:	4c13      	ldr	r4, [pc, #76]	; (8002a04 <__aeabi_d2iz+0x54>)
 80029b6:	0053      	lsls	r3, r2, #1
 80029b8:	0309      	lsls	r1, r1, #12
 80029ba:	0005      	movs	r5, r0
 80029bc:	0b09      	lsrs	r1, r1, #12
 80029be:	2000      	movs	r0, #0
 80029c0:	0d5b      	lsrs	r3, r3, #21
 80029c2:	0fd2      	lsrs	r2, r2, #31
 80029c4:	42a3      	cmp	r3, r4
 80029c6:	dd04      	ble.n	80029d2 <__aeabi_d2iz+0x22>
 80029c8:	480f      	ldr	r0, [pc, #60]	; (8002a08 <__aeabi_d2iz+0x58>)
 80029ca:	4283      	cmp	r3, r0
 80029cc:	dd02      	ble.n	80029d4 <__aeabi_d2iz+0x24>
 80029ce:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <__aeabi_d2iz+0x5c>)
 80029d0:	18d0      	adds	r0, r2, r3
 80029d2:	bd30      	pop	{r4, r5, pc}
 80029d4:	2080      	movs	r0, #128	; 0x80
 80029d6:	0340      	lsls	r0, r0, #13
 80029d8:	4301      	orrs	r1, r0
 80029da:	480d      	ldr	r0, [pc, #52]	; (8002a10 <__aeabi_d2iz+0x60>)
 80029dc:	1ac0      	subs	r0, r0, r3
 80029de:	281f      	cmp	r0, #31
 80029e0:	dd08      	ble.n	80029f4 <__aeabi_d2iz+0x44>
 80029e2:	480c      	ldr	r0, [pc, #48]	; (8002a14 <__aeabi_d2iz+0x64>)
 80029e4:	1ac3      	subs	r3, r0, r3
 80029e6:	40d9      	lsrs	r1, r3
 80029e8:	000b      	movs	r3, r1
 80029ea:	4258      	negs	r0, r3
 80029ec:	2a00      	cmp	r2, #0
 80029ee:	d1f0      	bne.n	80029d2 <__aeabi_d2iz+0x22>
 80029f0:	0018      	movs	r0, r3
 80029f2:	e7ee      	b.n	80029d2 <__aeabi_d2iz+0x22>
 80029f4:	4c08      	ldr	r4, [pc, #32]	; (8002a18 <__aeabi_d2iz+0x68>)
 80029f6:	40c5      	lsrs	r5, r0
 80029f8:	46a4      	mov	ip, r4
 80029fa:	4463      	add	r3, ip
 80029fc:	4099      	lsls	r1, r3
 80029fe:	000b      	movs	r3, r1
 8002a00:	432b      	orrs	r3, r5
 8002a02:	e7f2      	b.n	80029ea <__aeabi_d2iz+0x3a>
 8002a04:	000003fe 	.word	0x000003fe
 8002a08:	0000041d 	.word	0x0000041d
 8002a0c:	7fffffff 	.word	0x7fffffff
 8002a10:	00000433 	.word	0x00000433
 8002a14:	00000413 	.word	0x00000413
 8002a18:	fffffbed 	.word	0xfffffbed

08002a1c <__aeabi_i2d>:
 8002a1c:	b570      	push	{r4, r5, r6, lr}
 8002a1e:	2800      	cmp	r0, #0
 8002a20:	d016      	beq.n	8002a50 <__aeabi_i2d+0x34>
 8002a22:	17c3      	asrs	r3, r0, #31
 8002a24:	18c5      	adds	r5, r0, r3
 8002a26:	405d      	eors	r5, r3
 8002a28:	0fc4      	lsrs	r4, r0, #31
 8002a2a:	0028      	movs	r0, r5
 8002a2c:	f000 f91c 	bl	8002c68 <__clzsi2>
 8002a30:	4a11      	ldr	r2, [pc, #68]	; (8002a78 <__aeabi_i2d+0x5c>)
 8002a32:	1a12      	subs	r2, r2, r0
 8002a34:	280a      	cmp	r0, #10
 8002a36:	dc16      	bgt.n	8002a66 <__aeabi_i2d+0x4a>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	002e      	movs	r6, r5
 8002a3c:	3315      	adds	r3, #21
 8002a3e:	409e      	lsls	r6, r3
 8002a40:	230b      	movs	r3, #11
 8002a42:	1a18      	subs	r0, r3, r0
 8002a44:	40c5      	lsrs	r5, r0
 8002a46:	0552      	lsls	r2, r2, #21
 8002a48:	032d      	lsls	r5, r5, #12
 8002a4a:	0b2d      	lsrs	r5, r5, #12
 8002a4c:	0d53      	lsrs	r3, r2, #21
 8002a4e:	e003      	b.n	8002a58 <__aeabi_i2d+0x3c>
 8002a50:	2400      	movs	r4, #0
 8002a52:	2300      	movs	r3, #0
 8002a54:	2500      	movs	r5, #0
 8002a56:	2600      	movs	r6, #0
 8002a58:	051b      	lsls	r3, r3, #20
 8002a5a:	432b      	orrs	r3, r5
 8002a5c:	07e4      	lsls	r4, r4, #31
 8002a5e:	4323      	orrs	r3, r4
 8002a60:	0030      	movs	r0, r6
 8002a62:	0019      	movs	r1, r3
 8002a64:	bd70      	pop	{r4, r5, r6, pc}
 8002a66:	380b      	subs	r0, #11
 8002a68:	4085      	lsls	r5, r0
 8002a6a:	0552      	lsls	r2, r2, #21
 8002a6c:	032d      	lsls	r5, r5, #12
 8002a6e:	2600      	movs	r6, #0
 8002a70:	0b2d      	lsrs	r5, r5, #12
 8002a72:	0d53      	lsrs	r3, r2, #21
 8002a74:	e7f0      	b.n	8002a58 <__aeabi_i2d+0x3c>
 8002a76:	46c0      	nop			; (mov r8, r8)
 8002a78:	0000041e 	.word	0x0000041e

08002a7c <__aeabi_ui2d>:
 8002a7c:	b510      	push	{r4, lr}
 8002a7e:	1e04      	subs	r4, r0, #0
 8002a80:	d010      	beq.n	8002aa4 <__aeabi_ui2d+0x28>
 8002a82:	f000 f8f1 	bl	8002c68 <__clzsi2>
 8002a86:	4b0f      	ldr	r3, [pc, #60]	; (8002ac4 <__aeabi_ui2d+0x48>)
 8002a88:	1a1b      	subs	r3, r3, r0
 8002a8a:	280a      	cmp	r0, #10
 8002a8c:	dc11      	bgt.n	8002ab2 <__aeabi_ui2d+0x36>
 8002a8e:	220b      	movs	r2, #11
 8002a90:	0021      	movs	r1, r4
 8002a92:	1a12      	subs	r2, r2, r0
 8002a94:	40d1      	lsrs	r1, r2
 8002a96:	3015      	adds	r0, #21
 8002a98:	030a      	lsls	r2, r1, #12
 8002a9a:	055b      	lsls	r3, r3, #21
 8002a9c:	4084      	lsls	r4, r0
 8002a9e:	0b12      	lsrs	r2, r2, #12
 8002aa0:	0d5b      	lsrs	r3, r3, #21
 8002aa2:	e001      	b.n	8002aa8 <__aeabi_ui2d+0x2c>
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	051b      	lsls	r3, r3, #20
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	0020      	movs	r0, r4
 8002aae:	0019      	movs	r1, r3
 8002ab0:	bd10      	pop	{r4, pc}
 8002ab2:	0022      	movs	r2, r4
 8002ab4:	380b      	subs	r0, #11
 8002ab6:	4082      	lsls	r2, r0
 8002ab8:	055b      	lsls	r3, r3, #21
 8002aba:	0312      	lsls	r2, r2, #12
 8002abc:	2400      	movs	r4, #0
 8002abe:	0b12      	lsrs	r2, r2, #12
 8002ac0:	0d5b      	lsrs	r3, r3, #21
 8002ac2:	e7f1      	b.n	8002aa8 <__aeabi_ui2d+0x2c>
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_f2d>:
 8002ac8:	b570      	push	{r4, r5, r6, lr}
 8002aca:	0043      	lsls	r3, r0, #1
 8002acc:	0246      	lsls	r6, r0, #9
 8002ace:	0fc4      	lsrs	r4, r0, #31
 8002ad0:	20fe      	movs	r0, #254	; 0xfe
 8002ad2:	0e1b      	lsrs	r3, r3, #24
 8002ad4:	1c59      	adds	r1, r3, #1
 8002ad6:	0a75      	lsrs	r5, r6, #9
 8002ad8:	4208      	tst	r0, r1
 8002ada:	d00c      	beq.n	8002af6 <__aeabi_f2d+0x2e>
 8002adc:	22e0      	movs	r2, #224	; 0xe0
 8002ade:	0092      	lsls	r2, r2, #2
 8002ae0:	4694      	mov	ip, r2
 8002ae2:	076d      	lsls	r5, r5, #29
 8002ae4:	0b36      	lsrs	r6, r6, #12
 8002ae6:	4463      	add	r3, ip
 8002ae8:	051b      	lsls	r3, r3, #20
 8002aea:	4333      	orrs	r3, r6
 8002aec:	07e4      	lsls	r4, r4, #31
 8002aee:	4323      	orrs	r3, r4
 8002af0:	0028      	movs	r0, r5
 8002af2:	0019      	movs	r1, r3
 8002af4:	bd70      	pop	{r4, r5, r6, pc}
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d114      	bne.n	8002b24 <__aeabi_f2d+0x5c>
 8002afa:	2d00      	cmp	r5, #0
 8002afc:	d01b      	beq.n	8002b36 <__aeabi_f2d+0x6e>
 8002afe:	0028      	movs	r0, r5
 8002b00:	f000 f8b2 	bl	8002c68 <__clzsi2>
 8002b04:	280a      	cmp	r0, #10
 8002b06:	dc1c      	bgt.n	8002b42 <__aeabi_f2d+0x7a>
 8002b08:	230b      	movs	r3, #11
 8002b0a:	002e      	movs	r6, r5
 8002b0c:	1a1b      	subs	r3, r3, r0
 8002b0e:	40de      	lsrs	r6, r3
 8002b10:	0003      	movs	r3, r0
 8002b12:	3315      	adds	r3, #21
 8002b14:	409d      	lsls	r5, r3
 8002b16:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <__aeabi_f2d+0x88>)
 8002b18:	0336      	lsls	r6, r6, #12
 8002b1a:	1a12      	subs	r2, r2, r0
 8002b1c:	0552      	lsls	r2, r2, #21
 8002b1e:	0b36      	lsrs	r6, r6, #12
 8002b20:	0d53      	lsrs	r3, r2, #21
 8002b22:	e7e1      	b.n	8002ae8 <__aeabi_f2d+0x20>
 8002b24:	2d00      	cmp	r5, #0
 8002b26:	d009      	beq.n	8002b3c <__aeabi_f2d+0x74>
 8002b28:	2280      	movs	r2, #128	; 0x80
 8002b2a:	0b36      	lsrs	r6, r6, #12
 8002b2c:	0312      	lsls	r2, r2, #12
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <__aeabi_f2d+0x8c>)
 8002b30:	076d      	lsls	r5, r5, #29
 8002b32:	4316      	orrs	r6, r2
 8002b34:	e7d8      	b.n	8002ae8 <__aeabi_f2d+0x20>
 8002b36:	2300      	movs	r3, #0
 8002b38:	2600      	movs	r6, #0
 8002b3a:	e7d5      	b.n	8002ae8 <__aeabi_f2d+0x20>
 8002b3c:	2600      	movs	r6, #0
 8002b3e:	4b05      	ldr	r3, [pc, #20]	; (8002b54 <__aeabi_f2d+0x8c>)
 8002b40:	e7d2      	b.n	8002ae8 <__aeabi_f2d+0x20>
 8002b42:	0003      	movs	r3, r0
 8002b44:	3b0b      	subs	r3, #11
 8002b46:	409d      	lsls	r5, r3
 8002b48:	002e      	movs	r6, r5
 8002b4a:	2500      	movs	r5, #0
 8002b4c:	e7e3      	b.n	8002b16 <__aeabi_f2d+0x4e>
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	00000389 	.word	0x00000389
 8002b54:	000007ff 	.word	0x000007ff

08002b58 <__aeabi_d2f>:
 8002b58:	0002      	movs	r2, r0
 8002b5a:	004b      	lsls	r3, r1, #1
 8002b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b5e:	0d5b      	lsrs	r3, r3, #21
 8002b60:	030c      	lsls	r4, r1, #12
 8002b62:	4e3d      	ldr	r6, [pc, #244]	; (8002c58 <__aeabi_d2f+0x100>)
 8002b64:	0a64      	lsrs	r4, r4, #9
 8002b66:	0f40      	lsrs	r0, r0, #29
 8002b68:	1c5f      	adds	r7, r3, #1
 8002b6a:	0fc9      	lsrs	r1, r1, #31
 8002b6c:	4304      	orrs	r4, r0
 8002b6e:	00d5      	lsls	r5, r2, #3
 8002b70:	4237      	tst	r7, r6
 8002b72:	d00a      	beq.n	8002b8a <__aeabi_d2f+0x32>
 8002b74:	4839      	ldr	r0, [pc, #228]	; (8002c5c <__aeabi_d2f+0x104>)
 8002b76:	181e      	adds	r6, r3, r0
 8002b78:	2efe      	cmp	r6, #254	; 0xfe
 8002b7a:	dd16      	ble.n	8002baa <__aeabi_d2f+0x52>
 8002b7c:	20ff      	movs	r0, #255	; 0xff
 8002b7e:	2400      	movs	r4, #0
 8002b80:	05c0      	lsls	r0, r0, #23
 8002b82:	4320      	orrs	r0, r4
 8002b84:	07c9      	lsls	r1, r1, #31
 8002b86:	4308      	orrs	r0, r1
 8002b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <__aeabi_d2f+0x44>
 8002b8e:	432c      	orrs	r4, r5
 8002b90:	d026      	beq.n	8002be0 <__aeabi_d2f+0x88>
 8002b92:	2205      	movs	r2, #5
 8002b94:	0192      	lsls	r2, r2, #6
 8002b96:	0a54      	lsrs	r4, r2, #9
 8002b98:	b2d8      	uxtb	r0, r3
 8002b9a:	e7f1      	b.n	8002b80 <__aeabi_d2f+0x28>
 8002b9c:	4325      	orrs	r5, r4
 8002b9e:	d0ed      	beq.n	8002b7c <__aeabi_d2f+0x24>
 8002ba0:	2080      	movs	r0, #128	; 0x80
 8002ba2:	03c0      	lsls	r0, r0, #15
 8002ba4:	4304      	orrs	r4, r0
 8002ba6:	20ff      	movs	r0, #255	; 0xff
 8002ba8:	e7ea      	b.n	8002b80 <__aeabi_d2f+0x28>
 8002baa:	2e00      	cmp	r6, #0
 8002bac:	dd1b      	ble.n	8002be6 <__aeabi_d2f+0x8e>
 8002bae:	0192      	lsls	r2, r2, #6
 8002bb0:	1e53      	subs	r3, r2, #1
 8002bb2:	419a      	sbcs	r2, r3
 8002bb4:	00e4      	lsls	r4, r4, #3
 8002bb6:	0f6d      	lsrs	r5, r5, #29
 8002bb8:	4322      	orrs	r2, r4
 8002bba:	432a      	orrs	r2, r5
 8002bbc:	0753      	lsls	r3, r2, #29
 8002bbe:	d048      	beq.n	8002c52 <__aeabi_d2f+0xfa>
 8002bc0:	230f      	movs	r3, #15
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b04      	cmp	r3, #4
 8002bc6:	d000      	beq.n	8002bca <__aeabi_d2f+0x72>
 8002bc8:	3204      	adds	r2, #4
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	04db      	lsls	r3, r3, #19
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d03f      	beq.n	8002c52 <__aeabi_d2f+0xfa>
 8002bd2:	1c70      	adds	r0, r6, #1
 8002bd4:	2efe      	cmp	r6, #254	; 0xfe
 8002bd6:	d0d1      	beq.n	8002b7c <__aeabi_d2f+0x24>
 8002bd8:	0192      	lsls	r2, r2, #6
 8002bda:	0a54      	lsrs	r4, r2, #9
 8002bdc:	b2c0      	uxtb	r0, r0
 8002bde:	e7cf      	b.n	8002b80 <__aeabi_d2f+0x28>
 8002be0:	2000      	movs	r0, #0
 8002be2:	2400      	movs	r4, #0
 8002be4:	e7cc      	b.n	8002b80 <__aeabi_d2f+0x28>
 8002be6:	0032      	movs	r2, r6
 8002be8:	3217      	adds	r2, #23
 8002bea:	db22      	blt.n	8002c32 <__aeabi_d2f+0xda>
 8002bec:	2080      	movs	r0, #128	; 0x80
 8002bee:	0400      	lsls	r0, r0, #16
 8002bf0:	4320      	orrs	r0, r4
 8002bf2:	241e      	movs	r4, #30
 8002bf4:	1ba4      	subs	r4, r4, r6
 8002bf6:	2c1f      	cmp	r4, #31
 8002bf8:	dd1d      	ble.n	8002c36 <__aeabi_d2f+0xde>
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	4252      	negs	r2, r2
 8002bfe:	1b96      	subs	r6, r2, r6
 8002c00:	0002      	movs	r2, r0
 8002c02:	40f2      	lsrs	r2, r6
 8002c04:	0016      	movs	r6, r2
 8002c06:	2c20      	cmp	r4, #32
 8002c08:	d004      	beq.n	8002c14 <__aeabi_d2f+0xbc>
 8002c0a:	4a15      	ldr	r2, [pc, #84]	; (8002c60 <__aeabi_d2f+0x108>)
 8002c0c:	4694      	mov	ip, r2
 8002c0e:	4463      	add	r3, ip
 8002c10:	4098      	lsls	r0, r3
 8002c12:	4305      	orrs	r5, r0
 8002c14:	002a      	movs	r2, r5
 8002c16:	1e53      	subs	r3, r2, #1
 8002c18:	419a      	sbcs	r2, r3
 8002c1a:	4332      	orrs	r2, r6
 8002c1c:	2600      	movs	r6, #0
 8002c1e:	0753      	lsls	r3, r2, #29
 8002c20:	d1ce      	bne.n	8002bc0 <__aeabi_d2f+0x68>
 8002c22:	2480      	movs	r4, #128	; 0x80
 8002c24:	0013      	movs	r3, r2
 8002c26:	04e4      	lsls	r4, r4, #19
 8002c28:	2001      	movs	r0, #1
 8002c2a:	4023      	ands	r3, r4
 8002c2c:	4222      	tst	r2, r4
 8002c2e:	d1d3      	bne.n	8002bd8 <__aeabi_d2f+0x80>
 8002c30:	e7b0      	b.n	8002b94 <__aeabi_d2f+0x3c>
 8002c32:	2300      	movs	r3, #0
 8002c34:	e7ad      	b.n	8002b92 <__aeabi_d2f+0x3a>
 8002c36:	4a0b      	ldr	r2, [pc, #44]	; (8002c64 <__aeabi_d2f+0x10c>)
 8002c38:	4694      	mov	ip, r2
 8002c3a:	002a      	movs	r2, r5
 8002c3c:	40e2      	lsrs	r2, r4
 8002c3e:	0014      	movs	r4, r2
 8002c40:	002a      	movs	r2, r5
 8002c42:	4463      	add	r3, ip
 8002c44:	409a      	lsls	r2, r3
 8002c46:	4098      	lsls	r0, r3
 8002c48:	1e55      	subs	r5, r2, #1
 8002c4a:	41aa      	sbcs	r2, r5
 8002c4c:	4302      	orrs	r2, r0
 8002c4e:	4322      	orrs	r2, r4
 8002c50:	e7e4      	b.n	8002c1c <__aeabi_d2f+0xc4>
 8002c52:	0033      	movs	r3, r6
 8002c54:	e79e      	b.n	8002b94 <__aeabi_d2f+0x3c>
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	000007fe 	.word	0x000007fe
 8002c5c:	fffffc80 	.word	0xfffffc80
 8002c60:	fffffca2 	.word	0xfffffca2
 8002c64:	fffffc82 	.word	0xfffffc82

08002c68 <__clzsi2>:
 8002c68:	211c      	movs	r1, #28
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	4298      	cmp	r0, r3
 8002c70:	d301      	bcc.n	8002c76 <__clzsi2+0xe>
 8002c72:	0c00      	lsrs	r0, r0, #16
 8002c74:	3910      	subs	r1, #16
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	4298      	cmp	r0, r3
 8002c7a:	d301      	bcc.n	8002c80 <__clzsi2+0x18>
 8002c7c:	0a00      	lsrs	r0, r0, #8
 8002c7e:	3908      	subs	r1, #8
 8002c80:	091b      	lsrs	r3, r3, #4
 8002c82:	4298      	cmp	r0, r3
 8002c84:	d301      	bcc.n	8002c8a <__clzsi2+0x22>
 8002c86:	0900      	lsrs	r0, r0, #4
 8002c88:	3904      	subs	r1, #4
 8002c8a:	a202      	add	r2, pc, #8	; (adr r2, 8002c94 <__clzsi2+0x2c>)
 8002c8c:	5c10      	ldrb	r0, [r2, r0]
 8002c8e:	1840      	adds	r0, r0, r1
 8002c90:	4770      	bx	lr
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	02020304 	.word	0x02020304
 8002c98:	01010101 	.word	0x01010101
	...

08002ca4 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8002ca4:	b590      	push	{r4, r7, lr}
 8002ca6:	b089      	sub	sp, #36	; 0x24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cac:	240c      	movs	r4, #12
 8002cae:	193b      	adds	r3, r7, r4
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	2314      	movs	r3, #20
 8002cb4:	001a      	movs	r2, r3
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	f00e f8b9 	bl	8010e2e <memset>

  //По умолчанию на линии высокий уровень
  lineUp();
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	889b      	ldrh	r3, [r3, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	f008 fd71 	bl	800b7ae <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	889b      	ldrh	r3, [r3, #4]
 8002cd0:	001a      	movs	r2, r3
 8002cd2:	193b      	adds	r3, r7, r4
 8002cd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 8002cd6:	193b      	adds	r3, r7, r4
 8002cd8:	2211      	movs	r2, #17
 8002cda:	605a      	str	r2, [r3, #4]
  if(sensor->pullUp == 1) {
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	79db      	ldrb	r3, [r3, #7]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d103      	bne.n	8002cec <goToOutput+0x48>
	  GPIO_InitStruct.Pull = GPIO_PULLUP;						//Подтяжка к питанию
 8002ce4:	193b      	adds	r3, r7, r4
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	e003      	b.n	8002cf4 <goToOutput+0x50>
  } else {
	  GPIO_InitStruct.Pull = GPIO_NOPULL;						//Без подтяжки
 8002cec:	230c      	movs	r3, #12
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
  }

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8002cf4:	210c      	movs	r1, #12
 8002cf6:	187b      	adds	r3, r7, r1
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	187a      	adds	r2, r7, r1
 8002d02:	0011      	movs	r1, r2
 8002d04:	0018      	movs	r0, r3
 8002d06:	f008 fbd1 	bl	800b4ac <HAL_GPIO_Init>
}
 8002d0a:	46c0      	nop			; (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b009      	add	sp, #36	; 0x24
 8002d10:	bd90      	pop	{r4, r7, pc}

08002d12 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8002d12:	b590      	push	{r4, r7, lr}
 8002d14:	b089      	sub	sp, #36	; 0x24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1a:	240c      	movs	r4, #12
 8002d1c:	193b      	adds	r3, r7, r4
 8002d1e:	0018      	movs	r0, r3
 8002d20:	2314      	movs	r3, #20
 8002d22:	001a      	movs	r2, r3
 8002d24:	2100      	movs	r1, #0
 8002d26:	f00e f882 	bl	8010e2e <memset>

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	889b      	ldrh	r3, [r3, #4]
 8002d2e:	001a      	movs	r2, r3
 8002d30:	193b      	adds	r3, r7, r4
 8002d32:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d34:	193b      	adds	r3, r7, r4
 8002d36:	2200      	movs	r2, #0
 8002d38:	605a      	str	r2, [r3, #4]
  if(sensor->pullUp == 1) {
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	79db      	ldrb	r3, [r3, #7]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d103      	bne.n	8002d4a <goToInput+0x38>
	  GPIO_InitStruct.Pull = GPIO_PULLUP;						//Подтяжка к питанию
 8002d42:	193b      	adds	r3, r7, r4
 8002d44:	2201      	movs	r2, #1
 8002d46:	609a      	str	r2, [r3, #8]
 8002d48:	e003      	b.n	8002d52 <goToInput+0x40>
  } else {
	  GPIO_InitStruct.Pull = GPIO_NOPULL;						//Без подтяжки
 8002d4a:	230c      	movs	r3, #12
 8002d4c:	18fb      	adds	r3, r7, r3
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
  }
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	220c      	movs	r2, #12
 8002d58:	18ba      	adds	r2, r7, r2
 8002d5a:	0011      	movs	r1, r2
 8002d5c:	0018      	movs	r0, r3
 8002d5e:	f008 fba5 	bl	800b4ac <HAL_GPIO_Init>
}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b009      	add	sp, #36	; 0x24
 8002d68:	bd90      	pop	{r4, r7, pc}
	...

08002d6c <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 8002d6c:	b5b0      	push	{r4, r5, r7, lr}
 8002d6e:	b08a      	sub	sp, #40	; 0x28
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
	DHT_data data = {0.0f, 0.0f};
 8002d76:	2110      	movs	r1, #16
 8002d78:	187b      	adds	r3, r7, r1
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
 8002d7e:	187b      	adds	r3, r7, r1
 8002d80:	2200      	movs	r2, #0
 8002d82:	605a      	str	r2, [r3, #4]
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	799b      	ldrb	r3, [r3, #6]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d105      	bne.n	8002d98 <DHT_getData+0x2c>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 8002d8c:	2326      	movs	r3, #38	; 0x26
 8002d8e:	18fb      	adds	r3, r7, r3
 8002d90:	22fa      	movs	r2, #250	; 0xfa
 8002d92:	00d2      	lsls	r2, r2, #3
 8002d94:	801a      	strh	r2, [r3, #0]
 8002d96:	e004      	b.n	8002da2 <DHT_getData+0x36>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 8002d98:	2326      	movs	r3, #38	; 0x26
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	22fa      	movs	r2, #250	; 0xfa
 8002d9e:	0092      	lsls	r2, r2, #2
 8002da0:	801a      	strh	r2, [r3, #0]
	}

	//Если частота превышена, то возврат последнего удачного значения
	if (HAL_GetTick()-sensor->lastPollingTime < pollingInterval) {
 8002da2:	f006 fdb7 	bl	8009914 <HAL_GetTick>
 8002da6:	0002      	movs	r2, r0
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	1ad2      	subs	r2, r2, r3
 8002dae:	2326      	movs	r3, #38	; 0x26
 8002db0:	18fb      	adds	r3, r7, r3
 8002db2:	881b      	ldrh	r3, [r3, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d20d      	bcs.n	8002dd4 <DHT_getData+0x68>
		data.hum = sensor->lastHum;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	2110      	movs	r1, #16
 8002dbe:	187b      	adds	r3, r7, r1
 8002dc0:	601a      	str	r2, [r3, #0]
		data.temp = sensor->lastTemp;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	187b      	adds	r3, r7, r1
 8002dc8:	605a      	str	r2, [r3, #4]
		return data;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	187a      	adds	r2, r7, r1
 8002dce:	ca03      	ldmia	r2!, {r0, r1}
 8002dd0:	c303      	stmia	r3!, {r0, r1}
 8002dd2:	e169      	b.n	80030a8 <DHT_getData+0x33c>
	}
	sensor->lastPollingTime = HAL_GetTick();
 8002dd4:	f006 fd9e 	bl	8009914 <HAL_GetTick>
 8002dd8:	0002      	movs	r2, r0
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	0018      	movs	r0, r3
 8002de2:	f7ff ff5f 	bl	8002ca4 <goToOutput>
	//Опускание линии данных на 15 мс
	lineDown();
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	889b      	ldrh	r3, [r3, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	0019      	movs	r1, r3
 8002df2:	f008 fcdc 	bl	800b7ae <HAL_GPIO_WritePin>
	Delay(15);
 8002df6:	200f      	movs	r0, #15
 8002df8:	f006 fd96 	bl	8009928 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	6818      	ldr	r0, [r3, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	889b      	ldrh	r3, [r3, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	0019      	movs	r1, r3
 8002e08:	f008 fcd1 	bl	800b7ae <HAL_GPIO_WritePin>
	goToInput(sensor);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7ff ff7f 	bl	8002d12 <goToInput>
	
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8002e14:	2324      	movs	r3, #36	; 0x24
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	2200      	movs	r2, #0
 8002e1a:	801a      	strh	r2, [r3, #0]
	//Ожидание спада
	while(getLine()) {
 8002e1c:	e010      	b.n	8002e40 <DHT_getData+0xd4>
		timeout++;
 8002e1e:	2124      	movs	r1, #36	; 0x24
 8002e20:	187b      	adds	r3, r7, r1
 8002e22:	881a      	ldrh	r2, [r3, #0]
 8002e24:	187b      	adds	r3, r7, r1
 8002e26:	3201      	adds	r2, #1
 8002e28:	801a      	strh	r2, [r3, #0]
		if (timeout > DHT_TIMEOUT) return data;
 8002e2a:	187b      	adds	r3, r7, r1
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	4aa0      	ldr	r2, [pc, #640]	; (80030b0 <DHT_getData+0x344>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d905      	bls.n	8002e40 <DHT_getData+0xd4>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2210      	movs	r2, #16
 8002e38:	18ba      	adds	r2, r7, r2
 8002e3a:	ca03      	ldmia	r2!, {r0, r1}
 8002e3c:	c303      	stmia	r3!, {r0, r1}
 8002e3e:	e133      	b.n	80030a8 <DHT_getData+0x33c>
	while(getLine()) {
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	889b      	ldrh	r3, [r3, #4]
 8002e48:	0019      	movs	r1, r3
 8002e4a:	0010      	movs	r0, r2
 8002e4c:	f008 fc92 	bl	800b774 <HAL_GPIO_ReadPin>
 8002e50:	0003      	movs	r3, r0
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d0e3      	beq.n	8002e1e <DHT_getData+0xb2>
	}
	timeout = 0;
 8002e56:	2324      	movs	r3, #36	; 0x24
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	801a      	strh	r2, [r3, #0]
	//Ожидание подъёма
	while(!getLine()) {
 8002e5e:	e010      	b.n	8002e82 <DHT_getData+0x116>
		timeout++;
 8002e60:	2124      	movs	r1, #36	; 0x24
 8002e62:	187b      	adds	r3, r7, r1
 8002e64:	881a      	ldrh	r2, [r3, #0]
 8002e66:	187b      	adds	r3, r7, r1
 8002e68:	3201      	adds	r2, #1
 8002e6a:	801a      	strh	r2, [r3, #0]
		if (timeout > DHT_TIMEOUT) return data;
 8002e6c:	187b      	adds	r3, r7, r1
 8002e6e:	881b      	ldrh	r3, [r3, #0]
 8002e70:	4a8f      	ldr	r2, [pc, #572]	; (80030b0 <DHT_getData+0x344>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d905      	bls.n	8002e82 <DHT_getData+0x116>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2210      	movs	r2, #16
 8002e7a:	18ba      	adds	r2, r7, r2
 8002e7c:	ca03      	ldmia	r2!, {r0, r1}
 8002e7e:	c303      	stmia	r3!, {r0, r1}
 8002e80:	e112      	b.n	80030a8 <DHT_getData+0x33c>
	while(!getLine()) {
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	889b      	ldrh	r3, [r3, #4]
 8002e8a:	0019      	movs	r1, r3
 8002e8c:	0010      	movs	r0, r2
 8002e8e:	f008 fc71 	bl	800b774 <HAL_GPIO_ReadPin>
 8002e92:	0003      	movs	r3, r0
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d1e3      	bne.n	8002e60 <DHT_getData+0xf4>
	}
	timeout = 0;
 8002e98:	2324      	movs	r3, #36	; 0x24
 8002e9a:	18fb      	adds	r3, r7, r3
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	801a      	strh	r2, [r3, #0]
	//Ожидание спада
	while(getLine()) {
 8002ea0:	e010      	b.n	8002ec4 <DHT_getData+0x158>
		timeout++;
 8002ea2:	2124      	movs	r1, #36	; 0x24
 8002ea4:	187b      	adds	r3, r7, r1
 8002ea6:	881a      	ldrh	r2, [r3, #0]
 8002ea8:	187b      	adds	r3, r7, r1
 8002eaa:	3201      	adds	r2, #1
 8002eac:	801a      	strh	r2, [r3, #0]
		if (timeout > DHT_TIMEOUT) return data;
 8002eae:	187b      	adds	r3, r7, r1
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	4a7f      	ldr	r2, [pc, #508]	; (80030b0 <DHT_getData+0x344>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d905      	bls.n	8002ec4 <DHT_getData+0x158>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2210      	movs	r2, #16
 8002ebc:	18ba      	adds	r2, r7, r2
 8002ebe:	ca03      	ldmia	r2!, {r0, r1}
 8002ec0:	c303      	stmia	r3!, {r0, r1}
 8002ec2:	e0f1      	b.n	80030a8 <DHT_getData+0x33c>
	while(getLine()) {
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	889b      	ldrh	r3, [r3, #4]
 8002ecc:	0019      	movs	r1, r3
 8002ece:	0010      	movs	r0, r2
 8002ed0:	f008 fc50 	bl	800b774 <HAL_GPIO_ReadPin>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d0e3      	beq.n	8002ea2 <DHT_getData+0x136>
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 8002eda:	2308      	movs	r3, #8
 8002edc:	18fb      	adds	r3, r7, r3
 8002ede:	4a75      	ldr	r2, [pc, #468]	; (80030b4 <DHT_getData+0x348>)
 8002ee0:	6811      	ldr	r1, [r2, #0]
 8002ee2:	6019      	str	r1, [r3, #0]
 8002ee4:	7912      	ldrb	r2, [r2, #4]
 8002ee6:	711a      	strb	r2, [r3, #4]
	for(uint8_t a = 0; a < 5; a++) {
 8002ee8:	2323      	movs	r3, #35	; 0x23
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	e054      	b.n	8002f9c <DHT_getData+0x230>
		for(uint8_t b = 7; b != 255; b--) {
 8002ef2:	2322      	movs	r3, #34	; 0x22
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	2207      	movs	r2, #7
 8002ef8:	701a      	strb	r2, [r3, #0]
 8002efa:	e044      	b.n	8002f86 <DHT_getData+0x21a>
			uint32_t hT = 0, lT = 0;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61fb      	str	r3, [r7, #28]
 8002f00:	2300      	movs	r3, #0
 8002f02:	61bb      	str	r3, [r7, #24]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine()) lT++;
 8002f04:	e002      	b.n	8002f0c <DHT_getData+0x1a0>
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	61bb      	str	r3, [r7, #24]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	889b      	ldrh	r3, [r3, #4]
 8002f14:	0019      	movs	r1, r3
 8002f16:	0010      	movs	r0, r2
 8002f18:	f008 fc2c 	bl	800b774 <HAL_GPIO_ReadPin>
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d1f1      	bne.n	8002f06 <DHT_getData+0x19a>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 8002f22:	2324      	movs	r3, #36	; 0x24
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	2200      	movs	r2, #0
 8002f28:	801a      	strh	r2, [r3, #0]
			while(getLine()) hT++;
 8002f2a:	e002      	b.n	8002f32 <DHT_getData+0x1c6>
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	61fb      	str	r3, [r7, #28]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	889b      	ldrh	r3, [r3, #4]
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	0010      	movs	r0, r2
 8002f3e:	f008 fc19 	bl	800b774 <HAL_GPIO_ReadPin>
 8002f42:	0003      	movs	r3, r0
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d0f1      	beq.n	8002f2c <DHT_getData+0x1c0>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 8002f48:	69fa      	ldr	r2, [r7, #28]
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d914      	bls.n	8002f7a <DHT_getData+0x20e>
 8002f50:	2023      	movs	r0, #35	; 0x23
 8002f52:	183b      	adds	r3, r7, r0
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2408      	movs	r4, #8
 8002f58:	193a      	adds	r2, r7, r4
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	b25a      	sxtb	r2, r3
 8002f5e:	2322      	movs	r3, #34	; 0x22
 8002f60:	18fb      	adds	r3, r7, r3
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2101      	movs	r1, #1
 8002f66:	4099      	lsls	r1, r3
 8002f68:	000b      	movs	r3, r1
 8002f6a:	b25b      	sxtb	r3, r3
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	b25a      	sxtb	r2, r3
 8002f70:	183b      	adds	r3, r7, r0
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	b2d1      	uxtb	r1, r2
 8002f76:	193a      	adds	r2, r7, r4
 8002f78:	54d1      	strb	r1, [r2, r3]
		for(uint8_t b = 7; b != 255; b--) {
 8002f7a:	2122      	movs	r1, #34	; 0x22
 8002f7c:	187b      	adds	r3, r7, r1
 8002f7e:	781a      	ldrb	r2, [r3, #0]
 8002f80:	187b      	adds	r3, r7, r1
 8002f82:	3a01      	subs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	2322      	movs	r3, #34	; 0x22
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	2bff      	cmp	r3, #255	; 0xff
 8002f8e:	d1b5      	bne.n	8002efc <DHT_getData+0x190>
	for(uint8_t a = 0; a < 5; a++) {
 8002f90:	2123      	movs	r1, #35	; 0x23
 8002f92:	187b      	adds	r3, r7, r1
 8002f94:	781a      	ldrb	r2, [r3, #0]
 8002f96:	187b      	adds	r3, r7, r1
 8002f98:	3201      	adds	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	2323      	movs	r3, #35	; 0x23
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b04      	cmp	r3, #4
 8002fa4:	d9a5      	bls.n	8002ef2 <DHT_getData+0x186>
		}
	}
	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 8002fa6:	2408      	movs	r4, #8
 8002fa8:	193b      	adds	r3, r7, r4
 8002faa:	781a      	ldrb	r2, [r3, #0]
 8002fac:	193b      	adds	r3, r7, r4
 8002fae:	785b      	ldrb	r3, [r3, #1]
 8002fb0:	18d3      	adds	r3, r2, r3
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	193b      	adds	r3, r7, r4
 8002fb6:	789b      	ldrb	r3, [r3, #2]
 8002fb8:	18d3      	adds	r3, r2, r3
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	193b      	adds	r3, r7, r4
 8002fbe:	78db      	ldrb	r3, [r3, #3]
 8002fc0:	18d3      	adds	r3, r2, r3
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	193b      	adds	r3, r7, r4
 8002fc6:	791b      	ldrb	r3, [r3, #4]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d160      	bne.n	800308e <DHT_getData+0x322>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	799b      	ldrb	r3, [r3, #6]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d146      	bne.n	8003062 <DHT_getData+0x2f6>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8002fd4:	193b      	adds	r3, r7, r4
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	021b      	lsls	r3, r3, #8
 8002fda:	193a      	adds	r2, r7, r4
 8002fdc:	7852      	ldrb	r2, [r2, #1]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f7fd fefb 	bl	8000ddc <__aeabi_i2f>
 8002fe6:	1c03      	adds	r3, r0, #0
 8002fe8:	4933      	ldr	r1, [pc, #204]	; (80030b8 <DHT_getData+0x34c>)
 8002fea:	1c18      	adds	r0, r3, #0
 8002fec:	f7fd fc02 	bl	80007f4 <__aeabi_fmul>
 8002ff0:	1c03      	adds	r3, r0, #0
 8002ff2:	1c1a      	adds	r2, r3, #0
 8002ff4:	2510      	movs	r5, #16
 8002ff6:	197b      	adds	r3, r7, r5
 8002ff8:	601a      	str	r2, [r3, #0]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 8002ffa:	193b      	adds	r3, r7, r4
 8002ffc:	789b      	ldrb	r3, [r3, #2]
 8002ffe:	b25b      	sxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	db12      	blt.n	800302a <DHT_getData+0x2be>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 8003004:	193b      	adds	r3, r7, r4
 8003006:	789b      	ldrb	r3, [r3, #2]
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	193a      	adds	r2, r7, r4
 800300c:	78d2      	ldrb	r2, [r2, #3]
 800300e:	4313      	orrs	r3, r2
 8003010:	0018      	movs	r0, r3
 8003012:	f7fd fee3 	bl	8000ddc <__aeabi_i2f>
 8003016:	1c03      	adds	r3, r0, #0
 8003018:	4927      	ldr	r1, [pc, #156]	; (80030b8 <DHT_getData+0x34c>)
 800301a:	1c18      	adds	r0, r3, #0
 800301c:	f7fd fbea 	bl	80007f4 <__aeabi_fmul>
 8003020:	1c03      	adds	r3, r0, #0
 8003022:	1c1a      	adds	r2, r3, #0
 8003024:	197b      	adds	r3, r7, r5
 8003026:	605a      	str	r2, [r3, #4]
 8003028:	e01b      	b.n	8003062 <DHT_getData+0x2f6>
			}	else {
				rawData[2] &= ~(1<<7);
 800302a:	2108      	movs	r1, #8
 800302c:	187b      	adds	r3, r7, r1
 800302e:	789b      	ldrb	r3, [r3, #2]
 8003030:	227f      	movs	r2, #127	; 0x7f
 8003032:	4013      	ands	r3, r2
 8003034:	b2da      	uxtb	r2, r3
 8003036:	187b      	adds	r3, r7, r1
 8003038:	709a      	strb	r2, [r3, #2]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 800303a:	000a      	movs	r2, r1
 800303c:	187b      	adds	r3, r7, r1
 800303e:	789b      	ldrb	r3, [r3, #2]
 8003040:	021b      	lsls	r3, r3, #8
 8003042:	18ba      	adds	r2, r7, r2
 8003044:	78d2      	ldrb	r2, [r2, #3]
 8003046:	4313      	orrs	r3, r2
 8003048:	0018      	movs	r0, r3
 800304a:	f7fd fec7 	bl	8000ddc <__aeabi_i2f>
 800304e:	1c03      	adds	r3, r0, #0
 8003050:	491a      	ldr	r1, [pc, #104]	; (80030bc <DHT_getData+0x350>)
 8003052:	1c18      	adds	r0, r3, #0
 8003054:	f7fd fbce 	bl	80007f4 <__aeabi_fmul>
 8003058:	1c03      	adds	r3, r0, #0
 800305a:	1c1a      	adds	r2, r3, #0
 800305c:	2310      	movs	r3, #16
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	605a      	str	r2, [r3, #4]
			}
		}
		if (sensor->type == DHT11) {
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	799b      	ldrb	r3, [r3, #6]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d111      	bne.n	800308e <DHT_getData+0x322>
			data.hum = (float)rawData[0];
 800306a:	2408      	movs	r4, #8
 800306c:	193b      	adds	r3, r7, r4
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	0018      	movs	r0, r3
 8003072:	f7fd ff01 	bl	8000e78 <__aeabi_ui2f>
 8003076:	1c02      	adds	r2, r0, #0
 8003078:	2510      	movs	r5, #16
 800307a:	197b      	adds	r3, r7, r5
 800307c:	601a      	str	r2, [r3, #0]
			data.temp = (float)rawData[2];;
 800307e:	193b      	adds	r3, r7, r4
 8003080:	789b      	ldrb	r3, [r3, #2]
 8003082:	0018      	movs	r0, r3
 8003084:	f7fd fef8 	bl	8000e78 <__aeabi_ui2f>
 8003088:	1c02      	adds	r2, r0, #0
 800308a:	197b      	adds	r3, r7, r5
 800308c:	605a      	str	r2, [r3, #4]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 800308e:	2110      	movs	r1, #16
 8003090:	187b      	adds	r3, r7, r1
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 8003098:	187b      	adds	r3, r7, r1
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	187a      	adds	r2, r7, r1
 80030a4:	ca03      	ldmia	r2!, {r0, r1}
 80030a6:	c303      	stmia	r3!, {r0, r1}
}
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b00a      	add	sp, #40	; 0x28
 80030ae:	bdb0      	pop	{r4, r5, r7, pc}
 80030b0:	00002710 	.word	0x00002710
 80030b4:	08015a88 	.word	0x08015a88
 80030b8:	3dcccccd 	.word	0x3dcccccd
 80030bc:	bdcccccd 	.word	0xbdcccccd

080030c0 <write_eeprom>:
	return (Bytes2float(buffer));
}

//=======================================================================================
void write_eeprom(uint16_t end, uint8_t data)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af04      	add	r7, sp, #16
 80030c6:	0002      	movs	r2, r0
 80030c8:	1dbb      	adds	r3, r7, #6
 80030ca:	801a      	strh	r2, [r3, #0]
 80030cc:	1d7b      	adds	r3, r7, #5
 80030ce:	1c0a      	adds	r2, r1, #0
 80030d0:	701a      	strb	r2, [r3, #0]

 HAL_I2C_Mem_Write(EEPROM_I2C, EEPROM_ADDR, end, END_SIZE, &data, 1, 1);
 80030d2:	1dbb      	adds	r3, r7, #6
 80030d4:	881a      	ldrh	r2, [r3, #0]
 80030d6:	4809      	ldr	r0, [pc, #36]	; (80030fc <write_eeprom+0x3c>)
 80030d8:	2301      	movs	r3, #1
 80030da:	9302      	str	r3, [sp, #8]
 80030dc:	2301      	movs	r3, #1
 80030de:	9301      	str	r3, [sp, #4]
 80030e0:	1d7b      	adds	r3, r7, #5
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	2302      	movs	r3, #2
 80030e6:	21a0      	movs	r1, #160	; 0xa0
 80030e8:	f008 fd1c 	bl	800bb24 <HAL_I2C_Mem_Write>

 HAL_Delay (5);
 80030ec:	2005      	movs	r0, #5
 80030ee:	f006 fc1b 	bl	8009928 <HAL_Delay>

}
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b002      	add	sp, #8
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	20000454 	.word	0x20000454

08003100 <read_eeprom>:

//=======================================================================================
uint8_t read_eeprom(uint16_t end)
{
 8003100:	b590      	push	{r4, r7, lr}
 8003102:	b089      	sub	sp, #36	; 0x24
 8003104:	af04      	add	r7, sp, #16
 8003106:	0002      	movs	r2, r0
 8003108:	1dbb      	adds	r3, r7, #6
 800310a:	801a      	strh	r2, [r3, #0]
	uint8_t dado;

 HAL_I2C_Mem_Read(EEPROM_I2C, EEPROM_ADDR, end, END_SIZE, &dado, 1, 1);
 800310c:	1dbb      	adds	r3, r7, #6
 800310e:	881a      	ldrh	r2, [r3, #0]
 8003110:	480a      	ldr	r0, [pc, #40]	; (800313c <read_eeprom+0x3c>)
 8003112:	2301      	movs	r3, #1
 8003114:	9302      	str	r3, [sp, #8]
 8003116:	2301      	movs	r3, #1
 8003118:	9301      	str	r3, [sp, #4]
 800311a:	240f      	movs	r4, #15
 800311c:	193b      	adds	r3, r7, r4
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2302      	movs	r3, #2
 8003122:	21a0      	movs	r1, #160	; 0xa0
 8003124:	f008 fe2c 	bl	800bd80 <HAL_I2C_Mem_Read>

 HAL_Delay (2);
 8003128:	2002      	movs	r0, #2
 800312a:	f006 fbfd 	bl	8009928 <HAL_Delay>
 return (dado);
 800312e:	193b      	adds	r3, r7, r4
 8003130:	781b      	ldrb	r3, [r3, #0]

}
 8003132:	0018      	movs	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	b005      	add	sp, #20
 8003138:	bd90      	pop	{r4, r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	20000454 	.word	0x20000454

08003140 <LL_GetUID_Word1>:
/**
  * @brief  Get Word1 of the unique device identifier (UID based on 96 bits)
  * @retval UID[63:32]: Wafer number (UID[39:32]) & LOT_NUM[23:0] (UID[63:40])
  */
__STATIC_INLINE uint32_t LL_GetUID_Word1(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 4U))));
 8003144:	4b02      	ldr	r3, [pc, #8]	; (8003150 <LL_GetUID_Word1+0x10>)
 8003146:	681b      	ldr	r3, [r3, #0]
}
 8003148:	0018      	movs	r0, r3
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	46c0      	nop			; (mov r8, r8)
 8003150:	1fff7594 	.word	0x1fff7594

08003154 <LL_GetUID_Word2>:
/**
  * @brief  Get Word2 of the unique device identifier (UID based on 96 bits)
  * @retval UID[95:64]: Lot number (ASCII encoded) - LOT_NUM[55:24]
  */
__STATIC_INLINE uint32_t LL_GetUID_Word2(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE_ADDRESS + 8U))));
 8003158:	4b02      	ldr	r3, [pc, #8]	; (8003164 <LL_GetUID_Word2+0x10>)
 800315a:	681b      	ldr	r3, [r3, #0]
}
 800315c:	0018      	movs	r0, r3
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	46c0      	nop			; (mov r8, r8)
 8003164:	1fff7598 	.word	0x1fff7598

08003168 <UART_Printf>:
/* USER CODE BEGIN 0 */

//***********************************************************************************************
//           usart tx
//***********************************************************************************************
void UART_Printf(const char* fmt, ...) {
 8003168:	b40f      	push	{r0, r1, r2, r3}
 800316a:	b590      	push	{r4, r7, lr}
 800316c:	b0c3      	sub	sp, #268	; 0x10c
 800316e:	af00      	add	r7, sp, #0
    char buff[256];
    va_list args;
    va_start(args, fmt);
 8003170:	238a      	movs	r3, #138	; 0x8a
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	2108      	movs	r1, #8
 8003176:	185b      	adds	r3, r3, r1
 8003178:	19db      	adds	r3, r3, r7
 800317a:	607b      	str	r3, [r7, #4]
    vsnprintf(buff, sizeof(buff), fmt, args);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2288      	movs	r2, #136	; 0x88
 8003180:	0052      	lsls	r2, r2, #1
 8003182:	1852      	adds	r2, r2, r1
 8003184:	19d2      	adds	r2, r2, r7
 8003186:	6812      	ldr	r2, [r2, #0]
 8003188:	2180      	movs	r1, #128	; 0x80
 800318a:	0049      	lsls	r1, r1, #1
 800318c:	2408      	movs	r4, #8
 800318e:	1938      	adds	r0, r7, r4
 8003190:	f00f fca2 	bl	8012ad8 <vsniprintf>
    HAL_UART_Transmit(&huart1, (uint8_t*)buff, strlen(buff),HAL_MAX_DELAY);
 8003194:	193b      	adds	r3, r7, r4
 8003196:	0018      	movs	r0, r3
 8003198:	f7fc ffbc 	bl	8000114 <strlen>
 800319c:	0003      	movs	r3, r0
 800319e:	b29a      	uxth	r2, r3
 80031a0:	2301      	movs	r3, #1
 80031a2:	425b      	negs	r3, r3
 80031a4:	1939      	adds	r1, r7, r4
 80031a6:	4805      	ldr	r0, [pc, #20]	; (80031bc <UART_Printf+0x54>)
 80031a8:	f00c fa22 	bl	800f5f0 <HAL_UART_Transmit>
    va_end(args);
}
 80031ac:	46c0      	nop			; (mov r8, r8)
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b043      	add	sp, #268	; 0x10c
 80031b2:	bc90      	pop	{r4, r7}
 80031b4:	bc08      	pop	{r3}
 80031b6:	b004      	add	sp, #16
 80031b8:	4718      	bx	r3
 80031ba:	46c0      	nop			; (mov r8, r8)
 80031bc:	20000634 	.word	0x20000634

080031c0 <docrc>:

//***********************************************************************************************
//           Faz o crc do array_in e coloca no array_out
//***********************************************************************************************
void docrc(char *array_out[], char *array_in[], int len)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
	int  crcdec;
	char crcstring[4];

	crcdec = HAL_CRC_Calculate(&hcrc, array_in, len);
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	4b15      	ldr	r3, [pc, #84]	; (8003228 <docrc+0x68>)
 80031d2:	0018      	movs	r0, r3
 80031d4:	f007 fcc8 	bl	800ab68 <HAL_CRC_Calculate>
 80031d8:	0003      	movs	r3, r0
 80031da:	617b      	str	r3, [r7, #20]
	sprintf(crcstring, "%04X", crcdec);
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4913      	ldr	r1, [pc, #76]	; (800322c <docrc+0x6c>)
 80031e0:	2310      	movs	r3, #16
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	0018      	movs	r0, r3
 80031e6:	f00e fd3b 	bl	8011c60 <siprintf>

	for(x=0; x<4; x++){
 80031ea:	4b11      	ldr	r3, [pc, #68]	; (8003230 <docrc+0x70>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
 80031f0:	e010      	b.n	8003214 <docrc+0x54>
		strncat(array_out, &crcstring[x], 1);
 80031f2:	4b0f      	ldr	r3, [pc, #60]	; (8003230 <docrc+0x70>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	001a      	movs	r2, r3
 80031f8:	2310      	movs	r3, #16
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	1899      	adds	r1, r3, r2
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2201      	movs	r2, #1
 8003202:	0018      	movs	r0, r3
 8003204:	f00e fd61 	bl	8011cca <strncat>
	for(x=0; x<4; x++){
 8003208:	4b09      	ldr	r3, [pc, #36]	; (8003230 <docrc+0x70>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	b2da      	uxtb	r2, r3
 8003210:	4b07      	ldr	r3, [pc, #28]	; (8003230 <docrc+0x70>)
 8003212:	701a      	strb	r2, [r3, #0]
 8003214:	4b06      	ldr	r3, [pc, #24]	; (8003230 <docrc+0x70>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d9ea      	bls.n	80031f2 <docrc+0x32>
	}

}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	46bd      	mov	sp, r7
 8003222:	b006      	add	sp, #24
 8003224:	bd80      	pop	{r7, pc}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	20000430 	.word	0x20000430
 800322c:	08015a90 	.word	0x08015a90
 8003230:	200007d1 	.word	0x200007d1

08003234 <enviaUDP>:
//***********************************************************************************************
//           Envia a mensagem + $# com o crc $mensagemcrc# para o servidor
//***********************************************************************************************
void enviaUDP(char *mensagem[],char *crc[], int len)
{
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b097      	sub	sp, #92	; 0x5c
 8003238:	af02      	add	r7, sp, #8
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
	char pacotePronto[60];

	sprintf(pacotePronto, "$%s%s#", mensagem, crc);
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	490a      	ldr	r1, [pc, #40]	; (8003270 <enviaUDP+0x3c>)
 8003246:	2414      	movs	r4, #20
 8003248:	1938      	adds	r0, r7, r4
 800324a:	f00e fd09 	bl	8011c60 <siprintf>
	sendto(1,pacotePronto,len +6,ip_s,port_s);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	b29b      	uxth	r3, r3
 8003252:	3306      	adds	r3, #6
 8003254:	b29a      	uxth	r2, r3
 8003256:	4b07      	ldr	r3, [pc, #28]	; (8003274 <enviaUDP+0x40>)
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	4807      	ldr	r0, [pc, #28]	; (8003278 <enviaUDP+0x44>)
 800325c:	1939      	adds	r1, r7, r4
 800325e:	9300      	str	r3, [sp, #0]
 8003260:	0003      	movs	r3, r0
 8003262:	2001      	movs	r0, #1
 8003264:	f004 f886 	bl	8007374 <sendto>

}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b015      	add	sp, #84	; 0x54
 800326e:	bd90      	pop	{r4, r7, pc}
 8003270:	08015a98 	.word	0x08015a98
 8003274:	200000d8 	.word	0x200000d8
 8003278:	200000d4 	.word	0x200000d4

0800327c <concathex2>:

//***********************************************************************************************
//           Converte decimal em hex de 2 bytes e concatena no array
//***********************************************************************************************
void concathex2(char *array[], unsigned char bt)
{
 800327c:	b590      	push	{r4, r7, lr}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	000a      	movs	r2, r1
 8003286:	1cfb      	adds	r3, r7, #3
 8003288:	701a      	strb	r2, [r3, #0]
	char hex[2];

	hex[0] = tbh[ bt/16];
 800328a:	1cfb      	adds	r3, r7, #3
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	091b      	lsrs	r3, r3, #4
 8003290:	b2db      	uxtb	r3, r3
 8003292:	001a      	movs	r2, r3
 8003294:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <concathex2+0x58>)
 8003296:	5c9a      	ldrb	r2, [r3, r2]
 8003298:	210c      	movs	r1, #12
 800329a:	187b      	adds	r3, r7, r1
 800329c:	701a      	strb	r2, [r3, #0]
	hex[1] = tbh[ bt%16];
 800329e:	1cfb      	adds	r3, r7, #3
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	220f      	movs	r2, #15
 80032a4:	4013      	ands	r3, r2
 80032a6:	4a0b      	ldr	r2, [pc, #44]	; (80032d4 <concathex2+0x58>)
 80032a8:	5cd2      	ldrb	r2, [r2, r3]
 80032aa:	187b      	adds	r3, r7, r1
 80032ac:	705a      	strb	r2, [r3, #1]

	strncat(array, &hex[0], 1);
 80032ae:	000c      	movs	r4, r1
 80032b0:	1879      	adds	r1, r7, r1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	0018      	movs	r0, r3
 80032b8:	f00e fd07 	bl	8011cca <strncat>
	strncat(array, &hex[1], 1);
 80032bc:	193b      	adds	r3, r7, r4
 80032be:	1c59      	adds	r1, r3, #1
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	0018      	movs	r0, r3
 80032c6:	f00e fd00 	bl	8011cca <strncat>
}
 80032ca:	46c0      	nop			; (mov r8, r8)
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b005      	add	sp, #20
 80032d0:	bd90      	pop	{r4, r7, pc}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	08017334 	.word	0x08017334

080032d8 <concathex4>:
//***********************************************************************************************
//           Converte decimal em hex de 4 bytes e concatena no array
//***********************************************************************************************
void concathex4(char *array[], uint16_t v)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	000a      	movs	r2, r1
 80032e2:	1cbb      	adds	r3, r7, #2
 80032e4:	801a      	strh	r2, [r3, #0]
	unsigned char bt;
	char hex[4];

	bt = (v/256);
 80032e6:	1cbb      	adds	r3, r7, #2
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	0a1b      	lsrs	r3, r3, #8
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	210f      	movs	r1, #15
 80032f0:	187b      	adds	r3, r7, r1
 80032f2:	701a      	strb	r2, [r3, #0]
	hex[0] = tbh[ bt>>4];
 80032f4:	187b      	adds	r3, r7, r1
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	001a      	movs	r2, r3
 80032fe:	4b20      	ldr	r3, [pc, #128]	; (8003380 <concathex4+0xa8>)
 8003300:	5c9a      	ldrb	r2, [r3, r2]
 8003302:	2008      	movs	r0, #8
 8003304:	183b      	adds	r3, r7, r0
 8003306:	701a      	strb	r2, [r3, #0]
	hex[1] = tbh[ bt & 0xf];
 8003308:	187b      	adds	r3, r7, r1
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	220f      	movs	r2, #15
 800330e:	4013      	ands	r3, r2
 8003310:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <concathex4+0xa8>)
 8003312:	5cd2      	ldrb	r2, [r2, r3]
 8003314:	183b      	adds	r3, r7, r0
 8003316:	705a      	strb	r2, [r3, #1]
	bt = v&0xff;
 8003318:	187b      	adds	r3, r7, r1
 800331a:	1cba      	adds	r2, r7, #2
 800331c:	8812      	ldrh	r2, [r2, #0]
 800331e:	701a      	strb	r2, [r3, #0]
	hex[2] = tbh[ bt/16];
 8003320:	187b      	adds	r3, r7, r1
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	091b      	lsrs	r3, r3, #4
 8003326:	b2db      	uxtb	r3, r3
 8003328:	001a      	movs	r2, r3
 800332a:	4b15      	ldr	r3, [pc, #84]	; (8003380 <concathex4+0xa8>)
 800332c:	5c9a      	ldrb	r2, [r3, r2]
 800332e:	183b      	adds	r3, r7, r0
 8003330:	709a      	strb	r2, [r3, #2]
	hex[3] = tbh[ bt%16];
 8003332:	187b      	adds	r3, r7, r1
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	220f      	movs	r2, #15
 8003338:	4013      	ands	r3, r2
 800333a:	4a11      	ldr	r2, [pc, #68]	; (8003380 <concathex4+0xa8>)
 800333c:	5cd2      	ldrb	r2, [r2, r3]
 800333e:	183b      	adds	r3, r7, r0
 8003340:	70da      	strb	r2, [r3, #3]

	for(x=0; x<4; x++){
 8003342:	4b10      	ldr	r3, [pc, #64]	; (8003384 <concathex4+0xac>)
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e010      	b.n	800336c <concathex4+0x94>
		strncat(array, &hex[x], 1);
 800334a:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <concathex4+0xac>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	001a      	movs	r2, r3
 8003350:	2308      	movs	r3, #8
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	1899      	adds	r1, r3, r2
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	0018      	movs	r0, r3
 800335c:	f00e fcb5 	bl	8011cca <strncat>
	for(x=0; x<4; x++){
 8003360:	4b08      	ldr	r3, [pc, #32]	; (8003384 <concathex4+0xac>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	3301      	adds	r3, #1
 8003366:	b2da      	uxtb	r2, r3
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <concathex4+0xac>)
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <concathex4+0xac>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b03      	cmp	r3, #3
 8003372:	d9ea      	bls.n	800334a <concathex4+0x72>
	}

}
 8003374:	46c0      	nop			; (mov r8, r8)
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	46bd      	mov	sp, r7
 800337a:	b004      	add	sp, #16
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	08017334 	.word	0x08017334
 8003384:	200007d1 	.word	0x200007d1

08003388 <hextochar>:
//***********************************************************************************************
//           Converte hex em byte retornando o int decimal hextochar('0', '0', 'C', '0') -> 192
//***********************************************************************************************
int hextochar(char c1, char c2, char c3, char c4)
{
 8003388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800338a:	b095      	sub	sp, #84	; 0x54
 800338c:	af00      	add	r7, sp, #0
 800338e:	0016      	movs	r6, r2
 8003390:	469c      	mov	ip, r3
 8003392:	232f      	movs	r3, #47	; 0x2f
 8003394:	18fa      	adds	r2, r7, r3
 8003396:	1c03      	adds	r3, r0, #0
 8003398:	7013      	strb	r3, [r2, #0]
 800339a:	232e      	movs	r3, #46	; 0x2e
 800339c:	18fa      	adds	r2, r7, r3
 800339e:	1c0b      	adds	r3, r1, #0
 80033a0:	7013      	strb	r3, [r2, #0]
 80033a2:	232d      	movs	r3, #45	; 0x2d
 80033a4:	18fa      	adds	r2, r7, r3
 80033a6:	1c33      	adds	r3, r6, #0
 80033a8:	7013      	strb	r3, [r2, #0]
 80033aa:	262c      	movs	r6, #44	; 0x2c
 80033ac:	19ba      	adds	r2, r7, r6
 80033ae:	4663      	mov	r3, ip
 80033b0:	7013      	strb	r3, [r2, #0]
	char hex[4];
	long long decimal = 0, base = 1;
 80033b2:	2200      	movs	r2, #0
 80033b4:	2300      	movs	r3, #0
 80033b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80033b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ba:	2201      	movs	r2, #1
 80033bc:	2300      	movs	r3, #0
 80033be:	643a      	str	r2, [r7, #64]	; 0x40
 80033c0:	647b      	str	r3, [r7, #68]	; 0x44
	int i = 0, length;
 80033c2:	2300      	movs	r3, #0
 80033c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	hex[0] = c1;
 80033c6:	210c      	movs	r1, #12
 80033c8:	2028      	movs	r0, #40	; 0x28
 80033ca:	180a      	adds	r2, r1, r0
 80033cc:	19d2      	adds	r2, r2, r7
 80033ce:	232f      	movs	r3, #47	; 0x2f
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	7013      	strb	r3, [r2, #0]
	hex[1] = c2;
 80033d6:	180a      	adds	r2, r1, r0
 80033d8:	19d2      	adds	r2, r2, r7
 80033da:	232e      	movs	r3, #46	; 0x2e
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	7053      	strb	r3, [r2, #1]
	hex[2] = c3;
 80033e2:	180a      	adds	r2, r1, r0
 80033e4:	19d2      	adds	r2, r2, r7
 80033e6:	232d      	movs	r3, #45	; 0x2d
 80033e8:	18fb      	adds	r3, r7, r3
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	7093      	strb	r3, [r2, #2]
	hex[3] = c4;
 80033ee:	180b      	adds	r3, r1, r0
 80033f0:	19da      	adds	r2, r3, r7
 80033f2:	19bb      	adds	r3, r7, r6
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	70d3      	strb	r3, [r2, #3]
	length = strlen(hex);
 80033f8:	180b      	adds	r3, r1, r0
 80033fa:	19db      	adds	r3, r3, r7
 80033fc:	0018      	movs	r0, r3
 80033fe:	f7fc fe89 	bl	8000114 <strlen>
 8003402:	0003      	movs	r3, r0
 8003404:	63bb      	str	r3, [r7, #56]	; 0x38

	    for(i = length--; i >= 0; i--)
 8003406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003408:	1e53      	subs	r3, r2, #1
 800340a:	63bb      	str	r3, [r7, #56]	; 0x38
 800340c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800340e:	e0a6      	b.n	800355e <hextochar+0x1d6>
	    {
	        if(hex[i] >= '0' && hex[i] <= '9')
 8003410:	210c      	movs	r1, #12
 8003412:	2028      	movs	r0, #40	; 0x28
 8003414:	180b      	adds	r3, r1, r0
 8003416:	19da      	adds	r2, r3, r7
 8003418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800341a:	18d3      	adds	r3, r2, r3
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b2f      	cmp	r3, #47	; 0x2f
 8003420:	d929      	bls.n	8003476 <hextochar+0xee>
 8003422:	180b      	adds	r3, r1, r0
 8003424:	19da      	adds	r2, r3, r7
 8003426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003428:	18d3      	adds	r3, r2, r3
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b39      	cmp	r3, #57	; 0x39
 800342e:	d822      	bhi.n	8003476 <hextochar+0xee>
	        {
	            decimal += (hex[i] - 48) * base;
 8003430:	180b      	adds	r3, r1, r0
 8003432:	19da      	adds	r2, r3, r7
 8003434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003436:	18d3      	adds	r3, r2, r3
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	3b30      	subs	r3, #48	; 0x30
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	17db      	asrs	r3, r3, #31
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003446:	6938      	ldr	r0, [r7, #16]
 8003448:	6979      	ldr	r1, [r7, #20]
 800344a:	f7fd f86d 	bl	8000528 <__aeabi_lmul>
 800344e:	0002      	movs	r2, r0
 8003450:	000b      	movs	r3, r1
 8003452:	0010      	movs	r0, r2
 8003454:	0019      	movs	r1, r3
 8003456:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800345a:	1812      	adds	r2, r2, r0
 800345c:	414b      	adcs	r3, r1
 800345e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003460:	64fb      	str	r3, [r7, #76]	; 0x4c
	            base *= 16;
 8003462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003464:	0f1a      	lsrs	r2, r3, #28
 8003466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003468:	011d      	lsls	r5, r3, #4
 800346a:	4315      	orrs	r5, r2
 800346c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800346e:	011c      	lsls	r4, r3, #4
 8003470:	643c      	str	r4, [r7, #64]	; 0x40
 8003472:	647d      	str	r5, [r7, #68]	; 0x44
 8003474:	e070      	b.n	8003558 <hextochar+0x1d0>
	        }
	        else if(hex[i] >= 'A' && hex[i] <= 'F')
 8003476:	210c      	movs	r1, #12
 8003478:	2028      	movs	r0, #40	; 0x28
 800347a:	180b      	adds	r3, r1, r0
 800347c:	19da      	adds	r2, r3, r7
 800347e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003480:	18d3      	adds	r3, r2, r3
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b40      	cmp	r3, #64	; 0x40
 8003486:	d92f      	bls.n	80034e8 <hextochar+0x160>
 8003488:	180b      	adds	r3, r1, r0
 800348a:	19da      	adds	r2, r3, r7
 800348c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348e:	18d3      	adds	r3, r2, r3
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b46      	cmp	r3, #70	; 0x46
 8003494:	d828      	bhi.n	80034e8 <hextochar+0x160>
	        {
	            decimal += (hex[i] - 55) * base;
 8003496:	180b      	adds	r3, r1, r0
 8003498:	19da      	adds	r2, r3, r7
 800349a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800349c:	18d3      	adds	r3, r2, r3
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	3b37      	subs	r3, #55	; 0x37
 80034a2:	60bb      	str	r3, [r7, #8]
 80034a4:	17db      	asrs	r3, r3, #31
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ac:	68b8      	ldr	r0, [r7, #8]
 80034ae:	68f9      	ldr	r1, [r7, #12]
 80034b0:	f7fd f83a 	bl	8000528 <__aeabi_lmul>
 80034b4:	0002      	movs	r2, r0
 80034b6:	000b      	movs	r3, r1
 80034b8:	0010      	movs	r0, r2
 80034ba:	0019      	movs	r1, r3
 80034bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c0:	1812      	adds	r2, r2, r0
 80034c2:	414b      	adcs	r3, r1
 80034c4:	64ba      	str	r2, [r7, #72]	; 0x48
 80034c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	            base *= 16;
 80034c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034ca:	0f1a      	lsrs	r2, r3, #28
 80034cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d4:	4313      	orrs	r3, r2
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
 80034d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	623b      	str	r3, [r7, #32]
 80034de:	6a3a      	ldr	r2, [r7, #32]
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	643a      	str	r2, [r7, #64]	; 0x40
 80034e4:	647b      	str	r3, [r7, #68]	; 0x44
 80034e6:	e037      	b.n	8003558 <hextochar+0x1d0>
	        }
	        else if(hex[i] >= 'a' && hex[i] <= 'f')
 80034e8:	210c      	movs	r1, #12
 80034ea:	2028      	movs	r0, #40	; 0x28
 80034ec:	180b      	adds	r3, r1, r0
 80034ee:	19da      	adds	r2, r3, r7
 80034f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034f2:	18d3      	adds	r3, r2, r3
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b60      	cmp	r3, #96	; 0x60
 80034f8:	d92e      	bls.n	8003558 <hextochar+0x1d0>
 80034fa:	180b      	adds	r3, r1, r0
 80034fc:	19da      	adds	r2, r3, r7
 80034fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003500:	18d3      	adds	r3, r2, r3
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b66      	cmp	r3, #102	; 0x66
 8003506:	d827      	bhi.n	8003558 <hextochar+0x1d0>
	        {
	            decimal += (hex[i] - 87) * base;
 8003508:	180b      	adds	r3, r1, r0
 800350a:	19da      	adds	r2, r3, r7
 800350c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350e:	18d3      	adds	r3, r2, r3
 8003510:	781b      	ldrb	r3, [r3, #0]
 8003512:	3b57      	subs	r3, #87	; 0x57
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	17db      	asrs	r3, r3, #31
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800351c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351e:	6838      	ldr	r0, [r7, #0]
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	f7fd f801 	bl	8000528 <__aeabi_lmul>
 8003526:	0002      	movs	r2, r0
 8003528:	000b      	movs	r3, r1
 800352a:	0010      	movs	r0, r2
 800352c:	0019      	movs	r1, r3
 800352e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003532:	1812      	adds	r2, r2, r0
 8003534:	414b      	adcs	r3, r1
 8003536:	64ba      	str	r2, [r7, #72]	; 0x48
 8003538:	64fb      	str	r3, [r7, #76]	; 0x4c
	            base *= 16;
 800353a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800353c:	0f1a      	lsrs	r2, r3, #28
 800353e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	4313      	orrs	r3, r2
 8003548:	61fb      	str	r3, [r7, #28]
 800354a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	61bb      	str	r3, [r7, #24]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	643a      	str	r2, [r7, #64]	; 0x40
 8003556:	647b      	str	r3, [r7, #68]	; 0x44
	    for(i = length--; i >= 0; i--)
 8003558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355a:	3b01      	subs	r3, #1
 800355c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800355e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003560:	2b00      	cmp	r3, #0
 8003562:	db00      	blt.n	8003566 <hextochar+0x1de>
 8003564:	e754      	b.n	8003410 <hextochar+0x88>
	        }
	    }
 return decimal;
 8003566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b015      	add	sp, #84	; 0x54
 800356e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003570 <dht>:

//***********************************************************************************************
//              dht
// **********************************************************************************************
void dht(void){
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0

    DHT_data d = DHT_getData(&livingRoom);
 8003576:	003b      	movs	r3, r7
 8003578:	4a08      	ldr	r2, [pc, #32]	; (800359c <dht+0x2c>)
 800357a:	0011      	movs	r1, r2
 800357c:	0018      	movs	r0, r3
 800357e:	f7ff fbf5 	bl	8002d6c <DHT_getData>
    //sprintf(msg4, "T %d°C,  H %d%%", (uint8_t)d.temp, (uint8_t)d.hum);
    //sprintf(dht11, "T %dC  H %d%%", (uint8_t)d.temp, (uint8_t)d.hum);
    //sprintf(dht11, "%dC", (uint8_t)d.temp);
    temp=(uint8_t)d.temp;
 8003582:	003b      	movs	r3, r7
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	1c18      	adds	r0, r3, #0
 8003588:	f7fc fffc 	bl	8000584 <__aeabi_f2uiz>
 800358c:	0003      	movs	r3, r0
 800358e:	b2da      	uxtb	r2, r3
 8003590:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <dht+0x30>)
 8003592:	701a      	strb	r2, [r3, #0]

}
 8003594:	46c0      	nop			; (mov r8, r8)
 8003596:	46bd      	mov	sp, r7
 8003598:	b002      	add	sp, #8
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20000010 	.word	0x20000010
 80035a0:	20000754 	.word	0x20000754

080035a4 <trata_fan1>:


//***********************************************************************************************
//              fan
// **********************************************************************************************
void trata_fan1(void){
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0

    if(rede==0 || temp>=55){
 80035a8:	4b0f      	ldr	r3, [pc, #60]	; (80035e8 <trata_fan1+0x44>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2201      	movs	r2, #1
 80035ae:	4053      	eors	r3, r2
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d103      	bne.n	80035be <trata_fan1+0x1a>
 80035b6:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <trata_fan1+0x48>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b36      	cmp	r3, #54	; 0x36
 80035bc:	d903      	bls.n	80035c6 <trata_fan1+0x22>
      TIM3->CCR4 = 999;
 80035be:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <trata_fan1+0x4c>)
 80035c0:	4a0c      	ldr	r2, [pc, #48]	; (80035f4 <trata_fan1+0x50>)
 80035c2:	641a      	str	r2, [r3, #64]	; 0x40
 80035c4:	e002      	b.n	80035cc <trata_fan1+0x28>
      }else TIM3->CCR4 = 0;
 80035c6:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <trata_fan1+0x4c>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40

    if(fan1_cont == 0){
 80035cc:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <trata_fan1+0x54>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d103      	bne.n	80035dc <trata_fan1+0x38>
    	fan1_stat = 0;
 80035d4:	4b09      	ldr	r3, [pc, #36]	; (80035fc <trata_fan1+0x58>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
    }else{
    	fan1_stat = 1;
    }
}
 80035da:	e002      	b.n	80035e2 <trata_fan1+0x3e>
    	fan1_stat = 1;
 80035dc:	4b07      	ldr	r3, [pc, #28]	; (80035fc <trata_fan1+0x58>)
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	2000075c 	.word	0x2000075c
 80035ec:	20000754 	.word	0x20000754
 80035f0:	40000400 	.word	0x40000400
 80035f4:	000003e7 	.word	0x000003e7
 80035f8:	20000138 	.word	0x20000138
 80035fc:	2000075e 	.word	0x2000075e

08003600 <trata_fan2>:

//***********************************************************************************************
//              fan
// **********************************************************************************************
void trata_fan2(void){
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0

    if(temp>41){
 8003604:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <trata_fan2+0x38>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b29      	cmp	r3, #41	; 0x29
 800360a:	d903      	bls.n	8003614 <trata_fan2+0x14>
      TIM3->CCR1 = 999;
 800360c:	4b0b      	ldr	r3, [pc, #44]	; (800363c <trata_fan2+0x3c>)
 800360e:	4a0c      	ldr	r2, [pc, #48]	; (8003640 <trata_fan2+0x40>)
 8003610:	635a      	str	r2, [r3, #52]	; 0x34
 8003612:	e002      	b.n	800361a <trata_fan2+0x1a>
      }else TIM3->CCR1 = 0;
 8003614:	4b09      	ldr	r3, [pc, #36]	; (800363c <trata_fan2+0x3c>)
 8003616:	2200      	movs	r2, #0
 8003618:	635a      	str	r2, [r3, #52]	; 0x34

    if(fan2_cont == 0){
 800361a:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <trata_fan2+0x44>)
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d103      	bne.n	800362a <trata_fan2+0x2a>
    	fan2_stat = 0;
 8003622:	4b09      	ldr	r3, [pc, #36]	; (8003648 <trata_fan2+0x48>)
 8003624:	2200      	movs	r2, #0
 8003626:	701a      	strb	r2, [r3, #0]
    }else{
    	fan2_stat = 1;
    }
}
 8003628:	e002      	b.n	8003630 <trata_fan2+0x30>
    	fan2_stat = 1;
 800362a:	4b07      	ldr	r3, [pc, #28]	; (8003648 <trata_fan2+0x48>)
 800362c:	2201      	movs	r2, #1
 800362e:	701a      	strb	r2, [r3, #0]
}
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	20000754 	.word	0x20000754
 800363c:	40000400 	.word	0x40000400
 8003640:	000003e7 	.word	0x000003e7
 8003644:	20000139 	.word	0x20000139
 8003648:	2000075f 	.word	0x2000075f

0800364c <trata_carga>:

//***********************************************************************************************
//          carga
//***********************************************************************************************
void trata_carga(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0

	amp_carga=ad[1];
 8003650:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <trata_carga+0x74>)
 8003652:	785a      	ldrb	r2, [r3, #1]
 8003654:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <trata_carga+0x78>)
 8003656:	701a      	strb	r2, [r3, #0]
	if(carga == 1){
 8003658:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <trata_carga+0x7c>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d026      	beq.n	80036ae <trata_carga+0x62>
	if (amp_carga < 126) {dut_carga++;}
 8003660:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <trata_carga+0x78>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b7d      	cmp	r3, #125	; 0x7d
 8003666:	d805      	bhi.n	8003674 <trata_carga+0x28>
 8003668:	4b18      	ldr	r3, [pc, #96]	; (80036cc <trata_carga+0x80>)
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <trata_carga+0x80>)
 8003672:	801a      	strh	r2, [r3, #0]
	if (amp_carga > 126 && (dut_carga > 1)) {dut_carga--;}
 8003674:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <trata_carga+0x78>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b7e      	cmp	r3, #126	; 0x7e
 800367a:	d909      	bls.n	8003690 <trata_carga+0x44>
 800367c:	4b13      	ldr	r3, [pc, #76]	; (80036cc <trata_carga+0x80>)
 800367e:	881b      	ldrh	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d905      	bls.n	8003690 <trata_carga+0x44>
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <trata_carga+0x80>)
 8003686:	881b      	ldrh	r3, [r3, #0]
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	4b0f      	ldr	r3, [pc, #60]	; (80036cc <trata_carga+0x80>)
 800368e:	801a      	strh	r2, [r3, #0]
	if (amp_carga >= 160)
 8003690:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <trata_carga+0x78>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b9f      	cmp	r3, #159	; 0x9f
 8003696:	d905      	bls.n	80036a4 <trata_carga+0x58>
	{
		TIM3->CCR2 = 0;
 8003698:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <trata_carga+0x84>)
 800369a:	2200      	movs	r2, #0
 800369c:	639a      	str	r2, [r3, #56]	; 0x38
		dut_carga=0;
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <trata_carga+0x80>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	801a      	strh	r2, [r3, #0]
	}
	TIM3->CCR2 = dut_carga;
 80036a4:	4b09      	ldr	r3, [pc, #36]	; (80036cc <trata_carga+0x80>)
 80036a6:	881a      	ldrh	r2, [r3, #0]
 80036a8:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <trata_carga+0x84>)
 80036aa:	639a      	str	r2, [r3, #56]	; 0x38
	}else {
		TIM3->CCR2 = 0;
		dut_carga=0;
	}

}
 80036ac:	e005      	b.n	80036ba <trata_carga+0x6e>
		TIM3->CCR2 = 0;
 80036ae:	4b08      	ldr	r3, [pc, #32]	; (80036d0 <trata_carga+0x84>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
		dut_carga=0;
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <trata_carga+0x80>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	801a      	strh	r2, [r3, #0]
}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	2000074c 	.word	0x2000074c
 80036c4:	20000750 	.word	0x20000750
 80036c8:	2000075d 	.word	0x2000075d
 80036cc:	20000756 	.word	0x20000756
 80036d0:	40000400 	.word	0x40000400

080036d4 <W5500_Select>:


//***********************************************************************************************
//           spi sel
//***********************************************************************************************
void W5500_Select(void) {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(w5500_CS_GPIO, w5500_CS_PIN, GPIO_PIN_RESET);
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	021b      	lsls	r3, r3, #8
 80036dc:	4803      	ldr	r0, [pc, #12]	; (80036ec <W5500_Select+0x18>)
 80036de:	2200      	movs	r2, #0
 80036e0:	0019      	movs	r1, r3
 80036e2:	f008 f864 	bl	800b7ae <HAL_GPIO_WritePin>
}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	50000800 	.word	0x50000800

080036f0 <W5500_Unselect>:

void W5500_Unselect(void) {
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(w5500_CS_GPIO, w5500_CS_PIN, GPIO_PIN_SET);
 80036f4:	2380      	movs	r3, #128	; 0x80
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	4803      	ldr	r0, [pc, #12]	; (8003708 <W5500_Unselect+0x18>)
 80036fa:	2201      	movs	r2, #1
 80036fc:	0019      	movs	r1, r3
 80036fe:	f008 f856 	bl	800b7ae <HAL_GPIO_WritePin>
}
 8003702:	46c0      	nop			; (mov r8, r8)
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	50000800 	.word	0x50000800

0800370c <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 800370c:	b590      	push	{r4, r7, lr}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	000a      	movs	r2, r1
 8003716:	1cbb      	adds	r3, r7, #2
 8003718:	801a      	strh	r2, [r3, #0]
    HAL_SPI_Receive(&hspi1, buff, len, HAL_MAX_DELAY);
 800371a:	2301      	movs	r3, #1
 800371c:	425c      	negs	r4, r3
 800371e:	1cbb      	adds	r3, r7, #2
 8003720:	881a      	ldrh	r2, [r3, #0]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4803      	ldr	r0, [pc, #12]	; (8003734 <W5500_ReadBuff+0x28>)
 8003726:	0023      	movs	r3, r4
 8003728:	f00a f89e 	bl	800d868 <HAL_SPI_Receive>
}
 800372c:	46c0      	nop			; (mov r8, r8)
 800372e:	46bd      	mov	sp, r7
 8003730:	b003      	add	sp, #12
 8003732:	bd90      	pop	{r4, r7, pc}
 8003734:	200004a0 	.word	0x200004a0

08003738 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8003738:	b590      	push	{r4, r7, lr}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	000a      	movs	r2, r1
 8003742:	1cbb      	adds	r3, r7, #2
 8003744:	801a      	strh	r2, [r3, #0]
    HAL_SPI_Transmit(&hspi1, buff, len, HAL_MAX_DELAY);
 8003746:	2301      	movs	r3, #1
 8003748:	425c      	negs	r4, r3
 800374a:	1cbb      	adds	r3, r7, #2
 800374c:	881a      	ldrh	r2, [r3, #0]
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	4803      	ldr	r0, [pc, #12]	; (8003760 <W5500_WriteBuff+0x28>)
 8003752:	0023      	movs	r3, r4
 8003754:	f009 ff30 	bl	800d5b8 <HAL_SPI_Transmit>
}
 8003758:	46c0      	nop			; (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b003      	add	sp, #12
 800375e:	bd90      	pop	{r4, r7, pc}
 8003760:	200004a0 	.word	0x200004a0

08003764 <W5500_ReadByte>:

uint8_t W5500_ReadByte(void) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 800376a:	1dfb      	adds	r3, r7, #7
 800376c:	2101      	movs	r1, #1
 800376e:	0018      	movs	r0, r3
 8003770:	f7ff ffcc 	bl	800370c <W5500_ReadBuff>
    return byte;
 8003774:	1dfb      	adds	r3, r7, #7
 8003776:	781b      	ldrb	r3, [r3, #0]
}
 8003778:	0018      	movs	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	b002      	add	sp, #8
 800377e:	bd80      	pop	{r7, pc}

08003780 <W5500_WriteByte>:

void W5500_WriteByte(uint8_t byte) {
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	0002      	movs	r2, r0
 8003788:	1dfb      	adds	r3, r7, #7
 800378a:	701a      	strb	r2, [r3, #0]
    W5500_WriteBuff(&byte, sizeof(byte));
 800378c:	1dfb      	adds	r3, r7, #7
 800378e:	2101      	movs	r1, #1
 8003790:	0018      	movs	r0, r3
 8003792:	f7ff ffd1 	bl	8003738 <W5500_WriteBuff>
}
 8003796:	46c0      	nop			; (mov r8, r8)
 8003798:	46bd      	mov	sp, r7
 800379a:	b002      	add	sp, #8
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <telas>:

//***********************************************************************************************
//           TELA LCD
//***********************************************************************************************
void telas(void){
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af02      	add	r7, sp, #8

	  switch(tela)
 80037a6:	4bc5      	ldr	r3, [pc, #788]	; (8003abc <telas+0x31c>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d100      	bne.n	80037b0 <telas+0x10>
 80037ae:	e2fe      	b.n	8003dae <telas+0x60e>
 80037b0:	dd01      	ble.n	80037b6 <telas+0x16>
 80037b2:	f000 fbf1 	bl	8003f98 <telas+0x7f8>
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d100      	bne.n	80037bc <telas+0x1c>
 80037ba:	e1d1      	b.n	8003b60 <telas+0x3c0>
 80037bc:	dd00      	ble.n	80037c0 <telas+0x20>
 80037be:	e3eb      	b.n	8003f98 <telas+0x7f8>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <telas+0x2c>
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d100      	bne.n	80037ca <telas+0x2a>
 80037c8:	e081      	b.n	80038ce <telas+0x12e>
				  SSD1306_UpdateScreen();
			break;

	  }
	  //HAL_Delay(500);
}
 80037ca:	e3e5      	b.n	8003f98 <telas+0x7f8>
				  m2=(vot_rede*255.0/255);
 80037cc:	4bbc      	ldr	r3, [pc, #752]	; (8003ac0 <telas+0x320>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	0018      	movs	r0, r3
 80037d2:	f7ff f923 	bl	8002a1c <__aeabi_i2d>
 80037d6:	2200      	movs	r2, #0
 80037d8:	4bba      	ldr	r3, [pc, #744]	; (8003ac4 <telas+0x324>)
 80037da:	f7fe facd 	bl	8001d78 <__aeabi_dmul>
 80037de:	0002      	movs	r2, r0
 80037e0:	000b      	movs	r3, r1
 80037e2:	0010      	movs	r0, r2
 80037e4:	0019      	movs	r1, r3
 80037e6:	2200      	movs	r2, #0
 80037e8:	4bb6      	ldr	r3, [pc, #728]	; (8003ac4 <telas+0x324>)
 80037ea:	f7fd fec3 	bl	8001574 <__aeabi_ddiv>
 80037ee:	0002      	movs	r2, r0
 80037f0:	000b      	movs	r3, r1
 80037f2:	0010      	movs	r0, r2
 80037f4:	0019      	movs	r1, r3
 80037f6:	f7ff f9af 	bl	8002b58 <__aeabi_d2f>
 80037fa:	1c02      	adds	r2, r0, #0
 80037fc:	4bb2      	ldr	r3, [pc, #712]	; (8003ac8 <telas+0x328>)
 80037fe:	601a      	str	r2, [r3, #0]
			      sprintf(msg4, "%1.1fv  ", m2);
 8003800:	4bb1      	ldr	r3, [pc, #708]	; (8003ac8 <telas+0x328>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	1c18      	adds	r0, r3, #0
 8003806:	f7ff f95f 	bl	8002ac8 <__aeabi_f2d>
 800380a:	0002      	movs	r2, r0
 800380c:	000b      	movs	r3, r1
 800380e:	49af      	ldr	r1, [pc, #700]	; (8003acc <telas+0x32c>)
 8003810:	48af      	ldr	r0, [pc, #700]	; (8003ad0 <telas+0x330>)
 8003812:	f00e fa25 	bl	8011c60 <siprintf>
			      sprintf(msg3, "%06hus", tp_ativo);
 8003816:	4baf      	ldr	r3, [pc, #700]	; (8003ad4 <telas+0x334>)
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	49af      	ldr	r1, [pc, #700]	; (8003ad8 <telas+0x338>)
 800381c:	4baf      	ldr	r3, [pc, #700]	; (8003adc <telas+0x33c>)
 800381e:	0018      	movs	r0, r3
 8003820:	f00e fa1e 	bl	8011c60 <siprintf>
			      sprintf(testezin, "%d", boot);
 8003824:	4bae      	ldr	r3, [pc, #696]	; (8003ae0 <telas+0x340>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	001a      	movs	r2, r3
 800382a:	49ae      	ldr	r1, [pc, #696]	; (8003ae4 <telas+0x344>)
 800382c:	4bae      	ldr	r3, [pc, #696]	; (8003ae8 <telas+0x348>)
 800382e:	0018      	movs	r0, r3
 8003830:	f00e fa16 	bl	8011c60 <siprintf>
				  SSD1306_GotoXY (2, 0);
 8003834:	2100      	movs	r1, #0
 8003836:	2002      	movs	r0, #2
 8003838:	f004 fb46 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts ("Status", &Font_7x10, 1);
 800383c:	49ab      	ldr	r1, [pc, #684]	; (8003aec <telas+0x34c>)
 800383e:	4bac      	ldr	r3, [pc, #688]	; (8003af0 <telas+0x350>)
 8003840:	2201      	movs	r2, #1
 8003842:	0018      	movs	r0, r3
 8003844:	f004 fbda 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (70, 0);
 8003848:	2100      	movs	r1, #0
 800384a:	2046      	movs	r0, #70	; 0x46
 800384c:	f004 fb3c 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (energia, &Font_7x10, 1);
 8003850:	49a6      	ldr	r1, [pc, #664]	; (8003aec <telas+0x34c>)
 8003852:	4ba8      	ldr	r3, [pc, #672]	; (8003af4 <telas+0x354>)
 8003854:	2201      	movs	r2, #1
 8003856:	0018      	movs	r0, r3
 8003858:	f004 fbd0 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_DrawLine (0, 10, 129, 10, SSD1306_COLOR_WHITE);
 800385c:	2301      	movs	r3, #1
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	230a      	movs	r3, #10
 8003862:	2281      	movs	r2, #129	; 0x81
 8003864:	210a      	movs	r1, #10
 8003866:	2000      	movs	r0, #0
 8003868:	f004 fbee 	bl	8008048 <SSD1306_DrawLine>
				  SSD1306_GotoXY (35, 20);
 800386c:	2114      	movs	r1, #20
 800386e:	2023      	movs	r0, #35	; 0x23
 8003870:	f004 fb2a 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (msg4, &Font_11x18, 1);
 8003874:	49a0      	ldr	r1, [pc, #640]	; (8003af8 <telas+0x358>)
 8003876:	4b96      	ldr	r3, [pc, #600]	; (8003ad0 <telas+0x330>)
 8003878:	2201      	movs	r2, #1
 800387a:	0018      	movs	r0, r3
 800387c:	f004 fbbe 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_DrawLine (0, 43, 129, 43, SSD1306_COLOR_WHITE);
 8003880:	2301      	movs	r3, #1
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	232b      	movs	r3, #43	; 0x2b
 8003886:	2281      	movs	r2, #129	; 0x81
 8003888:	212b      	movs	r1, #43	; 0x2b
 800388a:	2000      	movs	r0, #0
 800388c:	f004 fbdc 	bl	8008048 <SSD1306_DrawLine>
				  SSD1306_GotoXY (1, 50);
 8003890:	2132      	movs	r1, #50	; 0x32
 8003892:	2001      	movs	r0, #1
 8003894:	f004 fb18 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts ("Tempo ativo", &Font_7x10, 1);
 8003898:	4994      	ldr	r1, [pc, #592]	; (8003aec <telas+0x34c>)
 800389a:	4b98      	ldr	r3, [pc, #608]	; (8003afc <telas+0x35c>)
 800389c:	2201      	movs	r2, #1
 800389e:	0018      	movs	r0, r3
 80038a0:	f004 fbac 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (80, 50);
 80038a4:	2132      	movs	r1, #50	; 0x32
 80038a6:	2050      	movs	r0, #80	; 0x50
 80038a8:	f004 fb0e 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (msg3, &Font_7x10, 1);
 80038ac:	498f      	ldr	r1, [pc, #572]	; (8003aec <telas+0x34c>)
 80038ae:	4b8b      	ldr	r3, [pc, #556]	; (8003adc <telas+0x33c>)
 80038b0:	2201      	movs	r2, #1
 80038b2:	0018      	movs	r0, r3
 80038b4:	f004 fba2 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_DrawLine (0, 63, 129, 63, SSD1306_COLOR_WHITE);
 80038b8:	2301      	movs	r3, #1
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	233f      	movs	r3, #63	; 0x3f
 80038be:	2281      	movs	r2, #129	; 0x81
 80038c0:	213f      	movs	r1, #63	; 0x3f
 80038c2:	2000      	movs	r0, #0
 80038c4:	f004 fbc0 	bl	8008048 <SSD1306_DrawLine>
				  SSD1306_UpdateScreen();
 80038c8:	f004 fa32 	bl	8007d30 <SSD1306_UpdateScreen>
			break;
 80038cc:	e364      	b.n	8003f98 <telas+0x7f8>
				  m1=(vot_bat*25.5/255);
 80038ce:	4b8c      	ldr	r3, [pc, #560]	; (8003b00 <telas+0x360>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	0018      	movs	r0, r3
 80038d4:	f7ff f8a2 	bl	8002a1c <__aeabi_i2d>
 80038d8:	2200      	movs	r2, #0
 80038da:	4b8a      	ldr	r3, [pc, #552]	; (8003b04 <telas+0x364>)
 80038dc:	f7fe fa4c 	bl	8001d78 <__aeabi_dmul>
 80038e0:	0002      	movs	r2, r0
 80038e2:	000b      	movs	r3, r1
 80038e4:	0010      	movs	r0, r2
 80038e6:	0019      	movs	r1, r3
 80038e8:	2200      	movs	r2, #0
 80038ea:	4b76      	ldr	r3, [pc, #472]	; (8003ac4 <telas+0x324>)
 80038ec:	f7fd fe42 	bl	8001574 <__aeabi_ddiv>
 80038f0:	0002      	movs	r2, r0
 80038f2:	000b      	movs	r3, r1
 80038f4:	0010      	movs	r0, r2
 80038f6:	0019      	movs	r1, r3
 80038f8:	f7ff f92e 	bl	8002b58 <__aeabi_d2f>
 80038fc:	1c02      	adds	r2, r0, #0
 80038fe:	4b82      	ldr	r3, [pc, #520]	; (8003b08 <telas+0x368>)
 8003900:	601a      	str	r2, [r3, #0]
				  m2=(vot_rede*255.0/255);
 8003902:	4b6f      	ldr	r3, [pc, #444]	; (8003ac0 <telas+0x320>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	0018      	movs	r0, r3
 8003908:	f7ff f888 	bl	8002a1c <__aeabi_i2d>
 800390c:	2200      	movs	r2, #0
 800390e:	4b6d      	ldr	r3, [pc, #436]	; (8003ac4 <telas+0x324>)
 8003910:	f7fe fa32 	bl	8001d78 <__aeabi_dmul>
 8003914:	0002      	movs	r2, r0
 8003916:	000b      	movs	r3, r1
 8003918:	0010      	movs	r0, r2
 800391a:	0019      	movs	r1, r3
 800391c:	2200      	movs	r2, #0
 800391e:	4b69      	ldr	r3, [pc, #420]	; (8003ac4 <telas+0x324>)
 8003920:	f7fd fe28 	bl	8001574 <__aeabi_ddiv>
 8003924:	0002      	movs	r2, r0
 8003926:	000b      	movs	r3, r1
 8003928:	0010      	movs	r0, r2
 800392a:	0019      	movs	r1, r3
 800392c:	f7ff f914 	bl	8002b58 <__aeabi_d2f>
 8003930:	1c02      	adds	r2, r0, #0
 8003932:	4b65      	ldr	r3, [pc, #404]	; (8003ac8 <telas+0x328>)
 8003934:	601a      	str	r2, [r3, #0]
				  m3=(amp_rede*0.055);
 8003936:	4b75      	ldr	r3, [pc, #468]	; (8003b0c <telas+0x36c>)
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	0018      	movs	r0, r3
 800393c:	f7ff f86e 	bl	8002a1c <__aeabi_i2d>
 8003940:	4a73      	ldr	r2, [pc, #460]	; (8003b10 <telas+0x370>)
 8003942:	4b74      	ldr	r3, [pc, #464]	; (8003b14 <telas+0x374>)
 8003944:	f7fe fa18 	bl	8001d78 <__aeabi_dmul>
 8003948:	0002      	movs	r2, r0
 800394a:	000b      	movs	r3, r1
 800394c:	0010      	movs	r0, r2
 800394e:	0019      	movs	r1, r3
 8003950:	f7ff f902 	bl	8002b58 <__aeabi_d2f>
 8003954:	1c02      	adds	r2, r0, #0
 8003956:	4b70      	ldr	r3, [pc, #448]	; (8003b18 <telas+0x378>)
 8003958:	601a      	str	r2, [r3, #0]
				  sprintf(msg1, "%2.1fV", m1);
 800395a:	4b6b      	ldr	r3, [pc, #428]	; (8003b08 <telas+0x368>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	1c18      	adds	r0, r3, #0
 8003960:	f7ff f8b2 	bl	8002ac8 <__aeabi_f2d>
 8003964:	0002      	movs	r2, r0
 8003966:	000b      	movs	r3, r1
 8003968:	496c      	ldr	r1, [pc, #432]	; (8003b1c <telas+0x37c>)
 800396a:	486d      	ldr	r0, [pc, #436]	; (8003b20 <telas+0x380>)
 800396c:	f00e f978 	bl	8011c60 <siprintf>
				  sprintf(msg2, "%2.2f", amp[amp_carga]);
 8003970:	4b6c      	ldr	r3, [pc, #432]	; (8003b24 <telas+0x384>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	001a      	movs	r2, r3
 8003976:	4b6c      	ldr	r3, [pc, #432]	; (8003b28 <telas+0x388>)
 8003978:	0092      	lsls	r2, r2, #2
 800397a:	58d3      	ldr	r3, [r2, r3]
 800397c:	1c18      	adds	r0, r3, #0
 800397e:	f7ff f8a3 	bl	8002ac8 <__aeabi_f2d>
 8003982:	0002      	movs	r2, r0
 8003984:	000b      	movs	r3, r1
 8003986:	4969      	ldr	r1, [pc, #420]	; (8003b2c <telas+0x38c>)
 8003988:	4869      	ldr	r0, [pc, #420]	; (8003b30 <telas+0x390>)
 800398a:	f00e f969 	bl	8011c60 <siprintf>
				  sprintf(msg3, "%2.1fA ", m3);
 800398e:	4b62      	ldr	r3, [pc, #392]	; (8003b18 <telas+0x378>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	1c18      	adds	r0, r3, #0
 8003994:	f7ff f898 	bl	8002ac8 <__aeabi_f2d>
 8003998:	0002      	movs	r2, r0
 800399a:	000b      	movs	r3, r1
 800399c:	4965      	ldr	r1, [pc, #404]	; (8003b34 <telas+0x394>)
 800399e:	484f      	ldr	r0, [pc, #316]	; (8003adc <telas+0x33c>)
 80039a0:	f00e f95e 	bl	8011c60 <siprintf>
				  sprintf(msg4, "%1.1fV", m2);
 80039a4:	4b48      	ldr	r3, [pc, #288]	; (8003ac8 <telas+0x328>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	1c18      	adds	r0, r3, #0
 80039aa:	f7ff f88d 	bl	8002ac8 <__aeabi_f2d>
 80039ae:	0002      	movs	r2, r0
 80039b0:	000b      	movs	r3, r1
 80039b2:	4961      	ldr	r1, [pc, #388]	; (8003b38 <telas+0x398>)
 80039b4:	4846      	ldr	r0, [pc, #280]	; (8003ad0 <telas+0x330>)
 80039b6:	f00e f953 	bl	8011c60 <siprintf>
				  sprintf(dht11, "%02dc", temp);
 80039ba:	4b60      	ldr	r3, [pc, #384]	; (8003b3c <telas+0x39c>)
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	001a      	movs	r2, r3
 80039c0:	495f      	ldr	r1, [pc, #380]	; (8003b40 <telas+0x3a0>)
 80039c2:	4b60      	ldr	r3, [pc, #384]	; (8003b44 <telas+0x3a4>)
 80039c4:	0018      	movs	r0, r3
 80039c6:	f00e f94b 	bl	8011c60 <siprintf>
				  SSD1306_GotoXY (35, 0);
 80039ca:	2100      	movs	r1, #0
 80039cc:	2023      	movs	r0, #35	; 0x23
 80039ce:	f004 fa7b 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts ("Sensores", &Font_7x10, 1);
 80039d2:	4946      	ldr	r1, [pc, #280]	; (8003aec <telas+0x34c>)
 80039d4:	4b5c      	ldr	r3, [pc, #368]	; (8003b48 <telas+0x3a8>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	0018      	movs	r0, r3
 80039da:	f004 fb0f 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_DrawLine (0, 10, 129, 10, SSD1306_COLOR_WHITE);
 80039de:	2301      	movs	r3, #1
 80039e0:	9300      	str	r3, [sp, #0]
 80039e2:	230a      	movs	r3, #10
 80039e4:	2281      	movs	r2, #129	; 0x81
 80039e6:	210a      	movs	r1, #10
 80039e8:	2000      	movs	r0, #0
 80039ea:	f004 fb2d 	bl	8008048 <SSD1306_DrawLine>
				  SSD1306_GotoXY (5, 13);
 80039ee:	210d      	movs	r1, #13
 80039f0:	2005      	movs	r0, #5
 80039f2:	f004 fa69 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts ("V Bateria", &Font_7x10, 1);
 80039f6:	493d      	ldr	r1, [pc, #244]	; (8003aec <telas+0x34c>)
 80039f8:	4b54      	ldr	r3, [pc, #336]	; (8003b4c <telas+0x3ac>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	0018      	movs	r0, r3
 80039fe:	f004 fafd 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (86, 13);
 8003a02:	210d      	movs	r1, #13
 8003a04:	2056      	movs	r0, #86	; 0x56
 8003a06:	f004 fa5f 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (msg1, &Font_7x10, 1);
 8003a0a:	4938      	ldr	r1, [pc, #224]	; (8003aec <telas+0x34c>)
 8003a0c:	4b44      	ldr	r3, [pc, #272]	; (8003b20 <telas+0x380>)
 8003a0e:	2201      	movs	r2, #1
 8003a10:	0018      	movs	r0, r3
 8003a12:	f004 faf3 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (5, 23);
 8003a16:	2117      	movs	r1, #23
 8003a18:	2005      	movs	r0, #5
 8003a1a:	f004 fa55 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts ("A Bateria", &Font_7x10, 1);
 8003a1e:	4933      	ldr	r1, [pc, #204]	; (8003aec <telas+0x34c>)
 8003a20:	4b4b      	ldr	r3, [pc, #300]	; (8003b50 <telas+0x3b0>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	0018      	movs	r0, r3
 8003a26:	f004 fae9 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (86, 23);
 8003a2a:	2117      	movs	r1, #23
 8003a2c:	2056      	movs	r0, #86	; 0x56
 8003a2e:	f004 fa4b 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (msg2, &Font_7x10, 1);
 8003a32:	492e      	ldr	r1, [pc, #184]	; (8003aec <telas+0x34c>)
 8003a34:	4b3e      	ldr	r3, [pc, #248]	; (8003b30 <telas+0x390>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f004 fadf 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (5, 33);
 8003a3e:	2121      	movs	r1, #33	; 0x21
 8003a40:	2005      	movs	r0, #5
 8003a42:	f004 fa41 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts ("A Rede", &Font_7x10, 1);
 8003a46:	4929      	ldr	r1, [pc, #164]	; (8003aec <telas+0x34c>)
 8003a48:	4b42      	ldr	r3, [pc, #264]	; (8003b54 <telas+0x3b4>)
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	0018      	movs	r0, r3
 8003a4e:	f004 fad5 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (86, 33);
 8003a52:	2121      	movs	r1, #33	; 0x21
 8003a54:	2056      	movs	r0, #86	; 0x56
 8003a56:	f004 fa37 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (msg3, &Font_7x10, 1);
 8003a5a:	4924      	ldr	r1, [pc, #144]	; (8003aec <telas+0x34c>)
 8003a5c:	4b1f      	ldr	r3, [pc, #124]	; (8003adc <telas+0x33c>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	0018      	movs	r0, r3
 8003a62:	f004 facb 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (5, 43);
 8003a66:	212b      	movs	r1, #43	; 0x2b
 8003a68:	2005      	movs	r0, #5
 8003a6a:	f004 fa2d 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts ("V Rede", &Font_7x10, 1);
 8003a6e:	491f      	ldr	r1, [pc, #124]	; (8003aec <telas+0x34c>)
 8003a70:	4b39      	ldr	r3, [pc, #228]	; (8003b58 <telas+0x3b8>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	0018      	movs	r0, r3
 8003a76:	f004 fac1 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (86, 43);
 8003a7a:	212b      	movs	r1, #43	; 0x2b
 8003a7c:	2056      	movs	r0, #86	; 0x56
 8003a7e:	f004 fa23 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (msg4, &Font_7x10, 1);
 8003a82:	491a      	ldr	r1, [pc, #104]	; (8003aec <telas+0x34c>)
 8003a84:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <telas+0x330>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f004 fab7 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (5, 53);
 8003a8e:	2135      	movs	r1, #53	; 0x35
 8003a90:	2005      	movs	r0, #5
 8003a92:	f004 fa19 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts ("Temperatura", &Font_7x10, 1);
 8003a96:	4915      	ldr	r1, [pc, #84]	; (8003aec <telas+0x34c>)
 8003a98:	4b30      	ldr	r3, [pc, #192]	; (8003b5c <telas+0x3bc>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f004 faad 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (86, 53);
 8003aa2:	2135      	movs	r1, #53	; 0x35
 8003aa4:	2056      	movs	r0, #86	; 0x56
 8003aa6:	f004 fa0f 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (dht11, &Font_7x10, 1);
 8003aaa:	4910      	ldr	r1, [pc, #64]	; (8003aec <telas+0x34c>)
 8003aac:	4b25      	ldr	r3, [pc, #148]	; (8003b44 <telas+0x3a4>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	f004 faa3 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_UpdateScreen();
 8003ab6:	f004 f93b 	bl	8007d30 <SSD1306_UpdateScreen>
			break;
 8003aba:	e26d      	b.n	8003f98 <telas+0x7f8>
 8003abc:	200006ca 	.word	0x200006ca
 8003ac0:	20000753 	.word	0x20000753
 8003ac4:	406fe000 	.word	0x406fe000
 8003ac8:	200006f8 	.word	0x200006f8
 8003acc:	08015aa0 	.word	0x08015aa0
 8003ad0:	200006e4 	.word	0x200006e4
 8003ad4:	20000758 	.word	0x20000758
 8003ad8:	08015aac 	.word	0x08015aac
 8003adc:	200006dc 	.word	0x200006dc
 8003ae0:	20000760 	.word	0x20000760
 8003ae4:	08015ab4 	.word	0x08015ab4
 8003ae8:	2000073c 	.word	0x2000073c
 8003aec:	20000000 	.word	0x20000000
 8003af0:	08015ab8 	.word	0x08015ab8
 8003af4:	200000c8 	.word	0x200000c8
 8003af8:	20000008 	.word	0x20000008
 8003afc:	08015ac0 	.word	0x08015ac0
 8003b00:	20000752 	.word	0x20000752
 8003b04:	40398000 	.word	0x40398000
 8003b08:	200006f4 	.word	0x200006f4
 8003b0c:	20000751 	.word	0x20000751
 8003b10:	c28f5c29 	.word	0xc28f5c29
 8003b14:	3fac28f5 	.word	0x3fac28f5
 8003b18:	200006fc 	.word	0x200006fc
 8003b1c:	08015acc 	.word	0x08015acc
 8003b20:	200006cc 	.word	0x200006cc
 8003b24:	20000750 	.word	0x20000750
 8003b28:	08017344 	.word	0x08017344
 8003b2c:	08015ad4 	.word	0x08015ad4
 8003b30:	200006d4 	.word	0x200006d4
 8003b34:	08015adc 	.word	0x08015adc
 8003b38:	08015ae4 	.word	0x08015ae4
 8003b3c:	20000754 	.word	0x20000754
 8003b40:	08015aec 	.word	0x08015aec
 8003b44:	200006ec 	.word	0x200006ec
 8003b48:	08015af4 	.word	0x08015af4
 8003b4c:	08015b00 	.word	0x08015b00
 8003b50:	08015b0c 	.word	0x08015b0c
 8003b54:	08015b18 	.word	0x08015b18
 8003b58:	08015b20 	.word	0x08015b20
 8003b5c:	08015b28 	.word	0x08015b28
				  sprintf(mm0, "%03d.", ip_l[0]);
 8003b60:	4baa      	ldr	r3, [pc, #680]	; (8003e0c <telas+0x66c>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	001a      	movs	r2, r3
 8003b66:	49aa      	ldr	r1, [pc, #680]	; (8003e10 <telas+0x670>)
 8003b68:	4baa      	ldr	r3, [pc, #680]	; (8003e14 <telas+0x674>)
 8003b6a:	0018      	movs	r0, r3
 8003b6c:	f00e f878 	bl	8011c60 <siprintf>
				  sprintf(mm1, "%03d.", ip_l[1]);
 8003b70:	4ba6      	ldr	r3, [pc, #664]	; (8003e0c <telas+0x66c>)
 8003b72:	785b      	ldrb	r3, [r3, #1]
 8003b74:	001a      	movs	r2, r3
 8003b76:	49a6      	ldr	r1, [pc, #664]	; (8003e10 <telas+0x670>)
 8003b78:	4ba7      	ldr	r3, [pc, #668]	; (8003e18 <telas+0x678>)
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f00e f870 	bl	8011c60 <siprintf>
				  sprintf(mm2, "%03d.", ip_l[2]);
 8003b80:	4ba2      	ldr	r3, [pc, #648]	; (8003e0c <telas+0x66c>)
 8003b82:	789b      	ldrb	r3, [r3, #2]
 8003b84:	001a      	movs	r2, r3
 8003b86:	49a2      	ldr	r1, [pc, #648]	; (8003e10 <telas+0x670>)
 8003b88:	4ba4      	ldr	r3, [pc, #656]	; (8003e1c <telas+0x67c>)
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f00e f868 	bl	8011c60 <siprintf>
				  sprintf(mm3, "%03d", ip_l[3]);
 8003b90:	4b9e      	ldr	r3, [pc, #632]	; (8003e0c <telas+0x66c>)
 8003b92:	78db      	ldrb	r3, [r3, #3]
 8003b94:	001a      	movs	r2, r3
 8003b96:	49a2      	ldr	r1, [pc, #648]	; (8003e20 <telas+0x680>)
 8003b98:	4ba2      	ldr	r3, [pc, #648]	; (8003e24 <telas+0x684>)
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f00e f860 	bl	8011c60 <siprintf>
				  sprintf(kk0, "%03d.", mk_l[0]);
 8003ba0:	4ba1      	ldr	r3, [pc, #644]	; (8003e28 <telas+0x688>)
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	001a      	movs	r2, r3
 8003ba6:	499a      	ldr	r1, [pc, #616]	; (8003e10 <telas+0x670>)
 8003ba8:	4ba0      	ldr	r3, [pc, #640]	; (8003e2c <telas+0x68c>)
 8003baa:	0018      	movs	r0, r3
 8003bac:	f00e f858 	bl	8011c60 <siprintf>
				  sprintf(kk1, "%03d.", mk_l[1]);
 8003bb0:	4b9d      	ldr	r3, [pc, #628]	; (8003e28 <telas+0x688>)
 8003bb2:	785b      	ldrb	r3, [r3, #1]
 8003bb4:	001a      	movs	r2, r3
 8003bb6:	4996      	ldr	r1, [pc, #600]	; (8003e10 <telas+0x670>)
 8003bb8:	4b9d      	ldr	r3, [pc, #628]	; (8003e30 <telas+0x690>)
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f00e f850 	bl	8011c60 <siprintf>
				  sprintf(kk2, "%03d.", mk_l[2]);
 8003bc0:	4b99      	ldr	r3, [pc, #612]	; (8003e28 <telas+0x688>)
 8003bc2:	789b      	ldrb	r3, [r3, #2]
 8003bc4:	001a      	movs	r2, r3
 8003bc6:	4992      	ldr	r1, [pc, #584]	; (8003e10 <telas+0x670>)
 8003bc8:	4b9a      	ldr	r3, [pc, #616]	; (8003e34 <telas+0x694>)
 8003bca:	0018      	movs	r0, r3
 8003bcc:	f00e f848 	bl	8011c60 <siprintf>
				  sprintf(kk3, "%03d", mk_l[3]);
 8003bd0:	4b95      	ldr	r3, [pc, #596]	; (8003e28 <telas+0x688>)
 8003bd2:	78db      	ldrb	r3, [r3, #3]
 8003bd4:	001a      	movs	r2, r3
 8003bd6:	4992      	ldr	r1, [pc, #584]	; (8003e20 <telas+0x680>)
 8003bd8:	4b97      	ldr	r3, [pc, #604]	; (8003e38 <telas+0x698>)
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f00e f840 	bl	8011c60 <siprintf>
				  sprintf(gg0, "%03d.", gw_l[0]);
 8003be0:	4b96      	ldr	r3, [pc, #600]	; (8003e3c <telas+0x69c>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	001a      	movs	r2, r3
 8003be6:	498a      	ldr	r1, [pc, #552]	; (8003e10 <telas+0x670>)
 8003be8:	4b95      	ldr	r3, [pc, #596]	; (8003e40 <telas+0x6a0>)
 8003bea:	0018      	movs	r0, r3
 8003bec:	f00e f838 	bl	8011c60 <siprintf>
				  sprintf(gg1, "%03d.", gw_l[1]);
 8003bf0:	4b92      	ldr	r3, [pc, #584]	; (8003e3c <telas+0x69c>)
 8003bf2:	785b      	ldrb	r3, [r3, #1]
 8003bf4:	001a      	movs	r2, r3
 8003bf6:	4986      	ldr	r1, [pc, #536]	; (8003e10 <telas+0x670>)
 8003bf8:	4b92      	ldr	r3, [pc, #584]	; (8003e44 <telas+0x6a4>)
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f00e f830 	bl	8011c60 <siprintf>
				  sprintf(gg2, "%03d.", gw_l[2]);
 8003c00:	4b8e      	ldr	r3, [pc, #568]	; (8003e3c <telas+0x69c>)
 8003c02:	789b      	ldrb	r3, [r3, #2]
 8003c04:	001a      	movs	r2, r3
 8003c06:	4982      	ldr	r1, [pc, #520]	; (8003e10 <telas+0x670>)
 8003c08:	4b8f      	ldr	r3, [pc, #572]	; (8003e48 <telas+0x6a8>)
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	f00e f828 	bl	8011c60 <siprintf>
				  sprintf(gg3, "%03d", gw_l[3]);
 8003c10:	4b8a      	ldr	r3, [pc, #552]	; (8003e3c <telas+0x69c>)
 8003c12:	78db      	ldrb	r3, [r3, #3]
 8003c14:	001a      	movs	r2, r3
 8003c16:	4982      	ldr	r1, [pc, #520]	; (8003e20 <telas+0x680>)
 8003c18:	4b8c      	ldr	r3, [pc, #560]	; (8003e4c <telas+0x6ac>)
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f00e f820 	bl	8011c60 <siprintf>
				  sprintf(pp0, "%d", port_l);
 8003c20:	4b8b      	ldr	r3, [pc, #556]	; (8003e50 <telas+0x6b0>)
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	001a      	movs	r2, r3
 8003c26:	498b      	ldr	r1, [pc, #556]	; (8003e54 <telas+0x6b4>)
 8003c28:	4b8b      	ldr	r3, [pc, #556]	; (8003e58 <telas+0x6b8>)
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f00e f818 	bl	8011c60 <siprintf>
				  SSD1306_GotoXY (35, 0);
 8003c30:	2100      	movs	r1, #0
 8003c32:	2023      	movs	r0, #35	; 0x23
 8003c34:	f004 f948 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts ("Local IP", &Font_7x10, 1);
 8003c38:	4988      	ldr	r1, [pc, #544]	; (8003e5c <telas+0x6bc>)
 8003c3a:	4b89      	ldr	r3, [pc, #548]	; (8003e60 <telas+0x6c0>)
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f004 f9dc 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_DrawLine (0, 10, 129, 10, SSD1306_COLOR_WHITE);
 8003c44:	2301      	movs	r3, #1
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	230a      	movs	r3, #10
 8003c4a:	2281      	movs	r2, #129	; 0x81
 8003c4c:	210a      	movs	r1, #10
 8003c4e:	2000      	movs	r0, #0
 8003c50:	f004 f9fa 	bl	8008048 <SSD1306_DrawLine>
				  SSD1306_GotoXY (2, 15);
 8003c54:	210f      	movs	r1, #15
 8003c56:	2002      	movs	r0, #2
 8003c58:	f004 f936 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts ("IP", &Font_7x10, 1);
 8003c5c:	497f      	ldr	r1, [pc, #508]	; (8003e5c <telas+0x6bc>)
 8003c5e:	4b81      	ldr	r3, [pc, #516]	; (8003e64 <telas+0x6c4>)
 8003c60:	2201      	movs	r2, #1
 8003c62:	0018      	movs	r0, r3
 8003c64:	f004 f9ca 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (22, 15);
 8003c68:	210f      	movs	r1, #15
 8003c6a:	2016      	movs	r0, #22
 8003c6c:	f004 f92c 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (mm0, &Font_7x10, 1);
 8003c70:	497a      	ldr	r1, [pc, #488]	; (8003e5c <telas+0x6bc>)
 8003c72:	4b68      	ldr	r3, [pc, #416]	; (8003e14 <telas+0x674>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	0018      	movs	r0, r3
 8003c78:	f004 f9c0 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (50, 15);
 8003c7c:	210f      	movs	r1, #15
 8003c7e:	2032      	movs	r0, #50	; 0x32
 8003c80:	f004 f922 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (mm1, &Font_7x10, 1);
 8003c84:	4975      	ldr	r1, [pc, #468]	; (8003e5c <telas+0x6bc>)
 8003c86:	4b64      	ldr	r3, [pc, #400]	; (8003e18 <telas+0x678>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	f004 f9b6 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (78, 15);
 8003c90:	210f      	movs	r1, #15
 8003c92:	204e      	movs	r0, #78	; 0x4e
 8003c94:	f004 f918 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (mm2, &Font_7x10, 1);
 8003c98:	4970      	ldr	r1, [pc, #448]	; (8003e5c <telas+0x6bc>)
 8003c9a:	4b60      	ldr	r3, [pc, #384]	; (8003e1c <telas+0x67c>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f004 f9ac 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (105, 15);
 8003ca4:	210f      	movs	r1, #15
 8003ca6:	2069      	movs	r0, #105	; 0x69
 8003ca8:	f004 f90e 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (mm3, &Font_7x10, 1);
 8003cac:	496b      	ldr	r1, [pc, #428]	; (8003e5c <telas+0x6bc>)
 8003cae:	4b5d      	ldr	r3, [pc, #372]	; (8003e24 <telas+0x684>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	0018      	movs	r0, r3
 8003cb4:	f004 f9a2 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (2, 27);
 8003cb8:	211b      	movs	r1, #27
 8003cba:	2002      	movs	r0, #2
 8003cbc:	f004 f904 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts ("MK", &Font_7x10, 1);
 8003cc0:	4966      	ldr	r1, [pc, #408]	; (8003e5c <telas+0x6bc>)
 8003cc2:	4b69      	ldr	r3, [pc, #420]	; (8003e68 <telas+0x6c8>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f004 f998 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (22, 27);
 8003ccc:	211b      	movs	r1, #27
 8003cce:	2016      	movs	r0, #22
 8003cd0:	f004 f8fa 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (kk0, &Font_7x10, 1);
 8003cd4:	4961      	ldr	r1, [pc, #388]	; (8003e5c <telas+0x6bc>)
 8003cd6:	4b55      	ldr	r3, [pc, #340]	; (8003e2c <telas+0x68c>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f004 f98e 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (50, 27);
 8003ce0:	211b      	movs	r1, #27
 8003ce2:	2032      	movs	r0, #50	; 0x32
 8003ce4:	f004 f8f0 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (kk1, &Font_7x10, 1);
 8003ce8:	495c      	ldr	r1, [pc, #368]	; (8003e5c <telas+0x6bc>)
 8003cea:	4b51      	ldr	r3, [pc, #324]	; (8003e30 <telas+0x690>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	0018      	movs	r0, r3
 8003cf0:	f004 f984 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (78, 27);
 8003cf4:	211b      	movs	r1, #27
 8003cf6:	204e      	movs	r0, #78	; 0x4e
 8003cf8:	f004 f8e6 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (kk2, &Font_7x10, 1);
 8003cfc:	4957      	ldr	r1, [pc, #348]	; (8003e5c <telas+0x6bc>)
 8003cfe:	4b4d      	ldr	r3, [pc, #308]	; (8003e34 <telas+0x694>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	0018      	movs	r0, r3
 8003d04:	f004 f97a 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (106, 27);
 8003d08:	211b      	movs	r1, #27
 8003d0a:	206a      	movs	r0, #106	; 0x6a
 8003d0c:	f004 f8dc 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (kk3, &Font_7x10, 1);
 8003d10:	4952      	ldr	r1, [pc, #328]	; (8003e5c <telas+0x6bc>)
 8003d12:	4b49      	ldr	r3, [pc, #292]	; (8003e38 <telas+0x698>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	0018      	movs	r0, r3
 8003d18:	f004 f970 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (2, 39);
 8003d1c:	2127      	movs	r1, #39	; 0x27
 8003d1e:	2002      	movs	r0, #2
 8003d20:	f004 f8d2 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts ("GW", &Font_7x10, 1);
 8003d24:	494d      	ldr	r1, [pc, #308]	; (8003e5c <telas+0x6bc>)
 8003d26:	4b51      	ldr	r3, [pc, #324]	; (8003e6c <telas+0x6cc>)
 8003d28:	2201      	movs	r2, #1
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f004 f966 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (22, 39);
 8003d30:	2127      	movs	r1, #39	; 0x27
 8003d32:	2016      	movs	r0, #22
 8003d34:	f004 f8c8 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (gg0, &Font_7x10, 1);
 8003d38:	4948      	ldr	r1, [pc, #288]	; (8003e5c <telas+0x6bc>)
 8003d3a:	4b41      	ldr	r3, [pc, #260]	; (8003e40 <telas+0x6a0>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f004 f95c 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (50, 39);
 8003d44:	2127      	movs	r1, #39	; 0x27
 8003d46:	2032      	movs	r0, #50	; 0x32
 8003d48:	f004 f8be 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (gg1, &Font_7x10, 1);
 8003d4c:	4943      	ldr	r1, [pc, #268]	; (8003e5c <telas+0x6bc>)
 8003d4e:	4b3d      	ldr	r3, [pc, #244]	; (8003e44 <telas+0x6a4>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	0018      	movs	r0, r3
 8003d54:	f004 f952 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (78, 39);
 8003d58:	2127      	movs	r1, #39	; 0x27
 8003d5a:	204e      	movs	r0, #78	; 0x4e
 8003d5c:	f004 f8b4 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (gg2, &Font_7x10, 1);
 8003d60:	493e      	ldr	r1, [pc, #248]	; (8003e5c <telas+0x6bc>)
 8003d62:	4b39      	ldr	r3, [pc, #228]	; (8003e48 <telas+0x6a8>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	0018      	movs	r0, r3
 8003d68:	f004 f948 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (106, 39);
 8003d6c:	2127      	movs	r1, #39	; 0x27
 8003d6e:	206a      	movs	r0, #106	; 0x6a
 8003d70:	f004 f8aa 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (gg3, &Font_7x10, 1);
 8003d74:	4939      	ldr	r1, [pc, #228]	; (8003e5c <telas+0x6bc>)
 8003d76:	4b35      	ldr	r3, [pc, #212]	; (8003e4c <telas+0x6ac>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f004 f93e 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (2, 51);
 8003d80:	2133      	movs	r1, #51	; 0x33
 8003d82:	2002      	movs	r0, #2
 8003d84:	f004 f8a0 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts ("PT", &Font_7x10, 1);
 8003d88:	4934      	ldr	r1, [pc, #208]	; (8003e5c <telas+0x6bc>)
 8003d8a:	4b39      	ldr	r3, [pc, #228]	; (8003e70 <telas+0x6d0>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f004 f934 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (22, 51);
 8003d94:	2133      	movs	r1, #51	; 0x33
 8003d96:	2016      	movs	r0, #22
 8003d98:	f004 f896 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (pp0, &Font_7x10, 1);
 8003d9c:	492f      	ldr	r1, [pc, #188]	; (8003e5c <telas+0x6bc>)
 8003d9e:	4b2e      	ldr	r3, [pc, #184]	; (8003e58 <telas+0x6b8>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	0018      	movs	r0, r3
 8003da4:	f004 f92a 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_UpdateScreen();
 8003da8:	f003 ffc2 	bl	8007d30 <SSD1306_UpdateScreen>
			break;
 8003dac:	e0f4      	b.n	8003f98 <telas+0x7f8>
				  sprintf(mm0, "%03d.", ip_s[0]);
 8003dae:	4b31      	ldr	r3, [pc, #196]	; (8003e74 <telas+0x6d4>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	001a      	movs	r2, r3
 8003db4:	4916      	ldr	r1, [pc, #88]	; (8003e10 <telas+0x670>)
 8003db6:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <telas+0x674>)
 8003db8:	0018      	movs	r0, r3
 8003dba:	f00d ff51 	bl	8011c60 <siprintf>
				  sprintf(mm1, "%03d.", ip_s[1]);
 8003dbe:	4b2d      	ldr	r3, [pc, #180]	; (8003e74 <telas+0x6d4>)
 8003dc0:	785b      	ldrb	r3, [r3, #1]
 8003dc2:	001a      	movs	r2, r3
 8003dc4:	4912      	ldr	r1, [pc, #72]	; (8003e10 <telas+0x670>)
 8003dc6:	4b14      	ldr	r3, [pc, #80]	; (8003e18 <telas+0x678>)
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f00d ff49 	bl	8011c60 <siprintf>
				  sprintf(mm2, "%03d.", ip_s[2]);
 8003dce:	4b29      	ldr	r3, [pc, #164]	; (8003e74 <telas+0x6d4>)
 8003dd0:	789b      	ldrb	r3, [r3, #2]
 8003dd2:	001a      	movs	r2, r3
 8003dd4:	490e      	ldr	r1, [pc, #56]	; (8003e10 <telas+0x670>)
 8003dd6:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <telas+0x67c>)
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f00d ff41 	bl	8011c60 <siprintf>
				  sprintf(mm3, "%03d",  ip_s[3]);
 8003dde:	4b25      	ldr	r3, [pc, #148]	; (8003e74 <telas+0x6d4>)
 8003de0:	78db      	ldrb	r3, [r3, #3]
 8003de2:	001a      	movs	r2, r3
 8003de4:	490e      	ldr	r1, [pc, #56]	; (8003e20 <telas+0x680>)
 8003de6:	4b0f      	ldr	r3, [pc, #60]	; (8003e24 <telas+0x684>)
 8003de8:	0018      	movs	r0, r3
 8003dea:	f00d ff39 	bl	8011c60 <siprintf>
				  if(ping_fail){mensage[0]='\0';sprintf(mensage, "     ERRO");}
 8003dee:	4b22      	ldr	r3, [pc, #136]	; (8003e78 <telas+0x6d8>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d046      	beq.n	8003e84 <telas+0x6e4>
 8003df6:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <telas+0x6dc>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
 8003dfc:	4a20      	ldr	r2, [pc, #128]	; (8003e80 <telas+0x6e0>)
 8003dfe:	4b1f      	ldr	r3, [pc, #124]	; (8003e7c <telas+0x6dc>)
 8003e00:	0011      	movs	r1, r2
 8003e02:	0018      	movs	r0, r3
 8003e04:	f00d ff2c 	bl	8011c60 <siprintf>
 8003e08:	e045      	b.n	8003e96 <telas+0x6f6>
 8003e0a:	46c0      	nop			; (mov r8, r8)
 8003e0c:	200000e0 	.word	0x200000e0
 8003e10:	08015b34 	.word	0x08015b34
 8003e14:	20000034 	.word	0x20000034
 8003e18:	20000038 	.word	0x20000038
 8003e1c:	2000003c 	.word	0x2000003c
 8003e20:	08015b3c 	.word	0x08015b3c
 8003e24:	20000040 	.word	0x20000040
 8003e28:	200000e4 	.word	0x200000e4
 8003e2c:	20000044 	.word	0x20000044
 8003e30:	20000048 	.word	0x20000048
 8003e34:	2000004c 	.word	0x2000004c
 8003e38:	20000050 	.word	0x20000050
 8003e3c:	200000e8 	.word	0x200000e8
 8003e40:	20000054 	.word	0x20000054
 8003e44:	20000058 	.word	0x20000058
 8003e48:	2000005c 	.word	0x2000005c
 8003e4c:	20000060 	.word	0x20000060
 8003e50:	200000ec 	.word	0x200000ec
 8003e54:	08015ab4 	.word	0x08015ab4
 8003e58:	20000024 	.word	0x20000024
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	08015b44 	.word	0x08015b44
 8003e64:	08015b50 	.word	0x08015b50
 8003e68:	08015b54 	.word	0x08015b54
 8003e6c:	08015b58 	.word	0x08015b58
 8003e70:	08015b5c 	.word	0x08015b5c
 8003e74:	200000d4 	.word	0x200000d4
 8003e78:	200007a4 	.word	0x200007a4
 8003e7c:	20000700 	.word	0x20000700
 8003e80:	08015b60 	.word	0x08015b60
				  else{         mensage[0]='\0';sprintf(mensage, "Conectado");}
 8003e84:	4b46      	ldr	r3, [pc, #280]	; (8003fa0 <telas+0x800>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	4a46      	ldr	r2, [pc, #280]	; (8003fa4 <telas+0x804>)
 8003e8c:	4b44      	ldr	r3, [pc, #272]	; (8003fa0 <telas+0x800>)
 8003e8e:	0011      	movs	r1, r2
 8003e90:	0018      	movs	r0, r3
 8003e92:	f00d fee5 	bl	8011c60 <siprintf>
				  sprintf(pp1, "%05d", port_s);
 8003e96:	4b44      	ldr	r3, [pc, #272]	; (8003fa8 <telas+0x808>)
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	001a      	movs	r2, r3
 8003e9c:	4943      	ldr	r1, [pc, #268]	; (8003fac <telas+0x80c>)
 8003e9e:	4b44      	ldr	r3, [pc, #272]	; (8003fb0 <telas+0x810>)
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f00d fedd 	bl	8011c60 <siprintf>
				  SSD1306_GotoXY (35, 0);
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	2023      	movs	r0, #35	; 0x23
 8003eaa:	f004 f80d 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts ("Servidor", &Font_7x10, 1);
 8003eae:	4941      	ldr	r1, [pc, #260]	; (8003fb4 <telas+0x814>)
 8003eb0:	4b41      	ldr	r3, [pc, #260]	; (8003fb8 <telas+0x818>)
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f004 f8a1 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_DrawLine (0, 10, 129, 10, SSD1306_COLOR_WHITE);
 8003eba:	2301      	movs	r3, #1
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	230a      	movs	r3, #10
 8003ec0:	2281      	movs	r2, #129	; 0x81
 8003ec2:	210a      	movs	r1, #10
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f004 f8bf 	bl	8008048 <SSD1306_DrawLine>
				  SSD1306_GotoXY (1, 15);
 8003eca:	210f      	movs	r1, #15
 8003ecc:	2001      	movs	r0, #1
 8003ece:	f003 fffb 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts ("IP", &Font_7x10, 1);
 8003ed2:	4938      	ldr	r1, [pc, #224]	; (8003fb4 <telas+0x814>)
 8003ed4:	4b39      	ldr	r3, [pc, #228]	; (8003fbc <telas+0x81c>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f004 f88f 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (24, 15);
 8003ede:	210f      	movs	r1, #15
 8003ee0:	2018      	movs	r0, #24
 8003ee2:	f003 fff1 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (mm0, &Font_7x10, 1);
 8003ee6:	4933      	ldr	r1, [pc, #204]	; (8003fb4 <telas+0x814>)
 8003ee8:	4b35      	ldr	r3, [pc, #212]	; (8003fc0 <telas+0x820>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	0018      	movs	r0, r3
 8003eee:	f004 f885 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (52, 15);
 8003ef2:	210f      	movs	r1, #15
 8003ef4:	2034      	movs	r0, #52	; 0x34
 8003ef6:	f003 ffe7 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (mm1, &Font_7x10, 1);
 8003efa:	492e      	ldr	r1, [pc, #184]	; (8003fb4 <telas+0x814>)
 8003efc:	4b31      	ldr	r3, [pc, #196]	; (8003fc4 <telas+0x824>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	0018      	movs	r0, r3
 8003f02:	f004 f87b 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (80, 15);
 8003f06:	210f      	movs	r1, #15
 8003f08:	2050      	movs	r0, #80	; 0x50
 8003f0a:	f003 ffdd 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (mm2, &Font_7x10, 1);
 8003f0e:	4929      	ldr	r1, [pc, #164]	; (8003fb4 <telas+0x814>)
 8003f10:	4b2d      	ldr	r3, [pc, #180]	; (8003fc8 <telas+0x828>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	0018      	movs	r0, r3
 8003f16:	f004 f871 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (108, 15);
 8003f1a:	210f      	movs	r1, #15
 8003f1c:	206c      	movs	r0, #108	; 0x6c
 8003f1e:	f003 ffd3 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (mm3, &Font_7x10, 1);
 8003f22:	4924      	ldr	r1, [pc, #144]	; (8003fb4 <telas+0x814>)
 8003f24:	4b29      	ldr	r3, [pc, #164]	; (8003fcc <telas+0x82c>)
 8003f26:	2201      	movs	r2, #1
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f004 f867 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (1, 27);
 8003f2e:	211b      	movs	r1, #27
 8003f30:	2001      	movs	r0, #1
 8003f32:	f003 ffc9 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts ("STATUS", &Font_7x10, 1);
 8003f36:	491f      	ldr	r1, [pc, #124]	; (8003fb4 <telas+0x814>)
 8003f38:	4b25      	ldr	r3, [pc, #148]	; (8003fd0 <telas+0x830>)
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f004 f85d 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (65, 27);
 8003f42:	211b      	movs	r1, #27
 8003f44:	2041      	movs	r0, #65	; 0x41
 8003f46:	f003 ffbf 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (mensage, &Font_7x10, 1);
 8003f4a:	491a      	ldr	r1, [pc, #104]	; (8003fb4 <telas+0x814>)
 8003f4c:	4b14      	ldr	r3, [pc, #80]	; (8003fa0 <telas+0x800>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	0018      	movs	r0, r3
 8003f52:	f004 f853 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (1, 39);
 8003f56:	2127      	movs	r1, #39	; 0x27
 8003f58:	2001      	movs	r0, #1
 8003f5a:	f003 ffb5 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (dominio, &Font_7x10, 1);
 8003f5e:	4915      	ldr	r1, [pc, #84]	; (8003fb4 <telas+0x814>)
 8003f60:	4b1c      	ldr	r3, [pc, #112]	; (8003fd4 <telas+0x834>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	0018      	movs	r0, r3
 8003f66:	f004 f849 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (1, 51);
 8003f6a:	2133      	movs	r1, #51	; 0x33
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	f003 ffab 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts ("PORTA ", &Font_7x10, 1);
 8003f72:	4910      	ldr	r1, [pc, #64]	; (8003fb4 <telas+0x814>)
 8003f74:	4b18      	ldr	r3, [pc, #96]	; (8003fd8 <telas+0x838>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f004 f83f 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_GotoXY (93, 51);
 8003f7e:	2133      	movs	r1, #51	; 0x33
 8003f80:	205d      	movs	r0, #93	; 0x5d
 8003f82:	f003 ffa1 	bl	8007ec8 <SSD1306_GotoXY>
				  SSD1306_Puts (pp1, &Font_7x10, 1);
 8003f86:	490b      	ldr	r1, [pc, #44]	; (8003fb4 <telas+0x814>)
 8003f88:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <telas+0x810>)
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	f004 f835 	bl	8007ffc <SSD1306_Puts>
				  SSD1306_UpdateScreen();
 8003f92:	f003 fecd 	bl	8007d30 <SSD1306_UpdateScreen>
			break;
 8003f96:	46c0      	nop			; (mov r8, r8)
}
 8003f98:	46c0      	nop			; (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	20000700 	.word	0x20000700
 8003fa4:	08015b6c 	.word	0x08015b6c
 8003fa8:	200000d8 	.word	0x200000d8
 8003fac:	08015b78 	.word	0x08015b78
 8003fb0:	2000002c 	.word	0x2000002c
 8003fb4:	20000000 	.word	0x20000000
 8003fb8:	08015b80 	.word	0x08015b80
 8003fbc:	08015b50 	.word	0x08015b50
 8003fc0:	20000034 	.word	0x20000034
 8003fc4:	20000038 	.word	0x20000038
 8003fc8:	2000003c 	.word	0x2000003c
 8003fcc:	20000040 	.word	0x20000040
 8003fd0:	08015b8c 	.word	0x08015b8c
 8003fd4:	20000764 	.word	0x20000764
 8003fd8:	08015b94 	.word	0x08015b94

08003fdc <init_udp>:


//***********************************************************************************************
//           init udp
//***********************************************************************************************
void init_udp() {
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b08b      	sub	sp, #44	; 0x2c
 8003fe0:	af00      	add	r7, sp, #0
	UART_Printf("\r\ninit() called!\r\n");
 8003fe2:	4b5f      	ldr	r3, [pc, #380]	; (8004160 <init_udp+0x184>)
 8003fe4:	0018      	movs	r0, r3
 8003fe6:	f7ff f8bf 	bl	8003168 <UART_Printf>

    UART_Printf("Registering W5500 callbacks...\r\n");
 8003fea:	4b5e      	ldr	r3, [pc, #376]	; (8004164 <init_udp+0x188>)
 8003fec:	0018      	movs	r0, r3
 8003fee:	f7ff f8bb 	bl	8003168 <UART_Printf>
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 8003ff2:	4a5d      	ldr	r2, [pc, #372]	; (8004168 <init_udp+0x18c>)
 8003ff4:	4b5d      	ldr	r3, [pc, #372]	; (800416c <init_udp+0x190>)
 8003ff6:	0011      	movs	r1, r2
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f005 fa5d 	bl	80094b8 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 8003ffe:	4a5c      	ldr	r2, [pc, #368]	; (8004170 <init_udp+0x194>)
 8004000:	4b5c      	ldr	r3, [pc, #368]	; (8004174 <init_udp+0x198>)
 8004002:	0011      	movs	r1, r2
 8004004:	0018      	movs	r0, r3
 8004006:	f005 fa7b 	bl	8009500 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 800400a:	4a5b      	ldr	r2, [pc, #364]	; (8004178 <init_udp+0x19c>)
 800400c:	4b5b      	ldr	r3, [pc, #364]	; (800417c <init_udp+0x1a0>)
 800400e:	0011      	movs	r1, r2
 8004010:	0018      	movs	r0, r3
 8004012:	f005 faa1 	bl	8009558 <reg_wizchip_spiburst_cbfunc>

    UART_Printf("Calling wizchip_init()...\r\n");
 8004016:	4b5a      	ldr	r3, [pc, #360]	; (8004180 <init_udp+0x1a4>)
 8004018:	0018      	movs	r0, r3
 800401a:	f7ff f8a5 	bl	8003168 <UART_Printf>
    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2 , 2};
 800401e:	211c      	movs	r1, #28
 8004020:	187b      	adds	r3, r7, r1
 8004022:	4a58      	ldr	r2, [pc, #352]	; (8004184 <init_udp+0x1a8>)
 8004024:	ca11      	ldmia	r2!, {r0, r4}
 8004026:	c311      	stmia	r3!, {r0, r4}
 8004028:	7812      	ldrb	r2, [r2, #0]
 800402a:	701a      	strb	r2, [r3, #0]
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 800402c:	187a      	adds	r2, r7, r1
 800402e:	187b      	adds	r3, r7, r1
 8004030:	0011      	movs	r1, r2
 8004032:	0018      	movs	r0, r3
 8004034:	f005 fb05 	bl	8009642 <wizchip_init>

    UART_Printf("Calling Static_ip_init()...\r\n");
 8004038:	4b53      	ldr	r3, [pc, #332]	; (8004188 <init_udp+0x1ac>)
 800403a:	0018      	movs	r0, r3
 800403c:	f7ff f894 	bl	8003168 <UART_Printf>

     wiz_NetInfo net_info = {
 8004040:	1d3b      	adds	r3, r7, #4
 8004042:	0018      	movs	r0, r3
 8004044:	2317      	movs	r3, #23
 8004046:	001a      	movs	r2, r3
 8004048:	2100      	movs	r1, #0
 800404a:	f00c fef0 	bl	8010e2e <memset>
     .mac  = { mac[0], mac[1], mac[2], mac[3], mac[4], mac[5] },
 800404e:	4b4f      	ldr	r3, [pc, #316]	; (800418c <init_udp+0x1b0>)
 8004050:	781a      	ldrb	r2, [r3, #0]
     wiz_NetInfo net_info = {
 8004052:	1d3b      	adds	r3, r7, #4
 8004054:	701a      	strb	r2, [r3, #0]
     .mac  = { mac[0], mac[1], mac[2], mac[3], mac[4], mac[5] },
 8004056:	4b4d      	ldr	r3, [pc, #308]	; (800418c <init_udp+0x1b0>)
 8004058:	785a      	ldrb	r2, [r3, #1]
     wiz_NetInfo net_info = {
 800405a:	1d3b      	adds	r3, r7, #4
 800405c:	705a      	strb	r2, [r3, #1]
     .mac  = { mac[0], mac[1], mac[2], mac[3], mac[4], mac[5] },
 800405e:	4b4b      	ldr	r3, [pc, #300]	; (800418c <init_udp+0x1b0>)
 8004060:	789a      	ldrb	r2, [r3, #2]
     wiz_NetInfo net_info = {
 8004062:	1d3b      	adds	r3, r7, #4
 8004064:	709a      	strb	r2, [r3, #2]
     .mac  = { mac[0], mac[1], mac[2], mac[3], mac[4], mac[5] },
 8004066:	4b49      	ldr	r3, [pc, #292]	; (800418c <init_udp+0x1b0>)
 8004068:	78da      	ldrb	r2, [r3, #3]
     wiz_NetInfo net_info = {
 800406a:	1d3b      	adds	r3, r7, #4
 800406c:	70da      	strb	r2, [r3, #3]
     .mac  = { mac[0], mac[1], mac[2], mac[3], mac[4], mac[5] },
 800406e:	4b47      	ldr	r3, [pc, #284]	; (800418c <init_udp+0x1b0>)
 8004070:	791a      	ldrb	r2, [r3, #4]
     wiz_NetInfo net_info = {
 8004072:	1d3b      	adds	r3, r7, #4
 8004074:	711a      	strb	r2, [r3, #4]
     .mac  = { mac[0], mac[1], mac[2], mac[3], mac[4], mac[5] },
 8004076:	4b45      	ldr	r3, [pc, #276]	; (800418c <init_udp+0x1b0>)
 8004078:	795a      	ldrb	r2, [r3, #5]
     wiz_NetInfo net_info = {
 800407a:	1d3b      	adds	r3, r7, #4
 800407c:	715a      	strb	r2, [r3, #5]
     .ip = {ip_l[0],ip_l[1],ip_l[2],ip_l[3]},
 800407e:	4b44      	ldr	r3, [pc, #272]	; (8004190 <init_udp+0x1b4>)
 8004080:	781a      	ldrb	r2, [r3, #0]
     wiz_NetInfo net_info = {
 8004082:	1d3b      	adds	r3, r7, #4
 8004084:	719a      	strb	r2, [r3, #6]
     .ip = {ip_l[0],ip_l[1],ip_l[2],ip_l[3]},
 8004086:	4b42      	ldr	r3, [pc, #264]	; (8004190 <init_udp+0x1b4>)
 8004088:	785a      	ldrb	r2, [r3, #1]
     wiz_NetInfo net_info = {
 800408a:	1d3b      	adds	r3, r7, #4
 800408c:	71da      	strb	r2, [r3, #7]
     .ip = {ip_l[0],ip_l[1],ip_l[2],ip_l[3]},
 800408e:	4b40      	ldr	r3, [pc, #256]	; (8004190 <init_udp+0x1b4>)
 8004090:	789a      	ldrb	r2, [r3, #2]
     wiz_NetInfo net_info = {
 8004092:	1d3b      	adds	r3, r7, #4
 8004094:	721a      	strb	r2, [r3, #8]
     .ip = {ip_l[0],ip_l[1],ip_l[2],ip_l[3]},
 8004096:	4b3e      	ldr	r3, [pc, #248]	; (8004190 <init_udp+0x1b4>)
 8004098:	78da      	ldrb	r2, [r3, #3]
     wiz_NetInfo net_info = {
 800409a:	1d3b      	adds	r3, r7, #4
 800409c:	725a      	strb	r2, [r3, #9]
     .sn ={mk_l[0],mk_l[1],mk_l[2],mk_l[3]},
 800409e:	4b3d      	ldr	r3, [pc, #244]	; (8004194 <init_udp+0x1b8>)
 80040a0:	781a      	ldrb	r2, [r3, #0]
     wiz_NetInfo net_info = {
 80040a2:	1d3b      	adds	r3, r7, #4
 80040a4:	729a      	strb	r2, [r3, #10]
     .sn ={mk_l[0],mk_l[1],mk_l[2],mk_l[3]},
 80040a6:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <init_udp+0x1b8>)
 80040a8:	785a      	ldrb	r2, [r3, #1]
     wiz_NetInfo net_info = {
 80040aa:	1d3b      	adds	r3, r7, #4
 80040ac:	72da      	strb	r2, [r3, #11]
     .sn ={mk_l[0],mk_l[1],mk_l[2],mk_l[3]},
 80040ae:	4b39      	ldr	r3, [pc, #228]	; (8004194 <init_udp+0x1b8>)
 80040b0:	789a      	ldrb	r2, [r3, #2]
     wiz_NetInfo net_info = {
 80040b2:	1d3b      	adds	r3, r7, #4
 80040b4:	731a      	strb	r2, [r3, #12]
     .sn ={mk_l[0],mk_l[1],mk_l[2],mk_l[3]},
 80040b6:	4b37      	ldr	r3, [pc, #220]	; (8004194 <init_udp+0x1b8>)
 80040b8:	78da      	ldrb	r2, [r3, #3]
     wiz_NetInfo net_info = {
 80040ba:	1d3b      	adds	r3, r7, #4
 80040bc:	735a      	strb	r2, [r3, #13]
     .gw = {gw_l[0],gw_l[1],gw_l[2],gw_l[3]}};
 80040be:	4b36      	ldr	r3, [pc, #216]	; (8004198 <init_udp+0x1bc>)
 80040c0:	781a      	ldrb	r2, [r3, #0]
     wiz_NetInfo net_info = {
 80040c2:	1d3b      	adds	r3, r7, #4
 80040c4:	739a      	strb	r2, [r3, #14]
     .gw = {gw_l[0],gw_l[1],gw_l[2],gw_l[3]}};
 80040c6:	4b34      	ldr	r3, [pc, #208]	; (8004198 <init_udp+0x1bc>)
 80040c8:	785a      	ldrb	r2, [r3, #1]
     wiz_NetInfo net_info = {
 80040ca:	1d3b      	adds	r3, r7, #4
 80040cc:	73da      	strb	r2, [r3, #15]
     .gw = {gw_l[0],gw_l[1],gw_l[2],gw_l[3]}};
 80040ce:	4b32      	ldr	r3, [pc, #200]	; (8004198 <init_udp+0x1bc>)
 80040d0:	789a      	ldrb	r2, [r3, #2]
     wiz_NetInfo net_info = {
 80040d2:	1d3b      	adds	r3, r7, #4
 80040d4:	741a      	strb	r2, [r3, #16]
     .gw = {gw_l[0],gw_l[1],gw_l[2],gw_l[3]}};
 80040d6:	4b30      	ldr	r3, [pc, #192]	; (8004198 <init_udp+0x1bc>)
 80040d8:	78da      	ldrb	r2, [r3, #3]
     wiz_NetInfo net_info = {
 80040da:	1d3b      	adds	r3, r7, #4
 80040dc:	745a      	strb	r2, [r3, #17]

         setSHAR(net_info.mac);
 80040de:	1d39      	adds	r1, r7, #4
 80040e0:	2390      	movs	r3, #144	; 0x90
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	2206      	movs	r2, #6
 80040e6:	0018      	movs	r0, r3
 80040e8:	f004 fefe 	bl	8008ee8 <WIZCHIP_WRITE_BUF>
         setSIPR(net_info.ip);
 80040ec:	1d3b      	adds	r3, r7, #4
 80040ee:	1d99      	adds	r1, r3, #6
 80040f0:	23f0      	movs	r3, #240	; 0xf0
 80040f2:	011b      	lsls	r3, r3, #4
 80040f4:	2204      	movs	r2, #4
 80040f6:	0018      	movs	r0, r3
 80040f8:	f004 fef6 	bl	8008ee8 <WIZCHIP_WRITE_BUF>
         setSUBR(net_info.sn);
 80040fc:	1d3b      	adds	r3, r7, #4
 80040fe:	330a      	adds	r3, #10
 8004100:	0019      	movs	r1, r3
 8004102:	23a0      	movs	r3, #160	; 0xa0
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	2204      	movs	r2, #4
 8004108:	0018      	movs	r0, r3
 800410a:	f004 feed 	bl	8008ee8 <WIZCHIP_WRITE_BUF>
         setGAR(net_info.gw);
 800410e:	1d3b      	adds	r3, r7, #4
 8004110:	330e      	adds	r3, #14
 8004112:	0019      	movs	r1, r3
 8004114:	2380      	movs	r3, #128	; 0x80
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	2204      	movs	r2, #4
 800411a:	0018      	movs	r0, r3
 800411c:	f004 fee4 	bl	8008ee8 <WIZCHIP_WRITE_BUF>
         setSn_PORT(1,port_l);
 8004120:	4b1e      	ldr	r3, [pc, #120]	; (800419c <init_udp+0x1c0>)
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	0a1b      	lsrs	r3, r3, #8
 8004126:	b29b      	uxth	r3, r3
 8004128:	b2da      	uxtb	r2, r3
 800412a:	2385      	movs	r3, #133	; 0x85
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	0011      	movs	r1, r2
 8004130:	0018      	movs	r0, r3
 8004132:	f004 fe15 	bl	8008d60 <WIZCHIP_WRITE>
 8004136:	4b19      	ldr	r3, [pc, #100]	; (800419c <init_udp+0x1c0>)
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	b2da      	uxtb	r2, r3
 800413c:	23a5      	movs	r3, #165	; 0xa5
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	0011      	movs	r1, r2
 8004142:	0018      	movs	r0, r3
 8004144:	f004 fe0c 	bl	8008d60 <WIZCHIP_WRITE>


    socket(1, Sn_MR_UDP, port_l, 1);
 8004148:	4b14      	ldr	r3, [pc, #80]	; (800419c <init_udp+0x1c0>)
 800414a:	881a      	ldrh	r2, [r3, #0]
 800414c:	2301      	movs	r3, #1
 800414e:	2102      	movs	r1, #2
 8004150:	2001      	movs	r0, #1
 8004152:	f002 ff5b 	bl	800700c <socket>
	//wizchip_setnetmode(NM_PINGBLOCK);

}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	46bd      	mov	sp, r7
 800415a:	b00b      	add	sp, #44	; 0x2c
 800415c:	bd90      	pop	{r4, r7, pc}
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	08015b9c 	.word	0x08015b9c
 8004164:	08015bb0 	.word	0x08015bb0
 8004168:	080036f1 	.word	0x080036f1
 800416c:	080036d5 	.word	0x080036d5
 8004170:	08003781 	.word	0x08003781
 8004174:	08003765 	.word	0x08003765
 8004178:	08003739 	.word	0x08003739
 800417c:	0800370d 	.word	0x0800370d
 8004180:	08015bd4 	.word	0x08015bd4
 8004184:	08015c10 	.word	0x08015c10
 8004188:	08015bf0 	.word	0x08015bf0
 800418c:	200000f8 	.word	0x200000f8
 8004190:	200000e0 	.word	0x200000e0
 8004194:	200000e4 	.word	0x200000e4
 8004198:	200000e8 	.word	0x200000e8
 800419c:	200000ec 	.word	0x200000ec

080041a0 <monta_status>:
//***********************************************************************************************
//         Monta Pacote Status ($B000001001A000005A319922697934D#)
//***********************************************************************************************
void monta_status(void)
{
 80041a0:	b5b0      	push	{r4, r5, r7, lr}
 80041a2:	b096      	sub	sp, #88	; 0x58
 80041a4:	af00      	add	r7, sp, #0
	char mensagem[40] = "";
 80041a6:	2430      	movs	r4, #48	; 0x30
 80041a8:	193b      	adds	r3, r7, r4
 80041aa:	2200      	movs	r2, #0
 80041ac:	601a      	str	r2, [r3, #0]
 80041ae:	3304      	adds	r3, #4
 80041b0:	2224      	movs	r2, #36	; 0x24
 80041b2:	2100      	movs	r1, #0
 80041b4:	0018      	movs	r0, r3
 80041b6:	f00c fe3a 	bl	8010e2e <memset>
	char mensagemcp[40] = "";
 80041ba:	2508      	movs	r5, #8
 80041bc:	197b      	adds	r3, r7, r5
 80041be:	2200      	movs	r2, #0
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	3304      	adds	r3, #4
 80041c4:	2224      	movs	r2, #36	; 0x24
 80041c6:	2100      	movs	r1, #0
 80041c8:	0018      	movs	r0, r3
 80041ca:	f00c fe30 	bl	8010e2e <memset>
	char crc[4] = "";
 80041ce:	1d3b      	adds	r3, r7, #4
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]

	//concathex2(mensagem, energ);
	mensagem[0] = energ;
 80041d4:	4b37      	ldr	r3, [pc, #220]	; (80042b4 <monta_status+0x114>)
 80041d6:	781a      	ldrb	r2, [r3, #0]
 80041d8:	193b      	adds	r3, r7, r4
 80041da:	701a      	strb	r2, [r3, #0]
	concathex2(mensagem, vot_bat);
 80041dc:	4b36      	ldr	r3, [pc, #216]	; (80042b8 <monta_status+0x118>)
 80041de:	781a      	ldrb	r2, [r3, #0]
 80041e0:	193b      	adds	r3, r7, r4
 80041e2:	0011      	movs	r1, r2
 80041e4:	0018      	movs	r0, r3
 80041e6:	f7ff f849 	bl	800327c <concathex2>
	concathex2(mensagem, amp_carga);
 80041ea:	4b34      	ldr	r3, [pc, #208]	; (80042bc <monta_status+0x11c>)
 80041ec:	781a      	ldrb	r2, [r3, #0]
 80041ee:	193b      	adds	r3, r7, r4
 80041f0:	0011      	movs	r1, r2
 80041f2:	0018      	movs	r0, r3
 80041f4:	f7ff f842 	bl	800327c <concathex2>
	concathex2(mensagem, amp_rede);
 80041f8:	4b31      	ldr	r3, [pc, #196]	; (80042c0 <monta_status+0x120>)
 80041fa:	781a      	ldrb	r2, [r3, #0]
 80041fc:	193b      	adds	r3, r7, r4
 80041fe:	0011      	movs	r1, r2
 8004200:	0018      	movs	r0, r3
 8004202:	f7ff f83b 	bl	800327c <concathex2>
	concathex2(mensagem, vot_rede);
 8004206:	4b2f      	ldr	r3, [pc, #188]	; (80042c4 <monta_status+0x124>)
 8004208:	781a      	ldrb	r2, [r3, #0]
 800420a:	193b      	adds	r3, r7, r4
 800420c:	0011      	movs	r1, r2
 800420e:	0018      	movs	r0, r3
 8004210:	f7ff f834 	bl	800327c <concathex2>
	concathex2(mensagem, temp);
 8004214:	4b2c      	ldr	r3, [pc, #176]	; (80042c8 <monta_status+0x128>)
 8004216:	781a      	ldrb	r2, [r3, #0]
 8004218:	193b      	adds	r3, r7, r4
 800421a:	0011      	movs	r1, r2
 800421c:	0018      	movs	r0, r3
 800421e:	f7ff f82d 	bl	800327c <concathex2>
	concathex2(mensagem, fan1_stat);
 8004222:	4b2a      	ldr	r3, [pc, #168]	; (80042cc <monta_status+0x12c>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	001a      	movs	r2, r3
 8004228:	193b      	adds	r3, r7, r4
 800422a:	0011      	movs	r1, r2
 800422c:	0018      	movs	r0, r3
 800422e:	f7ff f825 	bl	800327c <concathex2>
	concathex2(mensagem, fan2_stat);
 8004232:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <monta_status+0x130>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	001a      	movs	r2, r3
 8004238:	193b      	adds	r3, r7, r4
 800423a:	0011      	movs	r1, r2
 800423c:	0018      	movs	r0, r3
 800423e:	f7ff f81d 	bl	800327c <concathex2>
	concathex4(mensagem, tp_ativo);
 8004242:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <monta_status+0x134>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	b29a      	uxth	r2, r3
 8004248:	193b      	adds	r3, r7, r4
 800424a:	0011      	movs	r1, r2
 800424c:	0018      	movs	r0, r3
 800424e:	f7ff f843 	bl	80032d8 <concathex4>
	concathex4(mensagem, idt);
 8004252:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <monta_status+0x138>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	b29a      	uxth	r2, r3
 8004258:	193b      	adds	r3, r7, r4
 800425a:	0011      	movs	r1, r2
 800425c:	0018      	movs	r0, r3
 800425e:	f7ff f83b 	bl	80032d8 <concathex4>
	concathex4(mensagem, key);
 8004262:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <monta_status+0x13c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	b29a      	uxth	r2, r3
 8004268:	193b      	adds	r3, r7, r4
 800426a:	0011      	movs	r1, r2
 800426c:	0018      	movs	r0, r3
 800426e:	f7ff f833 	bl	80032d8 <concathex4>

	strcpy(mensagemcp, mensagem);
 8004272:	193a      	adds	r2, r7, r4
 8004274:	197b      	adds	r3, r7, r5
 8004276:	0011      	movs	r1, r2
 8004278:	0018      	movs	r0, r3
 800427a:	f00d fd1e 	bl	8011cba <strcpy>
	docrc(crc, mensagemcp, strlen(mensagemcp));
 800427e:	197b      	adds	r3, r7, r5
 8004280:	0018      	movs	r0, r3
 8004282:	f7fb ff47 	bl	8000114 <strlen>
 8004286:	0003      	movs	r3, r0
 8004288:	001a      	movs	r2, r3
 800428a:	1979      	adds	r1, r7, r5
 800428c:	1d3b      	adds	r3, r7, #4
 800428e:	0018      	movs	r0, r3
 8004290:	f7fe ff96 	bl	80031c0 <docrc>

	enviaUDP(mensagem, crc, strlen(mensagem));
 8004294:	193b      	adds	r3, r7, r4
 8004296:	0018      	movs	r0, r3
 8004298:	f7fb ff3c 	bl	8000114 <strlen>
 800429c:	0003      	movs	r3, r0
 800429e:	001a      	movs	r2, r3
 80042a0:	1d39      	adds	r1, r7, #4
 80042a2:	193b      	adds	r3, r7, r4
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7fe ffc5 	bl	8003234 <enviaUDP>

}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b016      	add	sp, #88	; 0x58
 80042b0:	bdb0      	pop	{r4, r5, r7, pc}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	200000d2 	.word	0x200000d2
 80042b8:	20000752 	.word	0x20000752
 80042bc:	20000750 	.word	0x20000750
 80042c0:	20000751 	.word	0x20000751
 80042c4:	20000753 	.word	0x20000753
 80042c8:	20000754 	.word	0x20000754
 80042cc:	2000075e 	.word	0x2000075e
 80042d0:	2000075f 	.word	0x2000075f
 80042d4:	20000758 	.word	0x20000758
 80042d8:	2000012c 	.word	0x2000012c
 80042dc:	20000130 	.word	0x20000130

080042e0 <monta_ipL>:
//***********************************************************************************************
//         Monta Pacote IP_Local ($LC0A800C0C0A800026DFFFF00244C6DE109252386#)
//***********************************************************************************************
void monta_ipL(void)
{
 80042e0:	b5b0      	push	{r4, r5, r7, lr}
 80042e2:	b09e      	sub	sp, #120	; 0x78
 80042e4:	af00      	add	r7, sp, #0
	char mensagem[46] = "";
 80042e6:	243c      	movs	r4, #60	; 0x3c
 80042e8:	193b      	adds	r3, r7, r4
 80042ea:	2200      	movs	r2, #0
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	3304      	adds	r3, #4
 80042f0:	222a      	movs	r2, #42	; 0x2a
 80042f2:	2100      	movs	r1, #0
 80042f4:	0018      	movs	r0, r3
 80042f6:	f00c fd9a 	bl	8010e2e <memset>
	char mensagemcp[46] = "";
 80042fa:	230c      	movs	r3, #12
 80042fc:	18fb      	adds	r3, r7, r3
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
 8004302:	3304      	adds	r3, #4
 8004304:	222a      	movs	r2, #42	; 0x2a
 8004306:	2100      	movs	r1, #0
 8004308:	0018      	movs	r0, r3
 800430a:	f00c fd90 	bl	8010e2e <memset>
	char crc[4] = "";
 800430e:	2308      	movs	r3, #8
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
	uint8_t DATA_4[4]={255,255,255,255};
 8004316:	1d3b      	adds	r3, r7, #4
 8004318:	2201      	movs	r2, #1
 800431a:	4252      	negs	r2, r2
 800431c:	601a      	str	r2, [r3, #0]
	int DATA_2 = 9999;
 800431e:	4b8a      	ldr	r3, [pc, #552]	; (8004548 <monta_ipL+0x268>)
 8004320:	677b      	str	r3, [r7, #116]	; 0x74
	int vl1;
	int vl2;

	strncat(mensagem, "L", 1);
 8004322:	193b      	adds	r3, r7, r4
 8004324:	0018      	movs	r0, r3
 8004326:	f7fb fef5 	bl	8000114 <strlen>
 800432a:	0003      	movs	r3, r0
 800432c:	001a      	movs	r2, r3
 800432e:	193b      	adds	r3, r7, r4
 8004330:	189a      	adds	r2, r3, r2
 8004332:	4b86      	ldr	r3, [pc, #536]	; (800454c <monta_ipL+0x26c>)
 8004334:	0010      	movs	r0, r2
 8004336:	0019      	movs	r1, r3
 8004338:	2302      	movs	r3, #2
 800433a:	001a      	movs	r2, r3
 800433c:	f00c fd6e 	bl	8010e1c <memcpy>

	DATA_4[0] = read_eeprom(ADD_IPL1);
 8004340:	2001      	movs	r0, #1
 8004342:	f7fe fedd 	bl	8003100 <read_eeprom>
 8004346:	0003      	movs	r3, r0
 8004348:	001a      	movs	r2, r3
 800434a:	1d3b      	adds	r3, r7, #4
 800434c:	701a      	strb	r2, [r3, #0]
	DATA_4[1] = read_eeprom(ADD_IPL2);
 800434e:	2002      	movs	r0, #2
 8004350:	f7fe fed6 	bl	8003100 <read_eeprom>
 8004354:	0003      	movs	r3, r0
 8004356:	001a      	movs	r2, r3
 8004358:	1d3b      	adds	r3, r7, #4
 800435a:	705a      	strb	r2, [r3, #1]
	DATA_4[2] = read_eeprom(ADD_IPL3);
 800435c:	2003      	movs	r0, #3
 800435e:	f7fe fecf 	bl	8003100 <read_eeprom>
 8004362:	0003      	movs	r3, r0
 8004364:	001a      	movs	r2, r3
 8004366:	1d3b      	adds	r3, r7, #4
 8004368:	709a      	strb	r2, [r3, #2]
	DATA_4[3] = read_eeprom(ADD_IPL4);
 800436a:	2004      	movs	r0, #4
 800436c:	f7fe fec8 	bl	8003100 <read_eeprom>
 8004370:	0003      	movs	r3, r0
 8004372:	001a      	movs	r2, r3
 8004374:	1d3b      	adds	r3, r7, #4
 8004376:	70da      	strb	r2, [r3, #3]

    for (x=0; x<4; x++){
 8004378:	4b75      	ldr	r3, [pc, #468]	; (8004550 <monta_ipL+0x270>)
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	e010      	b.n	80043a2 <monta_ipL+0xc2>
    	concathex2(mensagem, DATA_4[x]);
 8004380:	4b73      	ldr	r3, [pc, #460]	; (8004550 <monta_ipL+0x270>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	001a      	movs	r2, r3
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	5c9a      	ldrb	r2, [r3, r2]
 800438a:	233c      	movs	r3, #60	; 0x3c
 800438c:	18fb      	adds	r3, r7, r3
 800438e:	0011      	movs	r1, r2
 8004390:	0018      	movs	r0, r3
 8004392:	f7fe ff73 	bl	800327c <concathex2>
    for (x=0; x<4; x++){
 8004396:	4b6e      	ldr	r3, [pc, #440]	; (8004550 <monta_ipL+0x270>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	3301      	adds	r3, #1
 800439c:	b2da      	uxtb	r2, r3
 800439e:	4b6c      	ldr	r3, [pc, #432]	; (8004550 <monta_ipL+0x270>)
 80043a0:	701a      	strb	r2, [r3, #0]
 80043a2:	4b6b      	ldr	r3, [pc, #428]	; (8004550 <monta_ipL+0x270>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d9ea      	bls.n	8004380 <monta_ipL+0xa0>
    }

    DATA_4[0] = read_eeprom(ADD_GW1);
 80043aa:	2005      	movs	r0, #5
 80043ac:	f7fe fea8 	bl	8003100 <read_eeprom>
 80043b0:	0003      	movs	r3, r0
 80043b2:	001a      	movs	r2, r3
 80043b4:	1d3b      	adds	r3, r7, #4
 80043b6:	701a      	strb	r2, [r3, #0]
    DATA_4[1] = read_eeprom(ADD_GW2);
 80043b8:	2006      	movs	r0, #6
 80043ba:	f7fe fea1 	bl	8003100 <read_eeprom>
 80043be:	0003      	movs	r3, r0
 80043c0:	001a      	movs	r2, r3
 80043c2:	1d3b      	adds	r3, r7, #4
 80043c4:	705a      	strb	r2, [r3, #1]
    DATA_4[2] = read_eeprom(ADD_GW3);
 80043c6:	2007      	movs	r0, #7
 80043c8:	f7fe fe9a 	bl	8003100 <read_eeprom>
 80043cc:	0003      	movs	r3, r0
 80043ce:	001a      	movs	r2, r3
 80043d0:	1d3b      	adds	r3, r7, #4
 80043d2:	709a      	strb	r2, [r3, #2]
    DATA_4[3] = read_eeprom(ADD_GW4);
 80043d4:	2008      	movs	r0, #8
 80043d6:	f7fe fe93 	bl	8003100 <read_eeprom>
 80043da:	0003      	movs	r3, r0
 80043dc:	001a      	movs	r2, r3
 80043de:	1d3b      	adds	r3, r7, #4
 80043e0:	70da      	strb	r2, [r3, #3]

	for (x=0; x<4; x++){
 80043e2:	4b5b      	ldr	r3, [pc, #364]	; (8004550 <monta_ipL+0x270>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	701a      	strb	r2, [r3, #0]
 80043e8:	e010      	b.n	800440c <monta_ipL+0x12c>
    	concathex2(mensagem, DATA_4[x]);
 80043ea:	4b59      	ldr	r3, [pc, #356]	; (8004550 <monta_ipL+0x270>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	001a      	movs	r2, r3
 80043f0:	1d3b      	adds	r3, r7, #4
 80043f2:	5c9a      	ldrb	r2, [r3, r2]
 80043f4:	233c      	movs	r3, #60	; 0x3c
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	0011      	movs	r1, r2
 80043fa:	0018      	movs	r0, r3
 80043fc:	f7fe ff3e 	bl	800327c <concathex2>
	for (x=0; x<4; x++){
 8004400:	4b53      	ldr	r3, [pc, #332]	; (8004550 <monta_ipL+0x270>)
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	3301      	adds	r3, #1
 8004406:	b2da      	uxtb	r2, r3
 8004408:	4b51      	ldr	r3, [pc, #324]	; (8004550 <monta_ipL+0x270>)
 800440a:	701a      	strb	r2, [r3, #0]
 800440c:	4b50      	ldr	r3, [pc, #320]	; (8004550 <monta_ipL+0x270>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b03      	cmp	r3, #3
 8004412:	d9ea      	bls.n	80043ea <monta_ipL+0x10a>
    }

	DATA_4[0] = read_eeprom(ADD_MK1);
 8004414:	2009      	movs	r0, #9
 8004416:	f7fe fe73 	bl	8003100 <read_eeprom>
 800441a:	0003      	movs	r3, r0
 800441c:	001a      	movs	r2, r3
 800441e:	1d3b      	adds	r3, r7, #4
 8004420:	701a      	strb	r2, [r3, #0]
	DATA_4[1] = read_eeprom(ADD_MK2);
 8004422:	200a      	movs	r0, #10
 8004424:	f7fe fe6c 	bl	8003100 <read_eeprom>
 8004428:	0003      	movs	r3, r0
 800442a:	001a      	movs	r2, r3
 800442c:	1d3b      	adds	r3, r7, #4
 800442e:	705a      	strb	r2, [r3, #1]
	DATA_4[2] = read_eeprom(ADD_MK3);
 8004430:	200b      	movs	r0, #11
 8004432:	f7fe fe65 	bl	8003100 <read_eeprom>
 8004436:	0003      	movs	r3, r0
 8004438:	001a      	movs	r2, r3
 800443a:	1d3b      	adds	r3, r7, #4
 800443c:	709a      	strb	r2, [r3, #2]
	DATA_4[3] = read_eeprom(ADD_MK4);
 800443e:	200c      	movs	r0, #12
 8004440:	f7fe fe5e 	bl	8003100 <read_eeprom>
 8004444:	0003      	movs	r3, r0
 8004446:	001a      	movs	r2, r3
 8004448:	1d3b      	adds	r3, r7, #4
 800444a:	70da      	strb	r2, [r3, #3]

	for (x=0; x<4; x++){
 800444c:	4b40      	ldr	r3, [pc, #256]	; (8004550 <monta_ipL+0x270>)
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
 8004452:	e010      	b.n	8004476 <monta_ipL+0x196>
    	concathex2(mensagem, DATA_4[x]);
 8004454:	4b3e      	ldr	r3, [pc, #248]	; (8004550 <monta_ipL+0x270>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	001a      	movs	r2, r3
 800445a:	1d3b      	adds	r3, r7, #4
 800445c:	5c9a      	ldrb	r2, [r3, r2]
 800445e:	233c      	movs	r3, #60	; 0x3c
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	0011      	movs	r1, r2
 8004464:	0018      	movs	r0, r3
 8004466:	f7fe ff09 	bl	800327c <concathex2>
	for (x=0; x<4; x++){
 800446a:	4b39      	ldr	r3, [pc, #228]	; (8004550 <monta_ipL+0x270>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	3301      	adds	r3, #1
 8004470:	b2da      	uxtb	r2, r3
 8004472:	4b37      	ldr	r3, [pc, #220]	; (8004550 <monta_ipL+0x270>)
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	4b36      	ldr	r3, [pc, #216]	; (8004550 <monta_ipL+0x270>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b03      	cmp	r3, #3
 800447c:	d9ea      	bls.n	8004454 <monta_ipL+0x174>
    }

	vl1 = read_eeprom(ADD_PORTL1);
 800447e:	200d      	movs	r0, #13
 8004480:	f7fe fe3e 	bl	8003100 <read_eeprom>
 8004484:	0003      	movs	r3, r0
 8004486:	673b      	str	r3, [r7, #112]	; 0x70
	vl2 = read_eeprom(ADD_PORTL2);
 8004488:	200f      	movs	r0, #15
 800448a:	f7fe fe39 	bl	8003100 <read_eeprom>
 800448e:	0003      	movs	r3, r0
 8004490:	66fb      	str	r3, [r7, #108]	; 0x6c
	DATA_2 = (vl1 * 256) + vl2;
 8004492:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004498:	18d3      	adds	r3, r2, r3
 800449a:	677b      	str	r3, [r7, #116]	; 0x74
	concathex4(mensagem, DATA_2);
 800449c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800449e:	b29a      	uxth	r2, r3
 80044a0:	243c      	movs	r4, #60	; 0x3c
 80044a2:	193b      	adds	r3, r7, r4
 80044a4:	0011      	movs	r1, r2
 80044a6:	0018      	movs	r0, r3
 80044a8:	f7fe ff16 	bl	80032d8 <concathex4>

	vl1 = read_eeprom(ADD_IDT1);
 80044ac:	2010      	movs	r0, #16
 80044ae:	f7fe fe27 	bl	8003100 <read_eeprom>
 80044b2:	0003      	movs	r3, r0
 80044b4:	673b      	str	r3, [r7, #112]	; 0x70
	vl2 = read_eeprom(ADD_IDT2);
 80044b6:	2011      	movs	r0, #17
 80044b8:	f7fe fe22 	bl	8003100 <read_eeprom>
 80044bc:	0003      	movs	r3, r0
 80044be:	66fb      	str	r3, [r7, #108]	; 0x6c
	DATA_2 = (vl1 * 256) + vl2;
 80044c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044c2:	021b      	lsls	r3, r3, #8
 80044c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044c6:	18d3      	adds	r3, r2, r3
 80044c8:	677b      	str	r3, [r7, #116]	; 0x74
	concathex4(mensagem, DATA_2);
 80044ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	193b      	adds	r3, r7, r4
 80044d0:	0011      	movs	r1, r2
 80044d2:	0018      	movs	r0, r3
 80044d4:	f7fe ff00 	bl	80032d8 <concathex4>

	vl1 = read_eeprom(ADD_KEY1);
 80044d8:	2012      	movs	r0, #18
 80044da:	f7fe fe11 	bl	8003100 <read_eeprom>
 80044de:	0003      	movs	r3, r0
 80044e0:	673b      	str	r3, [r7, #112]	; 0x70
	vl2 = read_eeprom(ADD_KEY2);
 80044e2:	2013      	movs	r0, #19
 80044e4:	f7fe fe0c 	bl	8003100 <read_eeprom>
 80044e8:	0003      	movs	r3, r0
 80044ea:	66fb      	str	r3, [r7, #108]	; 0x6c
	DATA_2 = (vl1 * 256) + vl2;
 80044ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044ee:	021b      	lsls	r3, r3, #8
 80044f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80044f2:	18d3      	adds	r3, r2, r3
 80044f4:	677b      	str	r3, [r7, #116]	; 0x74
    concathex4(mensagem, DATA_2);
 80044f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	193b      	adds	r3, r7, r4
 80044fc:	0011      	movs	r1, r2
 80044fe:	0018      	movs	r0, r3
 8004500:	f7fe feea 	bl	80032d8 <concathex4>

    strcpy(mensagemcp, mensagem);
 8004504:	193a      	adds	r2, r7, r4
 8004506:	250c      	movs	r5, #12
 8004508:	197b      	adds	r3, r7, r5
 800450a:	0011      	movs	r1, r2
 800450c:	0018      	movs	r0, r3
 800450e:	f00d fbd4 	bl	8011cba <strcpy>
	docrc(crc, mensagemcp, strlen(mensagemcp));
 8004512:	197b      	adds	r3, r7, r5
 8004514:	0018      	movs	r0, r3
 8004516:	f7fb fdfd 	bl	8000114 <strlen>
 800451a:	0003      	movs	r3, r0
 800451c:	001a      	movs	r2, r3
 800451e:	1979      	adds	r1, r7, r5
 8004520:	2508      	movs	r5, #8
 8004522:	197b      	adds	r3, r7, r5
 8004524:	0018      	movs	r0, r3
 8004526:	f7fe fe4b 	bl	80031c0 <docrc>

    enviaUDP(mensagem, crc, strlen(mensagem));
 800452a:	193b      	adds	r3, r7, r4
 800452c:	0018      	movs	r0, r3
 800452e:	f7fb fdf1 	bl	8000114 <strlen>
 8004532:	0003      	movs	r3, r0
 8004534:	001a      	movs	r2, r3
 8004536:	1979      	adds	r1, r7, r5
 8004538:	193b      	adds	r3, r7, r4
 800453a:	0018      	movs	r0, r3
 800453c:	f7fe fe7a 	bl	8003234 <enviaUDP>

}
 8004540:	46c0      	nop			; (mov r8, r8)
 8004542:	46bd      	mov	sp, r7
 8004544:	b01e      	add	sp, #120	; 0x78
 8004546:	bdb0      	pop	{r4, r5, r7, pc}
 8004548:	0000270f 	.word	0x0000270f
 800454c:	08015c1c 	.word	0x08015c1c
 8004550:	200007d1 	.word	0x200007d1

08004554 <monta_ipS>:
//***********************************************************************************************
//         Monta Pacote IP_Servidor ($SD07244B01010101upscba.selprom.com.br4A49#)
//									($SI05244B01010101C0A8001DBDE9#)
//***********************************************************************************************
void monta_ipS(void)
{
 8004554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004556:	b0b5      	sub	sp, #212	; 0xd4
 8004558:	af00      	add	r7, sp, #0
	char mensagem[60] = "";
 800455a:	2484      	movs	r4, #132	; 0x84
 800455c:	193b      	adds	r3, r7, r4
 800455e:	2200      	movs	r2, #0
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	3304      	adds	r3, #4
 8004564:	2238      	movs	r2, #56	; 0x38
 8004566:	2100      	movs	r1, #0
 8004568:	0018      	movs	r0, r3
 800456a:	f00c fc60 	bl	8010e2e <memset>
	char mensagemcp[60] = "";
 800456e:	2348      	movs	r3, #72	; 0x48
 8004570:	18fb      	adds	r3, r7, r3
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	3304      	adds	r3, #4
 8004578:	2238      	movs	r2, #56	; 0x38
 800457a:	2100      	movs	r1, #0
 800457c:	0018      	movs	r0, r3
 800457e:	f00c fc56 	bl	8010e2e <memset>
	char crc[4] = "";
 8004582:	2344      	movs	r3, #68	; 0x44
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
	uint8_t DATA_4[4]={255,255,255,255};
 800458a:	2540      	movs	r5, #64	; 0x40
 800458c:	197b      	adds	r3, r7, r5
 800458e:	2201      	movs	r2, #1
 8004590:	4252      	negs	r2, r2
 8004592:	601a      	str	r2, [r3, #0]
	int DATA_2 = 9999;
 8004594:	4bcb      	ldr	r3, [pc, #812]	; (80048c4 <monta_ipS+0x370>)
 8004596:	26c8      	movs	r6, #200	; 0xc8
 8004598:	19ba      	adds	r2, r7, r6
 800459a:	6013      	str	r3, [r2, #0]
	int vl1;
	int vl2;

	strncat(mensagem, "S", 1);
 800459c:	193b      	adds	r3, r7, r4
 800459e:	0018      	movs	r0, r3
 80045a0:	f7fb fdb8 	bl	8000114 <strlen>
 80045a4:	0003      	movs	r3, r0
 80045a6:	001a      	movs	r2, r3
 80045a8:	193b      	adds	r3, r7, r4
 80045aa:	189a      	adds	r2, r3, r2
 80045ac:	4bc6      	ldr	r3, [pc, #792]	; (80048c8 <monta_ipS+0x374>)
 80045ae:	0010      	movs	r0, r2
 80045b0:	0019      	movs	r1, r3
 80045b2:	2302      	movs	r3, #2
 80045b4:	001a      	movs	r2, r3
 80045b6:	f00c fc31 	bl	8010e1c <memcpy>

	if(isdom){
 80045ba:	4bc4      	ldr	r3, [pc, #784]	; (80048cc <monta_ipS+0x378>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d100      	bne.n	80045c4 <monta_ipS+0x70>
 80045c2:	e0b0      	b.n	8004726 <monta_ipS+0x1d2>
		strncat(mensagem, "D", 1);
 80045c4:	193b      	adds	r3, r7, r4
 80045c6:	0018      	movs	r0, r3
 80045c8:	f7fb fda4 	bl	8000114 <strlen>
 80045cc:	0003      	movs	r3, r0
 80045ce:	001a      	movs	r2, r3
 80045d0:	193b      	adds	r3, r7, r4
 80045d2:	189a      	adds	r2, r3, r2
 80045d4:	4bbe      	ldr	r3, [pc, #760]	; (80048d0 <monta_ipS+0x37c>)
 80045d6:	0010      	movs	r0, r2
 80045d8:	0019      	movs	r1, r3
 80045da:	2302      	movs	r3, #2
 80045dc:	001a      	movs	r2, r3
 80045de:	f00c fc1d 	bl	8010e1c <memcpy>

		DATA_2 = read_eeprom(ADD_TIMEOUT);
 80045e2:	203d      	movs	r0, #61	; 0x3d
 80045e4:	f7fe fd8c 	bl	8003100 <read_eeprom>
 80045e8:	0003      	movs	r3, r0
 80045ea:	19ba      	adds	r2, r7, r6
 80045ec:	6013      	str	r3, [r2, #0]
		concathex2(mensagem, DATA_2);
 80045ee:	19bb      	adds	r3, r7, r6
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	193b      	adds	r3, r7, r4
 80045f6:	0011      	movs	r1, r2
 80045f8:	0018      	movs	r0, r3
 80045fa:	f7fe fe3f 	bl	800327c <concathex2>

		vl1 = read_eeprom(ADD_PORTS1);
 80045fe:	201c      	movs	r0, #28
 8004600:	f7fe fd7e 	bl	8003100 <read_eeprom>
 8004604:	0003      	movs	r3, r0
 8004606:	22c4      	movs	r2, #196	; 0xc4
 8004608:	18b9      	adds	r1, r7, r2
 800460a:	600b      	str	r3, [r1, #0]
		vl2 = read_eeprom(ADD_PORTS2);
 800460c:	201d      	movs	r0, #29
 800460e:	f7fe fd77 	bl	8003100 <read_eeprom>
 8004612:	0003      	movs	r3, r0
 8004614:	21c0      	movs	r1, #192	; 0xc0
 8004616:	1878      	adds	r0, r7, r1
 8004618:	6003      	str	r3, [r0, #0]
		DATA_2 = (vl1 * 256) + vl2;
 800461a:	22c4      	movs	r2, #196	; 0xc4
 800461c:	18bb      	adds	r3, r7, r2
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	021b      	lsls	r3, r3, #8
 8004622:	187a      	adds	r2, r7, r1
 8004624:	6812      	ldr	r2, [r2, #0]
 8004626:	18d3      	adds	r3, r2, r3
 8004628:	19ba      	adds	r2, r7, r6
 800462a:	6013      	str	r3, [r2, #0]
		concathex4(mensagem, DATA_2);
 800462c:	19bb      	adds	r3, r7, r6
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	b29a      	uxth	r2, r3
 8004632:	193b      	adds	r3, r7, r4
 8004634:	0011      	movs	r1, r2
 8004636:	0018      	movs	r0, r3
 8004638:	f7fe fe4e 	bl	80032d8 <concathex4>

		DATA_4[0] = read_eeprom(ADD_DNS1);
 800463c:	2018      	movs	r0, #24
 800463e:	f7fe fd5f 	bl	8003100 <read_eeprom>
 8004642:	0003      	movs	r3, r0
 8004644:	001a      	movs	r2, r3
 8004646:	197b      	adds	r3, r7, r5
 8004648:	701a      	strb	r2, [r3, #0]
		DATA_4[1] = read_eeprom(ADD_DNS2);
 800464a:	2019      	movs	r0, #25
 800464c:	f7fe fd58 	bl	8003100 <read_eeprom>
 8004650:	0003      	movs	r3, r0
 8004652:	001a      	movs	r2, r3
 8004654:	197b      	adds	r3, r7, r5
 8004656:	705a      	strb	r2, [r3, #1]
		DATA_4[2] = read_eeprom(ADD_DNS3);
 8004658:	201a      	movs	r0, #26
 800465a:	f7fe fd51 	bl	8003100 <read_eeprom>
 800465e:	0003      	movs	r3, r0
 8004660:	001a      	movs	r2, r3
 8004662:	197b      	adds	r3, r7, r5
 8004664:	709a      	strb	r2, [r3, #2]
		DATA_4[3] = read_eeprom(ADD_DNS4);
 8004666:	201b      	movs	r0, #27
 8004668:	f7fe fd4a 	bl	8003100 <read_eeprom>
 800466c:	0003      	movs	r3, r0
 800466e:	001a      	movs	r2, r3
 8004670:	197b      	adds	r3, r7, r5
 8004672:	70da      	strb	r2, [r3, #3]
		for (x=0; x<4; x++){
 8004674:	4b97      	ldr	r3, [pc, #604]	; (80048d4 <monta_ipS+0x380>)
 8004676:	2200      	movs	r2, #0
 8004678:	701a      	strb	r2, [r3, #0]
 800467a:	e011      	b.n	80046a0 <monta_ipS+0x14c>
			concathex2(mensagem, DATA_4[x]);
 800467c:	4b95      	ldr	r3, [pc, #596]	; (80048d4 <monta_ipS+0x380>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	001a      	movs	r2, r3
 8004682:	2340      	movs	r3, #64	; 0x40
 8004684:	18fb      	adds	r3, r7, r3
 8004686:	5c9a      	ldrb	r2, [r3, r2]
 8004688:	2384      	movs	r3, #132	; 0x84
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	0011      	movs	r1, r2
 800468e:	0018      	movs	r0, r3
 8004690:	f7fe fdf4 	bl	800327c <concathex2>
		for (x=0; x<4; x++){
 8004694:	4b8f      	ldr	r3, [pc, #572]	; (80048d4 <monta_ipS+0x380>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	3301      	adds	r3, #1
 800469a:	b2da      	uxtb	r2, r3
 800469c:	4b8d      	ldr	r3, [pc, #564]	; (80048d4 <monta_ipS+0x380>)
 800469e:	701a      	strb	r2, [r3, #0]
 80046a0:	4b8c      	ldr	r3, [pc, #560]	; (80048d4 <monta_ipS+0x380>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d9e9      	bls.n	800467c <monta_ipS+0x128>
		}

		tam_dominio = read_eeprom(ADD_TDOM);
 80046a8:	203b      	movs	r0, #59	; 0x3b
 80046aa:	f7fe fd29 	bl	8003100 <read_eeprom>
 80046ae:	0003      	movs	r3, r0
 80046b0:	001a      	movs	r2, r3
 80046b2:	4b89      	ldr	r3, [pc, #548]	; (80048d8 <monta_ipS+0x384>)
 80046b4:	701a      	strb	r2, [r3, #0]
		int j;
		int i = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	22cc      	movs	r2, #204	; 0xcc
 80046ba:	18ba      	adds	r2, r7, r2
 80046bc:	6013      	str	r3, [r2, #0]
		char dat[60] = "";
 80046be:	1d3b      	adds	r3, r7, #4
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	3304      	adds	r3, #4
 80046c6:	2238      	movs	r2, #56	; 0x38
 80046c8:	2100      	movs	r1, #0
 80046ca:	0018      	movs	r0, r3
 80046cc:	f00c fbaf 	bl	8010e2e <memset>
		for(i; i<tam_dominio; i++){
 80046d0:	e020      	b.n	8004714 <monta_ipS+0x1c0>
			dat[i] = read_eeprom(adominio[i]);
 80046d2:	4a82      	ldr	r2, [pc, #520]	; (80048dc <monta_ipS+0x388>)
 80046d4:	24cc      	movs	r4, #204	; 0xcc
 80046d6:	193b      	adds	r3, r7, r4
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	18d3      	adds	r3, r2, r3
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	0018      	movs	r0, r3
 80046e2:	f7fe fd0d 	bl	8003100 <read_eeprom>
 80046e6:	0003      	movs	r3, r0
 80046e8:	0019      	movs	r1, r3
 80046ea:	1d3a      	adds	r2, r7, #4
 80046ec:	193b      	adds	r3, r7, r4
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	18d3      	adds	r3, r2, r3
 80046f2:	1c0a      	adds	r2, r1, #0
 80046f4:	701a      	strb	r2, [r3, #0]
			strncat(mensagem, &dat[i], 1);
 80046f6:	1d3a      	adds	r2, r7, #4
 80046f8:	193b      	adds	r3, r7, r4
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	18d1      	adds	r1, r2, r3
 80046fe:	2384      	movs	r3, #132	; 0x84
 8004700:	18fb      	adds	r3, r7, r3
 8004702:	2201      	movs	r2, #1
 8004704:	0018      	movs	r0, r3
 8004706:	f00d fae0 	bl	8011cca <strncat>
		for(i; i<tam_dominio; i++){
 800470a:	193b      	adds	r3, r7, r4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3301      	adds	r3, #1
 8004710:	193a      	adds	r2, r7, r4
 8004712:	6013      	str	r3, [r2, #0]
 8004714:	4b70      	ldr	r3, [pc, #448]	; (80048d8 <monta_ipS+0x384>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	001a      	movs	r2, r3
 800471a:	23cc      	movs	r3, #204	; 0xcc
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4293      	cmp	r3, r2
 8004722:	dbd6      	blt.n	80046d2 <monta_ipS+0x17e>
 8004724:	e0aa      	b.n	800487c <monta_ipS+0x328>
		}
	}else{
		strncat(mensagem, "I", 1);
 8004726:	2484      	movs	r4, #132	; 0x84
 8004728:	193b      	adds	r3, r7, r4
 800472a:	0018      	movs	r0, r3
 800472c:	f7fb fcf2 	bl	8000114 <strlen>
 8004730:	0003      	movs	r3, r0
 8004732:	001a      	movs	r2, r3
 8004734:	193b      	adds	r3, r7, r4
 8004736:	189a      	adds	r2, r3, r2
 8004738:	4b69      	ldr	r3, [pc, #420]	; (80048e0 <monta_ipS+0x38c>)
 800473a:	0010      	movs	r0, r2
 800473c:	0019      	movs	r1, r3
 800473e:	2302      	movs	r3, #2
 8004740:	001a      	movs	r2, r3
 8004742:	f00c fb6b 	bl	8010e1c <memcpy>

		DATA_2 = read_eeprom(ADD_TIMEOUT);
 8004746:	203d      	movs	r0, #61	; 0x3d
 8004748:	f7fe fcda 	bl	8003100 <read_eeprom>
 800474c:	0003      	movs	r3, r0
 800474e:	25c8      	movs	r5, #200	; 0xc8
 8004750:	197a      	adds	r2, r7, r5
 8004752:	6013      	str	r3, [r2, #0]
		concathex2(mensagem, DATA_2);
 8004754:	197b      	adds	r3, r7, r5
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	193b      	adds	r3, r7, r4
 800475c:	0011      	movs	r1, r2
 800475e:	0018      	movs	r0, r3
 8004760:	f7fe fd8c 	bl	800327c <concathex2>

		vl1 = read_eeprom(ADD_PORTS1);
 8004764:	201c      	movs	r0, #28
 8004766:	f7fe fccb 	bl	8003100 <read_eeprom>
 800476a:	0003      	movs	r3, r0
 800476c:	26c4      	movs	r6, #196	; 0xc4
 800476e:	19ba      	adds	r2, r7, r6
 8004770:	6013      	str	r3, [r2, #0]
		vl2 = read_eeprom(ADD_PORTS2);
 8004772:	201d      	movs	r0, #29
 8004774:	f7fe fcc4 	bl	8003100 <read_eeprom>
 8004778:	0003      	movs	r3, r0
 800477a:	22c0      	movs	r2, #192	; 0xc0
 800477c:	18b9      	adds	r1, r7, r2
 800477e:	600b      	str	r3, [r1, #0]
		DATA_2 = (vl1 * 256) + vl2;
 8004780:	19bb      	adds	r3, r7, r6
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	021b      	lsls	r3, r3, #8
 8004786:	18ba      	adds	r2, r7, r2
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	18d3      	adds	r3, r2, r3
 800478c:	197a      	adds	r2, r7, r5
 800478e:	6013      	str	r3, [r2, #0]
		concathex4(mensagem, DATA_2);
 8004790:	197b      	adds	r3, r7, r5
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	b29a      	uxth	r2, r3
 8004796:	193b      	adds	r3, r7, r4
 8004798:	0011      	movs	r1, r2
 800479a:	0018      	movs	r0, r3
 800479c:	f7fe fd9c 	bl	80032d8 <concathex4>

		DATA_4[0] = read_eeprom(ADD_DNS1);
 80047a0:	2018      	movs	r0, #24
 80047a2:	f7fe fcad 	bl	8003100 <read_eeprom>
 80047a6:	0003      	movs	r3, r0
 80047a8:	001a      	movs	r2, r3
 80047aa:	2440      	movs	r4, #64	; 0x40
 80047ac:	193b      	adds	r3, r7, r4
 80047ae:	701a      	strb	r2, [r3, #0]
		DATA_4[1] = read_eeprom(ADD_DNS2);
 80047b0:	2019      	movs	r0, #25
 80047b2:	f7fe fca5 	bl	8003100 <read_eeprom>
 80047b6:	0003      	movs	r3, r0
 80047b8:	001a      	movs	r2, r3
 80047ba:	193b      	adds	r3, r7, r4
 80047bc:	705a      	strb	r2, [r3, #1]
		DATA_4[2] = read_eeprom(ADD_DNS3);
 80047be:	201a      	movs	r0, #26
 80047c0:	f7fe fc9e 	bl	8003100 <read_eeprom>
 80047c4:	0003      	movs	r3, r0
 80047c6:	001a      	movs	r2, r3
 80047c8:	193b      	adds	r3, r7, r4
 80047ca:	709a      	strb	r2, [r3, #2]
		DATA_4[3] = read_eeprom(ADD_DNS4);
 80047cc:	201b      	movs	r0, #27
 80047ce:	f7fe fc97 	bl	8003100 <read_eeprom>
 80047d2:	0003      	movs	r3, r0
 80047d4:	001a      	movs	r2, r3
 80047d6:	193b      	adds	r3, r7, r4
 80047d8:	70da      	strb	r2, [r3, #3]
		for (x=0; x<4; x++){
 80047da:	4b3e      	ldr	r3, [pc, #248]	; (80048d4 <monta_ipS+0x380>)
 80047dc:	2200      	movs	r2, #0
 80047de:	701a      	strb	r2, [r3, #0]
 80047e0:	e011      	b.n	8004806 <monta_ipS+0x2b2>
			concathex2(mensagem, DATA_4[x]);
 80047e2:	4b3c      	ldr	r3, [pc, #240]	; (80048d4 <monta_ipS+0x380>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	001a      	movs	r2, r3
 80047e8:	2340      	movs	r3, #64	; 0x40
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	5c9a      	ldrb	r2, [r3, r2]
 80047ee:	2384      	movs	r3, #132	; 0x84
 80047f0:	18fb      	adds	r3, r7, r3
 80047f2:	0011      	movs	r1, r2
 80047f4:	0018      	movs	r0, r3
 80047f6:	f7fe fd41 	bl	800327c <concathex2>
		for (x=0; x<4; x++){
 80047fa:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <monta_ipS+0x380>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	3301      	adds	r3, #1
 8004800:	b2da      	uxtb	r2, r3
 8004802:	4b34      	ldr	r3, [pc, #208]	; (80048d4 <monta_ipS+0x380>)
 8004804:	701a      	strb	r2, [r3, #0]
 8004806:	4b33      	ldr	r3, [pc, #204]	; (80048d4 <monta_ipS+0x380>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2b03      	cmp	r3, #3
 800480c:	d9e9      	bls.n	80047e2 <monta_ipS+0x28e>
		}

		DATA_4[0] = read_eeprom(ADD_IPS1);
 800480e:	2014      	movs	r0, #20
 8004810:	f7fe fc76 	bl	8003100 <read_eeprom>
 8004814:	0003      	movs	r3, r0
 8004816:	001a      	movs	r2, r3
 8004818:	2440      	movs	r4, #64	; 0x40
 800481a:	193b      	adds	r3, r7, r4
 800481c:	701a      	strb	r2, [r3, #0]
		DATA_4[1] = read_eeprom(ADD_IPS2);
 800481e:	2015      	movs	r0, #21
 8004820:	f7fe fc6e 	bl	8003100 <read_eeprom>
 8004824:	0003      	movs	r3, r0
 8004826:	001a      	movs	r2, r3
 8004828:	193b      	adds	r3, r7, r4
 800482a:	705a      	strb	r2, [r3, #1]
		DATA_4[2] = read_eeprom(ADD_IPS3);
 800482c:	2016      	movs	r0, #22
 800482e:	f7fe fc67 	bl	8003100 <read_eeprom>
 8004832:	0003      	movs	r3, r0
 8004834:	001a      	movs	r2, r3
 8004836:	193b      	adds	r3, r7, r4
 8004838:	709a      	strb	r2, [r3, #2]
		DATA_4[3] = read_eeprom(ADD_IPS4);
 800483a:	2017      	movs	r0, #23
 800483c:	f7fe fc60 	bl	8003100 <read_eeprom>
 8004840:	0003      	movs	r3, r0
 8004842:	001a      	movs	r2, r3
 8004844:	193b      	adds	r3, r7, r4
 8004846:	70da      	strb	r2, [r3, #3]
		for (x=0; x<4; x++){
 8004848:	4b22      	ldr	r3, [pc, #136]	; (80048d4 <monta_ipS+0x380>)
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
 800484e:	e011      	b.n	8004874 <monta_ipS+0x320>
			concathex2(mensagem, DATA_4[x]);
 8004850:	4b20      	ldr	r3, [pc, #128]	; (80048d4 <monta_ipS+0x380>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	001a      	movs	r2, r3
 8004856:	2340      	movs	r3, #64	; 0x40
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	5c9a      	ldrb	r2, [r3, r2]
 800485c:	2384      	movs	r3, #132	; 0x84
 800485e:	18fb      	adds	r3, r7, r3
 8004860:	0011      	movs	r1, r2
 8004862:	0018      	movs	r0, r3
 8004864:	f7fe fd0a 	bl	800327c <concathex2>
		for (x=0; x<4; x++){
 8004868:	4b1a      	ldr	r3, [pc, #104]	; (80048d4 <monta_ipS+0x380>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	3301      	adds	r3, #1
 800486e:	b2da      	uxtb	r2, r3
 8004870:	4b18      	ldr	r3, [pc, #96]	; (80048d4 <monta_ipS+0x380>)
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	4b17      	ldr	r3, [pc, #92]	; (80048d4 <monta_ipS+0x380>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	2b03      	cmp	r3, #3
 800487a:	d9e9      	bls.n	8004850 <monta_ipS+0x2fc>
		}
	}

    strcpy(mensagemcp, mensagem);
 800487c:	2484      	movs	r4, #132	; 0x84
 800487e:	193a      	adds	r2, r7, r4
 8004880:	2548      	movs	r5, #72	; 0x48
 8004882:	197b      	adds	r3, r7, r5
 8004884:	0011      	movs	r1, r2
 8004886:	0018      	movs	r0, r3
 8004888:	f00d fa17 	bl	8011cba <strcpy>
	docrc(crc, mensagemcp, strlen(mensagemcp));
 800488c:	197b      	adds	r3, r7, r5
 800488e:	0018      	movs	r0, r3
 8004890:	f7fb fc40 	bl	8000114 <strlen>
 8004894:	0003      	movs	r3, r0
 8004896:	001a      	movs	r2, r3
 8004898:	1979      	adds	r1, r7, r5
 800489a:	2544      	movs	r5, #68	; 0x44
 800489c:	197b      	adds	r3, r7, r5
 800489e:	0018      	movs	r0, r3
 80048a0:	f7fe fc8e 	bl	80031c0 <docrc>

    enviaUDP(mensagem, crc, strlen(mensagem));
 80048a4:	193b      	adds	r3, r7, r4
 80048a6:	0018      	movs	r0, r3
 80048a8:	f7fb fc34 	bl	8000114 <strlen>
 80048ac:	0003      	movs	r3, r0
 80048ae:	001a      	movs	r2, r3
 80048b0:	1979      	adds	r1, r7, r5
 80048b2:	193b      	adds	r3, r7, r4
 80048b4:	0018      	movs	r0, r3
 80048b6:	f7fe fcbd 	bl	8003234 <enviaUDP>

}
 80048ba:	46c0      	nop			; (mov r8, r8)
 80048bc:	46bd      	mov	sp, r7
 80048be:	b035      	add	sp, #212	; 0xd4
 80048c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	0000270f 	.word	0x0000270f
 80048c8:	08015c20 	.word	0x08015c20
 80048cc:	200007a2 	.word	0x200007a2
 80048d0:	08015c24 	.word	0x08015c24
 80048d4:	200007d1 	.word	0x200007d1
 80048d8:	200007a0 	.word	0x200007a0
 80048dc:	20000100 	.word	0x20000100
 80048e0:	08015c28 	.word	0x08015c28

080048e4 <monta_info>:
//***********************************************************************************************
//         Monta Pacote Info ($0x203038463336509B2B#)
//***********************************************************************************************
void monta_info(void)
{
 80048e4:	b590      	push	{r4, r7, lr}
 80048e6:	b08b      	sub	sp, #44	; 0x2c
 80048e8:	af00      	add	r7, sp, #0
	char mensagem[30] = "";
 80048ea:	2408      	movs	r4, #8
 80048ec:	193b      	adds	r3, r7, r4
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	3304      	adds	r3, #4
 80048f4:	221a      	movs	r2, #26
 80048f6:	2100      	movs	r1, #0
 80048f8:	0018      	movs	r0, r3
 80048fa:	f00c fa98 	bl	8010e2e <memset>
	char crc[4] = "";
 80048fe:	1d3b      	adds	r3, r7, #4
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

	strcpy(mensagem, aShowLotNumber);
 8004904:	4a0f      	ldr	r2, [pc, #60]	; (8004944 <monta_info+0x60>)
 8004906:	193b      	adds	r3, r7, r4
 8004908:	0011      	movs	r1, r2
 800490a:	0018      	movs	r0, r3
 800490c:	f00d f9d5 	bl	8011cba <strcpy>
	docrc(crc, mensagem, strlen(mensagem));
 8004910:	193b      	adds	r3, r7, r4
 8004912:	0018      	movs	r0, r3
 8004914:	f7fb fbfe 	bl	8000114 <strlen>
 8004918:	0003      	movs	r3, r0
 800491a:	001a      	movs	r2, r3
 800491c:	1939      	adds	r1, r7, r4
 800491e:	1d3b      	adds	r3, r7, #4
 8004920:	0018      	movs	r0, r3
 8004922:	f7fe fc4d 	bl	80031c0 <docrc>

	enviaUDP(aShowLotNumber, crc, strlen(aShowLotNumber));
 8004926:	4b07      	ldr	r3, [pc, #28]	; (8004944 <monta_info+0x60>)
 8004928:	0018      	movs	r0, r3
 800492a:	f7fb fbf3 	bl	8000114 <strlen>
 800492e:	0003      	movs	r3, r0
 8004930:	001a      	movs	r2, r3
 8004932:	1d39      	adds	r1, r7, #4
 8004934:	4b03      	ldr	r3, [pc, #12]	; (8004944 <monta_info+0x60>)
 8004936:	0018      	movs	r0, r3
 8004938:	f7fe fc7c 	bl	8003234 <enviaUDP>
}
 800493c:	46c0      	nop			; (mov r8, r8)
 800493e:	46bd      	mov	sp, r7
 8004940:	b00b      	add	sp, #44	; 0x2c
 8004942:	bd90      	pop	{r4, r7, pc}
 8004944:	20000838 	.word	0x20000838

08004948 <monta_teste>:

//***********************************************************************************************
//         Monta Pacote TESTE ($R07D205E6C0A80051C0A80002244C4414#)
//***********************************************************************************************
void monta_teste(void)
{
 8004948:	b5b0      	push	{r4, r5, r7, lr}
 800494a:	b0be      	sub	sp, #248	; 0xf8
 800494c:	af02      	add	r7, sp, #8

	modo_prog = 1;
 800494e:	4b7d      	ldr	r3, [pc, #500]	; (8004b44 <monta_teste+0x1fc>)
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]
	char mensage[60] = "";
 8004954:	25a8      	movs	r5, #168	; 0xa8
 8004956:	197b      	adds	r3, r7, r5
 8004958:	2200      	movs	r2, #0
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	3304      	adds	r3, #4
 800495e:	2238      	movs	r2, #56	; 0x38
 8004960:	2100      	movs	r1, #0
 8004962:	0018      	movs	r0, r3
 8004964:	f00c fa63 	bl	8010e2e <memset>
	char mensagecp[60] = "";
 8004968:	236c      	movs	r3, #108	; 0x6c
 800496a:	18fb      	adds	r3, r7, r3
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	3304      	adds	r3, #4
 8004972:	2238      	movs	r2, #56	; 0x38
 8004974:	2100      	movs	r1, #0
 8004976:	0018      	movs	r0, r3
 8004978:	f00c fa59 	bl	8010e2e <memset>
	char crc[4] = "";
 800497c:	2368      	movs	r3, #104	; 0x68
 800497e:	18fb      	adds	r3, r7, r3
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
	uint8_t DATA_4[4]={255,255,255,255};
 8004984:	2464      	movs	r4, #100	; 0x64
 8004986:	193b      	adds	r3, r7, r4
 8004988:	2201      	movs	r2, #1
 800498a:	4252      	negs	r2, r2
 800498c:	601a      	str	r2, [r3, #0]
	int DATA_2 = 9999;
 800498e:	4b6e      	ldr	r3, [pc, #440]	; (8004b48 <monta_teste+0x200>)
 8004990:	22ec      	movs	r2, #236	; 0xec
 8004992:	18ba      	adds	r2, r7, r2
 8004994:	6013      	str	r3, [r2, #0]
	int vl1;
	int vl2;

	mensage[0] = energ;
 8004996:	4b6d      	ldr	r3, [pc, #436]	; (8004b4c <monta_teste+0x204>)
 8004998:	781a      	ldrb	r2, [r3, #0]
 800499a:	197b      	adds	r3, r7, r5
 800499c:	701a      	strb	r2, [r3, #0]
	concathex4(mensage, idt);
 800499e:	4b6c      	ldr	r3, [pc, #432]	; (8004b50 <monta_teste+0x208>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	197b      	adds	r3, r7, r5
 80049a6:	0011      	movs	r1, r2
 80049a8:	0018      	movs	r0, r3
 80049aa:	f7fe fc95 	bl	80032d8 <concathex4>
	concathex4(mensage, key);
 80049ae:	4b69      	ldr	r3, [pc, #420]	; (8004b54 <monta_teste+0x20c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	b29a      	uxth	r2, r3
 80049b4:	197b      	adds	r3, r7, r5
 80049b6:	0011      	movs	r1, r2
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7fe fc8d 	bl	80032d8 <concathex4>
	DATA_4[0] = read_eeprom(ADD_IPL1);
 80049be:	2001      	movs	r0, #1
 80049c0:	f7fe fb9e 	bl	8003100 <read_eeprom>
 80049c4:	0003      	movs	r3, r0
 80049c6:	001a      	movs	r2, r3
 80049c8:	193b      	adds	r3, r7, r4
 80049ca:	701a      	strb	r2, [r3, #0]
	DATA_4[1] = read_eeprom(ADD_IPL2);
 80049cc:	2002      	movs	r0, #2
 80049ce:	f7fe fb97 	bl	8003100 <read_eeprom>
 80049d2:	0003      	movs	r3, r0
 80049d4:	001a      	movs	r2, r3
 80049d6:	193b      	adds	r3, r7, r4
 80049d8:	705a      	strb	r2, [r3, #1]
	DATA_4[2] = read_eeprom(ADD_IPL3);
 80049da:	2003      	movs	r0, #3
 80049dc:	f7fe fb90 	bl	8003100 <read_eeprom>
 80049e0:	0003      	movs	r3, r0
 80049e2:	001a      	movs	r2, r3
 80049e4:	193b      	adds	r3, r7, r4
 80049e6:	709a      	strb	r2, [r3, #2]
	DATA_4[3] = read_eeprom(ADD_IPL4);
 80049e8:	2004      	movs	r0, #4
 80049ea:	f7fe fb89 	bl	8003100 <read_eeprom>
 80049ee:	0003      	movs	r3, r0
 80049f0:	001a      	movs	r2, r3
 80049f2:	193b      	adds	r3, r7, r4
 80049f4:	70da      	strb	r2, [r3, #3]

    for (x=0; x<4; x++){
 80049f6:	4b58      	ldr	r3, [pc, #352]	; (8004b58 <monta_teste+0x210>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	701a      	strb	r2, [r3, #0]
 80049fc:	e011      	b.n	8004a22 <monta_teste+0xda>
    	concathex2(mensage, DATA_4[x]);
 80049fe:	4b56      	ldr	r3, [pc, #344]	; (8004b58 <monta_teste+0x210>)
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	001a      	movs	r2, r3
 8004a04:	2364      	movs	r3, #100	; 0x64
 8004a06:	18fb      	adds	r3, r7, r3
 8004a08:	5c9a      	ldrb	r2, [r3, r2]
 8004a0a:	23a8      	movs	r3, #168	; 0xa8
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	0011      	movs	r1, r2
 8004a10:	0018      	movs	r0, r3
 8004a12:	f7fe fc33 	bl	800327c <concathex2>
    for (x=0; x<4; x++){
 8004a16:	4b50      	ldr	r3, [pc, #320]	; (8004b58 <monta_teste+0x210>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	4b4e      	ldr	r3, [pc, #312]	; (8004b58 <monta_teste+0x210>)
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	4b4d      	ldr	r3, [pc, #308]	; (8004b58 <monta_teste+0x210>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d9e9      	bls.n	80049fe <monta_teste+0xb6>
    }

    DATA_4[0] = read_eeprom(ADD_GW1);
 8004a2a:	2005      	movs	r0, #5
 8004a2c:	f7fe fb68 	bl	8003100 <read_eeprom>
 8004a30:	0003      	movs	r3, r0
 8004a32:	001a      	movs	r2, r3
 8004a34:	2464      	movs	r4, #100	; 0x64
 8004a36:	193b      	adds	r3, r7, r4
 8004a38:	701a      	strb	r2, [r3, #0]
    DATA_4[1] = read_eeprom(ADD_GW2);
 8004a3a:	2006      	movs	r0, #6
 8004a3c:	f7fe fb60 	bl	8003100 <read_eeprom>
 8004a40:	0003      	movs	r3, r0
 8004a42:	001a      	movs	r2, r3
 8004a44:	193b      	adds	r3, r7, r4
 8004a46:	705a      	strb	r2, [r3, #1]
    DATA_4[2] = read_eeprom(ADD_GW3);
 8004a48:	2007      	movs	r0, #7
 8004a4a:	f7fe fb59 	bl	8003100 <read_eeprom>
 8004a4e:	0003      	movs	r3, r0
 8004a50:	001a      	movs	r2, r3
 8004a52:	193b      	adds	r3, r7, r4
 8004a54:	709a      	strb	r2, [r3, #2]
    DATA_4[3] = read_eeprom(ADD_GW4);
 8004a56:	2008      	movs	r0, #8
 8004a58:	f7fe fb52 	bl	8003100 <read_eeprom>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	001a      	movs	r2, r3
 8004a60:	193b      	adds	r3, r7, r4
 8004a62:	70da      	strb	r2, [r3, #3]

	for (x=0; x<4; x++){
 8004a64:	4b3c      	ldr	r3, [pc, #240]	; (8004b58 <monta_teste+0x210>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	e011      	b.n	8004a90 <monta_teste+0x148>
    	concathex2(mensage, DATA_4[x]);
 8004a6c:	4b3a      	ldr	r3, [pc, #232]	; (8004b58 <monta_teste+0x210>)
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	001a      	movs	r2, r3
 8004a72:	2364      	movs	r3, #100	; 0x64
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	5c9a      	ldrb	r2, [r3, r2]
 8004a78:	23a8      	movs	r3, #168	; 0xa8
 8004a7a:	18fb      	adds	r3, r7, r3
 8004a7c:	0011      	movs	r1, r2
 8004a7e:	0018      	movs	r0, r3
 8004a80:	f7fe fbfc 	bl	800327c <concathex2>
	for (x=0; x<4; x++){
 8004a84:	4b34      	ldr	r3, [pc, #208]	; (8004b58 <monta_teste+0x210>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	4b32      	ldr	r3, [pc, #200]	; (8004b58 <monta_teste+0x210>)
 8004a8e:	701a      	strb	r2, [r3, #0]
 8004a90:	4b31      	ldr	r3, [pc, #196]	; (8004b58 <monta_teste+0x210>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d9e9      	bls.n	8004a6c <monta_teste+0x124>
    }

	vl1 = read_eeprom(ADD_PORTL1);
 8004a98:	200d      	movs	r0, #13
 8004a9a:	f7fe fb31 	bl	8003100 <read_eeprom>
 8004a9e:	0003      	movs	r3, r0
 8004aa0:	24e8      	movs	r4, #232	; 0xe8
 8004aa2:	193a      	adds	r2, r7, r4
 8004aa4:	6013      	str	r3, [r2, #0]
	vl2 = read_eeprom(ADD_PORTL2);
 8004aa6:	200f      	movs	r0, #15
 8004aa8:	f7fe fb2a 	bl	8003100 <read_eeprom>
 8004aac:	0003      	movs	r3, r0
 8004aae:	22e4      	movs	r2, #228	; 0xe4
 8004ab0:	18b9      	adds	r1, r7, r2
 8004ab2:	600b      	str	r3, [r1, #0]
	DATA_2 = (vl1 * 256) + vl2;
 8004ab4:	193b      	adds	r3, r7, r4
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	18ba      	adds	r2, r7, r2
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	18d3      	adds	r3, r2, r3
 8004ac0:	22ec      	movs	r2, #236	; 0xec
 8004ac2:	18b9      	adds	r1, r7, r2
 8004ac4:	600b      	str	r3, [r1, #0]
	concathex4(mensage, DATA_2);
 8004ac6:	18bb      	adds	r3, r7, r2
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	24a8      	movs	r4, #168	; 0xa8
 8004ace:	193b      	adds	r3, r7, r4
 8004ad0:	0011      	movs	r1, r2
 8004ad2:	0018      	movs	r0, r3
 8004ad4:	f7fe fc00 	bl	80032d8 <concathex4>

    strcpy(mensagecp, mensage);
 8004ad8:	193a      	adds	r2, r7, r4
 8004ada:	256c      	movs	r5, #108	; 0x6c
 8004adc:	197b      	adds	r3, r7, r5
 8004ade:	0011      	movs	r1, r2
 8004ae0:	0018      	movs	r0, r3
 8004ae2:	f00d f8ea 	bl	8011cba <strcpy>
	docrc(crc, mensagecp, strlen(mensagecp));
 8004ae6:	197b      	adds	r3, r7, r5
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7fb fb13 	bl	8000114 <strlen>
 8004aee:	0003      	movs	r3, r0
 8004af0:	001a      	movs	r2, r3
 8004af2:	1979      	adds	r1, r7, r5
 8004af4:	2568      	movs	r5, #104	; 0x68
 8004af6:	197b      	adds	r3, r7, r5
 8004af8:	0018      	movs	r0, r3
 8004afa:	f7fe fb61 	bl	80031c0 <docrc>

	char pacotePronto[100] = "";
 8004afe:	003b      	movs	r3, r7
 8004b00:	2200      	movs	r2, #0
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	3304      	adds	r3, #4
 8004b06:	2260      	movs	r2, #96	; 0x60
 8004b08:	2100      	movs	r1, #0
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	f00c f98f 	bl	8010e2e <memset>
	sprintf(pacotePronto, "$%s%s#", mensage, crc);
 8004b10:	197b      	adds	r3, r7, r5
 8004b12:	193a      	adds	r2, r7, r4
 8004b14:	4911      	ldr	r1, [pc, #68]	; (8004b5c <monta_teste+0x214>)
 8004b16:	0038      	movs	r0, r7
 8004b18:	f00d f8a2 	bl	8011c60 <siprintf>
	sendto(1,pacotePronto,strlen(pacotePronto),ip_R,9292);
 8004b1c:	003b      	movs	r3, r7
 8004b1e:	0018      	movs	r0, r3
 8004b20:	f7fb faf8 	bl	8000114 <strlen>
 8004b24:	0003      	movs	r3, r0
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <monta_teste+0x218>)
 8004b2a:	0039      	movs	r1, r7
 8004b2c:	480d      	ldr	r0, [pc, #52]	; (8004b64 <monta_teste+0x21c>)
 8004b2e:	9000      	str	r0, [sp, #0]
 8004b30:	2001      	movs	r0, #1
 8004b32:	f002 fc1f 	bl	8007374 <sendto>
	modo_prog = 0;
 8004b36:	4b03      	ldr	r3, [pc, #12]	; (8004b44 <monta_teste+0x1fc>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	701a      	strb	r2, [r3, #0]


}
 8004b3c:	46c0      	nop			; (mov r8, r8)
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b03c      	add	sp, #240	; 0xf0
 8004b42:	bdb0      	pop	{r4, r5, r7, pc}
 8004b44:	20000806 	.word	0x20000806
 8004b48:	0000270f 	.word	0x0000270f
 8004b4c:	200000d2 	.word	0x200000d2
 8004b50:	2000012c 	.word	0x2000012c
 8004b54:	20000130 	.word	0x20000130
 8004b58:	200007d1 	.word	0x200007d1
 8004b5c:	08015a98 	.word	0x08015a98
 8004b60:	200000f0 	.word	0x200000f0
 8004b64:	0000244c 	.word	0x0000244c

08004b68 <tratapergunta>:

//***********************************************************************************************
//         Verifica mensagem recebida
//***********************************************************************************************
void tratapergunta(uint8_t * buf){
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
	if(!strcmp(buf, "?")){
 8004b70:	4a1a      	ldr	r2, [pc, #104]	; (8004bdc <tratapergunta+0x74>)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	0011      	movs	r1, r2
 8004b76:	0018      	movs	r0, r3
 8004b78:	f7fb fac2 	bl	8000100 <strcmp>
 8004b7c:	1e03      	subs	r3, r0, #0
 8004b7e:	d101      	bne.n	8004b84 <tratapergunta+0x1c>
		monta_status();
 8004b80:	f7ff fb0e 	bl	80041a0 <monta_status>
	}
	if(!strcmp(buf, "?L")){
 8004b84:	4a16      	ldr	r2, [pc, #88]	; (8004be0 <tratapergunta+0x78>)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	0011      	movs	r1, r2
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f7fb fab8 	bl	8000100 <strcmp>
 8004b90:	1e03      	subs	r3, r0, #0
 8004b92:	d101      	bne.n	8004b98 <tratapergunta+0x30>
		monta_ipL();
 8004b94:	f7ff fba4 	bl	80042e0 <monta_ipL>
	}
	if(!strcmp(buf, "?S")){
 8004b98:	4a12      	ldr	r2, [pc, #72]	; (8004be4 <tratapergunta+0x7c>)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	0011      	movs	r1, r2
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	f7fb faae 	bl	8000100 <strcmp>
 8004ba4:	1e03      	subs	r3, r0, #0
 8004ba6:	d101      	bne.n	8004bac <tratapergunta+0x44>
		monta_ipS();
 8004ba8:	f7ff fcd4 	bl	8004554 <monta_ipS>
	}
	if(!strcmp(buf, "?I")){
 8004bac:	4a0e      	ldr	r2, [pc, #56]	; (8004be8 <tratapergunta+0x80>)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	0011      	movs	r1, r2
 8004bb2:	0018      	movs	r0, r3
 8004bb4:	f7fb faa4 	bl	8000100 <strcmp>
 8004bb8:	1e03      	subs	r3, r0, #0
 8004bba:	d101      	bne.n	8004bc0 <tratapergunta+0x58>
		monta_info();
 8004bbc:	f7ff fe92 	bl	80048e4 <monta_info>
	}
	if(!strcmp(buf, "?T")){
 8004bc0:	4a0a      	ldr	r2, [pc, #40]	; (8004bec <tratapergunta+0x84>)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	0011      	movs	r1, r2
 8004bc6:	0018      	movs	r0, r3
 8004bc8:	f7fb fa9a 	bl	8000100 <strcmp>
 8004bcc:	1e03      	subs	r3, r0, #0
 8004bce:	d101      	bne.n	8004bd4 <tratapergunta+0x6c>
		monta_teste();
 8004bd0:	f7ff feba 	bl	8004948 <monta_teste>
	}

}
 8004bd4:	46c0      	nop			; (mov r8, r8)
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b002      	add	sp, #8
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	08015c2c 	.word	0x08015c2c
 8004be0:	08015c30 	.word	0x08015c30
 8004be4:	08015c34 	.word	0x08015c34
 8004be8:	08015c38 	.word	0x08015c38
 8004bec:	08015c3c 	.word	0x08015c3c

08004bf0 <trataconfig>:

void trataconfig(char * buf, int len){
 8004bf0:	b590      	push	{r4, r7, lr}
 8004bf2:	b08b      	sub	sp, #44	; 0x2c
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
	int tam = len-2;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	3b02      	subs	r3, #2
 8004bfe:	613b      	str	r3, [r7, #16]
	int i = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61fb      	str	r3, [r7, #28]
	int a = 0;
 8004c04:	2300      	movs	r3, #0
 8004c06:	61bb      	str	r3, [r7, #24]

	uint8_t DATA_4[4]={255,255,255,255};
 8004c08:	2308      	movs	r3, #8
 8004c0a:	18fb      	adds	r3, r7, r3
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	4252      	negs	r2, r2
 8004c10:	601a      	str	r2, [r3, #0]
	uint16_t DATA_2 = 9999;
 8004c12:	230e      	movs	r3, #14
 8004c14:	18fb      	adds	r3, r7, r3
 8004c16:	4ad3      	ldr	r2, [pc, #844]	; (8004f64 <trataconfig+0x374>)
 8004c18:	801a      	strh	r2, [r3, #0]
	//sendto(1,buf,strlen(buf),ip_s,port_s);

	switch(buf[0]){
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	2b4c      	cmp	r3, #76	; 0x4c
 8004c20:	d003      	beq.n	8004c2a <trataconfig+0x3a>
 8004c22:	2b53      	cmp	r3, #83	; 0x53
 8004c24:	d100      	bne.n	8004c28 <trataconfig+0x38>
 8004c26:	e158      	b.n	8004eda <trataconfig+0x2ea>
 8004c28:	e317      	b.n	800525a <trataconfig+0x66a>
	case 'L':
		if(tam != 37){
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b25      	cmp	r3, #37	; 0x25
 8004c2e:	d000      	beq.n	8004c32 <trataconfig+0x42>
 8004c30:	e31e      	b.n	8005270 <trataconfig+0x680>
			return;
		}
		//ip
		i = 1;
 8004c32:	2301      	movs	r3, #1
 8004c34:	61fb      	str	r3, [r7, #28]
		a = 2;
 8004c36:	2302      	movs	r3, #2
 8004c38:	61bb      	str	r3, [r7, #24]
		for(x=0; x<4; x++){
 8004c3a:	4bcb      	ldr	r3, [pc, #812]	; (8004f68 <trataconfig+0x378>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]
 8004c40:	e020      	b.n	8004c84 <trataconfig+0x94>
			DATA_4[x] = hextochar('0', '0', buf[i], buf[a]);
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	18d3      	adds	r3, r2, r3
 8004c48:	7819      	ldrb	r1, [r3, #0]
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	18d3      	adds	r3, r2, r3
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	000a      	movs	r2, r1
 8004c54:	2130      	movs	r1, #48	; 0x30
 8004c56:	2030      	movs	r0, #48	; 0x30
 8004c58:	f7fe fb96 	bl	8003388 <hextochar>
 8004c5c:	0001      	movs	r1, r0
 8004c5e:	4bc2      	ldr	r3, [pc, #776]	; (8004f68 <trataconfig+0x378>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	001a      	movs	r2, r3
 8004c64:	b2c9      	uxtb	r1, r1
 8004c66:	2308      	movs	r3, #8
 8004c68:	18fb      	adds	r3, r7, r3
 8004c6a:	5499      	strb	r1, [r3, r2]
			i = i+2;
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	3302      	adds	r3, #2
 8004c70:	61fb      	str	r3, [r7, #28]
			a = a+2;
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	3302      	adds	r3, #2
 8004c76:	61bb      	str	r3, [r7, #24]
		for(x=0; x<4; x++){
 8004c78:	4bbb      	ldr	r3, [pc, #748]	; (8004f68 <trataconfig+0x378>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	b2da      	uxtb	r2, r3
 8004c80:	4bb9      	ldr	r3, [pc, #740]	; (8004f68 <trataconfig+0x378>)
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	4bb8      	ldr	r3, [pc, #736]	; (8004f68 <trataconfig+0x378>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d9da      	bls.n	8004c42 <trataconfig+0x52>
		}
		write_eeprom(ADD_IPL1,DATA_4[0]);
 8004c8c:	2408      	movs	r4, #8
 8004c8e:	193b      	adds	r3, r7, r4
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	0019      	movs	r1, r3
 8004c94:	2001      	movs	r0, #1
 8004c96:	f7fe fa13 	bl	80030c0 <write_eeprom>
		write_eeprom(ADD_IPL2,DATA_4[1]);
 8004c9a:	193b      	adds	r3, r7, r4
 8004c9c:	785b      	ldrb	r3, [r3, #1]
 8004c9e:	0019      	movs	r1, r3
 8004ca0:	2002      	movs	r0, #2
 8004ca2:	f7fe fa0d 	bl	80030c0 <write_eeprom>
		write_eeprom(ADD_IPL3,DATA_4[2]);
 8004ca6:	193b      	adds	r3, r7, r4
 8004ca8:	789b      	ldrb	r3, [r3, #2]
 8004caa:	0019      	movs	r1, r3
 8004cac:	2003      	movs	r0, #3
 8004cae:	f7fe fa07 	bl	80030c0 <write_eeprom>
		write_eeprom(ADD_IPL4,DATA_4[3]);
 8004cb2:	193b      	adds	r3, r7, r4
 8004cb4:	78db      	ldrb	r3, [r3, #3]
 8004cb6:	0019      	movs	r1, r3
 8004cb8:	2004      	movs	r0, #4
 8004cba:	f7fe fa01 	bl	80030c0 <write_eeprom>
		//gateway
		i = 9;
 8004cbe:	2309      	movs	r3, #9
 8004cc0:	61fb      	str	r3, [r7, #28]
		a = 10;
 8004cc2:	230a      	movs	r3, #10
 8004cc4:	61bb      	str	r3, [r7, #24]
		for(x=0; x<4; x++){
 8004cc6:	4ba8      	ldr	r3, [pc, #672]	; (8004f68 <trataconfig+0x378>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	701a      	strb	r2, [r3, #0]
 8004ccc:	e020      	b.n	8004d10 <trataconfig+0x120>
			DATA_4[x] = hextochar('0', '0', buf[i], buf[a]);
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	687a      	ldr	r2, [r7, #4]
 8004cd2:	18d3      	adds	r3, r2, r3
 8004cd4:	7819      	ldrb	r1, [r3, #0]
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	18d3      	adds	r3, r2, r3
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	000a      	movs	r2, r1
 8004ce0:	2130      	movs	r1, #48	; 0x30
 8004ce2:	2030      	movs	r0, #48	; 0x30
 8004ce4:	f7fe fb50 	bl	8003388 <hextochar>
 8004ce8:	0001      	movs	r1, r0
 8004cea:	4b9f      	ldr	r3, [pc, #636]	; (8004f68 <trataconfig+0x378>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	001a      	movs	r2, r3
 8004cf0:	b2c9      	uxtb	r1, r1
 8004cf2:	2308      	movs	r3, #8
 8004cf4:	18fb      	adds	r3, r7, r3
 8004cf6:	5499      	strb	r1, [r3, r2]
			i = i+2;
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	3302      	adds	r3, #2
 8004cfc:	61fb      	str	r3, [r7, #28]
			a = a+2;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	3302      	adds	r3, #2
 8004d02:	61bb      	str	r3, [r7, #24]
		for(x=0; x<4; x++){
 8004d04:	4b98      	ldr	r3, [pc, #608]	; (8004f68 <trataconfig+0x378>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	3301      	adds	r3, #1
 8004d0a:	b2da      	uxtb	r2, r3
 8004d0c:	4b96      	ldr	r3, [pc, #600]	; (8004f68 <trataconfig+0x378>)
 8004d0e:	701a      	strb	r2, [r3, #0]
 8004d10:	4b95      	ldr	r3, [pc, #596]	; (8004f68 <trataconfig+0x378>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2b03      	cmp	r3, #3
 8004d16:	d9da      	bls.n	8004cce <trataconfig+0xde>
		}
		write_eeprom(ADD_GW1,DATA_4[0]);
 8004d18:	2408      	movs	r4, #8
 8004d1a:	193b      	adds	r3, r7, r4
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	0019      	movs	r1, r3
 8004d20:	2005      	movs	r0, #5
 8004d22:	f7fe f9cd 	bl	80030c0 <write_eeprom>
		write_eeprom(ADD_GW2,DATA_4[1]);
 8004d26:	193b      	adds	r3, r7, r4
 8004d28:	785b      	ldrb	r3, [r3, #1]
 8004d2a:	0019      	movs	r1, r3
 8004d2c:	2006      	movs	r0, #6
 8004d2e:	f7fe f9c7 	bl	80030c0 <write_eeprom>
		write_eeprom(ADD_GW3,DATA_4[2]);
 8004d32:	193b      	adds	r3, r7, r4
 8004d34:	789b      	ldrb	r3, [r3, #2]
 8004d36:	0019      	movs	r1, r3
 8004d38:	2007      	movs	r0, #7
 8004d3a:	f7fe f9c1 	bl	80030c0 <write_eeprom>
		write_eeprom(ADD_GW4,DATA_4[3]);
 8004d3e:	193b      	adds	r3, r7, r4
 8004d40:	78db      	ldrb	r3, [r3, #3]
 8004d42:	0019      	movs	r1, r3
 8004d44:	2008      	movs	r0, #8
 8004d46:	f7fe f9bb 	bl	80030c0 <write_eeprom>
		//netmask
		i = 17;
 8004d4a:	2311      	movs	r3, #17
 8004d4c:	61fb      	str	r3, [r7, #28]
		a = 18;
 8004d4e:	2312      	movs	r3, #18
 8004d50:	61bb      	str	r3, [r7, #24]
		for(x=0; x<4; x++){
 8004d52:	4b85      	ldr	r3, [pc, #532]	; (8004f68 <trataconfig+0x378>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	e020      	b.n	8004d9c <trataconfig+0x1ac>
			DATA_4[x] = hextochar('0', '0', buf[i], buf[a]);
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	18d3      	adds	r3, r2, r3
 8004d60:	7819      	ldrb	r1, [r3, #0]
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	18d3      	adds	r3, r2, r3
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	000a      	movs	r2, r1
 8004d6c:	2130      	movs	r1, #48	; 0x30
 8004d6e:	2030      	movs	r0, #48	; 0x30
 8004d70:	f7fe fb0a 	bl	8003388 <hextochar>
 8004d74:	0001      	movs	r1, r0
 8004d76:	4b7c      	ldr	r3, [pc, #496]	; (8004f68 <trataconfig+0x378>)
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	001a      	movs	r2, r3
 8004d7c:	b2c9      	uxtb	r1, r1
 8004d7e:	2308      	movs	r3, #8
 8004d80:	18fb      	adds	r3, r7, r3
 8004d82:	5499      	strb	r1, [r3, r2]
			i = i+2;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	3302      	adds	r3, #2
 8004d88:	61fb      	str	r3, [r7, #28]
			a = a+2;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	3302      	adds	r3, #2
 8004d8e:	61bb      	str	r3, [r7, #24]
		for(x=0; x<4; x++){
 8004d90:	4b75      	ldr	r3, [pc, #468]	; (8004f68 <trataconfig+0x378>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	3301      	adds	r3, #1
 8004d96:	b2da      	uxtb	r2, r3
 8004d98:	4b73      	ldr	r3, [pc, #460]	; (8004f68 <trataconfig+0x378>)
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	4b72      	ldr	r3, [pc, #456]	; (8004f68 <trataconfig+0x378>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d9da      	bls.n	8004d5a <trataconfig+0x16a>
		}
		write_eeprom(ADD_MK1,DATA_4[0]);
 8004da4:	2408      	movs	r4, #8
 8004da6:	193b      	adds	r3, r7, r4
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	0019      	movs	r1, r3
 8004dac:	2009      	movs	r0, #9
 8004dae:	f7fe f987 	bl	80030c0 <write_eeprom>
		write_eeprom(ADD_MK2,DATA_4[1]);
 8004db2:	193b      	adds	r3, r7, r4
 8004db4:	785b      	ldrb	r3, [r3, #1]
 8004db6:	0019      	movs	r1, r3
 8004db8:	200a      	movs	r0, #10
 8004dba:	f7fe f981 	bl	80030c0 <write_eeprom>
		write_eeprom(ADD_MK3,DATA_4[2]);
 8004dbe:	193b      	adds	r3, r7, r4
 8004dc0:	789b      	ldrb	r3, [r3, #2]
 8004dc2:	0019      	movs	r1, r3
 8004dc4:	200b      	movs	r0, #11
 8004dc6:	f7fe f97b 	bl	80030c0 <write_eeprom>
		write_eeprom(ADD_MK4,DATA_4[3]);
 8004dca:	193b      	adds	r3, r7, r4
 8004dcc:	78db      	ldrb	r3, [r3, #3]
 8004dce:	0019      	movs	r1, r3
 8004dd0:	200c      	movs	r0, #12
 8004dd2:	f7fe f975 	bl	80030c0 <write_eeprom>
		//port
		DATA_2 = hextochar(buf[25], buf[26], buf[27], buf[28]);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	3319      	adds	r3, #25
 8004dda:	7818      	ldrb	r0, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	331a      	adds	r3, #26
 8004de0:	7819      	ldrb	r1, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	331b      	adds	r3, #27
 8004de6:	781a      	ldrb	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	331c      	adds	r3, #28
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	f7fe facb 	bl	8003388 <hextochar>
 8004df2:	0002      	movs	r2, r0
 8004df4:	240e      	movs	r4, #14
 8004df6:	193b      	adds	r3, r7, r4
 8004df8:	801a      	strh	r2, [r3, #0]
		write_eeprom(ADD_PORTL1, DATA_2/256);
 8004dfa:	193b      	adds	r3, r7, r4
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	0a1b      	lsrs	r3, r3, #8
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	0019      	movs	r1, r3
 8004e06:	200d      	movs	r0, #13
 8004e08:	f7fe f95a 	bl	80030c0 <write_eeprom>
		write_eeprom(ADD_PORTL2, DATA_2%256);
 8004e0c:	193b      	adds	r3, r7, r4
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	0019      	movs	r1, r3
 8004e14:	200f      	movs	r0, #15
 8004e16:	f7fe f953 	bl	80030c0 <write_eeprom>
		//idt
		DATA_2 = hextochar(buf[29], buf[30], buf[31], buf[32]);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	331d      	adds	r3, #29
 8004e1e:	7818      	ldrb	r0, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	331e      	adds	r3, #30
 8004e24:	7819      	ldrb	r1, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	331f      	adds	r3, #31
 8004e2a:	781a      	ldrb	r2, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3320      	adds	r3, #32
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	f7fe faa9 	bl	8003388 <hextochar>
 8004e36:	0002      	movs	r2, r0
 8004e38:	193b      	adds	r3, r7, r4
 8004e3a:	801a      	strh	r2, [r3, #0]
		write_eeprom(ADD_IDT1, DATA_2/256);
 8004e3c:	193b      	adds	r3, r7, r4
 8004e3e:	881b      	ldrh	r3, [r3, #0]
 8004e40:	0a1b      	lsrs	r3, r3, #8
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	0019      	movs	r1, r3
 8004e48:	2010      	movs	r0, #16
 8004e4a:	f7fe f939 	bl	80030c0 <write_eeprom>
		write_eeprom(ADD_IDT2, DATA_2%256);
 8004e4e:	193b      	adds	r3, r7, r4
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	0019      	movs	r1, r3
 8004e56:	2011      	movs	r0, #17
 8004e58:	f7fe f932 	bl	80030c0 <write_eeprom>
		//key
		DATA_2 = hextochar(buf[33], buf[34], buf[35], buf[36]);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3321      	adds	r3, #33	; 0x21
 8004e60:	7818      	ldrb	r0, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3322      	adds	r3, #34	; 0x22
 8004e66:	7819      	ldrb	r1, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3323      	adds	r3, #35	; 0x23
 8004e6c:	781a      	ldrb	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	3324      	adds	r3, #36	; 0x24
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	f7fe fa88 	bl	8003388 <hextochar>
 8004e78:	0002      	movs	r2, r0
 8004e7a:	193b      	adds	r3, r7, r4
 8004e7c:	801a      	strh	r2, [r3, #0]
		write_eeprom(ADD_KEY1, DATA_2/256);
 8004e7e:	193b      	adds	r3, r7, r4
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	0019      	movs	r1, r3
 8004e8a:	2012      	movs	r0, #18
 8004e8c:	f7fe f918 	bl	80030c0 <write_eeprom>
		write_eeprom(ADD_KEY2, DATA_2%256);
 8004e90:	193b      	adds	r3, r7, r4
 8004e92:	881b      	ldrh	r3, [r3, #0]
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	0019      	movs	r1, r3
 8004e98:	2013      	movs	r0, #19
 8004e9a:	f7fe f911 	bl	80030c0 <write_eeprom>

	    ledvd_on;
 8004e9e:	4b33      	ldr	r3, [pc, #204]	; (8004f6c <trataconfig+0x37c>)
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	2110      	movs	r1, #16
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f006 fc82 	bl	800b7ae <HAL_GPIO_WritePin>
		ledvm_off;
 8004eaa:	4b30      	ldr	r3, [pc, #192]	; (8004f6c <trataconfig+0x37c>)
 8004eac:	2201      	movs	r2, #1
 8004eae:	2108      	movs	r1, #8
 8004eb0:	0018      	movs	r0, r3
 8004eb2:	f006 fc7c 	bl	800b7ae <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8004eb6:	23fa      	movs	r3, #250	; 0xfa
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	0018      	movs	r0, r3
 8004ebc:	f004 fd34 	bl	8009928 <HAL_Delay>
		ledvd_off;
 8004ec0:	4b2a      	ldr	r3, [pc, #168]	; (8004f6c <trataconfig+0x37c>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2110      	movs	r1, #16
 8004ec6:	0018      	movs	r0, r3
 8004ec8:	f006 fc71 	bl	800b7ae <HAL_GPIO_WritePin>
		ledvm_off;
 8004ecc:	4b27      	ldr	r3, [pc, #156]	; (8004f6c <trataconfig+0x37c>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	2108      	movs	r1, #8
 8004ed2:	0018      	movs	r0, r3
 8004ed4:	f006 fc6b 	bl	800b7ae <HAL_GPIO_WritePin>

	break;
 8004ed8:	e1cd      	b.n	8005276 <trataconfig+0x686>
	case 'S':
		if (buf[1] == 'D'){
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3301      	adds	r3, #1
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b44      	cmp	r3, #68	; 0x44
 8004ee2:	d000      	beq.n	8004ee6 <trataconfig+0x2f6>
 8004ee4:	e0cc      	b.n	8005080 <trataconfig+0x490>
			//TIMEOUT
			DATA_2 = hextochar('0', '0', buf[2], buf[3]);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3302      	adds	r3, #2
 8004eea:	781a      	ldrb	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3303      	adds	r3, #3
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2130      	movs	r1, #48	; 0x30
 8004ef4:	2030      	movs	r0, #48	; 0x30
 8004ef6:	f7fe fa47 	bl	8003388 <hextochar>
 8004efa:	0002      	movs	r2, r0
 8004efc:	240e      	movs	r4, #14
 8004efe:	193b      	adds	r3, r7, r4
 8004f00:	801a      	strh	r2, [r3, #0]
			write_eeprom(ADD_TIMEOUT, DATA_2);
 8004f02:	193b      	adds	r3, r7, r4
 8004f04:	881b      	ldrh	r3, [r3, #0]
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	0019      	movs	r1, r3
 8004f0a:	203d      	movs	r0, #61	; 0x3d
 8004f0c:	f7fe f8d8 	bl	80030c0 <write_eeprom>

			//port
			DATA_2 = hextochar(buf[4], buf[5], buf[6], buf[7]);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3304      	adds	r3, #4
 8004f14:	7818      	ldrb	r0, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	3305      	adds	r3, #5
 8004f1a:	7819      	ldrb	r1, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3306      	adds	r3, #6
 8004f20:	781a      	ldrb	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	3307      	adds	r3, #7
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	f7fe fa2e 	bl	8003388 <hextochar>
 8004f2c:	0002      	movs	r2, r0
 8004f2e:	193b      	adds	r3, r7, r4
 8004f30:	801a      	strh	r2, [r3, #0]
			write_eeprom(ADD_PORTS1, DATA_2/256);
 8004f32:	193b      	adds	r3, r7, r4
 8004f34:	881b      	ldrh	r3, [r3, #0]
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	201c      	movs	r0, #28
 8004f40:	f7fe f8be 	bl	80030c0 <write_eeprom>
			write_eeprom(ADD_PORTS2, DATA_2%256);
 8004f44:	193b      	adds	r3, r7, r4
 8004f46:	881b      	ldrh	r3, [r3, #0]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	0019      	movs	r1, r3
 8004f4c:	201d      	movs	r0, #29
 8004f4e:	f7fe f8b7 	bl	80030c0 <write_eeprom>
			//DNS SERVER
			i = 8;
 8004f52:	2308      	movs	r3, #8
 8004f54:	61fb      	str	r3, [r7, #28]
			a = 9;
 8004f56:	2309      	movs	r3, #9
 8004f58:	61bb      	str	r3, [r7, #24]
			for(x=0; x<4; x++){
 8004f5a:	4b03      	ldr	r3, [pc, #12]	; (8004f68 <trataconfig+0x378>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	701a      	strb	r2, [r3, #0]
 8004f60:	e027      	b.n	8004fb2 <trataconfig+0x3c2>
 8004f62:	46c0      	nop			; (mov r8, r8)
 8004f64:	0000270f 	.word	0x0000270f
 8004f68:	200007d1 	.word	0x200007d1
 8004f6c:	50000400 	.word	0x50000400
				DATA_4[x] = hextochar('0', '0', buf[i], buf[a]);
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	18d3      	adds	r3, r2, r3
 8004f76:	7819      	ldrb	r1, [r3, #0]
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	18d3      	adds	r3, r2, r3
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	000a      	movs	r2, r1
 8004f82:	2130      	movs	r1, #48	; 0x30
 8004f84:	2030      	movs	r0, #48	; 0x30
 8004f86:	f7fe f9ff 	bl	8003388 <hextochar>
 8004f8a:	0001      	movs	r1, r0
 8004f8c:	4bbb      	ldr	r3, [pc, #748]	; (800527c <trataconfig+0x68c>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	001a      	movs	r2, r3
 8004f92:	b2c9      	uxtb	r1, r1
 8004f94:	2308      	movs	r3, #8
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	5499      	strb	r1, [r3, r2]
				i = i+2;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	3302      	adds	r3, #2
 8004f9e:	61fb      	str	r3, [r7, #28]
				a = a+2;
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	3302      	adds	r3, #2
 8004fa4:	61bb      	str	r3, [r7, #24]
			for(x=0; x<4; x++){
 8004fa6:	4bb5      	ldr	r3, [pc, #724]	; (800527c <trataconfig+0x68c>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	3301      	adds	r3, #1
 8004fac:	b2da      	uxtb	r2, r3
 8004fae:	4bb3      	ldr	r3, [pc, #716]	; (800527c <trataconfig+0x68c>)
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	4bb2      	ldr	r3, [pc, #712]	; (800527c <trataconfig+0x68c>)
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d9da      	bls.n	8004f70 <trataconfig+0x380>
			}
			write_eeprom(ADD_DNS1,DATA_4[0]);
 8004fba:	2408      	movs	r4, #8
 8004fbc:	193b      	adds	r3, r7, r4
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	0019      	movs	r1, r3
 8004fc2:	2018      	movs	r0, #24
 8004fc4:	f7fe f87c 	bl	80030c0 <write_eeprom>
			write_eeprom(ADD_DNS2,DATA_4[1]);
 8004fc8:	193b      	adds	r3, r7, r4
 8004fca:	785b      	ldrb	r3, [r3, #1]
 8004fcc:	0019      	movs	r1, r3
 8004fce:	2019      	movs	r0, #25
 8004fd0:	f7fe f876 	bl	80030c0 <write_eeprom>
			write_eeprom(ADD_DNS3,DATA_4[2]);
 8004fd4:	193b      	adds	r3, r7, r4
 8004fd6:	789b      	ldrb	r3, [r3, #2]
 8004fd8:	0019      	movs	r1, r3
 8004fda:	201a      	movs	r0, #26
 8004fdc:	f7fe f870 	bl	80030c0 <write_eeprom>
			write_eeprom(ADD_DNS4,DATA_4[3]);
 8004fe0:	193b      	adds	r3, r7, r4
 8004fe2:	78db      	ldrb	r3, [r3, #3]
 8004fe4:	0019      	movs	r1, r3
 8004fe6:	201b      	movs	r0, #27
 8004fe8:	f7fe f86a 	bl	80030c0 <write_eeprom>
			//DOMINIO
			int j;
			i = 0;
 8004fec:	2300      	movs	r3, #0
 8004fee:	61fb      	str	r3, [r7, #28]
			for(j=16; j<tam; j++){
 8004ff0:	2310      	movs	r3, #16
 8004ff2:	617b      	str	r3, [r7, #20]
 8004ff4:	e011      	b.n	800501a <trataconfig+0x42a>
				write_eeprom(adominio[i],buf[j]);
 8004ff6:	4aa2      	ldr	r2, [pc, #648]	; (8005280 <trataconfig+0x690>)
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	18d3      	adds	r3, r2, r3
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	b298      	uxth	r0, r3
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	18d3      	adds	r3, r2, r3
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	0019      	movs	r1, r3
 800500a:	f7fe f859 	bl	80030c0 <write_eeprom>
				i++;
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	3301      	adds	r3, #1
 8005012:	61fb      	str	r3, [r7, #28]
			for(j=16; j<tam; j++){
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	3301      	adds	r3, #1
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	429a      	cmp	r2, r3
 8005020:	dbe9      	blt.n	8004ff6 <trataconfig+0x406>
			}
			tam_dominio = i;
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	b2da      	uxtb	r2, r3
 8005026:	4b97      	ldr	r3, [pc, #604]	; (8005284 <trataconfig+0x694>)
 8005028:	701a      	strb	r2, [r3, #0]
			write_eeprom(ADD_TDOM, tam_dominio);
 800502a:	4b96      	ldr	r3, [pc, #600]	; (8005284 <trataconfig+0x694>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	0019      	movs	r1, r3
 8005030:	203b      	movs	r0, #59	; 0x3b
 8005032:	f7fe f845 	bl	80030c0 <write_eeprom>

			write_eeprom(ADD_ISD, 1);
 8005036:	2101      	movs	r1, #1
 8005038:	203c      	movs	r0, #60	; 0x3c
 800503a:	f7fe f841 	bl	80030c0 <write_eeprom>
			isdom = 1;
 800503e:	4b92      	ldr	r3, [pc, #584]	; (8005288 <trataconfig+0x698>)
 8005040:	2201      	movs	r2, #1
 8005042:	701a      	strb	r2, [r3, #0]

			ledvd_off;
 8005044:	4b91      	ldr	r3, [pc, #580]	; (800528c <trataconfig+0x69c>)
 8005046:	2200      	movs	r2, #0
 8005048:	2110      	movs	r1, #16
 800504a:	0018      	movs	r0, r3
 800504c:	f006 fbaf 	bl	800b7ae <HAL_GPIO_WritePin>
			ledvm_on;
 8005050:	4b8e      	ldr	r3, [pc, #568]	; (800528c <trataconfig+0x69c>)
 8005052:	2200      	movs	r2, #0
 8005054:	2108      	movs	r1, #8
 8005056:	0018      	movs	r0, r3
 8005058:	f006 fba9 	bl	800b7ae <HAL_GPIO_WritePin>
			HAL_Delay(500);
 800505c:	23fa      	movs	r3, #250	; 0xfa
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	0018      	movs	r0, r3
 8005062:	f004 fc61 	bl	8009928 <HAL_Delay>
			ledvd_off;
 8005066:	4b89      	ldr	r3, [pc, #548]	; (800528c <trataconfig+0x69c>)
 8005068:	2200      	movs	r2, #0
 800506a:	2110      	movs	r1, #16
 800506c:	0018      	movs	r0, r3
 800506e:	f006 fb9e 	bl	800b7ae <HAL_GPIO_WritePin>
			ledvm_off;
 8005072:	4b86      	ldr	r3, [pc, #536]	; (800528c <trataconfig+0x69c>)
 8005074:	2201      	movs	r2, #1
 8005076:	2108      	movs	r1, #8
 8005078:	0018      	movs	r0, r3
 800507a:	f006 fb98 	bl	800b7ae <HAL_GPIO_WritePin>
			HAL_Delay(500);
			ledvd_off;
			ledvm_off;
		}

	break;
 800507e:	e0f9      	b.n	8005274 <trataconfig+0x684>
		}else if (buf[1] == 'I'){
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	3301      	adds	r3, #1
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	2b49      	cmp	r3, #73	; 0x49
 8005088:	d000      	beq.n	800508c <trataconfig+0x49c>
 800508a:	e0f3      	b.n	8005274 <trataconfig+0x684>
			DATA_2 = hextochar('0', '0', buf[2], buf[3]);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3302      	adds	r3, #2
 8005090:	781a      	ldrb	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3303      	adds	r3, #3
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2130      	movs	r1, #48	; 0x30
 800509a:	2030      	movs	r0, #48	; 0x30
 800509c:	f7fe f974 	bl	8003388 <hextochar>
 80050a0:	0002      	movs	r2, r0
 80050a2:	240e      	movs	r4, #14
 80050a4:	193b      	adds	r3, r7, r4
 80050a6:	801a      	strh	r2, [r3, #0]
			write_eeprom(ADD_TIMEOUT, DATA_2);
 80050a8:	193b      	adds	r3, r7, r4
 80050aa:	881b      	ldrh	r3, [r3, #0]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	0019      	movs	r1, r3
 80050b0:	203d      	movs	r0, #61	; 0x3d
 80050b2:	f7fe f805 	bl	80030c0 <write_eeprom>
			DATA_2 = hextochar(buf[4], buf[5], buf[6], buf[7]);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3304      	adds	r3, #4
 80050ba:	7818      	ldrb	r0, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3305      	adds	r3, #5
 80050c0:	7819      	ldrb	r1, [r3, #0]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	3306      	adds	r3, #6
 80050c6:	781a      	ldrb	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3307      	adds	r3, #7
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	f7fe f95b 	bl	8003388 <hextochar>
 80050d2:	0002      	movs	r2, r0
 80050d4:	193b      	adds	r3, r7, r4
 80050d6:	801a      	strh	r2, [r3, #0]
			write_eeprom(ADD_PORTS1, DATA_2/256);
 80050d8:	193b      	adds	r3, r7, r4
 80050da:	881b      	ldrh	r3, [r3, #0]
 80050dc:	0a1b      	lsrs	r3, r3, #8
 80050de:	b29b      	uxth	r3, r3
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	0019      	movs	r1, r3
 80050e4:	201c      	movs	r0, #28
 80050e6:	f7fd ffeb 	bl	80030c0 <write_eeprom>
			write_eeprom(ADD_PORTS2, DATA_2%256);
 80050ea:	193b      	adds	r3, r7, r4
 80050ec:	881b      	ldrh	r3, [r3, #0]
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	0019      	movs	r1, r3
 80050f2:	201d      	movs	r0, #29
 80050f4:	f7fd ffe4 	bl	80030c0 <write_eeprom>
			i = 8;
 80050f8:	2308      	movs	r3, #8
 80050fa:	61fb      	str	r3, [r7, #28]
			a = 9;
 80050fc:	2309      	movs	r3, #9
 80050fe:	61bb      	str	r3, [r7, #24]
			for(x=0; x<4; x++){
 8005100:	4b5e      	ldr	r3, [pc, #376]	; (800527c <trataconfig+0x68c>)
 8005102:	2200      	movs	r2, #0
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	e020      	b.n	800514a <trataconfig+0x55a>
				DATA_4[x] = hextochar('0', '0', buf[i], buf[a]);
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	18d3      	adds	r3, r2, r3
 800510e:	7819      	ldrb	r1, [r3, #0]
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	18d3      	adds	r3, r2, r3
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	000a      	movs	r2, r1
 800511a:	2130      	movs	r1, #48	; 0x30
 800511c:	2030      	movs	r0, #48	; 0x30
 800511e:	f7fe f933 	bl	8003388 <hextochar>
 8005122:	0001      	movs	r1, r0
 8005124:	4b55      	ldr	r3, [pc, #340]	; (800527c <trataconfig+0x68c>)
 8005126:	781b      	ldrb	r3, [r3, #0]
 8005128:	001a      	movs	r2, r3
 800512a:	b2c9      	uxtb	r1, r1
 800512c:	2308      	movs	r3, #8
 800512e:	18fb      	adds	r3, r7, r3
 8005130:	5499      	strb	r1, [r3, r2]
				i = i+2;
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	3302      	adds	r3, #2
 8005136:	61fb      	str	r3, [r7, #28]
				a = a+2;
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	3302      	adds	r3, #2
 800513c:	61bb      	str	r3, [r7, #24]
			for(x=0; x<4; x++){
 800513e:	4b4f      	ldr	r3, [pc, #316]	; (800527c <trataconfig+0x68c>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	3301      	adds	r3, #1
 8005144:	b2da      	uxtb	r2, r3
 8005146:	4b4d      	ldr	r3, [pc, #308]	; (800527c <trataconfig+0x68c>)
 8005148:	701a      	strb	r2, [r3, #0]
 800514a:	4b4c      	ldr	r3, [pc, #304]	; (800527c <trataconfig+0x68c>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b03      	cmp	r3, #3
 8005150:	d9da      	bls.n	8005108 <trataconfig+0x518>
			write_eeprom(ADD_DNS1,DATA_4[0]);
 8005152:	2408      	movs	r4, #8
 8005154:	193b      	adds	r3, r7, r4
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	0019      	movs	r1, r3
 800515a:	2018      	movs	r0, #24
 800515c:	f7fd ffb0 	bl	80030c0 <write_eeprom>
			write_eeprom(ADD_DNS2,DATA_4[1]);
 8005160:	193b      	adds	r3, r7, r4
 8005162:	785b      	ldrb	r3, [r3, #1]
 8005164:	0019      	movs	r1, r3
 8005166:	2019      	movs	r0, #25
 8005168:	f7fd ffaa 	bl	80030c0 <write_eeprom>
			write_eeprom(ADD_DNS3,DATA_4[2]);
 800516c:	193b      	adds	r3, r7, r4
 800516e:	789b      	ldrb	r3, [r3, #2]
 8005170:	0019      	movs	r1, r3
 8005172:	201a      	movs	r0, #26
 8005174:	f7fd ffa4 	bl	80030c0 <write_eeprom>
			write_eeprom(ADD_DNS4,DATA_4[3]);
 8005178:	193b      	adds	r3, r7, r4
 800517a:	78db      	ldrb	r3, [r3, #3]
 800517c:	0019      	movs	r1, r3
 800517e:	201b      	movs	r0, #27
 8005180:	f7fd ff9e 	bl	80030c0 <write_eeprom>
			i = 16;
 8005184:	2310      	movs	r3, #16
 8005186:	61fb      	str	r3, [r7, #28]
			a = 17;
 8005188:	2311      	movs	r3, #17
 800518a:	61bb      	str	r3, [r7, #24]
			for(x=0; x<4; x++){
 800518c:	4b3b      	ldr	r3, [pc, #236]	; (800527c <trataconfig+0x68c>)
 800518e:	2200      	movs	r2, #0
 8005190:	701a      	strb	r2, [r3, #0]
 8005192:	e020      	b.n	80051d6 <trataconfig+0x5e6>
				DATA_4[x] = hextochar('0', '0', buf[i], buf[a]);
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	18d3      	adds	r3, r2, r3
 800519a:	7819      	ldrb	r1, [r3, #0]
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	18d3      	adds	r3, r2, r3
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	000a      	movs	r2, r1
 80051a6:	2130      	movs	r1, #48	; 0x30
 80051a8:	2030      	movs	r0, #48	; 0x30
 80051aa:	f7fe f8ed 	bl	8003388 <hextochar>
 80051ae:	0001      	movs	r1, r0
 80051b0:	4b32      	ldr	r3, [pc, #200]	; (800527c <trataconfig+0x68c>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	001a      	movs	r2, r3
 80051b6:	b2c9      	uxtb	r1, r1
 80051b8:	2308      	movs	r3, #8
 80051ba:	18fb      	adds	r3, r7, r3
 80051bc:	5499      	strb	r1, [r3, r2]
				i = i+2;
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	3302      	adds	r3, #2
 80051c2:	61fb      	str	r3, [r7, #28]
				a = a+2;
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	3302      	adds	r3, #2
 80051c8:	61bb      	str	r3, [r7, #24]
			for(x=0; x<4; x++){
 80051ca:	4b2c      	ldr	r3, [pc, #176]	; (800527c <trataconfig+0x68c>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	3301      	adds	r3, #1
 80051d0:	b2da      	uxtb	r2, r3
 80051d2:	4b2a      	ldr	r3, [pc, #168]	; (800527c <trataconfig+0x68c>)
 80051d4:	701a      	strb	r2, [r3, #0]
 80051d6:	4b29      	ldr	r3, [pc, #164]	; (800527c <trataconfig+0x68c>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d9da      	bls.n	8005194 <trataconfig+0x5a4>
			write_eeprom(ADD_IPS1,DATA_4[0]);
 80051de:	2408      	movs	r4, #8
 80051e0:	193b      	adds	r3, r7, r4
 80051e2:	781b      	ldrb	r3, [r3, #0]
 80051e4:	0019      	movs	r1, r3
 80051e6:	2014      	movs	r0, #20
 80051e8:	f7fd ff6a 	bl	80030c0 <write_eeprom>
			write_eeprom(ADD_IPS2,DATA_4[1]);
 80051ec:	193b      	adds	r3, r7, r4
 80051ee:	785b      	ldrb	r3, [r3, #1]
 80051f0:	0019      	movs	r1, r3
 80051f2:	2015      	movs	r0, #21
 80051f4:	f7fd ff64 	bl	80030c0 <write_eeprom>
			write_eeprom(ADD_IPS3,DATA_4[2]);
 80051f8:	193b      	adds	r3, r7, r4
 80051fa:	789b      	ldrb	r3, [r3, #2]
 80051fc:	0019      	movs	r1, r3
 80051fe:	2016      	movs	r0, #22
 8005200:	f7fd ff5e 	bl	80030c0 <write_eeprom>
			write_eeprom(ADD_IPS4,DATA_4[3]);
 8005204:	193b      	adds	r3, r7, r4
 8005206:	78db      	ldrb	r3, [r3, #3]
 8005208:	0019      	movs	r1, r3
 800520a:	2017      	movs	r0, #23
 800520c:	f7fd ff58 	bl	80030c0 <write_eeprom>
			write_eeprom(ADD_ISD, 0);
 8005210:	2100      	movs	r1, #0
 8005212:	203c      	movs	r0, #60	; 0x3c
 8005214:	f7fd ff54 	bl	80030c0 <write_eeprom>
			isdom = 0;
 8005218:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <trataconfig+0x698>)
 800521a:	2200      	movs	r2, #0
 800521c:	701a      	strb	r2, [r3, #0]
			ledvd_off;
 800521e:	4b1b      	ldr	r3, [pc, #108]	; (800528c <trataconfig+0x69c>)
 8005220:	2200      	movs	r2, #0
 8005222:	2110      	movs	r1, #16
 8005224:	0018      	movs	r0, r3
 8005226:	f006 fac2 	bl	800b7ae <HAL_GPIO_WritePin>
			ledvm_on;
 800522a:	4b18      	ldr	r3, [pc, #96]	; (800528c <trataconfig+0x69c>)
 800522c:	2200      	movs	r2, #0
 800522e:	2108      	movs	r1, #8
 8005230:	0018      	movs	r0, r3
 8005232:	f006 fabc 	bl	800b7ae <HAL_GPIO_WritePin>
			HAL_Delay(500);
 8005236:	23fa      	movs	r3, #250	; 0xfa
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	0018      	movs	r0, r3
 800523c:	f004 fb74 	bl	8009928 <HAL_Delay>
			ledvd_off;
 8005240:	4b12      	ldr	r3, [pc, #72]	; (800528c <trataconfig+0x69c>)
 8005242:	2200      	movs	r2, #0
 8005244:	2110      	movs	r1, #16
 8005246:	0018      	movs	r0, r3
 8005248:	f006 fab1 	bl	800b7ae <HAL_GPIO_WritePin>
			ledvm_off;
 800524c:	4b0f      	ldr	r3, [pc, #60]	; (800528c <trataconfig+0x69c>)
 800524e:	2201      	movs	r2, #1
 8005250:	2108      	movs	r1, #8
 8005252:	0018      	movs	r0, r3
 8005254:	f006 faab 	bl	800b7ae <HAL_GPIO_WritePin>
	break;
 8005258:	e00c      	b.n	8005274 <trataconfig+0x684>
	default:
		sendto(1,"erro",4,ip_s,port_s);
 800525a:	4b0d      	ldr	r3, [pc, #52]	; (8005290 <trataconfig+0x6a0>)
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	4a0d      	ldr	r2, [pc, #52]	; (8005294 <trataconfig+0x6a4>)
 8005260:	490d      	ldr	r1, [pc, #52]	; (8005298 <trataconfig+0x6a8>)
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	0013      	movs	r3, r2
 8005266:	2204      	movs	r2, #4
 8005268:	2001      	movs	r0, #1
 800526a:	f002 f883 	bl	8007374 <sendto>
	break;
 800526e:	e002      	b.n	8005276 <trataconfig+0x686>
			return;
 8005270:	46c0      	nop			; (mov r8, r8)
 8005272:	e000      	b.n	8005276 <trataconfig+0x686>
	break;
 8005274:	46c0      	nop			; (mov r8, r8)
	}

}
 8005276:	46bd      	mov	sp, r7
 8005278:	b009      	add	sp, #36	; 0x24
 800527a:	bd90      	pop	{r4, r7, pc}
 800527c:	200007d1 	.word	0x200007d1
 8005280:	20000100 	.word	0x20000100
 8005284:	200007a0 	.word	0x200007a0
 8005288:	200007a2 	.word	0x200007a2
 800528c:	50000400 	.word	0x50000400
 8005290:	200000d8 	.word	0x200000d8
 8005294:	200000d4 	.word	0x200000d4
 8005298:	08015c40 	.word	0x08015c40

0800529c <tratateste>:

void tratateste(uint8_t * buf)
{
 800529c:	b590      	push	{r4, r7, lr}
 800529e:	b08f      	sub	sp, #60	; 0x3c
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
	if(!modo_teste)
 80052a4:	4b3f      	ldr	r3, [pc, #252]	; (80053a4 <tratateste+0x108>)
 80052a6:	781b      	ldrb	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d000      	beq.n	80052ae <tratateste+0x12>
 80052ac:	e076      	b.n	800539c <tratateste+0x100>
	{
		uint8_t len = strlen(buf);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	0018      	movs	r0, r3
 80052b2:	f7fa ff2f 	bl	8000114 <strlen>
 80052b6:	0002      	movs	r2, r0
 80052b8:	2334      	movs	r3, #52	; 0x34
 80052ba:	18fb      	adds	r3, r7, r3
 80052bc:	701a      	strb	r2, [r3, #0]

		uint8_t i = 4;
 80052be:	2337      	movs	r3, #55	; 0x37
 80052c0:	18fb      	adds	r3, r7, r3
 80052c2:	2204      	movs	r2, #4
 80052c4:	701a      	strb	r2, [r3, #0]
		char mensagem[30];
		char tempohex[4];
		uint16_t tempodec = 0;
 80052c6:	2332      	movs	r3, #50	; 0x32
 80052c8:	18fb      	adds	r3, r7, r3
 80052ca:	2200      	movs	r2, #0
 80052cc:	801a      	strh	r2, [r3, #0]
		uint8_t pcigorfoda[4] = {192,168,0,29};
 80052ce:	230c      	movs	r3, #12
 80052d0:	18fb      	adds	r3, r7, r3
 80052d2:	4a35      	ldr	r2, [pc, #212]	; (80053a8 <tratateste+0x10c>)
 80052d4:	601a      	str	r2, [r3, #0]

		for(uint8_t x=0; x<len-5; x++){
 80052d6:	2336      	movs	r3, #54	; 0x36
 80052d8:	18fb      	adds	r3, r7, r3
 80052da:	2200      	movs	r2, #0
 80052dc:	701a      	strb	r2, [r3, #0]
 80052de:	e010      	b.n	8005302 <tratateste+0x66>
			mensagem[x] = buf[x+1];
 80052e0:	2036      	movs	r0, #54	; 0x36
 80052e2:	183b      	adds	r3, r7, r0
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	3301      	adds	r3, #1
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	18d2      	adds	r2, r2, r3
 80052ec:	183b      	adds	r3, r7, r0
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	7811      	ldrb	r1, [r2, #0]
 80052f2:	2214      	movs	r2, #20
 80052f4:	18ba      	adds	r2, r7, r2
 80052f6:	54d1      	strb	r1, [r2, r3]
		for(uint8_t x=0; x<len-5; x++){
 80052f8:	183b      	adds	r3, r7, r0
 80052fa:	781a      	ldrb	r2, [r3, #0]
 80052fc:	183b      	adds	r3, r7, r0
 80052fe:	3201      	adds	r2, #1
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	2336      	movs	r3, #54	; 0x36
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	781a      	ldrb	r2, [r3, #0]
 8005308:	2334      	movs	r3, #52	; 0x34
 800530a:	18fb      	adds	r3, r7, r3
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	3b05      	subs	r3, #5
 8005310:	429a      	cmp	r2, r3
 8005312:	dbe5      	blt.n	80052e0 <tratateste+0x44>
		}

		if(!strcmp(mensagem, "62617465726961"))
 8005314:	4a25      	ldr	r2, [pc, #148]	; (80053ac <tratateste+0x110>)
 8005316:	2314      	movs	r3, #20
 8005318:	18fb      	adds	r3, r7, r3
 800531a:	0011      	movs	r1, r2
 800531c:	0018      	movs	r0, r3
 800531e:	f7fa feef 	bl	8000100 <strcmp>
 8005322:	1e03      	subs	r3, r0, #0
 8005324:	d13a      	bne.n	800539c <tratateste+0x100>
		{
			for(uint8_t x=0;x<4;x++){
 8005326:	2335      	movs	r3, #53	; 0x35
 8005328:	18fb      	adds	r3, r7, r3
 800532a:	2200      	movs	r2, #0
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	e01a      	b.n	8005366 <tratateste+0xca>
				tempohex[x] = buf[len-i];
 8005330:	2334      	movs	r3, #52	; 0x34
 8005332:	18fb      	adds	r3, r7, r3
 8005334:	781a      	ldrb	r2, [r3, #0]
 8005336:	2037      	movs	r0, #55	; 0x37
 8005338:	183b      	adds	r3, r7, r0
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	001a      	movs	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	189a      	adds	r2, r3, r2
 8005344:	2435      	movs	r4, #53	; 0x35
 8005346:	193b      	adds	r3, r7, r4
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	7811      	ldrb	r1, [r2, #0]
 800534c:	2210      	movs	r2, #16
 800534e:	18ba      	adds	r2, r7, r2
 8005350:	54d1      	strb	r1, [r2, r3]
				i--;
 8005352:	183b      	adds	r3, r7, r0
 8005354:	781a      	ldrb	r2, [r3, #0]
 8005356:	183b      	adds	r3, r7, r0
 8005358:	3a01      	subs	r2, #1
 800535a:	701a      	strb	r2, [r3, #0]
			for(uint8_t x=0;x<4;x++){
 800535c:	193b      	adds	r3, r7, r4
 800535e:	781a      	ldrb	r2, [r3, #0]
 8005360:	193b      	adds	r3, r7, r4
 8005362:	3201      	adds	r2, #1
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	2335      	movs	r3, #53	; 0x35
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b03      	cmp	r3, #3
 800536e:	d9df      	bls.n	8005330 <tratateste+0x94>
			}

			tempodec = hextochar(tempohex[0], tempohex[1], tempohex[2], tempohex[3]);
 8005370:	2410      	movs	r4, #16
 8005372:	193b      	adds	r3, r7, r4
 8005374:	7818      	ldrb	r0, [r3, #0]
 8005376:	193b      	adds	r3, r7, r4
 8005378:	7859      	ldrb	r1, [r3, #1]
 800537a:	193b      	adds	r3, r7, r4
 800537c:	789a      	ldrb	r2, [r3, #2]
 800537e:	193b      	adds	r3, r7, r4
 8005380:	78db      	ldrb	r3, [r3, #3]
 8005382:	f7fe f801 	bl	8003388 <hextochar>
 8005386:	0002      	movs	r2, r0
 8005388:	2132      	movs	r1, #50	; 0x32
 800538a:	187b      	adds	r3, r7, r1
 800538c:	801a      	strh	r2, [r3, #0]
			modo_teste_tempo = tempodec;
 800538e:	4b08      	ldr	r3, [pc, #32]	; (80053b0 <tratateste+0x114>)
 8005390:	187a      	adds	r2, r7, r1
 8005392:	8812      	ldrh	r2, [r2, #0]
 8005394:	801a      	strh	r2, [r3, #0]
			modo_teste = 1;
 8005396:	4b03      	ldr	r3, [pc, #12]	; (80053a4 <tratateste+0x108>)
 8005398:	2201      	movs	r2, #1
 800539a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800539c:	46c0      	nop			; (mov r8, r8)
 800539e:	46bd      	mov	sp, r7
 80053a0:	b00f      	add	sp, #60	; 0x3c
 80053a2:	bd90      	pop	{r4, r7, pc}
 80053a4:	20000811 	.word	0x20000811
 80053a8:	1d00a8c0 	.word	0x1d00a8c0
 80053ac:	08015c48 	.word	0x08015c48
 80053b0:	20000140 	.word	0x20000140

080053b4 <le_eep>:
//***********************************************************************************************
//          Lê a eeprom e atribui os valores nas variáveis
//***********************************************************************************************

void le_eep(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
	  int vl1;
	  int vl2;

	  ip_l[0] = read_eeprom(ADD_IPL1);
 80053ba:	2001      	movs	r0, #1
 80053bc:	f7fd fea0 	bl	8003100 <read_eeprom>
 80053c0:	0003      	movs	r3, r0
 80053c2:	001a      	movs	r2, r3
 80053c4:	4b74      	ldr	r3, [pc, #464]	; (8005598 <le_eep+0x1e4>)
 80053c6:	701a      	strb	r2, [r3, #0]
	  ip_l[1] = read_eeprom(ADD_IPL2);
 80053c8:	2002      	movs	r0, #2
 80053ca:	f7fd fe99 	bl	8003100 <read_eeprom>
 80053ce:	0003      	movs	r3, r0
 80053d0:	001a      	movs	r2, r3
 80053d2:	4b71      	ldr	r3, [pc, #452]	; (8005598 <le_eep+0x1e4>)
 80053d4:	705a      	strb	r2, [r3, #1]
	  ip_l[2] = read_eeprom(ADD_IPL3);
 80053d6:	2003      	movs	r0, #3
 80053d8:	f7fd fe92 	bl	8003100 <read_eeprom>
 80053dc:	0003      	movs	r3, r0
 80053de:	001a      	movs	r2, r3
 80053e0:	4b6d      	ldr	r3, [pc, #436]	; (8005598 <le_eep+0x1e4>)
 80053e2:	709a      	strb	r2, [r3, #2]
	  ip_l[3] = read_eeprom(ADD_IPL4);
 80053e4:	2004      	movs	r0, #4
 80053e6:	f7fd fe8b 	bl	8003100 <read_eeprom>
 80053ea:	0003      	movs	r3, r0
 80053ec:	001a      	movs	r2, r3
 80053ee:	4b6a      	ldr	r3, [pc, #424]	; (8005598 <le_eep+0x1e4>)
 80053f0:	70da      	strb	r2, [r3, #3]

	  gw_l[0] = read_eeprom(ADD_GW1);
 80053f2:	2005      	movs	r0, #5
 80053f4:	f7fd fe84 	bl	8003100 <read_eeprom>
 80053f8:	0003      	movs	r3, r0
 80053fa:	001a      	movs	r2, r3
 80053fc:	4b67      	ldr	r3, [pc, #412]	; (800559c <le_eep+0x1e8>)
 80053fe:	701a      	strb	r2, [r3, #0]
	  gw_l[1] = read_eeprom(ADD_GW2);
 8005400:	2006      	movs	r0, #6
 8005402:	f7fd fe7d 	bl	8003100 <read_eeprom>
 8005406:	0003      	movs	r3, r0
 8005408:	001a      	movs	r2, r3
 800540a:	4b64      	ldr	r3, [pc, #400]	; (800559c <le_eep+0x1e8>)
 800540c:	705a      	strb	r2, [r3, #1]
	  gw_l[2] = read_eeprom(ADD_GW3);
 800540e:	2007      	movs	r0, #7
 8005410:	f7fd fe76 	bl	8003100 <read_eeprom>
 8005414:	0003      	movs	r3, r0
 8005416:	001a      	movs	r2, r3
 8005418:	4b60      	ldr	r3, [pc, #384]	; (800559c <le_eep+0x1e8>)
 800541a:	709a      	strb	r2, [r3, #2]
	  gw_l[3] = read_eeprom(ADD_GW4);
 800541c:	2008      	movs	r0, #8
 800541e:	f7fd fe6f 	bl	8003100 <read_eeprom>
 8005422:	0003      	movs	r3, r0
 8005424:	001a      	movs	r2, r3
 8005426:	4b5d      	ldr	r3, [pc, #372]	; (800559c <le_eep+0x1e8>)
 8005428:	70da      	strb	r2, [r3, #3]

	  mk_l[0] = read_eeprom(ADD_MK1);
 800542a:	2009      	movs	r0, #9
 800542c:	f7fd fe68 	bl	8003100 <read_eeprom>
 8005430:	0003      	movs	r3, r0
 8005432:	001a      	movs	r2, r3
 8005434:	4b5a      	ldr	r3, [pc, #360]	; (80055a0 <le_eep+0x1ec>)
 8005436:	701a      	strb	r2, [r3, #0]
	  mk_l[1] = read_eeprom(ADD_MK2);
 8005438:	200a      	movs	r0, #10
 800543a:	f7fd fe61 	bl	8003100 <read_eeprom>
 800543e:	0003      	movs	r3, r0
 8005440:	001a      	movs	r2, r3
 8005442:	4b57      	ldr	r3, [pc, #348]	; (80055a0 <le_eep+0x1ec>)
 8005444:	705a      	strb	r2, [r3, #1]
	  mk_l[2] = read_eeprom(ADD_MK3);
 8005446:	200b      	movs	r0, #11
 8005448:	f7fd fe5a 	bl	8003100 <read_eeprom>
 800544c:	0003      	movs	r3, r0
 800544e:	001a      	movs	r2, r3
 8005450:	4b53      	ldr	r3, [pc, #332]	; (80055a0 <le_eep+0x1ec>)
 8005452:	709a      	strb	r2, [r3, #2]
	  mk_l[3] = read_eeprom(ADD_MK4);
 8005454:	200c      	movs	r0, #12
 8005456:	f7fd fe53 	bl	8003100 <read_eeprom>
 800545a:	0003      	movs	r3, r0
 800545c:	001a      	movs	r2, r3
 800545e:	4b50      	ldr	r3, [pc, #320]	; (80055a0 <le_eep+0x1ec>)
 8005460:	70da      	strb	r2, [r3, #3]

	  ip_s[0] = read_eeprom(ADD_IPS1);
 8005462:	2014      	movs	r0, #20
 8005464:	f7fd fe4c 	bl	8003100 <read_eeprom>
 8005468:	0003      	movs	r3, r0
 800546a:	001a      	movs	r2, r3
 800546c:	4b4d      	ldr	r3, [pc, #308]	; (80055a4 <le_eep+0x1f0>)
 800546e:	701a      	strb	r2, [r3, #0]
	  ip_s[1] = read_eeprom(ADD_IPS2);
 8005470:	2015      	movs	r0, #21
 8005472:	f7fd fe45 	bl	8003100 <read_eeprom>
 8005476:	0003      	movs	r3, r0
 8005478:	001a      	movs	r2, r3
 800547a:	4b4a      	ldr	r3, [pc, #296]	; (80055a4 <le_eep+0x1f0>)
 800547c:	705a      	strb	r2, [r3, #1]
	  ip_s[2] = read_eeprom(ADD_IPS3);
 800547e:	2016      	movs	r0, #22
 8005480:	f7fd fe3e 	bl	8003100 <read_eeprom>
 8005484:	0003      	movs	r3, r0
 8005486:	001a      	movs	r2, r3
 8005488:	4b46      	ldr	r3, [pc, #280]	; (80055a4 <le_eep+0x1f0>)
 800548a:	709a      	strb	r2, [r3, #2]
	  ip_s[3] = read_eeprom(ADD_IPS4);
 800548c:	2017      	movs	r0, #23
 800548e:	f7fd fe37 	bl	8003100 <read_eeprom>
 8005492:	0003      	movs	r3, r0
 8005494:	001a      	movs	r2, r3
 8005496:	4b43      	ldr	r3, [pc, #268]	; (80055a4 <le_eep+0x1f0>)
 8005498:	70da      	strb	r2, [r3, #3]

	  dns_server[0] = read_eeprom(ADD_DNS1);
 800549a:	2018      	movs	r0, #24
 800549c:	f7fd fe30 	bl	8003100 <read_eeprom>
 80054a0:	0003      	movs	r3, r0
 80054a2:	001a      	movs	r2, r3
 80054a4:	4b40      	ldr	r3, [pc, #256]	; (80055a8 <le_eep+0x1f4>)
 80054a6:	701a      	strb	r2, [r3, #0]
	  dns_server[1] = read_eeprom(ADD_DNS2);
 80054a8:	2019      	movs	r0, #25
 80054aa:	f7fd fe29 	bl	8003100 <read_eeprom>
 80054ae:	0003      	movs	r3, r0
 80054b0:	001a      	movs	r2, r3
 80054b2:	4b3d      	ldr	r3, [pc, #244]	; (80055a8 <le_eep+0x1f4>)
 80054b4:	705a      	strb	r2, [r3, #1]
	  dns_server[2] = read_eeprom(ADD_DNS3);
 80054b6:	201a      	movs	r0, #26
 80054b8:	f7fd fe22 	bl	8003100 <read_eeprom>
 80054bc:	0003      	movs	r3, r0
 80054be:	001a      	movs	r2, r3
 80054c0:	4b39      	ldr	r3, [pc, #228]	; (80055a8 <le_eep+0x1f4>)
 80054c2:	709a      	strb	r2, [r3, #2]
	  dns_server[3] = read_eeprom(ADD_DNS4);
 80054c4:	201b      	movs	r0, #27
 80054c6:	f7fd fe1b 	bl	8003100 <read_eeprom>
 80054ca:	0003      	movs	r3, r0
 80054cc:	001a      	movs	r2, r3
 80054ce:	4b36      	ldr	r3, [pc, #216]	; (80055a8 <le_eep+0x1f4>)
 80054d0:	70da      	strb	r2, [r3, #3]

	  vl1 = read_eeprom(ADD_PORTL1);
 80054d2:	200d      	movs	r0, #13
 80054d4:	f7fd fe14 	bl	8003100 <read_eeprom>
 80054d8:	0003      	movs	r3, r0
 80054da:	607b      	str	r3, [r7, #4]
	  vl2 = read_eeprom(ADD_PORTL2);
 80054dc:	200f      	movs	r0, #15
 80054de:	f7fd fe0f 	bl	8003100 <read_eeprom>
 80054e2:	0003      	movs	r3, r0
 80054e4:	603b      	str	r3, [r7, #0]
	  port_l = (vl1 * 256) + vl2;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	b29a      	uxth	r2, r3
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	18d3      	adds	r3, r2, r3
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	4b2d      	ldr	r3, [pc, #180]	; (80055ac <le_eep+0x1f8>)
 80054f8:	801a      	strh	r2, [r3, #0]

	  vl1 = read_eeprom(ADD_PORTS1);
 80054fa:	201c      	movs	r0, #28
 80054fc:	f7fd fe00 	bl	8003100 <read_eeprom>
 8005500:	0003      	movs	r3, r0
 8005502:	607b      	str	r3, [r7, #4]
	  vl2 = read_eeprom(ADD_PORTS2);
 8005504:	201d      	movs	r0, #29
 8005506:	f7fd fdfb 	bl	8003100 <read_eeprom>
 800550a:	0003      	movs	r3, r0
 800550c:	603b      	str	r3, [r7, #0]
	  port_s = (vl1 * 256) + vl2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	b29b      	uxth	r3, r3
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	b29a      	uxth	r2, r3
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	b29b      	uxth	r3, r3
 800551a:	18d3      	adds	r3, r2, r3
 800551c:	b29a      	uxth	r2, r3
 800551e:	4b24      	ldr	r3, [pc, #144]	; (80055b0 <le_eep+0x1fc>)
 8005520:	801a      	strh	r2, [r3, #0]

	  tam_dominio = read_eeprom(ADD_TDOM);
 8005522:	203b      	movs	r0, #59	; 0x3b
 8005524:	f7fd fdec 	bl	8003100 <read_eeprom>
 8005528:	0003      	movs	r3, r0
 800552a:	001a      	movs	r2, r3
 800552c:	4b21      	ldr	r3, [pc, #132]	; (80055b4 <le_eep+0x200>)
 800552e:	701a      	strb	r2, [r3, #0]

	  vl1 = read_eeprom(ADD_IDT1);
 8005530:	2010      	movs	r0, #16
 8005532:	f7fd fde5 	bl	8003100 <read_eeprom>
 8005536:	0003      	movs	r3, r0
 8005538:	607b      	str	r3, [r7, #4]
	  vl2 = read_eeprom(ADD_IDT2);
 800553a:	2011      	movs	r0, #17
 800553c:	f7fd fde0 	bl	8003100 <read_eeprom>
 8005540:	0003      	movs	r3, r0
 8005542:	603b      	str	r3, [r7, #0]
	  idt = (vl1 * 256) + vl2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	021a      	lsls	r2, r3, #8
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	18d2      	adds	r2, r2, r3
 800554c:	4b1a      	ldr	r3, [pc, #104]	; (80055b8 <le_eep+0x204>)
 800554e:	601a      	str	r2, [r3, #0]

	  vl1 = read_eeprom(ADD_KEY1);
 8005550:	2012      	movs	r0, #18
 8005552:	f7fd fdd5 	bl	8003100 <read_eeprom>
 8005556:	0003      	movs	r3, r0
 8005558:	607b      	str	r3, [r7, #4]
	  vl2 = read_eeprom(ADD_KEY2);
 800555a:	2013      	movs	r0, #19
 800555c:	f7fd fdd0 	bl	8003100 <read_eeprom>
 8005560:	0003      	movs	r3, r0
 8005562:	603b      	str	r3, [r7, #0]
	  key = (vl1 * 256) + vl2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	021a      	lsls	r2, r3, #8
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	18d2      	adds	r2, r2, r3
 800556c:	4b13      	ldr	r3, [pc, #76]	; (80055bc <le_eep+0x208>)
 800556e:	601a      	str	r2, [r3, #0]

	  isdom = read_eeprom(ADD_ISD);
 8005570:	203c      	movs	r0, #60	; 0x3c
 8005572:	f7fd fdc5 	bl	8003100 <read_eeprom>
 8005576:	0003      	movs	r3, r0
 8005578:	1e5a      	subs	r2, r3, #1
 800557a:	4193      	sbcs	r3, r2
 800557c:	b2da      	uxtb	r2, r3
 800557e:	4b10      	ldr	r3, [pc, #64]	; (80055c0 <le_eep+0x20c>)
 8005580:	701a      	strb	r2, [r3, #0]
	  timeOutLen = read_eeprom(ADD_TIMEOUT);
 8005582:	203d      	movs	r0, #61	; 0x3d
 8005584:	f7fd fdbc 	bl	8003100 <read_eeprom>
 8005588:	0003      	movs	r3, r0
 800558a:	001a      	movs	r2, r3
 800558c:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <le_eep+0x210>)
 800558e:	701a      	strb	r2, [r3, #0]
}
 8005590:	46c0      	nop			; (mov r8, r8)
 8005592:	46bd      	mov	sp, r7
 8005594:	b002      	add	sp, #8
 8005596:	bd80      	pop	{r7, pc}
 8005598:	200000e0 	.word	0x200000e0
 800559c:	200000e8 	.word	0x200000e8
 80055a0:	200000e4 	.word	0x200000e4
 80055a4:	200000d4 	.word	0x200000d4
 80055a8:	200000dc 	.word	0x200000dc
 80055ac:	200000ec 	.word	0x200000ec
 80055b0:	200000d8 	.word	0x200000d8
 80055b4:	200007a0 	.word	0x200007a0
 80055b8:	2000012c 	.word	0x2000012c
 80055bc:	20000130 	.word	0x20000130
 80055c0:	200007a2 	.word	0x200007a2
 80055c4:	20000129 	.word	0x20000129

080055c8 <GetMCUInfo>:

//***********************************************************************************************
//          Pega o número de serie
//***********************************************************************************************
void GetMCUInfo(void)
{
 80055c8:	b5b0      	push	{r4, r5, r7, lr}
 80055ca:	af00      	add	r7, sp, #0
  register uint32_t size_string = 0, read_info = 0, read_info2 = 0;


  read_info = LL_GetUID_Word1();
 80055cc:	f7fd fdb8 	bl	8003140 <LL_GetUID_Word1>
 80055d0:	0004      	movs	r4, r0
  read_info2 = LL_GetUID_Word2();
 80055d2:	f7fd fdbf 	bl	8003154 <LL_GetUID_Word2>
 80055d6:	0005      	movs	r5, r0
  sprintf((char*)aShowWaferNumber,"Wafer NB = 0x%X", (uint8_t)read_info);
 80055d8:	b2e3      	uxtb	r3, r4
 80055da:	001a      	movs	r2, r3
 80055dc:	490b      	ldr	r1, [pc, #44]	; (800560c <GetMCUInfo+0x44>)
 80055de:	4b0c      	ldr	r3, [pc, #48]	; (8005610 <GetMCUInfo+0x48>)
 80055e0:	0018      	movs	r0, r3
 80055e2:	f00c fb3d 	bl	8011c60 <siprintf>


  size_string = sprintf((char*)aShowLotNumber,"0x%lX", read_info2);
 80055e6:	490b      	ldr	r1, [pc, #44]	; (8005614 <GetMCUInfo+0x4c>)
 80055e8:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <GetMCUInfo+0x50>)
 80055ea:	002a      	movs	r2, r5
 80055ec:	0018      	movs	r0, r3
 80055ee:	f00c fb37 	bl	8011c60 <siprintf>
 80055f2:	0003      	movs	r3, r0
 80055f4:	001d      	movs	r5, r3

  sprintf((char*)aShowLotNumber+size_string,"%lX", (read_info >> 8));
 80055f6:	4b08      	ldr	r3, [pc, #32]	; (8005618 <GetMCUInfo+0x50>)
 80055f8:	18eb      	adds	r3, r5, r3
 80055fa:	0a22      	lsrs	r2, r4, #8
 80055fc:	4907      	ldr	r1, [pc, #28]	; (800561c <GetMCUInfo+0x54>)
 80055fe:	0018      	movs	r0, r3
 8005600:	f00c fb2e 	bl	8011c60 <siprintf>
}
 8005604:	46c0      	nop			; (mov r8, r8)
 8005606:	46bd      	mov	sp, r7
 8005608:	bdb0      	pop	{r4, r5, r7, pc}
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	08015c58 	.word	0x08015c58
 8005610:	20000818 	.word	0x20000818
 8005614:	08015c68 	.word	0x08015c68
 8005618:	20000838 	.word	0x20000838
 800561c:	08015c70 	.word	0x08015c70

08005620 <reboot_wiz>:
		  }
		  dnscont++;
}

void reboot_wiz(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
    ledvm_on;
 8005624:	4b1f      	ldr	r3, [pc, #124]	; (80056a4 <reboot_wiz+0x84>)
 8005626:	2200      	movs	r2, #0
 8005628:	2108      	movs	r1, #8
 800562a:	0018      	movs	r0, r3
 800562c:	f006 f8bf 	bl	800b7ae <HAL_GPIO_WritePin>
    ledvd_on;
 8005630:	4b1c      	ldr	r3, [pc, #112]	; (80056a4 <reboot_wiz+0x84>)
 8005632:	2201      	movs	r2, #1
 8005634:	2110      	movs	r1, #16
 8005636:	0018      	movs	r0, r3
 8005638:	f006 f8b9 	bl	800b7ae <HAL_GPIO_WritePin>
	wiz_off;
 800563c:	2380      	movs	r3, #128	; 0x80
 800563e:	0219      	lsls	r1, r3, #8
 8005640:	23a0      	movs	r3, #160	; 0xa0
 8005642:	05db      	lsls	r3, r3, #23
 8005644:	2201      	movs	r2, #1
 8005646:	0018      	movs	r0, r3
 8005648:	f006 f8b1 	bl	800b7ae <HAL_GPIO_WritePin>
	close(0);
 800564c:	2000      	movs	r0, #0
 800564e:	f001 fe17 	bl	8007280 <close>
	close(1);
 8005652:	2001      	movs	r0, #1
 8005654:	f001 fe14 	bl	8007280 <close>
	HAL_Delay(200);
 8005658:	20c8      	movs	r0, #200	; 0xc8
 800565a:	f004 f965 	bl	8009928 <HAL_Delay>
	wiz_on;
 800565e:	2380      	movs	r3, #128	; 0x80
 8005660:	0219      	lsls	r1, r3, #8
 8005662:	23a0      	movs	r3, #160	; 0xa0
 8005664:	05db      	lsls	r3, r3, #23
 8005666:	2200      	movs	r2, #0
 8005668:	0018      	movs	r0, r3
 800566a:	f006 f8a0 	bl	800b7ae <HAL_GPIO_WritePin>
	MX_SPI1_Init();
 800566e:	f001 fa17 	bl	8006aa0 <MX_SPI1_Init>
	init_udp();
 8005672:	f7fe fcb3 	bl	8003fdc <init_udp>
	IINCHIP_WRITE(Sn_PROTO(0), IPPROTO_ICMP);
 8005676:	4b0c      	ldr	r3, [pc, #48]	; (80056a8 <reboot_wiz+0x88>)
 8005678:	2101      	movs	r1, #1
 800567a:	0018      	movs	r0, r3
 800567c:	f003 fb70 	bl	8008d60 <WIZCHIP_WRITE>
	ping_fail = 1;
 8005680:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <reboot_wiz+0x8c>)
 8005682:	2201      	movs	r2, #1
 8005684:	701a      	strb	r2, [r3, #0]
    ledvm_on;
 8005686:	4b07      	ldr	r3, [pc, #28]	; (80056a4 <reboot_wiz+0x84>)
 8005688:	2200      	movs	r2, #0
 800568a:	2108      	movs	r1, #8
 800568c:	0018      	movs	r0, r3
 800568e:	f006 f88e 	bl	800b7ae <HAL_GPIO_WritePin>
    ledvd_on;
 8005692:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <reboot_wiz+0x84>)
 8005694:	2201      	movs	r2, #1
 8005696:	2110      	movs	r1, #16
 8005698:	0018      	movs	r0, r3
 800569a:	f006 f888 	bl	800b7ae <HAL_GPIO_WritePin>
}
 800569e:	46c0      	nop			; (mov r8, r8)
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	50000400 	.word	0x50000400
 80056a8:	00001408 	.word	0x00001408
 80056ac:	200007a4 	.word	0x200007a4

080056b0 <ping_count>:

uint8_t ping_count(uint8_t s, uint16_t pCount, uint8_t *addr){
 80056b0:	b5b0      	push	{r4, r5, r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	603a      	str	r2, [r7, #0]
 80056b8:	1dfb      	adds	r3, r7, #7
 80056ba:	1c02      	adds	r2, r0, #0
 80056bc:	701a      	strb	r2, [r3, #0]
 80056be:	1d3b      	adds	r3, r7, #4
 80056c0:	1c0a      	adds	r2, r1, #0
 80056c2:	801a      	strh	r2, [r3, #0]

	uint16_t rlen, cnt,i;
	cnt = 0;
 80056c4:	230e      	movs	r3, #14
 80056c6:	18fb      	adds	r3, r7, r3
 80056c8:	2200      	movs	r2, #0
 80056ca:	801a      	strh	r2, [r3, #0]
	uint8_t req=0;
 80056cc:	230b      	movs	r3, #11
 80056ce:	18fb      	adds	r3, r7, r3
 80056d0:	2200      	movs	r2, #0
 80056d2:	701a      	strb	r2, [r3, #0]
	uint8_t rep=0;
 80056d4:	230a      	movs	r3, #10
 80056d6:	18fb      	adds	r3, r7, r3
 80056d8:	2200      	movs	r2, #0
 80056da:	701a      	strb	r2, [r3, #0]
	ping_reply_received = 0;
 80056dc:	4b6b      	ldr	r3, [pc, #428]	; (800588c <ping_count+0x1dc>)
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]

	for(i=0; i<pCount+1;i++){
 80056e2:	230c      	movs	r3, #12
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	2200      	movs	r2, #0
 80056e8:	801a      	strh	r2, [r3, #0]
 80056ea:	e0c2      	b.n	8005872 <ping_count+0x1c2>

	if(i!=0){
 80056ec:	220c      	movs	r2, #12
 80056ee:	18bb      	adds	r3, r7, r2
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d007      	beq.n	8005706 <ping_count+0x56>
		/* Output count number */
			printf( "\r\nNo.%d\r\n",   (i-1));
 80056f6:	18bb      	adds	r3, r7, r2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	1e5a      	subs	r2, r3, #1
 80056fc:	4b64      	ldr	r3, [pc, #400]	; (8005890 <ping_count+0x1e0>)
 80056fe:	0011      	movs	r1, r2
 8005700:	0018      	movs	r0, r3
 8005702:	f00c fa13 	bl	8011b2c <iprintf>
	}

  	switch(getSn_SR(s))
 8005706:	1dfb      	adds	r3, r7, #7
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	3301      	adds	r3, #1
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	22c0      	movs	r2, #192	; 0xc0
 8005712:	0092      	lsls	r2, r2, #2
 8005714:	4694      	mov	ip, r2
 8005716:	4463      	add	r3, ip
 8005718:	0018      	movs	r0, r3
 800571a:	f003 facf 	bl	8008cbc <WIZCHIP_READ>
 800571e:	1e03      	subs	r3, r0, #0
 8005720:	d002      	beq.n	8005728 <ping_count+0x78>
 8005722:	2b32      	cmp	r3, #50	; 0x32
 8005724:	d03b      	beq.n	800579e <ping_count+0xee>
				     }

				break;

			default:
				break;
 8005726:	e083      	b.n	8005830 <ping_count+0x180>
				close(s);
 8005728:	1dfb      	adds	r3, r7, #7
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	0018      	movs	r0, r3
 800572e:	f001 fda7 	bl	8007280 <close>
				IINCHIP_WRITE(Sn_PROTO(s), IPPROTO_ICMP);
 8005732:	1dfb      	adds	r3, r7, #7
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	015b      	lsls	r3, r3, #5
 8005738:	4a56      	ldr	r2, [pc, #344]	; (8005894 <ping_count+0x1e4>)
 800573a:	4694      	mov	ip, r2
 800573c:	4463      	add	r3, ip
 800573e:	2101      	movs	r1, #1
 8005740:	0018      	movs	r0, r3
 8005742:	f003 fb0d 	bl	8008d60 <WIZCHIP_WRITE>
				if(socket(s,Sn_MR_IPRAW,3000,0)!=s){
 8005746:	4a54      	ldr	r2, [pc, #336]	; (8005898 <ping_count+0x1e8>)
 8005748:	1dfb      	adds	r3, r7, #7
 800574a:	7818      	ldrb	r0, [r3, #0]
 800574c:	2300      	movs	r3, #0
 800574e:	2103      	movs	r1, #3
 8005750:	f001 fc5c 	bl	800700c <socket>
 8005754:	0003      	movs	r3, r0
 8005756:	001a      	movs	r2, r3
 8005758:	1dfb      	adds	r3, r7, #7
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	429a      	cmp	r2, r3
 800575e:	d008      	beq.n	8005772 <ping_count+0xc2>
					printf( "\r\n socket %d fail r\n",   (s)) ;
 8005760:	1dfb      	adds	r3, r7, #7
 8005762:	781a      	ldrb	r2, [r3, #0]
 8005764:	4b4d      	ldr	r3, [pc, #308]	; (800589c <ping_count+0x1ec>)
 8005766:	0011      	movs	r1, r2
 8005768:	0018      	movs	r0, r3
 800576a:	f00c f9df 	bl	8011b2c <iprintf>
					return SOCKET_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e087      	b.n	8005882 <ping_count+0x1d2>
				while(getSn_SR(s)!=SOCK_IPRAW);
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	1dfb      	adds	r3, r7, #7
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	3301      	adds	r3, #1
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	22c0      	movs	r2, #192	; 0xc0
 8005780:	0092      	lsls	r2, r2, #2
 8005782:	4694      	mov	ip, r2
 8005784:	4463      	add	r3, ip
 8005786:	0018      	movs	r0, r3
 8005788:	f003 fa98 	bl	8008cbc <WIZCHIP_READ>
 800578c:	0003      	movs	r3, r0
 800578e:	2b32      	cmp	r3, #50	; 0x32
 8005790:	d1f0      	bne.n	8005774 <ping_count+0xc4>
				HAL_Delay(500); // wait 1000ms
 8005792:	23fa      	movs	r3, #250	; 0xfa
 8005794:	005b      	lsls	r3, r3, #1
 8005796:	0018      	movs	r0, r3
 8005798:	f004 f8c6 	bl	8009928 <HAL_Delay>
				break;
 800579c:	e048      	b.n	8005830 <ping_count+0x180>
				 ping_request(s, addr);
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	1dfb      	adds	r3, r7, #7
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	0011      	movs	r1, r2
 80057a6:	0018      	movs	r0, r3
 80057a8:	f000 f880 	bl	80058ac <ping_request>
				 req++;
 80057ac:	210b      	movs	r1, #11
 80057ae:	187b      	adds	r3, r7, r1
 80057b0:	781a      	ldrb	r2, [r3, #0]
 80057b2:	187b      	adds	r3, r7, r1
 80057b4:	3201      	adds	r2, #1
 80057b6:	701a      	strb	r2, [r3, #0]
						if ( (rlen = getSn_RX_RSR(s) ) > 0){
 80057b8:	2508      	movs	r5, #8
 80057ba:	197c      	adds	r4, r7, r5
 80057bc:	1dfb      	adds	r3, r7, #7
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	0018      	movs	r0, r3
 80057c2:	f003 fc6b 	bl	800909c <getSn_RX_RSR>
 80057c6:	0003      	movs	r3, r0
 80057c8:	8023      	strh	r3, [r4, #0]
 80057ca:	197b      	adds	r3, r7, r5
 80057cc:	881b      	ldrh	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d015      	beq.n	80057fe <ping_count+0x14e>
							ping_reply(s, addr, rlen);
 80057d2:	197b      	adds	r3, r7, r5
 80057d4:	881a      	ldrh	r2, [r3, #0]
 80057d6:	6839      	ldr	r1, [r7, #0]
 80057d8:	1dfb      	adds	r3, r7, #7
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	0018      	movs	r0, r3
 80057de:	f000 f915 	bl	8005a0c <ping_reply>
							rep++;
 80057e2:	210a      	movs	r1, #10
 80057e4:	187b      	adds	r3, r7, r1
 80057e6:	781a      	ldrb	r2, [r3, #0]
 80057e8:	187b      	adds	r3, r7, r1
 80057ea:	3201      	adds	r2, #1
 80057ec:	701a      	strb	r2, [r3, #0]
							if (ping_reply_received && !thrash)  break;
 80057ee:	4b27      	ldr	r3, [pc, #156]	; (800588c <ping_count+0x1dc>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d003      	beq.n	80057fe <ping_count+0x14e>
 80057f6:	4b2a      	ldr	r3, [pc, #168]	; (80058a0 <ping_count+0x1f0>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d016      	beq.n	800582c <ping_count+0x17c>
						if ( (cnt > 100) ) {
 80057fe:	240e      	movs	r4, #14
 8005800:	193b      	adds	r3, r7, r4
 8005802:	881b      	ldrh	r3, [r3, #0]
 8005804:	2b64      	cmp	r3, #100	; 0x64
 8005806:	d907      	bls.n	8005818 <ping_count+0x168>
							printf( "\r\nRequest Time out. \r\n") ;
 8005808:	4b26      	ldr	r3, [pc, #152]	; (80058a4 <ping_count+0x1f4>)
 800580a:	0018      	movs	r0, r3
 800580c:	f00c fa1a 	bl	8011c44 <puts>
							cnt = 0;
 8005810:	193b      	adds	r3, r7, r4
 8005812:	2200      	movs	r2, #0
 8005814:	801a      	strh	r2, [r3, #0]
							break;
 8005816:	e00a      	b.n	800582e <ping_count+0x17e>
							cnt++;
 8005818:	210e      	movs	r1, #14
 800581a:	187b      	adds	r3, r7, r1
 800581c:	881a      	ldrh	r2, [r3, #0]
 800581e:	187b      	adds	r3, r7, r1
 8005820:	3201      	adds	r2, #1
 8005822:	801a      	strh	r2, [r3, #0]
							HAL_Delay(50);
 8005824:	2032      	movs	r0, #50	; 0x32
 8005826:	f004 f87f 	bl	8009928 <HAL_Delay>
						if ( (rlen = getSn_RX_RSR(s) ) > 0){
 800582a:	e7c5      	b.n	80057b8 <ping_count+0x108>
							if (ping_reply_received && !thrash)  break;
 800582c:	46c0      	nop			; (mov r8, r8)
				break;
 800582e:	46c0      	nop			; (mov r8, r8)

       }
#ifdef PING_DEBUG
  		if(req>=pCount)
 8005830:	240b      	movs	r4, #11
 8005832:	193b      	adds	r3, r7, r4
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	b29b      	uxth	r3, r3
 8005838:	1d3a      	adds	r2, r7, #4
 800583a:	8812      	ldrh	r2, [r2, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d812      	bhi.n	8005866 <ping_count+0x1b6>
  		   	{
  		  		printf("Ping Request = %d, PING_Reply = %d\r\n",req,rep);
 8005840:	193b      	adds	r3, r7, r4
 8005842:	7819      	ldrb	r1, [r3, #0]
 8005844:	250a      	movs	r5, #10
 8005846:	197b      	adds	r3, r7, r5
 8005848:	781a      	ldrb	r2, [r3, #0]
 800584a:	4b17      	ldr	r3, [pc, #92]	; (80058a8 <ping_count+0x1f8>)
 800584c:	0018      	movs	r0, r3
 800584e:	f00c f96d 	bl	8011b2c <iprintf>

  		  		if(rep == req){
 8005852:	197a      	adds	r2, r7, r5
 8005854:	193b      	adds	r3, r7, r4
 8005856:	7812      	ldrb	r2, [r2, #0]
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	429a      	cmp	r2, r3
 800585c:	d101      	bne.n	8005862 <ping_count+0x1b2>
  		  			return SUCCESS;
 800585e:	2303      	movs	r3, #3
 8005860:	e00f      	b.n	8005882 <ping_count+0x1d2>
  		  		}
  		  		else{
  		  			return REPLY_ERROR;
 8005862:	2304      	movs	r3, #4
 8005864:	e00d      	b.n	8005882 <ping_count+0x1d2>
	for(i=0; i<pCount+1;i++){
 8005866:	210c      	movs	r1, #12
 8005868:	187b      	adds	r3, r7, r1
 800586a:	881a      	ldrh	r2, [r3, #0]
 800586c:	187b      	adds	r3, r7, r1
 800586e:	3201      	adds	r2, #1
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	1d3a      	adds	r2, r7, #4
 8005874:	230c      	movs	r3, #12
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	8812      	ldrh	r2, [r2, #0]
 800587a:	881b      	ldrh	r3, [r3, #0]
 800587c:	429a      	cmp	r2, r3
 800587e:	d300      	bcc.n	8005882 <ping_count+0x1d2>
 8005880:	e734      	b.n	80056ec <ping_count+0x3c>
  		  	}
#endif
   }


}
 8005882:	0018      	movs	r0, r3
 8005884:	46bd      	mov	sp, r7
 8005886:	b004      	add	sp, #16
 8005888:	bdb0      	pop	{r4, r5, r7, pc}
 800588a:	46c0      	nop			; (mov r8, r8)
 800588c:	200007d0 	.word	0x200007d0
 8005890:	08015c88 	.word	0x08015c88
 8005894:	00001408 	.word	0x00001408
 8005898:	00000bb8 	.word	0x00000bb8
 800589c:	08015c94 	.word	0x08015c94
 80058a0:	20000810 	.word	0x20000810
 80058a4:	08015cac 	.word	0x08015cac
 80058a8:	08015cc4 	.word	0x08015cc4

080058ac <ping_request>:

uint8_t ping_request(uint8_t s, uint8_t *addr){
 80058ac:	b5b0      	push	{r4, r5, r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af02      	add	r7, sp, #8
 80058b2:	0002      	movs	r2, r0
 80058b4:	6039      	str	r1, [r7, #0]
 80058b6:	1dfb      	adds	r3, r7, #7
 80058b8:	701a      	strb	r2, [r3, #0]
    uint16_t i;

	//ping_reply_received = 0;
	PingRequest.Type = PING_REQUEST;
 80058ba:	4b4c      	ldr	r3, [pc, #304]	; (80059ec <ping_request+0x140>)
 80058bc:	2208      	movs	r2, #8
 80058be:	701a      	strb	r2, [r3, #0]
	PingRequest.Code = CODE_ZERO;
 80058c0:	4b4a      	ldr	r3, [pc, #296]	; (80059ec <ping_request+0x140>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	705a      	strb	r2, [r3, #1]
	PingRequest.ID = htons(RandomID++);
 80058c6:	4b4a      	ldr	r3, [pc, #296]	; (80059f0 <ping_request+0x144>)
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	b291      	uxth	r1, r2
 80058ce:	4a48      	ldr	r2, [pc, #288]	; (80059f0 <ping_request+0x144>)
 80058d0:	8011      	strh	r1, [r2, #0]
 80058d2:	0018      	movs	r0, r3
 80058d4:	f003 f9d1 	bl	8008c7a <htons>
 80058d8:	0003      	movs	r3, r0
 80058da:	b21a      	sxth	r2, r3
 80058dc:	4b43      	ldr	r3, [pc, #268]	; (80059ec <ping_request+0x140>)
 80058de:	809a      	strh	r2, [r3, #4]
	PingRequest.SeqNum =htons(RandomSeqNum++);
 80058e0:	4b44      	ldr	r3, [pc, #272]	; (80059f4 <ping_request+0x148>)
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	1c5a      	adds	r2, r3, #1
 80058e6:	b291      	uxth	r1, r2
 80058e8:	4a42      	ldr	r2, [pc, #264]	; (80059f4 <ping_request+0x148>)
 80058ea:	8011      	strh	r1, [r2, #0]
 80058ec:	0018      	movs	r0, r3
 80058ee:	f003 f9c4 	bl	8008c7a <htons>
 80058f2:	0003      	movs	r3, r0
 80058f4:	b21a      	sxth	r2, r3
 80058f6:	4b3d      	ldr	r3, [pc, #244]	; (80059ec <ping_request+0x140>)
 80058f8:	80da      	strh	r2, [r3, #6]

  	for(i = 0 ; i < BUF_LEN; i++){
 80058fa:	230e      	movs	r3, #14
 80058fc:	18fb      	adds	r3, r7, r3
 80058fe:	2200      	movs	r2, #0
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	e011      	b.n	8005928 <ping_request+0x7c>
		PingRequest.Data[i] = (i) % 8;
 8005904:	200e      	movs	r0, #14
 8005906:	183b      	adds	r3, r7, r0
 8005908:	881b      	ldrh	r3, [r3, #0]
 800590a:	b25a      	sxtb	r2, r3
 800590c:	183b      	adds	r3, r7, r0
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	2107      	movs	r1, #7
 8005912:	400a      	ands	r2, r1
 8005914:	b251      	sxtb	r1, r2
 8005916:	4a35      	ldr	r2, [pc, #212]	; (80059ec <ping_request+0x140>)
 8005918:	18d3      	adds	r3, r2, r3
 800591a:	1c0a      	adds	r2, r1, #0
 800591c:	721a      	strb	r2, [r3, #8]
  	for(i = 0 ; i < BUF_LEN; i++){
 800591e:	183b      	adds	r3, r7, r0
 8005920:	881a      	ldrh	r2, [r3, #0]
 8005922:	183b      	adds	r3, r7, r0
 8005924:	3201      	adds	r2, #1
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	230e      	movs	r3, #14
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	2b1f      	cmp	r3, #31
 8005930:	d9e8      	bls.n	8005904 <ping_request+0x58>
	}

	PingRequest.CheckSum = 0;
 8005932:	4b2e      	ldr	r3, [pc, #184]	; (80059ec <ping_request+0x140>)
 8005934:	2200      	movs	r2, #0
 8005936:	805a      	strh	r2, [r3, #2]
	PingRequest.CheckSum = htons(checksum((uint8_t*)&PingRequest,sizeof(PingRequest)));
 8005938:	4b2c      	ldr	r3, [pc, #176]	; (80059ec <ping_request+0x140>)
 800593a:	2128      	movs	r1, #40	; 0x28
 800593c:	0018      	movs	r0, r3
 800593e:	f003 f929 	bl	8008b94 <checksum>
 8005942:	0003      	movs	r3, r0
 8005944:	0018      	movs	r0, r3
 8005946:	f003 f998 	bl	8008c7a <htons>
 800594a:	0003      	movs	r3, r0
 800594c:	b21a      	sxth	r2, r3
 800594e:	4b27      	ldr	r3, [pc, #156]	; (80059ec <ping_request+0x140>)
 8005950:	805a      	strh	r2, [r3, #2]

	if(sendto(s,(uint8_t *)&PingRequest,sizeof(PingRequest),addr,3000)==0){
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	4925      	ldr	r1, [pc, #148]	; (80059ec <ping_request+0x140>)
 8005956:	1dfb      	adds	r3, r7, #7
 8005958:	7818      	ldrb	r0, [r3, #0]
 800595a:	4b27      	ldr	r3, [pc, #156]	; (80059f8 <ping_request+0x14c>)
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	0013      	movs	r3, r2
 8005960:	2228      	movs	r2, #40	; 0x28
 8005962:	f001 fd07 	bl	8007374 <sendto>
 8005966:	1e03      	subs	r3, r0, #0
 8005968:	d104      	bne.n	8005974 <ping_request+0xc8>
	  	 printf( "\r\n Fail to send ping-reply packet  r\n") ;
 800596a:	4b24      	ldr	r3, [pc, #144]	; (80059fc <ping_request+0x150>)
 800596c:	0018      	movs	r0, r3
 800596e:	f00c f969 	bl	8011c44 <puts>
 8005972:	e035      	b.n	80059e0 <ping_request+0x134>
	}else{
	 	  printf( "Send Ping Request  to Destination (") ;
 8005974:	4b22      	ldr	r3, [pc, #136]	; (8005a00 <ping_request+0x154>)
 8005976:	0018      	movs	r0, r3
 8005978:	f00c f8d8 	bl	8011b2c <iprintf>
          printf( "%d.%d.%d.%d )",   (addr[0]),  (addr[1]),  (addr[2]),  (addr[3])) ;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	0019      	movs	r1, r3
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	3301      	adds	r3, #1
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	001a      	movs	r2, r3
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	3302      	adds	r3, #2
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	001c      	movs	r4, r3
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	3303      	adds	r3, #3
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	481a      	ldr	r0, [pc, #104]	; (8005a04 <ping_request+0x158>)
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	0023      	movs	r3, r4
 800599e:	f00c f8c5 	bl	8011b2c <iprintf>
		  printf( " ID:%x  SeqNum:%x CheckSum:%x\r\n",   htons(PingRequest.ID),  htons(PingRequest.SeqNum),  htons(PingRequest.CheckSum)) ;
 80059a2:	4b12      	ldr	r3, [pc, #72]	; (80059ec <ping_request+0x140>)
 80059a4:	2204      	movs	r2, #4
 80059a6:	5e9b      	ldrsh	r3, [r3, r2]
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	0018      	movs	r0, r3
 80059ac:	f003 f965 	bl	8008c7a <htons>
 80059b0:	0003      	movs	r3, r0
 80059b2:	001c      	movs	r4, r3
 80059b4:	4b0d      	ldr	r3, [pc, #52]	; (80059ec <ping_request+0x140>)
 80059b6:	2206      	movs	r2, #6
 80059b8:	5e9b      	ldrsh	r3, [r3, r2]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	0018      	movs	r0, r3
 80059be:	f003 f95c 	bl	8008c7a <htons>
 80059c2:	0003      	movs	r3, r0
 80059c4:	001d      	movs	r5, r3
 80059c6:	4b09      	ldr	r3, [pc, #36]	; (80059ec <ping_request+0x140>)
 80059c8:	2202      	movs	r2, #2
 80059ca:	5e9b      	ldrsh	r3, [r3, r2]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	0018      	movs	r0, r3
 80059d0:	f003 f953 	bl	8008c7a <htons>
 80059d4:	0003      	movs	r3, r0
 80059d6:	480c      	ldr	r0, [pc, #48]	; (8005a08 <ping_request+0x15c>)
 80059d8:	002a      	movs	r2, r5
 80059da:	0021      	movs	r1, r4
 80059dc:	f00c f8a6 	bl	8011b2c <iprintf>
	}
	return 0;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	0018      	movs	r0, r3
 80059e4:	46bd      	mov	sp, r7
 80059e6:	b004      	add	sp, #16
 80059e8:	bdb0      	pop	{r4, r5, r7, pc}
 80059ea:	46c0      	nop			; (mov r8, r8)
 80059ec:	200007a8 	.word	0x200007a8
 80059f0:	20000134 	.word	0x20000134
 80059f4:	20000136 	.word	0x20000136
 80059f8:	00000bb8 	.word	0x00000bb8
 80059fc:	08015cec 	.word	0x08015cec
 8005a00:	08015d14 	.word	0x08015d14
 8005a04:	08015d38 	.word	0x08015d38
 8005a08:	08015d48 	.word	0x08015d48

08005a0c <ping_reply>:

uint8_t ping_reply(uint8_t s, uint8_t *addr,  uint16_t rlen){
 8005a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a0e:	b0b3      	sub	sp, #204	; 0xcc
 8005a10:	af02      	add	r7, sp, #8
 8005a12:	6039      	str	r1, [r7, #0]
 8005a14:	0011      	movs	r1, r2
 8005a16:	1dfb      	adds	r3, r7, #7
 8005a18:	1c02      	adds	r2, r0, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
 8005a1c:	1d3b      	adds	r3, r7, #4
 8005a1e:	1c0a      	adds	r2, r1, #0
 8005a20:	801a      	strh	r2, [r3, #0]

	 uint16_t tmp_checksum;
	 uint16_t len;
	 uint16_t i;
	 uint8_t data_buf[128];
	 uint16_t port = 3000;
 8005a22:	2636      	movs	r6, #54	; 0x36
 8005a24:	19bb      	adds	r3, r7, r6
 8005a26:	4a49      	ldr	r2, [pc, #292]	; (8005b4c <ping_reply+0x140>)
 8005a28:	801a      	strh	r2, [r3, #0]
	 PINGMSGR PingReply;
	 //ping_reply_received = 0;

		  	len = recvfrom(s, (uint8_t *)data_buf,rlen,ip_R,&port);
 8005a2a:	4c49      	ldr	r4, [pc, #292]	; (8005b50 <ping_reply+0x144>)
 8005a2c:	1d3b      	adds	r3, r7, #4
 8005a2e:	881a      	ldrh	r2, [r3, #0]
 8005a30:	2538      	movs	r5, #56	; 0x38
 8005a32:	1979      	adds	r1, r7, r5
 8005a34:	1dfb      	adds	r3, r7, #7
 8005a36:	7818      	ldrb	r0, [r3, #0]
 8005a38:	19bb      	adds	r3, r7, r6
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	0023      	movs	r3, r4
 8005a3e:	f001 fe2d 	bl	800769c <recvfrom>
 8005a42:	0002      	movs	r2, r0
 8005a44:	23bc      	movs	r3, #188	; 0xbc
 8005a46:	18fb      	adds	r3, r7, r3
 8005a48:	801a      	strh	r2, [r3, #0]
		  		if(data_buf[0] == PING_REPLY) {
 8005a4a:	0029      	movs	r1, r5
 8005a4c:	187b      	adds	r3, r7, r1
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d000      	beq.n	8005a56 <ping_reply+0x4a>
 8005a54:	e074      	b.n	8005b40 <ping_reply+0x134>
					PingReply.Type 		 = data_buf[0];
 8005a56:	187b      	adds	r3, r7, r1
 8005a58:	781a      	ldrb	r2, [r3, #0]
 8005a5a:	200c      	movs	r0, #12
 8005a5c:	183b      	adds	r3, r7, r0
 8005a5e:	701a      	strb	r2, [r3, #0]
					PingReply.Code 		 = data_buf[1];
 8005a60:	187b      	adds	r3, r7, r1
 8005a62:	785a      	ldrb	r2, [r3, #1]
 8005a64:	183b      	adds	r3, r7, r0
 8005a66:	705a      	strb	r2, [r3, #1]
					PingReply.CheckSum   = (data_buf[3]<<8) + data_buf[2];
 8005a68:	187b      	adds	r3, r7, r1
 8005a6a:	78db      	ldrb	r3, [r3, #3]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	b29a      	uxth	r2, r3
 8005a72:	187b      	adds	r3, r7, r1
 8005a74:	789b      	ldrb	r3, [r3, #2]
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	18d3      	adds	r3, r2, r3
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	b21a      	sxth	r2, r3
 8005a7e:	183b      	adds	r3, r7, r0
 8005a80:	805a      	strh	r2, [r3, #2]
					PingReply.ID 		 = (data_buf[5]<<8) + data_buf[4];
 8005a82:	187b      	adds	r3, r7, r1
 8005a84:	795b      	ldrb	r3, [r3, #5]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	021b      	lsls	r3, r3, #8
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	187b      	adds	r3, r7, r1
 8005a8e:	791b      	ldrb	r3, [r3, #4]
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	18d3      	adds	r3, r2, r3
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	b21a      	sxth	r2, r3
 8005a98:	183b      	adds	r3, r7, r0
 8005a9a:	809a      	strh	r2, [r3, #4]
					PingReply.SeqNum 	 = (data_buf[7]<<8) + data_buf[6];
 8005a9c:	187b      	adds	r3, r7, r1
 8005a9e:	79db      	ldrb	r3, [r3, #7]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	021b      	lsls	r3, r3, #8
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	187b      	adds	r3, r7, r1
 8005aa8:	799b      	ldrb	r3, [r3, #6]
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	18d3      	adds	r3, r2, r3
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	b21a      	sxth	r2, r3
 8005ab2:	183b      	adds	r3, r7, r0
 8005ab4:	80da      	strh	r2, [r3, #6]

					for(i=0; i<len-8 ; i++)
 8005ab6:	23be      	movs	r3, #190	; 0xbe
 8005ab8:	18fb      	adds	r3, r7, r3
 8005aba:	2200      	movs	r2, #0
 8005abc:	801a      	strh	r2, [r3, #0]
 8005abe:	e013      	b.n	8005ae8 <ping_reply+0xdc>
					{
						PingReply.Data[i] = data_buf[8+i];
 8005ac0:	20be      	movs	r0, #190	; 0xbe
 8005ac2:	183b      	adds	r3, r7, r0
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	2238      	movs	r2, #56	; 0x38
 8005aca:	18ba      	adds	r2, r7, r2
 8005acc:	5cd2      	ldrb	r2, [r2, r3]
 8005ace:	183b      	adds	r3, r7, r0
 8005ad0:	881b      	ldrh	r3, [r3, #0]
 8005ad2:	b251      	sxtb	r1, r2
 8005ad4:	220c      	movs	r2, #12
 8005ad6:	18ba      	adds	r2, r7, r2
 8005ad8:	18d3      	adds	r3, r2, r3
 8005ada:	1c0a      	adds	r2, r1, #0
 8005adc:	721a      	strb	r2, [r3, #8]
					for(i=0; i<len-8 ; i++)
 8005ade:	183b      	adds	r3, r7, r0
 8005ae0:	881a      	ldrh	r2, [r3, #0]
 8005ae2:	183b      	adds	r3, r7, r0
 8005ae4:	3201      	adds	r2, #1
 8005ae6:	801a      	strh	r2, [r3, #0]
 8005ae8:	23be      	movs	r3, #190	; 0xbe
 8005aea:	18fb      	adds	r3, r7, r3
 8005aec:	881a      	ldrh	r2, [r3, #0]
 8005aee:	21bc      	movs	r1, #188	; 0xbc
 8005af0:	187b      	adds	r3, r7, r1
 8005af2:	881b      	ldrh	r3, [r3, #0]
 8005af4:	3b08      	subs	r3, #8
 8005af6:	429a      	cmp	r2, r3
 8005af8:	dbe2      	blt.n	8005ac0 <ping_reply+0xb4>
					}
					tmp_checksum = ~checksum(&data_buf,len);
 8005afa:	187b      	adds	r3, r7, r1
 8005afc:	881a      	ldrh	r2, [r3, #0]
 8005afe:	2338      	movs	r3, #56	; 0x38
 8005b00:	18fb      	adds	r3, r7, r3
 8005b02:	0011      	movs	r1, r2
 8005b04:	0018      	movs	r0, r3
 8005b06:	f003 f845 	bl	8008b94 <checksum>
 8005b0a:	0003      	movs	r3, r0
 8005b0c:	001a      	movs	r2, r3
 8005b0e:	21ba      	movs	r1, #186	; 0xba
 8005b10:	187b      	adds	r3, r7, r1
 8005b12:	43d2      	mvns	r2, r2
 8005b14:	801a      	strh	r2, [r3, #0]
					if(tmp_checksum != 0xffff){
 8005b16:	187b      	adds	r3, r7, r1
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	4a0e      	ldr	r2, [pc, #56]	; (8005b54 <ping_reply+0x148>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d009      	beq.n	8005b34 <ping_reply+0x128>
						printf("tmp_checksum = %x\r\n",tmp_checksum);
 8005b20:	187b      	adds	r3, r7, r1
 8005b22:	881a      	ldrh	r2, [r3, #0]
 8005b24:	4b0c      	ldr	r3, [pc, #48]	; (8005b58 <ping_reply+0x14c>)
 8005b26:	0011      	movs	r1, r2
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f00b ffff 	bl	8011b2c <iprintf>
						ping_reply_received = 0;
 8005b2e:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <ping_reply+0x150>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	701a      	strb	r2, [r3, #0]
					}
					if(ip_R != ip_s)
					{
						ping_reply_received = 0;
 8005b34:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <ping_reply+0x150>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	701a      	strb	r2, [r3, #0]
						thrash = 1;
 8005b3a:	4b09      	ldr	r3, [pc, #36]	; (8005b60 <ping_reply+0x154>)
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	701a      	strb	r2, [r3, #0]
						thrash = 0;
					}
				}


			return 0;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	0018      	movs	r0, r3
 8005b44:	46bd      	mov	sp, r7
 8005b46:	b031      	add	sp, #196	; 0xc4
 8005b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b4a:	46c0      	nop			; (mov r8, r8)
 8005b4c:	00000bb8 	.word	0x00000bb8
 8005b50:	200000f0 	.word	0x200000f0
 8005b54:	0000ffff 	.word	0x0000ffff
 8005b58:	08015d68 	.word	0x08015d68
 8005b5c:	200007d0 	.word	0x200007d0
 8005b60:	20000810 	.word	0x20000810

08005b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b64:	b5b0      	push	{r4, r5, r7, lr}
 8005b66:	b0aa      	sub	sp, #168	; 0xa8
 8005b68:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005b6a:	f003 fe57 	bl	800981c <HAL_Init>
  //uint8_t ping = 0;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005b6e:	f000 fe0b 	bl	8006788 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005b72:	f001 f973 	bl	8006e5c <MX_GPIO_Init>
  MX_DMA_Init();
 8005b76:	f001 f953 	bl	8006e20 <MX_DMA_Init>
  MX_ADC1_Init();
 8005b7a:	f000 fe7d 	bl	8006878 <MX_ADC1_Init>
  MX_I2C2_Init();
 8005b7e:	f000 ff4f 	bl	8006a20 <MX_I2C2_Init>
  MX_SPI1_Init();
 8005b82:	f000 ff8d 	bl	8006aa0 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8005b86:	f001 f8fd 	bl	8006d84 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8005b8a:	f000 ffc7 	bl	8006b1c <MX_TIM3_Init>
  MX_TIM6_Init();
 8005b8e:	f001 f859 	bl	8006c44 <MX_TIM6_Init>
  MX_TIM7_Init();
 8005b92:	f001 f893 	bl	8006cbc <MX_TIM7_Init>
  MX_CRC_Init();
 8005b96:	f000 ff13 	bl	80069c0 <MX_CRC_Init>
  MX_TIM14_Init();
 8005b9a:	f001 f8cd 	bl	8006d38 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8005b9e:	4bdf      	ldr	r3, [pc, #892]	; (8005f1c <main+0x3b8>)
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f004 fe1b 	bl	800a7dc <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ad, 4);
 8005ba6:	49de      	ldr	r1, [pc, #888]	; (8005f20 <main+0x3bc>)
 8005ba8:	4bdc      	ldr	r3, [pc, #880]	; (8005f1c <main+0x3b8>)
 8005baa:	2204      	movs	r2, #4
 8005bac:	0018      	movs	r0, r3
 8005bae:	f004 fa0d 	bl	8009fcc <HAL_ADC_Start_DMA>

  dht();
 8005bb2:	f7fd fcdd 	bl	8003570 <dht>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)UART1_rxBuffer, 40);
 8005bb6:	49db      	ldr	r1, [pc, #876]	; (8005f24 <main+0x3c0>)
 8005bb8:	4bdb      	ldr	r3, [pc, #876]	; (8005f28 <main+0x3c4>)
 8005bba:	2228      	movs	r2, #40	; 0x28
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f009 fdc2 	bl	800f746 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8005bc2:	4bda      	ldr	r3, [pc, #872]	; (8005f2c <main+0x3c8>)
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f008 fc42 	bl	800e450 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005bcc:	4bd7      	ldr	r3, [pc, #860]	; (8005f2c <main+0x3c8>)
 8005bce:	2104      	movs	r1, #4
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f008 fc3d 	bl	800e450 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8005bd6:	4bd5      	ldr	r3, [pc, #852]	; (8005f2c <main+0x3c8>)
 8005bd8:	210c      	movs	r1, #12
 8005bda:	0018      	movs	r0, r3
 8005bdc:	f008 fc38 	bl	800e450 <HAL_TIM_PWM_Start>
  GetMCUInfo();
 8005be0:	f7ff fcf2 	bl	80055c8 <GetMCUInfo>

  ledvd_off;
 8005be4:	4bd2      	ldr	r3, [pc, #840]	; (8005f30 <main+0x3cc>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	2110      	movs	r1, #16
 8005bea:	0018      	movs	r0, r3
 8005bec:	f005 fddf 	bl	800b7ae <HAL_GPIO_WritePin>
  ledvm_off;
 8005bf0:	4bcf      	ldr	r3, [pc, #828]	; (8005f30 <main+0x3cc>)
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	2108      	movs	r1, #8
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f005 fdd9 	bl	800b7ae <HAL_GPIO_WritePin>

  sprintf(msg3, "V.%2.1fA ", version);
 8005bfc:	4bcd      	ldr	r3, [pc, #820]	; (8005f34 <main+0x3d0>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	1c18      	adds	r0, r3, #0
 8005c02:	f7fc ff61 	bl	8002ac8 <__aeabi_f2d>
 8005c06:	0002      	movs	r2, r0
 8005c08:	000b      	movs	r3, r1
 8005c0a:	49cb      	ldr	r1, [pc, #812]	; (8005f38 <main+0x3d4>)
 8005c0c:	48cb      	ldr	r0, [pc, #812]	; (8005f3c <main+0x3d8>)
 8005c0e:	f00c f827 	bl	8011c60 <siprintf>

  SSD1306_Init();
 8005c12:	f001 ffc9 	bl	8007ba8 <SSD1306_Init>
  SSD1306_GotoXY (0,15);
 8005c16:	210f      	movs	r1, #15
 8005c18:	2000      	movs	r0, #0
 8005c1a:	f002 f955 	bl	8007ec8 <SSD1306_GotoXY>
  SSD1306_Puts (" NOBREAK ", &Font_11x18, 1);
 8005c1e:	49c8      	ldr	r1, [pc, #800]	; (8005f40 <main+0x3dc>)
 8005c20:	4bc8      	ldr	r3, [pc, #800]	; (8005f44 <main+0x3e0>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	0018      	movs	r0, r3
 8005c26:	f002 f9e9 	bl	8007ffc <SSD1306_Puts>
  SSD1306_GotoXY (10, 38);
 8005c2a:	2126      	movs	r1, #38	; 0x26
 8005c2c:	200a      	movs	r0, #10
 8005c2e:	f002 f94b 	bl	8007ec8 <SSD1306_GotoXY>
  SSD1306_Puts ("SELPROM", &Font_11x18, 1);
 8005c32:	49c3      	ldr	r1, [pc, #780]	; (8005f40 <main+0x3dc>)
 8005c34:	4bc4      	ldr	r3, [pc, #784]	; (8005f48 <main+0x3e4>)
 8005c36:	2201      	movs	r2, #1
 8005c38:	0018      	movs	r0, r3
 8005c3a:	f002 f9df 	bl	8007ffc <SSD1306_Puts>
  SSD1306_GotoXY (93, 53);
 8005c3e:	2135      	movs	r1, #53	; 0x35
 8005c40:	205d      	movs	r0, #93	; 0x5d
 8005c42:	f002 f941 	bl	8007ec8 <SSD1306_GotoXY>
  SSD1306_Puts (msg3, &Font_7x10, 1);
 8005c46:	49c1      	ldr	r1, [pc, #772]	; (8005f4c <main+0x3e8>)
 8005c48:	4bbc      	ldr	r3, [pc, #752]	; (8005f3c <main+0x3d8>)
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	0018      	movs	r0, r3
 8005c4e:	f002 f9d5 	bl	8007ffc <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8005c52:	f002 f86d 	bl	8007d30 <SSD1306_UpdateScreen>

  HAL_Delay(200);
 8005c56:	20c8      	movs	r0, #200	; 0xc8
 8005c58:	f003 fe66 	bl	8009928 <HAL_Delay>

  TIM3->CCR1 = 0;
 8005c5c:	4bbc      	ldr	r3, [pc, #752]	; (8005f50 <main+0x3ec>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 0;
 8005c62:	4bbb      	ldr	r3, [pc, #748]	; (8005f50 <main+0x3ec>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR4 = 0;
 8005c68:	4bb9      	ldr	r3, [pc, #740]	; (8005f50 <main+0x3ec>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	641a      	str	r2, [r3, #64]	; 0x40

  HAL_Delay (1000);
 8005c6e:	23fa      	movs	r3, #250	; 0xfa
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	0018      	movs	r0, r3
 8005c74:	f003 fe58 	bl	8009928 <HAL_Delay>

  TIM3->CCR1 = 0;
 8005c78:	4bb5      	ldr	r3, [pc, #724]	; (8005f50 <main+0x3ec>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	635a      	str	r2, [r3, #52]	; 0x34
  TIM3->CCR2 = 0;
 8005c7e:	4bb4      	ldr	r3, [pc, #720]	; (8005f50 <main+0x3ec>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	639a      	str	r2, [r3, #56]	; 0x38
  TIM3->CCR4 = 0;
 8005c84:	4bb2      	ldr	r3, [pc, #712]	; (8005f50 <main+0x3ec>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	641a      	str	r2, [r3, #64]	; 0x40

  timeOut = timeOutLen;
 8005c8a:	4bb2      	ldr	r3, [pc, #712]	; (8005f54 <main+0x3f0>)
 8005c8c:	781a      	ldrb	r2, [r3, #0]
 8005c8e:	4bb2      	ldr	r3, [pc, #712]	; (8005f58 <main+0x3f4>)
 8005c90:	701a      	strb	r2, [r3, #0]
  if(!b2){
 8005c92:	4ba7      	ldr	r3, [pc, #668]	; (8005f30 <main+0x3cc>)
 8005c94:	2180      	movs	r1, #128	; 0x80
 8005c96:	0018      	movs	r0, r3
 8005c98:	f005 fd6c 	bl	800b774 <HAL_GPIO_ReadPin>
 8005c9c:	1e03      	subs	r3, r0, #0
 8005c9e:	d113      	bne.n	8005cc8 <main+0x164>
	  modo_prog = 1;
 8005ca0:	4bae      	ldr	r3, [pc, #696]	; (8005f5c <main+0x3f8>)
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(500);
 8005ca6:	23fa      	movs	r3, #250	; 0xfa
 8005ca8:	005b      	lsls	r3, r3, #1
 8005caa:	0018      	movs	r0, r3
 8005cac:	f003 fe3c 	bl	8009928 <HAL_Delay>
	  init_udp();
 8005cb0:	f7fe f994 	bl	8003fdc <init_udp>
	  isdom = read_eeprom(ADD_ISD);
 8005cb4:	203c      	movs	r0, #60	; 0x3c
 8005cb6:	f7fd fa23 	bl	8003100 <read_eeprom>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	1e5a      	subs	r2, r3, #1
 8005cbe:	4193      	sbcs	r3, r2
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	4ba7      	ldr	r3, [pc, #668]	; (8005f60 <main+0x3fc>)
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	e018      	b.n	8005cfa <main+0x196>
  }else {
	  le_eep();
 8005cc8:	f7ff fb74 	bl	80053b4 <le_eep>
	  modo_prog = 0;
 8005ccc:	4ba3      	ldr	r3, [pc, #652]	; (8005f5c <main+0x3f8>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	701a      	strb	r2, [r3, #0]
	  init_udp();
 8005cd2:	f7fe f983 	bl	8003fdc <init_udp>
	  //if(isdom){tryDNS=1;}
	  dominio[0] = '\0';
 8005cd6:	4ba3      	ldr	r3, [pc, #652]	; (8005f64 <main+0x400>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	701a      	strb	r2, [r3, #0]
	  char tempo[20];
	  sprintf(tempo, "Time out      %03ds", timeOutLen);
 8005cdc:	4b9d      	ldr	r3, [pc, #628]	; (8005f54 <main+0x3f0>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	001a      	movs	r2, r3
 8005ce2:	49a1      	ldr	r1, [pc, #644]	; (8005f68 <main+0x404>)
 8005ce4:	2484      	movs	r4, #132	; 0x84
 8005ce6:	193b      	adds	r3, r7, r4
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f00b ffb9 	bl	8011c60 <siprintf>
	  strcat(dominio, tempo);
 8005cee:	193a      	adds	r2, r7, r4
 8005cf0:	4b9c      	ldr	r3, [pc, #624]	; (8005f64 <main+0x400>)
 8005cf2:	0011      	movs	r1, r2
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f00b ffd3 	bl	8011ca0 <strcat>
  }

  SSD1306_Clear();
 8005cfa:	f002 fb34 	bl	8008366 <SSD1306_Clear>

  HAL_TIM_Base_Start_IT(&htim7);
 8005cfe:	4b9b      	ldr	r3, [pc, #620]	; (8005f6c <main+0x408>)
 8005d00:	0018      	movs	r0, r3
 8005d02:	f008 faef 	bl	800e2e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8005d06:	4b9a      	ldr	r3, [pc, #616]	; (8005f70 <main+0x40c>)
 8005d08:	0018      	movs	r0, r3
 8005d0a:	f008 faeb 	bl	800e2e4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim14);
 8005d0e:	4b99      	ldr	r3, [pc, #612]	; (8005f74 <main+0x410>)
 8005d10:	0018      	movs	r0, r3
 8005d12:	f008 fae7 	bl	800e2e4 <HAL_TIM_Base_Start_IT>
  HAL_Delay(1000);
 8005d16:	23fa      	movs	r3, #250	; 0xfa
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f003 fe04 	bl	8009928 <HAL_Delay>
  curtoci = 0;
 8005d20:	4b95      	ldr	r3, [pc, #596]	; (8005f78 <main+0x414>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //Eniva o pacote para o servidor;
	  if (send_to_server && !ping_fail){
 8005d26:	4b95      	ldr	r3, [pc, #596]	; (8005f7c <main+0x418>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d008      	beq.n	8005d40 <main+0x1dc>
 8005d2e:	4b94      	ldr	r3, [pc, #592]	; (8005f80 <main+0x41c>)
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d104      	bne.n	8005d40 <main+0x1dc>
		  monta_status();
 8005d36:	f7fe fa33 	bl	80041a0 <monta_status>
		  send_to_server = 0;
 8005d3a:	4b90      	ldr	r3, [pc, #576]	; (8005f7c <main+0x418>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	701a      	strb	r2, [r3, #0]
	  }

	  //Verifica a conecção com o servidor;
	  if(!modo_prog){
 8005d40:	4b86      	ldr	r3, [pc, #536]	; (8005f5c <main+0x3f8>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2201      	movs	r2, #1
 8005d46:	4053      	eors	r3, r2
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d02d      	beq.n	8005daa <main+0x246>
		  if(pinga){
 8005d4e:	4b8d      	ldr	r3, [pc, #564]	; (8005f84 <main+0x420>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d029      	beq.n	8005daa <main+0x246>
			  pinga = 0;
 8005d56:	4b8b      	ldr	r3, [pc, #556]	; (8005f84 <main+0x420>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	701a      	strb	r2, [r3, #0]
			  ping_reply_received = 0;
 8005d5c:	4b8a      	ldr	r3, [pc, #552]	; (8005f88 <main+0x424>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	701a      	strb	r2, [r3, #0]
			  IINCHIP_WRITE(Sn_PROTO(0), IPPROTO_ICMP); //Muda o W5500 para modo ICMP;
 8005d62:	4b8a      	ldr	r3, [pc, #552]	; (8005f8c <main+0x428>)
 8005d64:	2101      	movs	r1, #1
 8005d66:	0018      	movs	r0, r3
 8005d68:	f002 fffa 	bl	8008d60 <WIZCHIP_WRITE>
			  uint8_t ping = ping_count(0, 3, &ip_s); //Tenta o ping 3x;
 8005d6c:	259b      	movs	r5, #155	; 0x9b
 8005d6e:	197c      	adds	r4, r7, r5
 8005d70:	4b87      	ldr	r3, [pc, #540]	; (8005f90 <main+0x42c>)
 8005d72:	001a      	movs	r2, r3
 8005d74:	2103      	movs	r1, #3
 8005d76:	2000      	movs	r0, #0
 8005d78:	f7ff fc9a 	bl	80056b0 <ping_count>
 8005d7c:	0003      	movs	r3, r0
 8005d7e:	7023      	strb	r3, [r4, #0]
			  if(ping == SUCCESS){ //Se conseguir, volta para modo IP;
 8005d80:	197b      	adds	r3, r7, r5
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b03      	cmp	r3, #3
 8005d86:	d108      	bne.n	8005d9a <main+0x236>
				  ping_fail = 0;
 8005d88:	4b7d      	ldr	r3, [pc, #500]	; (8005f80 <main+0x41c>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	701a      	strb	r2, [r3, #0]
				  IINCHIP_WRITE(Sn_PROTO(0), IPPROTO_IP);
 8005d8e:	4b7f      	ldr	r3, [pc, #508]	; (8005f8c <main+0x428>)
 8005d90:	2100      	movs	r1, #0
 8005d92:	0018      	movs	r0, r3
 8005d94:	f002 ffe4 	bl	8008d60 <WIZCHIP_WRITE>
 8005d98:	e004      	b.n	8005da4 <main+0x240>
			  }else{ //Se falhar, reinicia o W5500;
				  ping_fail = 1;
 8005d9a:	4b79      	ldr	r3, [pc, #484]	; (8005f80 <main+0x41c>)
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	701a      	strb	r2, [r3, #0]
				  reboot_wiz();
 8005da0:	f7ff fc3e 	bl	8005620 <reboot_wiz>
			  }
			  pinga = 0;
 8005da4:	4b77      	ldr	r3, [pc, #476]	; (8005f84 <main+0x420>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(!fan1){
 8005daa:	4b61      	ldr	r3, [pc, #388]	; (8005f30 <main+0x3cc>)
 8005dac:	2101      	movs	r1, #1
 8005dae:	0018      	movs	r0, r3
 8005db0:	f005 fce0 	bl	800b774 <HAL_GPIO_ReadPin>
 8005db4:	1e03      	subs	r3, r0, #0
 8005db6:	d102      	bne.n	8005dbe <main+0x25a>
		  fan1_cont = 3;
 8005db8:	4b76      	ldr	r3, [pc, #472]	; (8005f94 <main+0x430>)
 8005dba:	2203      	movs	r2, #3
 8005dbc:	701a      	strb	r2, [r3, #0]
	  }
	  if(!fan2){
 8005dbe:	2380      	movs	r3, #128	; 0x80
 8005dc0:	005a      	lsls	r2, r3, #1
 8005dc2:	23a0      	movs	r3, #160	; 0xa0
 8005dc4:	05db      	lsls	r3, r3, #23
 8005dc6:	0011      	movs	r1, r2
 8005dc8:	0018      	movs	r0, r3
 8005dca:	f005 fcd3 	bl	800b774 <HAL_GPIO_ReadPin>
 8005dce:	1e03      	subs	r3, r0, #0
 8005dd0:	d102      	bne.n	8005dd8 <main+0x274>
	  	  fan2_cont = 3;
 8005dd2:	4b71      	ldr	r3, [pc, #452]	; (8005f98 <main+0x434>)
 8005dd4:	2203      	movs	r2, #3
 8005dd6:	701a      	strb	r2, [r3, #0]
	  }

	  if(prot_curto)
 8005dd8:	23a0      	movs	r3, #160	; 0xa0
 8005dda:	05db      	lsls	r3, r3, #23
 8005ddc:	2101      	movs	r1, #1
 8005dde:	0018      	movs	r0, r3
 8005de0:	f005 fcc8 	bl	800b774 <HAL_GPIO_ReadPin>
 8005de4:	1e03      	subs	r3, r0, #0
 8005de6:	d006      	beq.n	8005df6 <main+0x292>
	  {
		  curtoci = 1;
 8005de8:	4b63      	ldr	r3, [pc, #396]	; (8005f78 <main+0x414>)
 8005dea:	2201      	movs	r2, #1
 8005dec:	701a      	strb	r2, [r3, #0]
		  statusTELA = 3;
 8005dee:	4b6b      	ldr	r3, [pc, #428]	; (8005f9c <main+0x438>)
 8005df0:	2203      	movs	r2, #3
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	e019      	b.n	8005e2a <main+0x2c6>
	  }else
	  {
		  if(energ == 'B' && modo_teste)
 8005df6:	4b6a      	ldr	r3, [pc, #424]	; (8005fa0 <main+0x43c>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b42      	cmp	r3, #66	; 0x42
 8005dfc:	d107      	bne.n	8005e0e <main+0x2aa>
 8005dfe:	4b69      	ldr	r3, [pc, #420]	; (8005fa4 <main+0x440>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d003      	beq.n	8005e0e <main+0x2aa>
		  {
			  statusTELA = 1;
 8005e06:	4b65      	ldr	r3, [pc, #404]	; (8005f9c <main+0x438>)
 8005e08:	2201      	movs	r2, #1
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	e006      	b.n	8005e1c <main+0x2b8>
		  }else
		  if(energ == 'B')
 8005e0e:	4b64      	ldr	r3, [pc, #400]	; (8005fa0 <main+0x43c>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b42      	cmp	r3, #66	; 0x42
 8005e14:	d102      	bne.n	8005e1c <main+0x2b8>
		  {
			  statusTELA = 4;
 8005e16:	4b61      	ldr	r3, [pc, #388]	; (8005f9c <main+0x438>)
 8005e18:	2204      	movs	r2, #4
 8005e1a:	701a      	strb	r2, [r3, #0]
		  }
		  if(energ == 'R')
 8005e1c:	4b60      	ldr	r3, [pc, #384]	; (8005fa0 <main+0x43c>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b52      	cmp	r3, #82	; 0x52
 8005e22:	d102      	bne.n	8005e2a <main+0x2c6>
		  {
	  		  statusTELA = 2;
 8005e24:	4b5d      	ldr	r3, [pc, #372]	; (8005f9c <main+0x438>)
 8005e26:	2202      	movs	r2, #2
 8005e28:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  //Recebe Pacotes UDP;
	  		if(getSn_IR(1) & Sn_IR_RECV)
 8005e2a:	238a      	movs	r3, #138	; 0x8a
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	0018      	movs	r0, r3
 8005e30:	f002 ff44 	bl	8008cbc <WIZCHIP_READ>
 8005e34:	0003      	movs	r3, r0
 8005e36:	001a      	movs	r2, r3
 8005e38:	2304      	movs	r3, #4
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	d005      	beq.n	8005e4a <main+0x2e6>
		      {
		  	  setSn_IR(1, Sn_IR_RECV);
 8005e3e:	238a      	movs	r3, #138	; 0x8a
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	2104      	movs	r1, #4
 8005e44:	0018      	movs	r0, r3
 8005e46:	f002 ff8b 	bl	8008d60 <WIZCHIP_WRITE>
			  }
			if((len=getSn_RX_RSR(1))>0)
 8005e4a:	2001      	movs	r0, #1
 8005e4c:	f003 f926 	bl	800909c <getSn_RX_RSR>
 8005e50:	0003      	movs	r3, r0
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	4b54      	ldr	r3, [pc, #336]	; (8005fa8 <main+0x444>)
 8005e56:	701a      	strb	r2, [r3, #0]
 8005e58:	4b53      	ldr	r3, [pc, #332]	; (8005fa8 <main+0x444>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d100      	bne.n	8005e62 <main+0x2fe>
 8005e60:	e135      	b.n	80060ce <main+0x56a>
			  {
			 memset(msg5,1,len+1);
 8005e62:	4b51      	ldr	r3, [pc, #324]	; (8005fa8 <main+0x444>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	3301      	adds	r3, #1
 8005e68:	001a      	movs	r2, r3
 8005e6a:	4b50      	ldr	r3, [pc, #320]	; (8005fac <main+0x448>)
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	0018      	movs	r0, r3
 8005e70:	f00a ffdd 	bl	8010e2e <memset>
			 len = recvfrom(1,msg5, len, ip_R,&port_R);
 8005e74:	4b4c      	ldr	r3, [pc, #304]	; (8005fa8 <main+0x444>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	484d      	ldr	r0, [pc, #308]	; (8005fb0 <main+0x44c>)
 8005e7c:	494b      	ldr	r1, [pc, #300]	; (8005fac <main+0x448>)
 8005e7e:	4b4d      	ldr	r3, [pc, #308]	; (8005fb4 <main+0x450>)
 8005e80:	9300      	str	r3, [sp, #0]
 8005e82:	0003      	movs	r3, r0
 8005e84:	2001      	movs	r0, #1
 8005e86:	f001 fc09 	bl	800769c <recvfrom>
 8005e8a:	0003      	movs	r3, r0
 8005e8c:	b2da      	uxtb	r2, r3
 8005e8e:	4b46      	ldr	r3, [pc, #280]	; (8005fa8 <main+0x444>)
 8005e90:	701a      	strb	r2, [r3, #0]
			 if(len < 50){
 8005e92:	4b45      	ldr	r3, [pc, #276]	; (8005fa8 <main+0x444>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	2b31      	cmp	r3, #49	; 0x31
 8005e98:	d900      	bls.n	8005e9c <main+0x338>
 8005e9a:	e118      	b.n	80060ce <main+0x56a>

			 char mensagem[60] = "";
 8005e9c:	1d3b      	adds	r3, r7, #4
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	2238      	movs	r2, #56	; 0x38
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	0018      	movs	r0, r3
 8005eaa:	f00a ffc0 	bl	8010e2e <memset>
			 char mensagemcp[60] = "";
 8005eae:	2340      	movs	r3, #64	; 0x40
 8005eb0:	18fb      	adds	r3, r7, r3
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	2238      	movs	r2, #56	; 0x38
 8005eba:	2100      	movs	r1, #0
 8005ebc:	0018      	movs	r0, r3
 8005ebe:	f00a ffb6 	bl	8010e2e <memset>
			 uint8_t crc[4] = "";
 8005ec2:	2380      	movs	r3, #128	; 0x80
 8005ec4:	18fb      	adds	r3, r7, r3
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	601a      	str	r2, [r3, #0]
			 uint8_t ccrc[4] = "";
 8005eca:	237c      	movs	r3, #124	; 0x7c
 8005ecc:	18fb      	adds	r3, r7, r3
 8005ece:	2200      	movs	r2, #0
 8005ed0:	601a      	str	r2, [r3, #0]
			 int i;
			 for(x=0; x<len-6; x++){
 8005ed2:	4b39      	ldr	r3, [pc, #228]	; (8005fb8 <main+0x454>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	701a      	strb	r2, [r3, #0]
 8005ed8:	e00f      	b.n	8005efa <main+0x396>
				 mensagem[x] = msg5[x+1];
 8005eda:	4b37      	ldr	r3, [pc, #220]	; (8005fb8 <main+0x454>)
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	4a35      	ldr	r2, [pc, #212]	; (8005fb8 <main+0x454>)
 8005ee2:	7812      	ldrb	r2, [r2, #0]
 8005ee4:	0011      	movs	r1, r2
 8005ee6:	4a31      	ldr	r2, [pc, #196]	; (8005fac <main+0x448>)
 8005ee8:	5cd2      	ldrb	r2, [r2, r3]
 8005eea:	1d3b      	adds	r3, r7, #4
 8005eec:	545a      	strb	r2, [r3, r1]
			 for(x=0; x<len-6; x++){
 8005eee:	4b32      	ldr	r3, [pc, #200]	; (8005fb8 <main+0x454>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	4b30      	ldr	r3, [pc, #192]	; (8005fb8 <main+0x454>)
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	4b2f      	ldr	r3, [pc, #188]	; (8005fb8 <main+0x454>)
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	001a      	movs	r2, r3
 8005f00:	4b29      	ldr	r3, [pc, #164]	; (8005fa8 <main+0x444>)
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	3b06      	subs	r3, #6
 8005f06:	429a      	cmp	r2, r3
 8005f08:	dbe7      	blt.n	8005eda <main+0x376>
			 }
			 i = 5;
 8005f0a:	2305      	movs	r3, #5
 8005f0c:	229c      	movs	r2, #156	; 0x9c
 8005f0e:	18ba      	adds	r2, r7, r2
 8005f10:	6013      	str	r3, [r2, #0]
			 for(x=0;x<4;x++){
 8005f12:	4b29      	ldr	r3, [pc, #164]	; (8005fb8 <main+0x454>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e06a      	b.n	8005ff0 <main+0x48c>
 8005f1a:	46c0      	nop			; (mov r8, r8)
 8005f1c:	20000370 	.word	0x20000370
 8005f20:	2000074c 	.word	0x2000074c
 8005f24:	200006c4 	.word	0x200006c4
 8005f28:	20000634 	.word	0x20000634
 8005f2c:	20000504 	.word	0x20000504
 8005f30:	50000400 	.word	0x50000400
 8005f34:	20000144 	.word	0x20000144
 8005f38:	08015d7c 	.word	0x08015d7c
 8005f3c:	200006dc 	.word	0x200006dc
 8005f40:	20000008 	.word	0x20000008
 8005f44:	08015d88 	.word	0x08015d88
 8005f48:	08015d94 	.word	0x08015d94
 8005f4c:	20000000 	.word	0x20000000
 8005f50:	40000400 	.word	0x40000400
 8005f54:	20000129 	.word	0x20000129
 8005f58:	20000128 	.word	0x20000128
 8005f5c:	20000806 	.word	0x20000806
 8005f60:	200007a2 	.word	0x200007a2
 8005f64:	20000764 	.word	0x20000764
 8005f68:	08015c74 	.word	0x08015c74
 8005f6c:	2000059c 	.word	0x2000059c
 8005f70:	20000550 	.word	0x20000550
 8005f74:	200005e8 	.word	0x200005e8
 8005f78:	20000813 	.word	0x20000813
 8005f7c:	200007a3 	.word	0x200007a3
 8005f80:	200007a4 	.word	0x200007a4
 8005f84:	200007a5 	.word	0x200007a5
 8005f88:	200007d0 	.word	0x200007d0
 8005f8c:	00001408 	.word	0x00001408
 8005f90:	200000d4 	.word	0x200000d4
 8005f94:	20000138 	.word	0x20000138
 8005f98:	20000139 	.word	0x20000139
 8005f9c:	20000814 	.word	0x20000814
 8005fa0:	200000d2 	.word	0x200000d2
 8005fa4:	20000811 	.word	0x20000811
 8005fa8:	200007a1 	.word	0x200007a1
 8005fac:	20000064 	.word	0x20000064
 8005fb0:	200000f0 	.word	0x200000f0
 8005fb4:	200000f4 	.word	0x200000f4
 8005fb8:	200007d1 	.word	0x200007d1
				 ccrc[x] = msg5[len-i];
 8005fbc:	4b80      	ldr	r3, [pc, #512]	; (80061c0 <main+0x65c>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	001a      	movs	r2, r3
 8005fc2:	209c      	movs	r0, #156	; 0x9c
 8005fc4:	183b      	adds	r3, r7, r0
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	4a7e      	ldr	r2, [pc, #504]	; (80061c4 <main+0x660>)
 8005fcc:	7812      	ldrb	r2, [r2, #0]
 8005fce:	0011      	movs	r1, r2
 8005fd0:	4a7d      	ldr	r2, [pc, #500]	; (80061c8 <main+0x664>)
 8005fd2:	5cd2      	ldrb	r2, [r2, r3]
 8005fd4:	237c      	movs	r3, #124	; 0x7c
 8005fd6:	18fb      	adds	r3, r7, r3
 8005fd8:	545a      	strb	r2, [r3, r1]
				 i--;
 8005fda:	183b      	adds	r3, r7, r0
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	183a      	adds	r2, r7, r0
 8005fe2:	6013      	str	r3, [r2, #0]
			 for(x=0;x<4;x++){
 8005fe4:	4b77      	ldr	r3, [pc, #476]	; (80061c4 <main+0x660>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	3301      	adds	r3, #1
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	4b75      	ldr	r3, [pc, #468]	; (80061c4 <main+0x660>)
 8005fee:	701a      	strb	r2, [r3, #0]
 8005ff0:	4b74      	ldr	r3, [pc, #464]	; (80061c4 <main+0x660>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b03      	cmp	r3, #3
 8005ff6:	d9e1      	bls.n	8005fbc <main+0x458>
			 }

			 strcpy(mensagemcp, mensagem);
 8005ff8:	1d3a      	adds	r2, r7, #4
 8005ffa:	2440      	movs	r4, #64	; 0x40
 8005ffc:	193b      	adds	r3, r7, r4
 8005ffe:	0011      	movs	r1, r2
 8006000:	0018      	movs	r0, r3
 8006002:	f00b fe5a 	bl	8011cba <strcpy>
			 docrc(crc, mensagemcp, strlen(mensagemcp));
 8006006:	193b      	adds	r3, r7, r4
 8006008:	0018      	movs	r0, r3
 800600a:	f7fa f883 	bl	8000114 <strlen>
 800600e:	0003      	movs	r3, r0
 8006010:	001a      	movs	r2, r3
 8006012:	1939      	adds	r1, r7, r4
 8006014:	2480      	movs	r4, #128	; 0x80
 8006016:	193b      	adds	r3, r7, r4
 8006018:	0018      	movs	r0, r3
 800601a:	f7fd f8d1 	bl	80031c0 <docrc>


			 sendto(1,crc,4,ip_s,port_s);
 800601e:	4b6b      	ldr	r3, [pc, #428]	; (80061cc <main+0x668>)
 8006020:	881b      	ldrh	r3, [r3, #0]
 8006022:	4a6b      	ldr	r2, [pc, #428]	; (80061d0 <main+0x66c>)
 8006024:	1939      	adds	r1, r7, r4
 8006026:	9300      	str	r3, [sp, #0]
 8006028:	0013      	movs	r3, r2
 800602a:	2204      	movs	r2, #4
 800602c:	2001      	movs	r0, #1
 800602e:	f001 f9a1 	bl	8007374 <sendto>
			 sendto(1,ccrc,4,ip_s,port_s);
 8006032:	4b66      	ldr	r3, [pc, #408]	; (80061cc <main+0x668>)
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	4a66      	ldr	r2, [pc, #408]	; (80061d0 <main+0x66c>)
 8006038:	257c      	movs	r5, #124	; 0x7c
 800603a:	1979      	adds	r1, r7, r5
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	0013      	movs	r3, r2
 8006040:	2204      	movs	r2, #4
 8006042:	2001      	movs	r0, #1
 8006044:	f001 f996 	bl	8007374 <sendto>

			 if(crc[0] == ccrc[0] && crc[1] == ccrc[1] && crc[2] == ccrc[2] && crc[3] == ccrc[3]){
 8006048:	0021      	movs	r1, r4
 800604a:	187b      	adds	r3, r7, r1
 800604c:	781a      	ldrb	r2, [r3, #0]
 800604e:	0028      	movs	r0, r5
 8006050:	183b      	adds	r3, r7, r0
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d13a      	bne.n	80060ce <main+0x56a>
 8006058:	187b      	adds	r3, r7, r1
 800605a:	785a      	ldrb	r2, [r3, #1]
 800605c:	183b      	adds	r3, r7, r0
 800605e:	785b      	ldrb	r3, [r3, #1]
 8006060:	429a      	cmp	r2, r3
 8006062:	d134      	bne.n	80060ce <main+0x56a>
 8006064:	187b      	adds	r3, r7, r1
 8006066:	789a      	ldrb	r2, [r3, #2]
 8006068:	183b      	adds	r3, r7, r0
 800606a:	789b      	ldrb	r3, [r3, #2]
 800606c:	429a      	cmp	r2, r3
 800606e:	d12e      	bne.n	80060ce <main+0x56a>
 8006070:	187b      	adds	r3, r7, r1
 8006072:	78da      	ldrb	r2, [r3, #3]
 8006074:	183b      	adds	r3, r7, r0
 8006076:	78db      	ldrb	r3, [r3, #3]
 8006078:	429a      	cmp	r2, r3
 800607a:	d128      	bne.n	80060ce <main+0x56a>
				 if(msg5[0] == '$' && msg5[len-1] == '#'){
 800607c:	4b52      	ldr	r3, [pc, #328]	; (80061c8 <main+0x664>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b24      	cmp	r3, #36	; 0x24
 8006082:	d124      	bne.n	80060ce <main+0x56a>
 8006084:	4b4e      	ldr	r3, [pc, #312]	; (80061c0 <main+0x65c>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	3b01      	subs	r3, #1
 800608a:	4a4f      	ldr	r2, [pc, #316]	; (80061c8 <main+0x664>)
 800608c:	5cd3      	ldrb	r3, [r2, r3]
 800608e:	2b23      	cmp	r3, #35	; 0x23
 8006090:	d11d      	bne.n	80060ce <main+0x56a>
					 if(msg5[1] == '?'){
 8006092:	4b4d      	ldr	r3, [pc, #308]	; (80061c8 <main+0x664>)
 8006094:	785b      	ldrb	r3, [r3, #1]
 8006096:	2b3f      	cmp	r3, #63	; 0x3f
 8006098:	d104      	bne.n	80060a4 <main+0x540>
						 tratapergunta(mensagem);
 800609a:	1d3b      	adds	r3, r7, #4
 800609c:	0018      	movs	r0, r3
 800609e:	f7fe fd63 	bl	8004b68 <tratapergunta>
 80060a2:	e014      	b.n	80060ce <main+0x56a>
					 }
					 else if(msg5[1] == '%'){
 80060a4:	4b48      	ldr	r3, [pc, #288]	; (80061c8 <main+0x664>)
 80060a6:	785b      	ldrb	r3, [r3, #1]
 80060a8:	2b25      	cmp	r3, #37	; 0x25
 80060aa:	d104      	bne.n	80060b6 <main+0x552>
						 tratateste(mensagem);
 80060ac:	1d3b      	adds	r3, r7, #4
 80060ae:	0018      	movs	r0, r3
 80060b0:	f7ff f8f4 	bl	800529c <tratateste>
 80060b4:	e00b      	b.n	80060ce <main+0x56a>
					 }
					 else if(modo_prog){
 80060b6:	4b47      	ldr	r3, [pc, #284]	; (80061d4 <main+0x670>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d007      	beq.n	80060ce <main+0x56a>
						 trataconfig(mensagem, len-4);
 80060be:	4b40      	ldr	r3, [pc, #256]	; (80061c0 <main+0x65c>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	1f1a      	subs	r2, r3, #4
 80060c4:	1d3b      	adds	r3, r7, #4
 80060c6:	0011      	movs	r1, r2
 80060c8:	0018      	movs	r0, r3
 80060ca:	f7fe fd91 	bl	8004bf0 <trataconfig>

			 }
		   }


  switch(statusTELA){
 80060ce:	4b42      	ldr	r3, [pc, #264]	; (80061d8 <main+0x674>)
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d053      	beq.n	800617e <main+0x61a>
 80060d6:	dc6b      	bgt.n	80061b0 <main+0x64c>
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d037      	beq.n	800614c <main+0x5e8>
 80060dc:	dc68      	bgt.n	80061b0 <main+0x64c>
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d002      	beq.n	80060e8 <main+0x584>
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d019      	beq.n	800611a <main+0x5b6>
 80060e6:	e063      	b.n	80061b0 <main+0x64c>
  case 1:
	  energia[0]=' ';
 80060e8:	4b3c      	ldr	r3, [pc, #240]	; (80061dc <main+0x678>)
 80060ea:	2220      	movs	r2, #32
 80060ec:	701a      	strb	r2, [r3, #0]
	  energia[1]=' ';
 80060ee:	4b3b      	ldr	r3, [pc, #236]	; (80061dc <main+0x678>)
 80060f0:	2220      	movs	r2, #32
 80060f2:	705a      	strb	r2, [r3, #1]
	  energia[2]=' ';
 80060f4:	4b39      	ldr	r3, [pc, #228]	; (80061dc <main+0x678>)
 80060f6:	2220      	movs	r2, #32
 80060f8:	709a      	strb	r2, [r3, #2]
	  energia[3]='T';
 80060fa:	4b38      	ldr	r3, [pc, #224]	; (80061dc <main+0x678>)
 80060fc:	2254      	movs	r2, #84	; 0x54
 80060fe:	70da      	strb	r2, [r3, #3]
	  energia[4]='E';
 8006100:	4b36      	ldr	r3, [pc, #216]	; (80061dc <main+0x678>)
 8006102:	2245      	movs	r2, #69	; 0x45
 8006104:	711a      	strb	r2, [r3, #4]
	  energia[5]='S';
 8006106:	4b35      	ldr	r3, [pc, #212]	; (80061dc <main+0x678>)
 8006108:	2253      	movs	r2, #83	; 0x53
 800610a:	715a      	strb	r2, [r3, #5]
	  energia[6]='T';
 800610c:	4b33      	ldr	r3, [pc, #204]	; (80061dc <main+0x678>)
 800610e:	2254      	movs	r2, #84	; 0x54
 8006110:	719a      	strb	r2, [r3, #6]
	  energia[7]='E';
 8006112:	4b32      	ldr	r3, [pc, #200]	; (80061dc <main+0x678>)
 8006114:	2245      	movs	r2, #69	; 0x45
 8006116:	71da      	strb	r2, [r3, #7]
	 break;
 8006118:	e04a      	b.n	80061b0 <main+0x64c>
  case 2:
  	  energia[0]=' ';
 800611a:	4b30      	ldr	r3, [pc, #192]	; (80061dc <main+0x678>)
 800611c:	2220      	movs	r2, #32
 800611e:	701a      	strb	r2, [r3, #0]
  	  energia[1]=' ';
 8006120:	4b2e      	ldr	r3, [pc, #184]	; (80061dc <main+0x678>)
 8006122:	2220      	movs	r2, #32
 8006124:	705a      	strb	r2, [r3, #1]
  	  energia[2]=' ';
 8006126:	4b2d      	ldr	r3, [pc, #180]	; (80061dc <main+0x678>)
 8006128:	2220      	movs	r2, #32
 800612a:	709a      	strb	r2, [r3, #2]
  	  energia[3]=' ';
 800612c:	4b2b      	ldr	r3, [pc, #172]	; (80061dc <main+0x678>)
 800612e:	2220      	movs	r2, #32
 8006130:	70da      	strb	r2, [r3, #3]
  	  energia[4]='r';
 8006132:	4b2a      	ldr	r3, [pc, #168]	; (80061dc <main+0x678>)
 8006134:	2272      	movs	r2, #114	; 0x72
 8006136:	711a      	strb	r2, [r3, #4]
  	  energia[5]='e';
 8006138:	4b28      	ldr	r3, [pc, #160]	; (80061dc <main+0x678>)
 800613a:	2265      	movs	r2, #101	; 0x65
 800613c:	715a      	strb	r2, [r3, #5]
  	  energia[6]='d';
 800613e:	4b27      	ldr	r3, [pc, #156]	; (80061dc <main+0x678>)
 8006140:	2264      	movs	r2, #100	; 0x64
 8006142:	719a      	strb	r2, [r3, #6]
  	  energia[7]='e';
 8006144:	4b25      	ldr	r3, [pc, #148]	; (80061dc <main+0x678>)
 8006146:	2265      	movs	r2, #101	; 0x65
 8006148:	71da      	strb	r2, [r3, #7]
  	 break;
 800614a:	e031      	b.n	80061b0 <main+0x64c>
  case 3:
	  energia[0]=' ';
 800614c:	4b23      	ldr	r3, [pc, #140]	; (80061dc <main+0x678>)
 800614e:	2220      	movs	r2, #32
 8006150:	701a      	strb	r2, [r3, #0]
	  energia[1]=' ';
 8006152:	4b22      	ldr	r3, [pc, #136]	; (80061dc <main+0x678>)
 8006154:	2220      	movs	r2, #32
 8006156:	705a      	strb	r2, [r3, #1]
	  energia[2]=' ';
 8006158:	4b20      	ldr	r3, [pc, #128]	; (80061dc <main+0x678>)
 800615a:	2220      	movs	r2, #32
 800615c:	709a      	strb	r2, [r3, #2]
	  energia[3]='C';
 800615e:	4b1f      	ldr	r3, [pc, #124]	; (80061dc <main+0x678>)
 8006160:	2243      	movs	r2, #67	; 0x43
 8006162:	70da      	strb	r2, [r3, #3]
	  energia[4]='U';
 8006164:	4b1d      	ldr	r3, [pc, #116]	; (80061dc <main+0x678>)
 8006166:	2255      	movs	r2, #85	; 0x55
 8006168:	711a      	strb	r2, [r3, #4]
	  energia[5]='R';
 800616a:	4b1c      	ldr	r3, [pc, #112]	; (80061dc <main+0x678>)
 800616c:	2252      	movs	r2, #82	; 0x52
 800616e:	715a      	strb	r2, [r3, #5]
	  energia[6]='T';
 8006170:	4b1a      	ldr	r3, [pc, #104]	; (80061dc <main+0x678>)
 8006172:	2254      	movs	r2, #84	; 0x54
 8006174:	719a      	strb	r2, [r3, #6]
	  energia[7]='O';
 8006176:	4b19      	ldr	r3, [pc, #100]	; (80061dc <main+0x678>)
 8006178:	224f      	movs	r2, #79	; 0x4f
 800617a:	71da      	strb	r2, [r3, #7]
	 break;
 800617c:	e018      	b.n	80061b0 <main+0x64c>
  case 4:
  	  energia[0]='i';
 800617e:	4b17      	ldr	r3, [pc, #92]	; (80061dc <main+0x678>)
 8006180:	2269      	movs	r2, #105	; 0x69
 8006182:	701a      	strb	r2, [r3, #0]
  	  energia[1]='n';
 8006184:	4b15      	ldr	r3, [pc, #84]	; (80061dc <main+0x678>)
 8006186:	226e      	movs	r2, #110	; 0x6e
 8006188:	705a      	strb	r2, [r3, #1]
  	  energia[2]='v';
 800618a:	4b14      	ldr	r3, [pc, #80]	; (80061dc <main+0x678>)
 800618c:	2276      	movs	r2, #118	; 0x76
 800618e:	709a      	strb	r2, [r3, #2]
  	  energia[3]='e';
 8006190:	4b12      	ldr	r3, [pc, #72]	; (80061dc <main+0x678>)
 8006192:	2265      	movs	r2, #101	; 0x65
 8006194:	70da      	strb	r2, [r3, #3]
  	  energia[4]='r';
 8006196:	4b11      	ldr	r3, [pc, #68]	; (80061dc <main+0x678>)
 8006198:	2272      	movs	r2, #114	; 0x72
 800619a:	711a      	strb	r2, [r3, #4]
  	  energia[5]='s';
 800619c:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <main+0x678>)
 800619e:	2273      	movs	r2, #115	; 0x73
 80061a0:	715a      	strb	r2, [r3, #5]
  	  energia[6]='o';
 80061a2:	4b0e      	ldr	r3, [pc, #56]	; (80061dc <main+0x678>)
 80061a4:	226f      	movs	r2, #111	; 0x6f
 80061a6:	719a      	strb	r2, [r3, #6]
  	  energia[7]='r';
 80061a8:	4b0c      	ldr	r3, [pc, #48]	; (80061dc <main+0x678>)
 80061aa:	2272      	movs	r2, #114	; 0x72
 80061ac:	71da      	strb	r2, [r3, #7]
  	 break;
 80061ae:	46c0      	nop			; (mov r8, r8)
  }

  trata_fan1();
 80061b0:	f7fd f9f8 	bl	80035a4 <trata_fan1>
  dht();
 80061b4:	f7fd f9dc 	bl	8003570 <dht>
  trata_fan2();
 80061b8:	f7fd fa22 	bl	8003600 <trata_fan2>
	  if (send_to_server && !ping_fail){
 80061bc:	e5b3      	b.n	8005d26 <main+0x1c2>
 80061be:	46c0      	nop			; (mov r8, r8)
 80061c0:	200007a1 	.word	0x200007a1
 80061c4:	200007d1 	.word	0x200007d1
 80061c8:	20000064 	.word	0x20000064
 80061cc:	200000d8 	.word	0x200000d8
 80061d0:	200000d4 	.word	0x200000d4
 80061d4:	20000806 	.word	0x20000806
 80061d8:	20000814 	.word	0x20000814
 80061dc:	200000c8 	.word	0x200000c8

080061e0 <TIM6_IRQHandler>:
//************************************************************************************************
//      timer  100ms
//************************************************************************************************

void TIM6_IRQHandler(void)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim6);
 80061e4:	4b8e      	ldr	r3, [pc, #568]	; (8006420 <TIM6_IRQHandler+0x240>)
 80061e6:	0018      	movs	r0, r3
 80061e8:	f008 fa16 	bl	800e618 <HAL_TIM_IRQHandler>

  trata_carga();
 80061ec:	f7fd fa2e 	bl	800364c <trata_carga>

  if(modo_prog){
 80061f0:	4b8c      	ldr	r3, [pc, #560]	; (8006424 <TIM6_IRQHandler+0x244>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d048      	beq.n	800628a <TIM6_IRQHandler+0xaa>
	  if(opt == 0){
 80061f8:	2380      	movs	r3, #128	; 0x80
 80061fa:	01db      	lsls	r3, r3, #7
 80061fc:	4a8a      	ldr	r2, [pc, #552]	; (8006428 <TIM6_IRQHandler+0x248>)
 80061fe:	0019      	movs	r1, r3
 8006200:	0010      	movs	r0, r2
 8006202:	f005 fab7 	bl	800b774 <HAL_GPIO_ReadPin>
 8006206:	1e03      	subs	r3, r0, #0
 8006208:	d118      	bne.n	800623c <TIM6_IRQHandler+0x5c>
		  rele_on;
 800620a:	2380      	movs	r3, #128	; 0x80
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4887      	ldr	r0, [pc, #540]	; (800642c <TIM6_IRQHandler+0x24c>)
 8006210:	2201      	movs	r2, #1
 8006212:	0019      	movs	r1, r3
 8006214:	f005 facb 	bl	800b7ae <HAL_GPIO_WritePin>
		  inv_on;
 8006218:	4b84      	ldr	r3, [pc, #528]	; (800642c <TIM6_IRQHandler+0x24c>)
 800621a:	2201      	movs	r2, #1
 800621c:	2140      	movs	r1, #64	; 0x40
 800621e:	0018      	movs	r0, r3
 8006220:	f005 fac5 	bl	800b7ae <HAL_GPIO_WritePin>
		  rede=0;
 8006224:	4b82      	ldr	r3, [pc, #520]	; (8006430 <TIM6_IRQHandler+0x250>)
 8006226:	2200      	movs	r2, #0
 8006228:	701a      	strb	r2, [r3, #0]
		  energ = 'B';
 800622a:	4b82      	ldr	r3, [pc, #520]	; (8006434 <TIM6_IRQHandler+0x254>)
 800622c:	2242      	movs	r2, #66	; 0x42
 800622e:	701a      	strb	r2, [r3, #0]
		  carga=0;
 8006230:	4b81      	ldr	r3, [pc, #516]	; (8006438 <TIM6_IRQHandler+0x258>)
 8006232:	2200      	movs	r2, #0
 8006234:	701a      	strb	r2, [r3, #0]
		  volta=5;
 8006236:	4b81      	ldr	r3, [pc, #516]	; (800643c <TIM6_IRQHandler+0x25c>)
 8006238:	2205      	movs	r2, #5
 800623a:	701a      	strb	r2, [r3, #0]
	      }

	  if(opt == 1 && (volta == 0)){
 800623c:	2380      	movs	r3, #128	; 0x80
 800623e:	01db      	lsls	r3, r3, #7
 8006240:	4a79      	ldr	r2, [pc, #484]	; (8006428 <TIM6_IRQHandler+0x248>)
 8006242:	0019      	movs	r1, r3
 8006244:	0010      	movs	r0, r2
 8006246:	f005 fa95 	bl	800b774 <HAL_GPIO_ReadPin>
 800624a:	0003      	movs	r3, r0
 800624c:	2b01      	cmp	r3, #1
 800624e:	d000      	beq.n	8006252 <TIM6_IRQHandler+0x72>
 8006250:	e0e2      	b.n	8006418 <TIM6_IRQHandler+0x238>
 8006252:	4b7a      	ldr	r3, [pc, #488]	; (800643c <TIM6_IRQHandler+0x25c>)
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d000      	beq.n	800625c <TIM6_IRQHandler+0x7c>
 800625a:	e0dd      	b.n	8006418 <TIM6_IRQHandler+0x238>
		  rele_off;
 800625c:	2380      	movs	r3, #128	; 0x80
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4872      	ldr	r0, [pc, #456]	; (800642c <TIM6_IRQHandler+0x24c>)
 8006262:	2200      	movs	r2, #0
 8006264:	0019      	movs	r1, r3
 8006266:	f005 faa2 	bl	800b7ae <HAL_GPIO_WritePin>
	      inv_off;
 800626a:	4b70      	ldr	r3, [pc, #448]	; (800642c <TIM6_IRQHandler+0x24c>)
 800626c:	2200      	movs	r2, #0
 800626e:	2140      	movs	r1, #64	; 0x40
 8006270:	0018      	movs	r0, r3
 8006272:	f005 fa9c 	bl	800b7ae <HAL_GPIO_WritePin>
	      rede=1;
 8006276:	4b6e      	ldr	r3, [pc, #440]	; (8006430 <TIM6_IRQHandler+0x250>)
 8006278:	2201      	movs	r2, #1
 800627a:	701a      	strb	r2, [r3, #0]
	      energ = 'R';
 800627c:	4b6d      	ldr	r3, [pc, #436]	; (8006434 <TIM6_IRQHandler+0x254>)
 800627e:	2252      	movs	r2, #82	; 0x52
 8006280:	701a      	strb	r2, [r3, #0]
	      carga=1;
 8006282:	4b6d      	ldr	r3, [pc, #436]	; (8006438 <TIM6_IRQHandler+0x258>)
 8006284:	2201      	movs	r2, #1
 8006286:	701a      	strb	r2, [r3, #0]
		  	      }

	  }
}

}
 8006288:	e0c6      	b.n	8006418 <TIM6_IRQHandler+0x238>
	  if(curtoci)
 800628a:	4b6d      	ldr	r3, [pc, #436]	; (8006440 <TIM6_IRQHandler+0x260>)
 800628c:	781b      	ldrb	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d028      	beq.n	80062e4 <TIM6_IRQHandler+0x104>
			inv_off;
 8006292:	4b66      	ldr	r3, [pc, #408]	; (800642c <TIM6_IRQHandler+0x24c>)
 8006294:	2200      	movs	r2, #0
 8006296:	2140      	movs	r1, #64	; 0x40
 8006298:	0018      	movs	r0, r3
 800629a:	f005 fa88 	bl	800b7ae <HAL_GPIO_WritePin>
	  		rele_off;
 800629e:	2380      	movs	r3, #128	; 0x80
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4862      	ldr	r0, [pc, #392]	; (800642c <TIM6_IRQHandler+0x24c>)
 80062a4:	2200      	movs	r2, #0
 80062a6:	0019      	movs	r1, r3
 80062a8:	f005 fa81 	bl	800b7ae <HAL_GPIO_WritePin>
	  	    rede=1;
 80062ac:	4b60      	ldr	r3, [pc, #384]	; (8006430 <TIM6_IRQHandler+0x250>)
 80062ae:	2201      	movs	r2, #1
 80062b0:	701a      	strb	r2, [r3, #0]
	  	    energ = 'F';
 80062b2:	4b60      	ldr	r3, [pc, #384]	; (8006434 <TIM6_IRQHandler+0x254>)
 80062b4:	2246      	movs	r2, #70	; 0x46
 80062b6:	701a      	strb	r2, [r3, #0]
	  	    carga=1;
 80062b8:	4b5f      	ldr	r3, [pc, #380]	; (8006438 <TIM6_IRQHandler+0x258>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	701a      	strb	r2, [r3, #0]
	  	    ledvm_off;
 80062be:	4b5b      	ldr	r3, [pc, #364]	; (800642c <TIM6_IRQHandler+0x24c>)
 80062c0:	2201      	movs	r2, #1
 80062c2:	2108      	movs	r1, #8
 80062c4:	0018      	movs	r0, r3
 80062c6:	f005 fa72 	bl	800b7ae <HAL_GPIO_WritePin>
	  	    ledvd_on;
 80062ca:	4b58      	ldr	r3, [pc, #352]	; (800642c <TIM6_IRQHandler+0x24c>)
 80062cc:	2201      	movs	r2, #1
 80062ce:	2110      	movs	r1, #16
 80062d0:	0018      	movs	r0, r3
 80062d2:	f005 fa6c 	bl	800b7ae <HAL_GPIO_WritePin>
	  	    modo_teste = 0;
 80062d6:	4b5b      	ldr	r3, [pc, #364]	; (8006444 <TIM6_IRQHandler+0x264>)
 80062d8:	2200      	movs	r2, #0
 80062da:	701a      	strb	r2, [r3, #0]
	  	    modo_teste_cont = 0;
 80062dc:	4b5a      	ldr	r3, [pc, #360]	; (8006448 <TIM6_IRQHandler+0x268>)
 80062de:	2200      	movs	r2, #0
 80062e0:	701a      	strb	r2, [r3, #0]
}
 80062e2:	e099      	b.n	8006418 <TIM6_IRQHandler+0x238>
		  if(opt == 0 && (!dead_bat) || modo_teste && (vot_bat > 105)){
 80062e4:	2380      	movs	r3, #128	; 0x80
 80062e6:	01db      	lsls	r3, r3, #7
 80062e8:	4a4f      	ldr	r2, [pc, #316]	; (8006428 <TIM6_IRQHandler+0x248>)
 80062ea:	0019      	movs	r1, r3
 80062ec:	0010      	movs	r0, r2
 80062ee:	f005 fa41 	bl	800b774 <HAL_GPIO_ReadPin>
 80062f2:	1e03      	subs	r3, r0, #0
 80062f4:	d103      	bne.n	80062fe <TIM6_IRQHandler+0x11e>
 80062f6:	4b55      	ldr	r3, [pc, #340]	; (800644c <TIM6_IRQHandler+0x26c>)
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d007      	beq.n	800630e <TIM6_IRQHandler+0x12e>
 80062fe:	4b51      	ldr	r3, [pc, #324]	; (8006444 <TIM6_IRQHandler+0x264>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d052      	beq.n	80063ac <TIM6_IRQHandler+0x1cc>
 8006306:	4b52      	ldr	r3, [pc, #328]	; (8006450 <TIM6_IRQHandler+0x270>)
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	2b69      	cmp	r3, #105	; 0x69
 800630c:	d94e      	bls.n	80063ac <TIM6_IRQHandler+0x1cc>
		  		  if(vot_bat > 105)
 800630e:	4b50      	ldr	r3, [pc, #320]	; (8006450 <TIM6_IRQHandler+0x270>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b69      	cmp	r3, #105	; 0x69
 8006314:	d925      	bls.n	8006362 <TIM6_IRQHandler+0x182>
		  			  rele_on;
 8006316:	2380      	movs	r3, #128	; 0x80
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4844      	ldr	r0, [pc, #272]	; (800642c <TIM6_IRQHandler+0x24c>)
 800631c:	2201      	movs	r2, #1
 800631e:	0019      	movs	r1, r3
 8006320:	f005 fa45 	bl	800b7ae <HAL_GPIO_WritePin>
		  			  inv_on;
 8006324:	4b41      	ldr	r3, [pc, #260]	; (800642c <TIM6_IRQHandler+0x24c>)
 8006326:	2201      	movs	r2, #1
 8006328:	2140      	movs	r1, #64	; 0x40
 800632a:	0018      	movs	r0, r3
 800632c:	f005 fa3f 	bl	800b7ae <HAL_GPIO_WritePin>
		  			  ledvm_on;
 8006330:	4b3e      	ldr	r3, [pc, #248]	; (800642c <TIM6_IRQHandler+0x24c>)
 8006332:	2200      	movs	r2, #0
 8006334:	2108      	movs	r1, #8
 8006336:	0018      	movs	r0, r3
 8006338:	f005 fa39 	bl	800b7ae <HAL_GPIO_WritePin>
		  			  ledvd_off;
 800633c:	4b3b      	ldr	r3, [pc, #236]	; (800642c <TIM6_IRQHandler+0x24c>)
 800633e:	2200      	movs	r2, #0
 8006340:	2110      	movs	r1, #16
 8006342:	0018      	movs	r0, r3
 8006344:	f005 fa33 	bl	800b7ae <HAL_GPIO_WritePin>
		  			  rede=0;
 8006348:	4b39      	ldr	r3, [pc, #228]	; (8006430 <TIM6_IRQHandler+0x250>)
 800634a:	2200      	movs	r2, #0
 800634c:	701a      	strb	r2, [r3, #0]
		  			  energ = 'B';
 800634e:	4b39      	ldr	r3, [pc, #228]	; (8006434 <TIM6_IRQHandler+0x254>)
 8006350:	2242      	movs	r2, #66	; 0x42
 8006352:	701a      	strb	r2, [r3, #0]
		  			  carga=0;
 8006354:	4b38      	ldr	r3, [pc, #224]	; (8006438 <TIM6_IRQHandler+0x258>)
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
		  			  volta=5;
 800635a:	4b38      	ldr	r3, [pc, #224]	; (800643c <TIM6_IRQHandler+0x25c>)
 800635c:	2205      	movs	r2, #5
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	e024      	b.n	80063ac <TIM6_IRQHandler+0x1cc>
		  			  dead_bat = 1;
 8006362:	4b3a      	ldr	r3, [pc, #232]	; (800644c <TIM6_IRQHandler+0x26c>)
 8006364:	2201      	movs	r2, #1
 8006366:	701a      	strb	r2, [r3, #0]
		  			  inv_off;
 8006368:	4b30      	ldr	r3, [pc, #192]	; (800642c <TIM6_IRQHandler+0x24c>)
 800636a:	2200      	movs	r2, #0
 800636c:	2140      	movs	r1, #64	; 0x40
 800636e:	0018      	movs	r0, r3
 8006370:	f005 fa1d 	bl	800b7ae <HAL_GPIO_WritePin>
		  			  rele_off;
 8006374:	2380      	movs	r3, #128	; 0x80
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	482c      	ldr	r0, [pc, #176]	; (800642c <TIM6_IRQHandler+0x24c>)
 800637a:	2200      	movs	r2, #0
 800637c:	0019      	movs	r1, r3
 800637e:	f005 fa16 	bl	800b7ae <HAL_GPIO_WritePin>
		  			  ledvm_off;
 8006382:	4b2a      	ldr	r3, [pc, #168]	; (800642c <TIM6_IRQHandler+0x24c>)
 8006384:	2201      	movs	r2, #1
 8006386:	2108      	movs	r1, #8
 8006388:	0018      	movs	r0, r3
 800638a:	f005 fa10 	bl	800b7ae <HAL_GPIO_WritePin>
		  			  ledvd_on;
 800638e:	4b27      	ldr	r3, [pc, #156]	; (800642c <TIM6_IRQHandler+0x24c>)
 8006390:	2201      	movs	r2, #1
 8006392:	2110      	movs	r1, #16
 8006394:	0018      	movs	r0, r3
 8006396:	f005 fa0a 	bl	800b7ae <HAL_GPIO_WritePin>
		  			  rede=1;
 800639a:	4b25      	ldr	r3, [pc, #148]	; (8006430 <TIM6_IRQHandler+0x250>)
 800639c:	2201      	movs	r2, #1
 800639e:	701a      	strb	r2, [r3, #0]
		  			  energ = 'F';
 80063a0:	4b24      	ldr	r3, [pc, #144]	; (8006434 <TIM6_IRQHandler+0x254>)
 80063a2:	2246      	movs	r2, #70	; 0x46
 80063a4:	701a      	strb	r2, [r3, #0]
		  			  carga=1;
 80063a6:	4b24      	ldr	r3, [pc, #144]	; (8006438 <TIM6_IRQHandler+0x258>)
 80063a8:	2201      	movs	r2, #1
 80063aa:	701a      	strb	r2, [r3, #0]
		  	  if(opt == 1 && (volta == 0)){
 80063ac:	2380      	movs	r3, #128	; 0x80
 80063ae:	01db      	lsls	r3, r3, #7
 80063b0:	4a1d      	ldr	r2, [pc, #116]	; (8006428 <TIM6_IRQHandler+0x248>)
 80063b2:	0019      	movs	r1, r3
 80063b4:	0010      	movs	r0, r2
 80063b6:	f005 f9dd 	bl	800b774 <HAL_GPIO_ReadPin>
 80063ba:	0003      	movs	r3, r0
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d12b      	bne.n	8006418 <TIM6_IRQHandler+0x238>
 80063c0:	4b1e      	ldr	r3, [pc, #120]	; (800643c <TIM6_IRQHandler+0x25c>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d127      	bne.n	8006418 <TIM6_IRQHandler+0x238>
		  		  rele_off;
 80063c8:	2380      	movs	r3, #128	; 0x80
 80063ca:	009b      	lsls	r3, r3, #2
 80063cc:	4817      	ldr	r0, [pc, #92]	; (800642c <TIM6_IRQHandler+0x24c>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	0019      	movs	r1, r3
 80063d2:	f005 f9ec 	bl	800b7ae <HAL_GPIO_WritePin>
		  	      inv_off;
 80063d6:	4b15      	ldr	r3, [pc, #84]	; (800642c <TIM6_IRQHandler+0x24c>)
 80063d8:	2200      	movs	r2, #0
 80063da:	2140      	movs	r1, #64	; 0x40
 80063dc:	0018      	movs	r0, r3
 80063de:	f005 f9e6 	bl	800b7ae <HAL_GPIO_WritePin>
		  	      rede=1;
 80063e2:	4b13      	ldr	r3, [pc, #76]	; (8006430 <TIM6_IRQHandler+0x250>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	701a      	strb	r2, [r3, #0]
		  	      energ = 'R';
 80063e8:	4b12      	ldr	r3, [pc, #72]	; (8006434 <TIM6_IRQHandler+0x254>)
 80063ea:	2252      	movs	r2, #82	; 0x52
 80063ec:	701a      	strb	r2, [r3, #0]
		  	      carga=1;
 80063ee:	4b12      	ldr	r3, [pc, #72]	; (8006438 <TIM6_IRQHandler+0x258>)
 80063f0:	2201      	movs	r2, #1
 80063f2:	701a      	strb	r2, [r3, #0]
		  	      ledvm_off;
 80063f4:	4b0d      	ldr	r3, [pc, #52]	; (800642c <TIM6_IRQHandler+0x24c>)
 80063f6:	2201      	movs	r2, #1
 80063f8:	2108      	movs	r1, #8
 80063fa:	0018      	movs	r0, r3
 80063fc:	f005 f9d7 	bl	800b7ae <HAL_GPIO_WritePin>
		  	      ledvd_on;
 8006400:	4b0a      	ldr	r3, [pc, #40]	; (800642c <TIM6_IRQHandler+0x24c>)
 8006402:	2201      	movs	r2, #1
 8006404:	2110      	movs	r1, #16
 8006406:	0018      	movs	r0, r3
 8006408:	f005 f9d1 	bl	800b7ae <HAL_GPIO_WritePin>
		  	      modo_teste = 0;
 800640c:	4b0d      	ldr	r3, [pc, #52]	; (8006444 <TIM6_IRQHandler+0x264>)
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]
		  	      modo_teste_cont = 0;
 8006412:	4b0d      	ldr	r3, [pc, #52]	; (8006448 <TIM6_IRQHandler+0x268>)
 8006414:	2200      	movs	r2, #0
 8006416:	701a      	strb	r2, [r3, #0]
}
 8006418:	46c0      	nop			; (mov r8, r8)
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	46c0      	nop			; (mov r8, r8)
 8006420:	20000550 	.word	0x20000550
 8006424:	20000806 	.word	0x20000806
 8006428:	50000800 	.word	0x50000800
 800642c:	50000400 	.word	0x50000400
 8006430:	2000075c 	.word	0x2000075c
 8006434:	200000d2 	.word	0x200000d2
 8006438:	2000075d 	.word	0x2000075d
 800643c:	200000d1 	.word	0x200000d1
 8006440:	20000813 	.word	0x20000813
 8006444:	20000811 	.word	0x20000811
 8006448:	20000812 	.word	0x20000812
 800644c:	20000808 	.word	0x20000808
 8006450:	20000752 	.word	0x20000752

08006454 <TIM7_IRQHandler>:
//************************************************************************************************
//      timer  1000ms
//************************************************************************************************

void TIM7_IRQHandler(void)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&htim7);
 8006458:	4b51      	ldr	r3, [pc, #324]	; (80065a0 <TIM7_IRQHandler+0x14c>)
 800645a:	0018      	movs	r0, r3
 800645c:	f008 f8dc 	bl	800e618 <HAL_TIM_IRQHandler>

  if(fan1_cont > 0){fan1_cont--;}
 8006460:	4b50      	ldr	r3, [pc, #320]	; (80065a4 <TIM7_IRQHandler+0x150>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d005      	beq.n	8006474 <TIM7_IRQHandler+0x20>
 8006468:	4b4e      	ldr	r3, [pc, #312]	; (80065a4 <TIM7_IRQHandler+0x150>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	3b01      	subs	r3, #1
 800646e:	b2da      	uxtb	r2, r3
 8006470:	4b4c      	ldr	r3, [pc, #304]	; (80065a4 <TIM7_IRQHandler+0x150>)
 8006472:	701a      	strb	r2, [r3, #0]
  if(fan2_cont > 0){fan2_cont--;}
 8006474:	4b4c      	ldr	r3, [pc, #304]	; (80065a8 <TIM7_IRQHandler+0x154>)
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d005      	beq.n	8006488 <TIM7_IRQHandler+0x34>
 800647c:	4b4a      	ldr	r3, [pc, #296]	; (80065a8 <TIM7_IRQHandler+0x154>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	3b01      	subs	r3, #1
 8006482:	b2da      	uxtb	r2, r3
 8006484:	4b48      	ldr	r3, [pc, #288]	; (80065a8 <TIM7_IRQHandler+0x154>)
 8006486:	701a      	strb	r2, [r3, #0]


    if(modo_teste)
 8006488:	4b48      	ldr	r3, [pc, #288]	; (80065ac <TIM7_IRQHandler+0x158>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d012      	beq.n	80064b6 <TIM7_IRQHandler+0x62>
    {
	    modo_teste_cont++;
 8006490:	4b47      	ldr	r3, [pc, #284]	; (80065b0 <TIM7_IRQHandler+0x15c>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	3301      	adds	r3, #1
 8006496:	b2da      	uxtb	r2, r3
 8006498:	4b45      	ldr	r3, [pc, #276]	; (80065b0 <TIM7_IRQHandler+0x15c>)
 800649a:	701a      	strb	r2, [r3, #0]
	    if(modo_teste_cont > modo_teste_tempo)
 800649c:	4b44      	ldr	r3, [pc, #272]	; (80065b0 <TIM7_IRQHandler+0x15c>)
 800649e:	781b      	ldrb	r3, [r3, #0]
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	4b44      	ldr	r3, [pc, #272]	; (80065b4 <TIM7_IRQHandler+0x160>)
 80064a4:	881b      	ldrh	r3, [r3, #0]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d905      	bls.n	80064b6 <TIM7_IRQHandler+0x62>
	    {
		    modo_teste = 0;
 80064aa:	4b40      	ldr	r3, [pc, #256]	; (80065ac <TIM7_IRQHandler+0x158>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	701a      	strb	r2, [r3, #0]
		    modo_teste_cont = 0;
 80064b0:	4b3f      	ldr	r3, [pc, #252]	; (80065b0 <TIM7_IRQHandler+0x15c>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	701a      	strb	r2, [r3, #0]
	    }
    }

  	cont_ping++;
 80064b6:	4b40      	ldr	r3, [pc, #256]	; (80065b8 <TIM7_IRQHandler+0x164>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	3301      	adds	r3, #1
 80064bc:	b2da      	uxtb	r2, r3
 80064be:	4b3e      	ldr	r3, [pc, #248]	; (80065b8 <TIM7_IRQHandler+0x164>)
 80064c0:	701a      	strb	r2, [r3, #0]
	if(cont_ping >= 60)
 80064c2:	4b3d      	ldr	r3, [pc, #244]	; (80065b8 <TIM7_IRQHandler+0x164>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b3b      	cmp	r3, #59	; 0x3b
 80064c8:	d908      	bls.n	80064dc <TIM7_IRQHandler+0x88>
	{
		cont_ping = 0;
 80064ca:	4b3b      	ldr	r3, [pc, #236]	; (80065b8 <TIM7_IRQHandler+0x164>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	701a      	strb	r2, [r3, #0]
		pinga = 1;
 80064d0:	4b3a      	ldr	r3, [pc, #232]	; (80065bc <TIM7_IRQHandler+0x168>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
		mensage[0] = '\0';
 80064d6:	4b3a      	ldr	r3, [pc, #232]	; (80065c0 <TIM7_IRQHandler+0x16c>)
 80064d8:	2200      	movs	r2, #0
 80064da:	701a      	strb	r2, [r3, #0]
	}

      if(opt == 1 && (volta > 0)){
 80064dc:	2380      	movs	r3, #128	; 0x80
 80064de:	01db      	lsls	r3, r3, #7
 80064e0:	4a38      	ldr	r2, [pc, #224]	; (80065c4 <TIM7_IRQHandler+0x170>)
 80064e2:	0019      	movs	r1, r3
 80064e4:	0010      	movs	r0, r2
 80064e6:	f005 f945 	bl	800b774 <HAL_GPIO_ReadPin>
 80064ea:	0003      	movs	r3, r0
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d109      	bne.n	8006504 <TIM7_IRQHandler+0xb0>
 80064f0:	4b35      	ldr	r3, [pc, #212]	; (80065c8 <TIM7_IRQHandler+0x174>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d005      	beq.n	8006504 <TIM7_IRQHandler+0xb0>
    	volta--;
 80064f8:	4b33      	ldr	r3, [pc, #204]	; (80065c8 <TIM7_IRQHandler+0x174>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	3b01      	subs	r3, #1
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	4b31      	ldr	r3, [pc, #196]	; (80065c8 <TIM7_IRQHandler+0x174>)
 8006502:	701a      	strb	r2, [r3, #0]
        }
      if(rede==0){
 8006504:	4b31      	ldr	r3, [pc, #196]	; (80065cc <TIM7_IRQHandler+0x178>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2201      	movs	r2, #1
 800650a:	4053      	eors	r3, r2
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b00      	cmp	r3, #0
 8006510:	d004      	beq.n	800651c <TIM7_IRQHandler+0xc8>
    	tp_ativo = tp_ativo+1;
 8006512:	4b2f      	ldr	r3, [pc, #188]	; (80065d0 <TIM7_IRQHandler+0x17c>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	1c5a      	adds	r2, r3, #1
 8006518:	4b2d      	ldr	r3, [pc, #180]	; (80065d0 <TIM7_IRQHandler+0x17c>)
 800651a:	601a      	str	r2, [r3, #0]
        }

      //Se deve enviar o pacote ao servidor (>0);
      if(!modo_prog){
 800651c:	4b2d      	ldr	r3, [pc, #180]	; (80065d4 <TIM7_IRQHandler+0x180>)
 800651e:	781b      	ldrb	r3, [r3, #0]
 8006520:	2201      	movs	r2, #1
 8006522:	4053      	eors	r3, r2
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d014      	beq.n	8006554 <TIM7_IRQHandler+0x100>
          if(timeOutLen != 0){
 800652a:	4b2b      	ldr	r3, [pc, #172]	; (80065d8 <TIM7_IRQHandler+0x184>)
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d010      	beq.n	8006554 <TIM7_IRQHandler+0x100>
        	  if(timeOut == 0){
 8006532:	4b2a      	ldr	r3, [pc, #168]	; (80065dc <TIM7_IRQHandler+0x188>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d106      	bne.n	8006548 <TIM7_IRQHandler+0xf4>
				timeOut = timeOutLen;
 800653a:	4b27      	ldr	r3, [pc, #156]	; (80065d8 <TIM7_IRQHandler+0x184>)
 800653c:	781a      	ldrb	r2, [r3, #0]
 800653e:	4b27      	ldr	r3, [pc, #156]	; (80065dc <TIM7_IRQHandler+0x188>)
 8006540:	701a      	strb	r2, [r3, #0]
        		send_to_server = 1;
 8006542:	4b27      	ldr	r3, [pc, #156]	; (80065e0 <TIM7_IRQHandler+0x18c>)
 8006544:	2201      	movs	r2, #1
 8006546:	701a      	strb	r2, [r3, #0]
        	  }
        	  timeOut--;
 8006548:	4b24      	ldr	r3, [pc, #144]	; (80065dc <TIM7_IRQHandler+0x188>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	3b01      	subs	r3, #1
 800654e:	b2da      	uxtb	r2, r3
 8006550:	4b22      	ldr	r3, [pc, #136]	; (80065dc <TIM7_IRQHandler+0x188>)
 8006552:	701a      	strb	r2, [r3, #0]
          }
      }
      vot_bat =ad[0];
 8006554:	4b23      	ldr	r3, [pc, #140]	; (80065e4 <TIM7_IRQHandler+0x190>)
 8006556:	781a      	ldrb	r2, [r3, #0]
 8006558:	4b23      	ldr	r3, [pc, #140]	; (80065e8 <TIM7_IRQHandler+0x194>)
 800655a:	701a      	strb	r2, [r3, #0]
      amp_rede=ad[2];
 800655c:	4b21      	ldr	r3, [pc, #132]	; (80065e4 <TIM7_IRQHandler+0x190>)
 800655e:	789a      	ldrb	r2, [r3, #2]
 8006560:	4b22      	ldr	r3, [pc, #136]	; (80065ec <TIM7_IRQHandler+0x198>)
 8006562:	701a      	strb	r2, [r3, #0]
      vot_rede=ad[3];
 8006564:	4b1f      	ldr	r3, [pc, #124]	; (80065e4 <TIM7_IRQHandler+0x190>)
 8006566:	78da      	ldrb	r2, [r3, #3]
 8006568:	4b21      	ldr	r3, [pc, #132]	; (80065f0 <TIM7_IRQHandler+0x19c>)
 800656a:	701a      	strb	r2, [r3, #0]
      telas();
 800656c:	f7fd f918 	bl	80037a0 <telas>

      if(dead_bat)
 8006570:	4b20      	ldr	r3, [pc, #128]	; (80065f4 <TIM7_IRQHandler+0x1a0>)
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d010      	beq.n	800659a <TIM7_IRQHandler+0x146>
      {
    	  cont_dead++;
 8006578:	4b1f      	ldr	r3, [pc, #124]	; (80065f8 <TIM7_IRQHandler+0x1a4>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	4b1e      	ldr	r3, [pc, #120]	; (80065f8 <TIM7_IRQHandler+0x1a4>)
 8006580:	601a      	str	r2, [r3, #0]
    	  if(cont_dead >= 65000 || (vot_bat >= 130))
 8006582:	4b1d      	ldr	r3, [pc, #116]	; (80065f8 <TIM7_IRQHandler+0x1a4>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a1d      	ldr	r2, [pc, #116]	; (80065fc <TIM7_IRQHandler+0x1a8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d803      	bhi.n	8006594 <TIM7_IRQHandler+0x140>
 800658c:	4b16      	ldr	r3, [pc, #88]	; (80065e8 <TIM7_IRQHandler+0x194>)
 800658e:	781b      	ldrb	r3, [r3, #0]
 8006590:	2b81      	cmp	r3, #129	; 0x81
 8006592:	d902      	bls.n	800659a <TIM7_IRQHandler+0x146>
    	  {
    		  dead_bat = 0;
 8006594:	4b17      	ldr	r3, [pc, #92]	; (80065f4 <TIM7_IRQHandler+0x1a0>)
 8006596:	2200      	movs	r2, #0
 8006598:	701a      	strb	r2, [r3, #0]
    	  }
      }

}
 800659a:	46c0      	nop			; (mov r8, r8)
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	2000059c 	.word	0x2000059c
 80065a4:	20000138 	.word	0x20000138
 80065a8:	20000139 	.word	0x20000139
 80065ac:	20000811 	.word	0x20000811
 80065b0:	20000812 	.word	0x20000812
 80065b4:	20000140 	.word	0x20000140
 80065b8:	20000807 	.word	0x20000807
 80065bc:	200007a5 	.word	0x200007a5
 80065c0:	20000700 	.word	0x20000700
 80065c4:	50000800 	.word	0x50000800
 80065c8:	200000d1 	.word	0x200000d1
 80065cc:	2000075c 	.word	0x2000075c
 80065d0:	20000758 	.word	0x20000758
 80065d4:	20000806 	.word	0x20000806
 80065d8:	20000129 	.word	0x20000129
 80065dc:	20000128 	.word	0x20000128
 80065e0:	200007a3 	.word	0x200007a3
 80065e4:	2000074c 	.word	0x2000074c
 80065e8:	20000752 	.word	0x20000752
 80065ec:	20000751 	.word	0x20000751
 80065f0:	20000753 	.word	0x20000753
 80065f4:	20000808 	.word	0x20000808
 80065f8:	2000080c 	.word	0x2000080c
 80065fc:	0000fde7 	.word	0x0000fde7

08006600 <TIM14_IRQHandler>:
//************************************************************************************************
//      timer  1000ms  (cuida dos botões)
//************************************************************************************************

void TIM14_IRQHandler(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
	HAL_TIM_IRQHandler(&htim14);
 8006604:	4b2f      	ldr	r3, [pc, #188]	; (80066c4 <TIM14_IRQHandler+0xc4>)
 8006606:	0018      	movs	r0, r3
 8006608:	f008 f806 	bl	800e618 <HAL_TIM_IRQHandler>

	while(!b1) //esquerdo;
 800660c:	e01f      	b.n	800664e <TIM14_IRQHandler+0x4e>
  	{
  		  if(filtro != 0)
 800660e:	4b2e      	ldr	r3, [pc, #184]	; (80066c8 <TIM14_IRQHandler+0xc8>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d01b      	beq.n	800664e <TIM14_IRQHandler+0x4e>
  		  {
  			  filtro --;
 8006616:	4b2c      	ldr	r3, [pc, #176]	; (80066c8 <TIM14_IRQHandler+0xc8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	1e5a      	subs	r2, r3, #1
 800661c:	4b2a      	ldr	r3, [pc, #168]	; (80066c8 <TIM14_IRQHandler+0xc8>)
 800661e:	601a      	str	r2, [r3, #0]
  			  if(filtro == 0)
 8006620:	4b29      	ldr	r3, [pc, #164]	; (80066c8 <TIM14_IRQHandler+0xc8>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d112      	bne.n	800664e <TIM14_IRQHandler+0x4e>
  			  {
  				  if(tela < 4)
 8006628:	4b28      	ldr	r3, [pc, #160]	; (80066cc <TIM14_IRQHandler+0xcc>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b03      	cmp	r3, #3
 800662e:	d80e      	bhi.n	800664e <TIM14_IRQHandler+0x4e>
  				  {
  					  tela++;
 8006630:	4b26      	ldr	r3, [pc, #152]	; (80066cc <TIM14_IRQHandler+0xcc>)
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	3301      	adds	r3, #1
 8006636:	b2da      	uxtb	r2, r3
 8006638:	4b24      	ldr	r3, [pc, #144]	; (80066cc <TIM14_IRQHandler+0xcc>)
 800663a:	701a      	strb	r2, [r3, #0]
  					  if(tela>3){tela=0;}
 800663c:	4b23      	ldr	r3, [pc, #140]	; (80066cc <TIM14_IRQHandler+0xcc>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b03      	cmp	r3, #3
 8006642:	d902      	bls.n	800664a <TIM14_IRQHandler+0x4a>
 8006644:	4b21      	ldr	r3, [pc, #132]	; (80066cc <TIM14_IRQHandler+0xcc>)
 8006646:	2200      	movs	r2, #0
 8006648:	701a      	strb	r2, [r3, #0]
  					  SSD1306_Clear();
 800664a:	f001 fe8c 	bl	8008366 <SSD1306_Clear>
	while(!b1) //esquerdo;
 800664e:	2380      	movs	r3, #128	; 0x80
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	4a1f      	ldr	r2, [pc, #124]	; (80066d0 <TIM14_IRQHandler+0xd0>)
 8006654:	0019      	movs	r1, r3
 8006656:	0010      	movs	r0, r2
 8006658:	f005 f88c 	bl	800b774 <HAL_GPIO_ReadPin>
 800665c:	1e03      	subs	r3, r0, #0
 800665e:	d0d6      	beq.n	800660e <TIM14_IRQHandler+0xe>
  				  }
  			  }
  		  }
  	  }

	  while(!b2) //direito;
 8006660:	e022      	b.n	80066a8 <TIM14_IRQHandler+0xa8>
	  {
	  		  if(filtro != 0)
 8006662:	4b19      	ldr	r3, [pc, #100]	; (80066c8 <TIM14_IRQHandler+0xc8>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d01e      	beq.n	80066a8 <TIM14_IRQHandler+0xa8>
	  		  {
	  			  filtro --;
 800666a:	4b17      	ldr	r3, [pc, #92]	; (80066c8 <TIM14_IRQHandler+0xc8>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	1e5a      	subs	r2, r3, #1
 8006670:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <TIM14_IRQHandler+0xc8>)
 8006672:	601a      	str	r2, [r3, #0]
	  			  if(filtro == 0)
 8006674:	4b14      	ldr	r3, [pc, #80]	; (80066c8 <TIM14_IRQHandler+0xc8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d115      	bne.n	80066a8 <TIM14_IRQHandler+0xa8>
	  			  {
	  				  if(tela > 0)
 800667c:	4b13      	ldr	r3, [pc, #76]	; (80066cc <TIM14_IRQHandler+0xcc>)
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d008      	beq.n	8006696 <TIM14_IRQHandler+0x96>
	  				  {
	  					  tela--;
 8006684:	4b11      	ldr	r3, [pc, #68]	; (80066cc <TIM14_IRQHandler+0xcc>)
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	3b01      	subs	r3, #1
 800668a:	b2da      	uxtb	r2, r3
 800668c:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <TIM14_IRQHandler+0xcc>)
 800668e:	701a      	strb	r2, [r3, #0]
	  					  SSD1306_Clear();
 8006690:	f001 fe69 	bl	8008366 <SSD1306_Clear>
 8006694:	e008      	b.n	80066a8 <TIM14_IRQHandler+0xa8>
	  				  }else if(tela == 0)
 8006696:	4b0d      	ldr	r3, [pc, #52]	; (80066cc <TIM14_IRQHandler+0xcc>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d104      	bne.n	80066a8 <TIM14_IRQHandler+0xa8>
	  				  {
	  					  tela = 3;
 800669e:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <TIM14_IRQHandler+0xcc>)
 80066a0:	2203      	movs	r2, #3
 80066a2:	701a      	strb	r2, [r3, #0]
	  					  SSD1306_Clear();
 80066a4:	f001 fe5f 	bl	8008366 <SSD1306_Clear>
	  while(!b2) //direito;
 80066a8:	4b09      	ldr	r3, [pc, #36]	; (80066d0 <TIM14_IRQHandler+0xd0>)
 80066aa:	2180      	movs	r1, #128	; 0x80
 80066ac:	0018      	movs	r0, r3
 80066ae:	f005 f861 	bl	800b774 <HAL_GPIO_ReadPin>
 80066b2:	1e03      	subs	r3, r0, #0
 80066b4:	d0d5      	beq.n	8006662 <TIM14_IRQHandler+0x62>
	  				  }
	  	          }
	           }
	  }

  	  filtro = Tfiltro;
 80066b6:	4b04      	ldr	r3, [pc, #16]	; (80066c8 <TIM14_IRQHandler+0xc8>)
 80066b8:	4a06      	ldr	r2, [pc, #24]	; (80066d4 <TIM14_IRQHandler+0xd4>)
 80066ba:	601a      	str	r2, [r3, #0]
}
 80066bc:	46c0      	nop			; (mov r8, r8)
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	46c0      	nop			; (mov r8, r8)
 80066c4:	200005e8 	.word	0x200005e8
 80066c8:	2000013c 	.word	0x2000013c
 80066cc:	200006ca 	.word	0x200006ca
 80066d0:	50000400 	.word	0x50000400
 80066d4:	00001388 	.word	0x00001388

080066d8 <USART1_IRQHandler>:

//************************************************************************************************
//      usart1 RX
//************************************************************************************************
void USART1_IRQHandler(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
  HAL_UART_IRQHandler(&huart1);
 80066dc:	4b24      	ldr	r3, [pc, #144]	; (8006770 <USART1_IRQHandler+0x98>)
 80066de:	0018      	movs	r0, r3
 80066e0:	f009 f872 	bl	800f7c8 <HAL_UART_IRQHandler>

	data = huart1.Instance->RDR;
 80066e4:	4b22      	ldr	r3, [pc, #136]	; (8006770 <USART1_IRQHandler+0x98>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	4b21      	ldr	r3, [pc, #132]	; (8006774 <USART1_IRQHandler+0x9c>)
 80066ee:	701a      	strb	r2, [r3, #0]

  if (data=='@')
 80066f0:	4b20      	ldr	r3, [pc, #128]	; (8006774 <USART1_IRQHandler+0x9c>)
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	2b40      	cmp	r3, #64	; 0x40
 80066f6:	d109      	bne.n	800670c <USART1_IRQHandler+0x34>
    {
     ser_ptm=0;
 80066f8:	4b1f      	ldr	r3, [pc, #124]	; (8006778 <USART1_IRQHandler+0xa0>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	701a      	strb	r2, [r3, #0]
     ser_rcm=1;
 80066fe:	4b1f      	ldr	r3, [pc, #124]	; (800677c <USART1_IRQHandler+0xa4>)
 8006700:	2201      	movs	r2, #1
 8006702:	701a      	strb	r2, [r3, #0]
     ser_pcm=0;
 8006704:	4b1e      	ldr	r3, [pc, #120]	; (8006780 <USART1_IRQHandler+0xa8>)
 8006706:	2200      	movs	r2, #0
 8006708:	701a      	strb	r2, [r3, #0]
     else
        {
        if (ser_rcm) {ser_bfm[ser_ptm++]= data; if (ser_ptm>10) {ser_ptm=0; ser_rcm=0;}};
        }

}
 800670a:	e02e      	b.n	800676a <USART1_IRQHandler+0x92>
 else if (data=='#')
 800670c:	4b19      	ldr	r3, [pc, #100]	; (8006774 <USART1_IRQHandler+0x9c>)
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	2b23      	cmp	r3, #35	; 0x23
 8006712:	d111      	bne.n	8006738 <USART1_IRQHandler+0x60>
     if (ser_rcm)
 8006714:	4b19      	ldr	r3, [pc, #100]	; (800677c <USART1_IRQHandler+0xa4>)
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d006      	beq.n	800672a <USART1_IRQHandler+0x52>
  	  if (ser_ptm==8) ser_pcm=1;
 800671c:	4b16      	ldr	r3, [pc, #88]	; (8006778 <USART1_IRQHandler+0xa0>)
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b08      	cmp	r3, #8
 8006722:	d102      	bne.n	800672a <USART1_IRQHandler+0x52>
 8006724:	4b16      	ldr	r3, [pc, #88]	; (8006780 <USART1_IRQHandler+0xa8>)
 8006726:	2201      	movs	r2, #1
 8006728:	701a      	strb	r2, [r3, #0]
        ser_rcm=0;
 800672a:	4b14      	ldr	r3, [pc, #80]	; (800677c <USART1_IRQHandler+0xa4>)
 800672c:	2200      	movs	r2, #0
 800672e:	701a      	strb	r2, [r3, #0]
        ser_ptm=0;
 8006730:	4b11      	ldr	r3, [pc, #68]	; (8006778 <USART1_IRQHandler+0xa0>)
 8006732:	2200      	movs	r2, #0
 8006734:	701a      	strb	r2, [r3, #0]
}
 8006736:	e018      	b.n	800676a <USART1_IRQHandler+0x92>
        if (ser_rcm) {ser_bfm[ser_ptm++]= data; if (ser_ptm>10) {ser_ptm=0; ser_rcm=0;}};
 8006738:	4b10      	ldr	r3, [pc, #64]	; (800677c <USART1_IRQHandler+0xa4>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d014      	beq.n	800676a <USART1_IRQHandler+0x92>
 8006740:	4b0d      	ldr	r3, [pc, #52]	; (8006778 <USART1_IRQHandler+0xa0>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	b2d1      	uxtb	r1, r2
 8006748:	4a0b      	ldr	r2, [pc, #44]	; (8006778 <USART1_IRQHandler+0xa0>)
 800674a:	7011      	strb	r1, [r2, #0]
 800674c:	001a      	movs	r2, r3
 800674e:	4b09      	ldr	r3, [pc, #36]	; (8006774 <USART1_IRQHandler+0x9c>)
 8006750:	7819      	ldrb	r1, [r3, #0]
 8006752:	4b0c      	ldr	r3, [pc, #48]	; (8006784 <USART1_IRQHandler+0xac>)
 8006754:	5499      	strb	r1, [r3, r2]
 8006756:	4b08      	ldr	r3, [pc, #32]	; (8006778 <USART1_IRQHandler+0xa0>)
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	2b0a      	cmp	r3, #10
 800675c:	d905      	bls.n	800676a <USART1_IRQHandler+0x92>
 800675e:	4b06      	ldr	r3, [pc, #24]	; (8006778 <USART1_IRQHandler+0xa0>)
 8006760:	2200      	movs	r2, #0
 8006762:	701a      	strb	r2, [r3, #0]
 8006764:	4b05      	ldr	r3, [pc, #20]	; (800677c <USART1_IRQHandler+0xa4>)
 8006766:	2200      	movs	r2, #0
 8006768:	701a      	strb	r2, [r3, #0]
}
 800676a:	46c0      	nop			; (mov r8, r8)
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	20000634 	.word	0x20000634
 8006774:	200007d2 	.word	0x200007d2
 8006778:	200007d3 	.word	0x200007d3
 800677c:	20000805 	.word	0x20000805
 8006780:	20000804 	.word	0x20000804
 8006784:	200007d4 	.word	0x200007d4

08006788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006788:	b590      	push	{r4, r7, lr}
 800678a:	b099      	sub	sp, #100	; 0x64
 800678c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800678e:	242c      	movs	r4, #44	; 0x2c
 8006790:	193b      	adds	r3, r7, r4
 8006792:	0018      	movs	r0, r3
 8006794:	2334      	movs	r3, #52	; 0x34
 8006796:	001a      	movs	r2, r3
 8006798:	2100      	movs	r1, #0
 800679a:	f00a fb48 	bl	8010e2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800679e:	231c      	movs	r3, #28
 80067a0:	18fb      	adds	r3, r7, r3
 80067a2:	0018      	movs	r0, r3
 80067a4:	2310      	movs	r3, #16
 80067a6:	001a      	movs	r2, r3
 80067a8:	2100      	movs	r1, #0
 80067aa:	f00a fb40 	bl	8010e2e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80067ae:	003b      	movs	r3, r7
 80067b0:	0018      	movs	r0, r3
 80067b2:	231c      	movs	r3, #28
 80067b4:	001a      	movs	r2, r3
 80067b6:	2100      	movs	r1, #0
 80067b8:	f00a fb39 	bl	8010e2e <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80067bc:	2380      	movs	r3, #128	; 0x80
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	0018      	movs	r0, r3
 80067c2:	f006 f801 	bl	800c7c8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80067c6:	193b      	adds	r3, r7, r4
 80067c8:	2202      	movs	r2, #2
 80067ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80067cc:	193b      	adds	r3, r7, r4
 80067ce:	2280      	movs	r2, #128	; 0x80
 80067d0:	0052      	lsls	r2, r2, #1
 80067d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80067d4:	0021      	movs	r1, r4
 80067d6:	187b      	adds	r3, r7, r1
 80067d8:	2200      	movs	r2, #0
 80067da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80067dc:	187b      	adds	r3, r7, r1
 80067de:	2240      	movs	r2, #64	; 0x40
 80067e0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80067e2:	187b      	adds	r3, r7, r1
 80067e4:	2202      	movs	r2, #2
 80067e6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80067e8:	187b      	adds	r3, r7, r1
 80067ea:	2202      	movs	r2, #2
 80067ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80067ee:	187b      	adds	r3, r7, r1
 80067f0:	2200      	movs	r2, #0
 80067f2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80067f4:	187b      	adds	r3, r7, r1
 80067f6:	2208      	movs	r2, #8
 80067f8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV9;
 80067fa:	187b      	adds	r3, r7, r1
 80067fc:	2280      	movs	r2, #128	; 0x80
 80067fe:	0352      	lsls	r2, r2, #13
 8006800:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006802:	187b      	adds	r3, r7, r1
 8006804:	2280      	movs	r2, #128	; 0x80
 8006806:	0592      	lsls	r2, r2, #22
 8006808:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800680a:	187b      	adds	r3, r7, r1
 800680c:	0018      	movs	r0, r3
 800680e:	f006 f827 	bl	800c860 <HAL_RCC_OscConfig>
 8006812:	1e03      	subs	r3, r0, #0
 8006814:	d001      	beq.n	800681a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8006816:	f000 fbf3 	bl	8007000 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800681a:	211c      	movs	r1, #28
 800681c:	187b      	adds	r3, r7, r1
 800681e:	2207      	movs	r2, #7
 8006820:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006822:	187b      	adds	r3, r7, r1
 8006824:	2202      	movs	r2, #2
 8006826:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006828:	187b      	adds	r3, r7, r1
 800682a:	2200      	movs	r2, #0
 800682c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800682e:	187b      	adds	r3, r7, r1
 8006830:	2200      	movs	r2, #0
 8006832:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006834:	187b      	adds	r3, r7, r1
 8006836:	2102      	movs	r1, #2
 8006838:	0018      	movs	r0, r3
 800683a:	f006 fb27 	bl	800ce8c <HAL_RCC_ClockConfig>
 800683e:	1e03      	subs	r3, r0, #0
 8006840:	d001      	beq.n	8006846 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8006842:	f000 fbdd 	bl	8007000 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC;
 8006846:	003b      	movs	r3, r7
 8006848:	4a0a      	ldr	r2, [pc, #40]	; (8006874 <SystemClock_Config+0xec>)
 800684a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800684c:	003b      	movs	r3, r7
 800684e:	2200      	movs	r2, #0
 8006850:	605a      	str	r2, [r3, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLADC;
 8006852:	003b      	movs	r3, r7
 8006854:	2280      	movs	r2, #128	; 0x80
 8006856:	05d2      	lsls	r2, r2, #23
 8006858:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800685a:	003b      	movs	r3, r7
 800685c:	0018      	movs	r0, r3
 800685e:	f006 fcbf 	bl	800d1e0 <HAL_RCCEx_PeriphCLKConfig>
 8006862:	1e03      	subs	r3, r0, #0
 8006864:	d001      	beq.n	800686a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8006866:	f000 fbcb 	bl	8007000 <Error_Handler>
  }
}
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	46bd      	mov	sp, r7
 800686e:	b019      	add	sp, #100	; 0x64
 8006870:	bd90      	pop	{r4, r7, pc}
 8006872:	46c0      	nop			; (mov r8, r8)
 8006874:	00004001 	.word	0x00004001

08006878 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800687e:	1d3b      	adds	r3, r7, #4
 8006880:	0018      	movs	r0, r3
 8006882:	230c      	movs	r3, #12
 8006884:	001a      	movs	r2, r3
 8006886:	2100      	movs	r1, #0
 8006888:	f00a fad1 	bl	8010e2e <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800688c:	4b46      	ldr	r3, [pc, #280]	; (80069a8 <MX_ADC1_Init+0x130>)
 800688e:	4a47      	ldr	r2, [pc, #284]	; (80069ac <MX_ADC1_Init+0x134>)
 8006890:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8006892:	4b45      	ldr	r3, [pc, #276]	; (80069a8 <MX_ADC1_Init+0x130>)
 8006894:	2280      	movs	r2, #128	; 0x80
 8006896:	0312      	lsls	r2, r2, #12
 8006898:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800689a:	4b43      	ldr	r3, [pc, #268]	; (80069a8 <MX_ADC1_Init+0x130>)
 800689c:	2210      	movs	r2, #16
 800689e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80068a0:	4b41      	ldr	r3, [pc, #260]	; (80069a8 <MX_ADC1_Init+0x130>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80068a6:	4b40      	ldr	r3, [pc, #256]	; (80069a8 <MX_ADC1_Init+0x130>)
 80068a8:	2280      	movs	r2, #128	; 0x80
 80068aa:	0392      	lsls	r2, r2, #14
 80068ac:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80068ae:	4b3e      	ldr	r3, [pc, #248]	; (80069a8 <MX_ADC1_Init+0x130>)
 80068b0:	2204      	movs	r2, #4
 80068b2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80068b4:	4b3c      	ldr	r3, [pc, #240]	; (80069a8 <MX_ADC1_Init+0x130>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80068ba:	4b3b      	ldr	r3, [pc, #236]	; (80069a8 <MX_ADC1_Init+0x130>)
 80068bc:	2200      	movs	r2, #0
 80068be:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80068c0:	4b39      	ldr	r3, [pc, #228]	; (80069a8 <MX_ADC1_Init+0x130>)
 80068c2:	2201      	movs	r2, #1
 80068c4:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 80068c6:	4b38      	ldr	r3, [pc, #224]	; (80069a8 <MX_ADC1_Init+0x130>)
 80068c8:	2204      	movs	r2, #4
 80068ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80068cc:	4b36      	ldr	r3, [pc, #216]	; (80069a8 <MX_ADC1_Init+0x130>)
 80068ce:	2220      	movs	r2, #32
 80068d0:	2100      	movs	r1, #0
 80068d2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80068d4:	4b34      	ldr	r3, [pc, #208]	; (80069a8 <MX_ADC1_Init+0x130>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80068da:	4b33      	ldr	r3, [pc, #204]	; (80069a8 <MX_ADC1_Init+0x130>)
 80068dc:	2200      	movs	r2, #0
 80068de:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80068e0:	4b31      	ldr	r3, [pc, #196]	; (80069a8 <MX_ADC1_Init+0x130>)
 80068e2:	222c      	movs	r2, #44	; 0x2c
 80068e4:	2101      	movs	r1, #1
 80068e6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80068e8:	4b2f      	ldr	r3, [pc, #188]	; (80069a8 <MX_ADC1_Init+0x130>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80068ee:	4b2e      	ldr	r3, [pc, #184]	; (80069a8 <MX_ADC1_Init+0x130>)
 80068f0:	2207      	movs	r2, #7
 80068f2:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 80068f4:	4b2c      	ldr	r3, [pc, #176]	; (80069a8 <MX_ADC1_Init+0x130>)
 80068f6:	2207      	movs	r2, #7
 80068f8:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80068fa:	4b2b      	ldr	r3, [pc, #172]	; (80069a8 <MX_ADC1_Init+0x130>)
 80068fc:	223c      	movs	r2, #60	; 0x3c
 80068fe:	2100      	movs	r1, #0
 8006900:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8006902:	4b29      	ldr	r3, [pc, #164]	; (80069a8 <MX_ADC1_Init+0x130>)
 8006904:	2200      	movs	r2, #0
 8006906:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006908:	4b27      	ldr	r3, [pc, #156]	; (80069a8 <MX_ADC1_Init+0x130>)
 800690a:	0018      	movs	r0, r3
 800690c:	f003 f986 	bl	8009c1c <HAL_ADC_Init>
 8006910:	1e03      	subs	r3, r0, #0
 8006912:	d001      	beq.n	8006918 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8006914:	f000 fb74 	bl	8007000 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006918:	1d3b      	adds	r3, r7, #4
 800691a:	4a25      	ldr	r2, [pc, #148]	; (80069b0 <MX_ADC1_Init+0x138>)
 800691c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800691e:	1d3b      	adds	r3, r7, #4
 8006920:	2200      	movs	r2, #0
 8006922:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8006924:	1d3b      	adds	r3, r7, #4
 8006926:	2200      	movs	r2, #0
 8006928:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800692a:	1d3a      	adds	r2, r7, #4
 800692c:	4b1e      	ldr	r3, [pc, #120]	; (80069a8 <MX_ADC1_Init+0x130>)
 800692e:	0011      	movs	r1, r2
 8006930:	0018      	movs	r0, r3
 8006932:	f003 fbf1 	bl	800a118 <HAL_ADC_ConfigChannel>
 8006936:	1e03      	subs	r3, r0, #0
 8006938:	d001      	beq.n	800693e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800693a:	f000 fb61 	bl	8007000 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800693e:	1d3b      	adds	r3, r7, #4
 8006940:	4a1c      	ldr	r2, [pc, #112]	; (80069b4 <MX_ADC1_Init+0x13c>)
 8006942:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8006944:	1d3b      	adds	r3, r7, #4
 8006946:	2204      	movs	r2, #4
 8006948:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800694a:	1d3a      	adds	r2, r7, #4
 800694c:	4b16      	ldr	r3, [pc, #88]	; (80069a8 <MX_ADC1_Init+0x130>)
 800694e:	0011      	movs	r1, r2
 8006950:	0018      	movs	r0, r3
 8006952:	f003 fbe1 	bl	800a118 <HAL_ADC_ConfigChannel>
 8006956:	1e03      	subs	r3, r0, #0
 8006958:	d001      	beq.n	800695e <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800695a:	f000 fb51 	bl	8007000 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800695e:	1d3b      	adds	r3, r7, #4
 8006960:	4a15      	ldr	r2, [pc, #84]	; (80069b8 <MX_ADC1_Init+0x140>)
 8006962:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8006964:	1d3b      	adds	r3, r7, #4
 8006966:	2208      	movs	r2, #8
 8006968:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800696a:	1d3a      	adds	r2, r7, #4
 800696c:	4b0e      	ldr	r3, [pc, #56]	; (80069a8 <MX_ADC1_Init+0x130>)
 800696e:	0011      	movs	r1, r2
 8006970:	0018      	movs	r0, r3
 8006972:	f003 fbd1 	bl	800a118 <HAL_ADC_ConfigChannel>
 8006976:	1e03      	subs	r3, r0, #0
 8006978:	d001      	beq.n	800697e <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800697a:	f000 fb41 	bl	8007000 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800697e:	1d3b      	adds	r3, r7, #4
 8006980:	4a0e      	ldr	r2, [pc, #56]	; (80069bc <MX_ADC1_Init+0x144>)
 8006982:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8006984:	1d3b      	adds	r3, r7, #4
 8006986:	220c      	movs	r2, #12
 8006988:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800698a:	1d3a      	adds	r2, r7, #4
 800698c:	4b06      	ldr	r3, [pc, #24]	; (80069a8 <MX_ADC1_Init+0x130>)
 800698e:	0011      	movs	r1, r2
 8006990:	0018      	movs	r0, r3
 8006992:	f003 fbc1 	bl	800a118 <HAL_ADC_ConfigChannel>
 8006996:	1e03      	subs	r3, r0, #0
 8006998:	d001      	beq.n	800699e <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 800699a:	f000 fb31 	bl	8007000 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800699e:	46c0      	nop			; (mov r8, r8)
 80069a0:	46bd      	mov	sp, r7
 80069a2:	b004      	add	sp, #16
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	46c0      	nop			; (mov r8, r8)
 80069a8:	20000370 	.word	0x20000370
 80069ac:	40012400 	.word	0x40012400
 80069b0:	0c000008 	.word	0x0c000008
 80069b4:	10000010 	.word	0x10000010
 80069b8:	14000020 	.word	0x14000020
 80069bc:	1c000080 	.word	0x1c000080

080069c0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80069c4:	4b12      	ldr	r3, [pc, #72]	; (8006a10 <MX_CRC_Init+0x50>)
 80069c6:	4a13      	ldr	r2, [pc, #76]	; (8006a14 <MX_CRC_Init+0x54>)
 80069c8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 80069ca:	4b11      	ldr	r3, [pc, #68]	; (8006a10 <MX_CRC_Init+0x50>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 80069d0:	4b0f      	ldr	r3, [pc, #60]	; (8006a10 <MX_CRC_Init+0x50>)
 80069d2:	2201      	movs	r2, #1
 80069d4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 0x1021;
 80069d6:	4b0e      	ldr	r3, [pc, #56]	; (8006a10 <MX_CRC_Init+0x50>)
 80069d8:	4a0f      	ldr	r2, [pc, #60]	; (8006a18 <MX_CRC_Init+0x58>)
 80069da:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 80069dc:	4b0c      	ldr	r3, [pc, #48]	; (8006a10 <MX_CRC_Init+0x50>)
 80069de:	2208      	movs	r2, #8
 80069e0:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 80069e2:	4b0b      	ldr	r3, [pc, #44]	; (8006a10 <MX_CRC_Init+0x50>)
 80069e4:	4a0d      	ldr	r2, [pc, #52]	; (8006a1c <MX_CRC_Init+0x5c>)
 80069e6:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80069e8:	4b09      	ldr	r3, [pc, #36]	; (8006a10 <MX_CRC_Init+0x50>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80069ee:	4b08      	ldr	r3, [pc, #32]	; (8006a10 <MX_CRC_Init+0x50>)
 80069f0:	2200      	movs	r2, #0
 80069f2:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80069f4:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <MX_CRC_Init+0x50>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80069fa:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <MX_CRC_Init+0x50>)
 80069fc:	0018      	movs	r0, r3
 80069fe:	f004 f84d 	bl	800aa9c <HAL_CRC_Init>
 8006a02:	1e03      	subs	r3, r0, #0
 8006a04:	d001      	beq.n	8006a0a <MX_CRC_Init+0x4a>
  {
    Error_Handler();
 8006a06:	f000 fafb 	bl	8007000 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8006a0a:	46c0      	nop			; (mov r8, r8)
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20000430 	.word	0x20000430
 8006a14:	40023000 	.word	0x40023000
 8006a18:	00001021 	.word	0x00001021
 8006a1c:	0000ffff 	.word	0x0000ffff

08006a20 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006a24:	4b1b      	ldr	r3, [pc, #108]	; (8006a94 <MX_I2C2_Init+0x74>)
 8006a26:	4a1c      	ldr	r2, [pc, #112]	; (8006a98 <MX_I2C2_Init+0x78>)
 8006a28:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00602173;
 8006a2a:	4b1a      	ldr	r3, [pc, #104]	; (8006a94 <MX_I2C2_Init+0x74>)
 8006a2c:	4a1b      	ldr	r2, [pc, #108]	; (8006a9c <MX_I2C2_Init+0x7c>)
 8006a2e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006a30:	4b18      	ldr	r3, [pc, #96]	; (8006a94 <MX_I2C2_Init+0x74>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006a36:	4b17      	ldr	r3, [pc, #92]	; (8006a94 <MX_I2C2_Init+0x74>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006a3c:	4b15      	ldr	r3, [pc, #84]	; (8006a94 <MX_I2C2_Init+0x74>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006a42:	4b14      	ldr	r3, [pc, #80]	; (8006a94 <MX_I2C2_Init+0x74>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006a48:	4b12      	ldr	r3, [pc, #72]	; (8006a94 <MX_I2C2_Init+0x74>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006a4e:	4b11      	ldr	r3, [pc, #68]	; (8006a94 <MX_I2C2_Init+0x74>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006a54:	4b0f      	ldr	r3, [pc, #60]	; (8006a94 <MX_I2C2_Init+0x74>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006a5a:	4b0e      	ldr	r3, [pc, #56]	; (8006a94 <MX_I2C2_Init+0x74>)
 8006a5c:	0018      	movs	r0, r3
 8006a5e:	f004 fec3 	bl	800b7e8 <HAL_I2C_Init>
 8006a62:	1e03      	subs	r3, r0, #0
 8006a64:	d001      	beq.n	8006a6a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006a66:	f000 facb 	bl	8007000 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006a6a:	4b0a      	ldr	r3, [pc, #40]	; (8006a94 <MX_I2C2_Init+0x74>)
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	0018      	movs	r0, r3
 8006a70:	f005 fe12 	bl	800c698 <HAL_I2CEx_ConfigAnalogFilter>
 8006a74:	1e03      	subs	r3, r0, #0
 8006a76:	d001      	beq.n	8006a7c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006a78:	f000 fac2 	bl	8007000 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006a7c:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <MX_I2C2_Init+0x74>)
 8006a7e:	2100      	movs	r1, #0
 8006a80:	0018      	movs	r0, r3
 8006a82:	f005 fe55 	bl	800c730 <HAL_I2CEx_ConfigDigitalFilter>
 8006a86:	1e03      	subs	r3, r0, #0
 8006a88:	d001      	beq.n	8006a8e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006a8a:	f000 fab9 	bl	8007000 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006a8e:	46c0      	nop			; (mov r8, r8)
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	20000454 	.word	0x20000454
 8006a98:	40005800 	.word	0x40005800
 8006a9c:	00602173 	.word	0x00602173

08006aa0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8006aa4:	4b1b      	ldr	r3, [pc, #108]	; (8006b14 <MX_SPI1_Init+0x74>)
 8006aa6:	4a1c      	ldr	r2, [pc, #112]	; (8006b18 <MX_SPI1_Init+0x78>)
 8006aa8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8006aaa:	4b1a      	ldr	r3, [pc, #104]	; (8006b14 <MX_SPI1_Init+0x74>)
 8006aac:	2282      	movs	r2, #130	; 0x82
 8006aae:	0052      	lsls	r2, r2, #1
 8006ab0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006ab2:	4b18      	ldr	r3, [pc, #96]	; (8006b14 <MX_SPI1_Init+0x74>)
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8006ab8:	4b16      	ldr	r3, [pc, #88]	; (8006b14 <MX_SPI1_Init+0x74>)
 8006aba:	22e0      	movs	r2, #224	; 0xe0
 8006abc:	00d2      	lsls	r2, r2, #3
 8006abe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ac0:	4b14      	ldr	r3, [pc, #80]	; (8006b14 <MX_SPI1_Init+0x74>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006ac6:	4b13      	ldr	r3, [pc, #76]	; (8006b14 <MX_SPI1_Init+0x74>)
 8006ac8:	2200      	movs	r2, #0
 8006aca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006acc:	4b11      	ldr	r3, [pc, #68]	; (8006b14 <MX_SPI1_Init+0x74>)
 8006ace:	2280      	movs	r2, #128	; 0x80
 8006ad0:	0092      	lsls	r2, r2, #2
 8006ad2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006ad4:	4b0f      	ldr	r3, [pc, #60]	; (8006b14 <MX_SPI1_Init+0x74>)
 8006ad6:	2210      	movs	r2, #16
 8006ad8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006ada:	4b0e      	ldr	r3, [pc, #56]	; (8006b14 <MX_SPI1_Init+0x74>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006ae0:	4b0c      	ldr	r3, [pc, #48]	; (8006b14 <MX_SPI1_Init+0x74>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ae6:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <MX_SPI1_Init+0x74>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006aec:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <MX_SPI1_Init+0x74>)
 8006aee:	2207      	movs	r2, #7
 8006af0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006af2:	4b08      	ldr	r3, [pc, #32]	; (8006b14 <MX_SPI1_Init+0x74>)
 8006af4:	2200      	movs	r2, #0
 8006af6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006af8:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <MX_SPI1_Init+0x74>)
 8006afa:	2208      	movs	r2, #8
 8006afc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006afe:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <MX_SPI1_Init+0x74>)
 8006b00:	0018      	movs	r0, r3
 8006b02:	f006 fca1 	bl	800d448 <HAL_SPI_Init>
 8006b06:	1e03      	subs	r3, r0, #0
 8006b08:	d001      	beq.n	8006b0e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8006b0a:	f000 fa79 	bl	8007000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8006b0e:	46c0      	nop			; (mov r8, r8)
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}
 8006b14:	200004a0 	.word	0x200004a0
 8006b18:	40013000 	.word	0x40013000

08006b1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08e      	sub	sp, #56	; 0x38
 8006b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006b22:	2328      	movs	r3, #40	; 0x28
 8006b24:	18fb      	adds	r3, r7, r3
 8006b26:	0018      	movs	r0, r3
 8006b28:	2310      	movs	r3, #16
 8006b2a:	001a      	movs	r2, r3
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	f00a f97e 	bl	8010e2e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b32:	231c      	movs	r3, #28
 8006b34:	18fb      	adds	r3, r7, r3
 8006b36:	0018      	movs	r0, r3
 8006b38:	230c      	movs	r3, #12
 8006b3a:	001a      	movs	r2, r3
 8006b3c:	2100      	movs	r1, #0
 8006b3e:	f00a f976 	bl	8010e2e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006b42:	003b      	movs	r3, r7
 8006b44:	0018      	movs	r0, r3
 8006b46:	231c      	movs	r3, #28
 8006b48:	001a      	movs	r2, r3
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	f00a f96f 	bl	8010e2e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006b50:	4b3a      	ldr	r3, [pc, #232]	; (8006c3c <MX_TIM3_Init+0x120>)
 8006b52:	4a3b      	ldr	r2, [pc, #236]	; (8006c40 <MX_TIM3_Init+0x124>)
 8006b54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 8006b56:	4b39      	ldr	r3, [pc, #228]	; (8006c3c <MX_TIM3_Init+0x120>)
 8006b58:	2205      	movs	r2, #5
 8006b5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b5c:	4b37      	ldr	r3, [pc, #220]	; (8006c3c <MX_TIM3_Init+0x120>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8006b62:	4b36      	ldr	r3, [pc, #216]	; (8006c3c <MX_TIM3_Init+0x120>)
 8006b64:	22fa      	movs	r2, #250	; 0xfa
 8006b66:	0092      	lsls	r2, r2, #2
 8006b68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b6a:	4b34      	ldr	r3, [pc, #208]	; (8006c3c <MX_TIM3_Init+0x120>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b70:	4b32      	ldr	r3, [pc, #200]	; (8006c3c <MX_TIM3_Init+0x120>)
 8006b72:	2200      	movs	r2, #0
 8006b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006b76:	4b31      	ldr	r3, [pc, #196]	; (8006c3c <MX_TIM3_Init+0x120>)
 8006b78:	0018      	movs	r0, r3
 8006b7a:	f007 fb5b 	bl	800e234 <HAL_TIM_Base_Init>
 8006b7e:	1e03      	subs	r3, r0, #0
 8006b80:	d001      	beq.n	8006b86 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8006b82:	f000 fa3d 	bl	8007000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006b86:	2128      	movs	r1, #40	; 0x28
 8006b88:	187b      	adds	r3, r7, r1
 8006b8a:	2280      	movs	r2, #128	; 0x80
 8006b8c:	0152      	lsls	r2, r2, #5
 8006b8e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006b90:	187a      	adds	r2, r7, r1
 8006b92:	4b2a      	ldr	r3, [pc, #168]	; (8006c3c <MX_TIM3_Init+0x120>)
 8006b94:	0011      	movs	r1, r2
 8006b96:	0018      	movs	r0, r3
 8006b98:	f007 ff66 	bl	800ea68 <HAL_TIM_ConfigClockSource>
 8006b9c:	1e03      	subs	r3, r0, #0
 8006b9e:	d001      	beq.n	8006ba4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8006ba0:	f000 fa2e 	bl	8007000 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006ba4:	4b25      	ldr	r3, [pc, #148]	; (8006c3c <MX_TIM3_Init+0x120>)
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	f007 fbf2 	bl	800e390 <HAL_TIM_PWM_Init>
 8006bac:	1e03      	subs	r3, r0, #0
 8006bae:	d001      	beq.n	8006bb4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8006bb0:	f000 fa26 	bl	8007000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006bb4:	211c      	movs	r1, #28
 8006bb6:	187b      	adds	r3, r7, r1
 8006bb8:	2200      	movs	r2, #0
 8006bba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006bbc:	187b      	adds	r3, r7, r1
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006bc2:	187a      	adds	r2, r7, r1
 8006bc4:	4b1d      	ldr	r3, [pc, #116]	; (8006c3c <MX_TIM3_Init+0x120>)
 8006bc6:	0011      	movs	r1, r2
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f008 fc3b 	bl	800f444 <HAL_TIMEx_MasterConfigSynchronization>
 8006bce:	1e03      	subs	r3, r0, #0
 8006bd0:	d001      	beq.n	8006bd6 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8006bd2:	f000 fa15 	bl	8007000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006bd6:	003b      	movs	r3, r7
 8006bd8:	2260      	movs	r2, #96	; 0x60
 8006bda:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8006bdc:	003b      	movs	r3, r7
 8006bde:	2200      	movs	r2, #0
 8006be0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006be2:	003b      	movs	r3, r7
 8006be4:	2200      	movs	r2, #0
 8006be6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006be8:	003b      	movs	r3, r7
 8006bea:	2200      	movs	r2, #0
 8006bec:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006bee:	0039      	movs	r1, r7
 8006bf0:	4b12      	ldr	r3, [pc, #72]	; (8006c3c <MX_TIM3_Init+0x120>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	f007 fe41 	bl	800e87c <HAL_TIM_PWM_ConfigChannel>
 8006bfa:	1e03      	subs	r3, r0, #0
 8006bfc:	d001      	beq.n	8006c02 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8006bfe:	f000 f9ff 	bl	8007000 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8006c02:	0039      	movs	r1, r7
 8006c04:	4b0d      	ldr	r3, [pc, #52]	; (8006c3c <MX_TIM3_Init+0x120>)
 8006c06:	2204      	movs	r2, #4
 8006c08:	0018      	movs	r0, r3
 8006c0a:	f007 fe37 	bl	800e87c <HAL_TIM_PWM_ConfigChannel>
 8006c0e:	1e03      	subs	r3, r0, #0
 8006c10:	d001      	beq.n	8006c16 <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 8006c12:	f000 f9f5 	bl	8007000 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006c16:	0039      	movs	r1, r7
 8006c18:	4b08      	ldr	r3, [pc, #32]	; (8006c3c <MX_TIM3_Init+0x120>)
 8006c1a:	220c      	movs	r2, #12
 8006c1c:	0018      	movs	r0, r3
 8006c1e:	f007 fe2d 	bl	800e87c <HAL_TIM_PWM_ConfigChannel>
 8006c22:	1e03      	subs	r3, r0, #0
 8006c24:	d001      	beq.n	8006c2a <MX_TIM3_Init+0x10e>
  {
    Error_Handler();
 8006c26:	f000 f9eb 	bl	8007000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006c2a:	4b04      	ldr	r3, [pc, #16]	; (8006c3c <MX_TIM3_Init+0x120>)
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f001 fe0f 	bl	8008850 <HAL_TIM_MspPostInit>

}
 8006c32:	46c0      	nop			; (mov r8, r8)
 8006c34:	46bd      	mov	sp, r7
 8006c36:	b00e      	add	sp, #56	; 0x38
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	46c0      	nop			; (mov r8, r8)
 8006c3c:	20000504 	.word	0x20000504
 8006c40:	40000400 	.word	0x40000400

08006c44 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c4a:	1d3b      	adds	r3, r7, #4
 8006c4c:	0018      	movs	r0, r3
 8006c4e:	230c      	movs	r3, #12
 8006c50:	001a      	movs	r2, r3
 8006c52:	2100      	movs	r1, #0
 8006c54:	f00a f8eb 	bl	8010e2e <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006c58:	4b15      	ldr	r3, [pc, #84]	; (8006cb0 <MX_TIM6_Init+0x6c>)
 8006c5a:	4a16      	ldr	r2, [pc, #88]	; (8006cb4 <MX_TIM6_Init+0x70>)
 8006c5c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 99;
 8006c5e:	4b14      	ldr	r3, [pc, #80]	; (8006cb0 <MX_TIM6_Init+0x6c>)
 8006c60:	2263      	movs	r2, #99	; 0x63
 8006c62:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c64:	4b12      	ldr	r3, [pc, #72]	; (8006cb0 <MX_TIM6_Init+0x6c>)
 8006c66:	2200      	movs	r2, #0
 8006c68:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 8006c6a:	4b11      	ldr	r3, [pc, #68]	; (8006cb0 <MX_TIM6_Init+0x6c>)
 8006c6c:	4a12      	ldr	r2, [pc, #72]	; (8006cb8 <MX_TIM6_Init+0x74>)
 8006c6e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006c70:	4b0f      	ldr	r3, [pc, #60]	; (8006cb0 <MX_TIM6_Init+0x6c>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006c76:	4b0e      	ldr	r3, [pc, #56]	; (8006cb0 <MX_TIM6_Init+0x6c>)
 8006c78:	0018      	movs	r0, r3
 8006c7a:	f007 fadb 	bl	800e234 <HAL_TIM_Base_Init>
 8006c7e:	1e03      	subs	r3, r0, #0
 8006c80:	d001      	beq.n	8006c86 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8006c82:	f000 f9bd 	bl	8007000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006c86:	1d3b      	adds	r3, r7, #4
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006c8c:	1d3b      	adds	r3, r7, #4
 8006c8e:	2200      	movs	r2, #0
 8006c90:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006c92:	1d3a      	adds	r2, r7, #4
 8006c94:	4b06      	ldr	r3, [pc, #24]	; (8006cb0 <MX_TIM6_Init+0x6c>)
 8006c96:	0011      	movs	r1, r2
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f008 fbd3 	bl	800f444 <HAL_TIMEx_MasterConfigSynchronization>
 8006c9e:	1e03      	subs	r3, r0, #0
 8006ca0:	d001      	beq.n	8006ca6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8006ca2:	f000 f9ad 	bl	8007000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006ca6:	46c0      	nop			; (mov r8, r8)
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	b004      	add	sp, #16
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	46c0      	nop			; (mov r8, r8)
 8006cb0:	20000550 	.word	0x20000550
 8006cb4:	40001000 	.word	0x40001000
 8006cb8:	0000f9ff 	.word	0x0000f9ff

08006cbc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006cc2:	1d3b      	adds	r3, r7, #4
 8006cc4:	0018      	movs	r0, r3
 8006cc6:	230c      	movs	r3, #12
 8006cc8:	001a      	movs	r2, r3
 8006cca:	2100      	movs	r1, #0
 8006ccc:	f00a f8af 	bl	8010e2e <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006cd0:	4b15      	ldr	r3, [pc, #84]	; (8006d28 <MX_TIM7_Init+0x6c>)
 8006cd2:	4a16      	ldr	r2, [pc, #88]	; (8006d2c <MX_TIM7_Init+0x70>)
 8006cd4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 8006cd6:	4b14      	ldr	r3, [pc, #80]	; (8006d28 <MX_TIM7_Init+0x6c>)
 8006cd8:	4a15      	ldr	r2, [pc, #84]	; (8006d30 <MX_TIM7_Init+0x74>)
 8006cda:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cdc:	4b12      	ldr	r3, [pc, #72]	; (8006d28 <MX_TIM7_Init+0x6c>)
 8006cde:	2200      	movs	r2, #0
 8006ce0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 63999;
 8006ce2:	4b11      	ldr	r3, [pc, #68]	; (8006d28 <MX_TIM7_Init+0x6c>)
 8006ce4:	4a13      	ldr	r2, [pc, #76]	; (8006d34 <MX_TIM7_Init+0x78>)
 8006ce6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006ce8:	4b0f      	ldr	r3, [pc, #60]	; (8006d28 <MX_TIM7_Init+0x6c>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006cee:	4b0e      	ldr	r3, [pc, #56]	; (8006d28 <MX_TIM7_Init+0x6c>)
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f007 fa9f 	bl	800e234 <HAL_TIM_Base_Init>
 8006cf6:	1e03      	subs	r3, r0, #0
 8006cf8:	d001      	beq.n	8006cfe <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8006cfa:	f000 f981 	bl	8007000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006cfe:	1d3b      	adds	r3, r7, #4
 8006d00:	2200      	movs	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d04:	1d3b      	adds	r3, r7, #4
 8006d06:	2200      	movs	r2, #0
 8006d08:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006d0a:	1d3a      	adds	r2, r7, #4
 8006d0c:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <MX_TIM7_Init+0x6c>)
 8006d0e:	0011      	movs	r1, r2
 8006d10:	0018      	movs	r0, r3
 8006d12:	f008 fb97 	bl	800f444 <HAL_TIMEx_MasterConfigSynchronization>
 8006d16:	1e03      	subs	r3, r0, #0
 8006d18:	d001      	beq.n	8006d1e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8006d1a:	f000 f971 	bl	8007000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	46bd      	mov	sp, r7
 8006d22:	b004      	add	sp, #16
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	46c0      	nop			; (mov r8, r8)
 8006d28:	2000059c 	.word	0x2000059c
 8006d2c:	40001400 	.word	0x40001400
 8006d30:	000003e7 	.word	0x000003e7
 8006d34:	0000f9ff 	.word	0x0000f9ff

08006d38 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8006d3c:	4b0e      	ldr	r3, [pc, #56]	; (8006d78 <MX_TIM14_Init+0x40>)
 8006d3e:	4a0f      	ldr	r2, [pc, #60]	; (8006d7c <MX_TIM14_Init+0x44>)
 8006d40:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 8006d42:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <MX_TIM14_Init+0x40>)
 8006d44:	2263      	movs	r2, #99	; 0x63
 8006d46:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d48:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <MX_TIM14_Init+0x40>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 63999;
 8006d4e:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <MX_TIM14_Init+0x40>)
 8006d50:	4a0b      	ldr	r2, [pc, #44]	; (8006d80 <MX_TIM14_Init+0x48>)
 8006d52:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d54:	4b08      	ldr	r3, [pc, #32]	; (8006d78 <MX_TIM14_Init+0x40>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d5a:	4b07      	ldr	r3, [pc, #28]	; (8006d78 <MX_TIM14_Init+0x40>)
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8006d60:	4b05      	ldr	r3, [pc, #20]	; (8006d78 <MX_TIM14_Init+0x40>)
 8006d62:	0018      	movs	r0, r3
 8006d64:	f007 fa66 	bl	800e234 <HAL_TIM_Base_Init>
 8006d68:	1e03      	subs	r3, r0, #0
 8006d6a:	d001      	beq.n	8006d70 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8006d6c:	f000 f948 	bl	8007000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8006d70:	46c0      	nop			; (mov r8, r8)
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	200005e8 	.word	0x200005e8
 8006d7c:	40002000 	.word	0x40002000
 8006d80:	0000f9ff 	.word	0x0000f9ff

08006d84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006d88:	4b23      	ldr	r3, [pc, #140]	; (8006e18 <MX_USART1_UART_Init+0x94>)
 8006d8a:	4a24      	ldr	r2, [pc, #144]	; (8006e1c <MX_USART1_UART_Init+0x98>)
 8006d8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8006d8e:	4b22      	ldr	r3, [pc, #136]	; (8006e18 <MX_USART1_UART_Init+0x94>)
 8006d90:	2296      	movs	r2, #150	; 0x96
 8006d92:	0192      	lsls	r2, r2, #6
 8006d94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006d96:	4b20      	ldr	r3, [pc, #128]	; (8006e18 <MX_USART1_UART_Init+0x94>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006d9c:	4b1e      	ldr	r3, [pc, #120]	; (8006e18 <MX_USART1_UART_Init+0x94>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006da2:	4b1d      	ldr	r3, [pc, #116]	; (8006e18 <MX_USART1_UART_Init+0x94>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006da8:	4b1b      	ldr	r3, [pc, #108]	; (8006e18 <MX_USART1_UART_Init+0x94>)
 8006daa:	220c      	movs	r2, #12
 8006dac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006dae:	4b1a      	ldr	r3, [pc, #104]	; (8006e18 <MX_USART1_UART_Init+0x94>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006db4:	4b18      	ldr	r3, [pc, #96]	; (8006e18 <MX_USART1_UART_Init+0x94>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006dba:	4b17      	ldr	r3, [pc, #92]	; (8006e18 <MX_USART1_UART_Init+0x94>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006dc0:	4b15      	ldr	r3, [pc, #84]	; (8006e18 <MX_USART1_UART_Init+0x94>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006dc6:	4b14      	ldr	r3, [pc, #80]	; (8006e18 <MX_USART1_UART_Init+0x94>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006dcc:	4b12      	ldr	r3, [pc, #72]	; (8006e18 <MX_USART1_UART_Init+0x94>)
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f008 fbb8 	bl	800f544 <HAL_UART_Init>
 8006dd4:	1e03      	subs	r3, r0, #0
 8006dd6:	d001      	beq.n	8006ddc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8006dd8:	f000 f912 	bl	8007000 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006ddc:	4b0e      	ldr	r3, [pc, #56]	; (8006e18 <MX_USART1_UART_Init+0x94>)
 8006dde:	2100      	movs	r1, #0
 8006de0:	0018      	movs	r0, r3
 8006de2:	f009 ff05 	bl	8010bf0 <HAL_UARTEx_SetTxFifoThreshold>
 8006de6:	1e03      	subs	r3, r0, #0
 8006de8:	d001      	beq.n	8006dee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8006dea:	f000 f909 	bl	8007000 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006dee:	4b0a      	ldr	r3, [pc, #40]	; (8006e18 <MX_USART1_UART_Init+0x94>)
 8006df0:	2100      	movs	r1, #0
 8006df2:	0018      	movs	r0, r3
 8006df4:	f009 ff3c 	bl	8010c70 <HAL_UARTEx_SetRxFifoThreshold>
 8006df8:	1e03      	subs	r3, r0, #0
 8006dfa:	d001      	beq.n	8006e00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8006dfc:	f000 f900 	bl	8007000 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006e00:	4b05      	ldr	r3, [pc, #20]	; (8006e18 <MX_USART1_UART_Init+0x94>)
 8006e02:	0018      	movs	r0, r3
 8006e04:	f009 feba 	bl	8010b7c <HAL_UARTEx_DisableFifoMode>
 8006e08:	1e03      	subs	r3, r0, #0
 8006e0a:	d001      	beq.n	8006e10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8006e0c:	f000 f8f8 	bl	8007000 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006e10:	46c0      	nop			; (mov r8, r8)
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	46c0      	nop			; (mov r8, r8)
 8006e18:	20000634 	.word	0x20000634
 8006e1c:	40013800 	.word	0x40013800

08006e20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006e26:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <MX_DMA_Init+0x38>)
 8006e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e2a:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <MX_DMA_Init+0x38>)
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	639a      	str	r2, [r3, #56]	; 0x38
 8006e32:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <MX_DMA_Init+0x38>)
 8006e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e36:	2201      	movs	r2, #1
 8006e38:	4013      	ands	r3, r2
 8006e3a:	607b      	str	r3, [r7, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2102      	movs	r1, #2
 8006e42:	2009      	movs	r0, #9
 8006e44:	f003 fdf8 	bl	800aa38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006e48:	2009      	movs	r0, #9
 8006e4a:	f003 fe0a 	bl	800aa62 <HAL_NVIC_EnableIRQ>

}
 8006e4e:	46c0      	nop			; (mov r8, r8)
 8006e50:	46bd      	mov	sp, r7
 8006e52:	b002      	add	sp, #8
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	46c0      	nop			; (mov r8, r8)
 8006e58:	40021000 	.word	0x40021000

08006e5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006e5c:	b590      	push	{r4, r7, lr}
 8006e5e:	b089      	sub	sp, #36	; 0x24
 8006e60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e62:	240c      	movs	r4, #12
 8006e64:	193b      	adds	r3, r7, r4
 8006e66:	0018      	movs	r0, r3
 8006e68:	2314      	movs	r3, #20
 8006e6a:	001a      	movs	r2, r3
 8006e6c:	2100      	movs	r1, #0
 8006e6e:	f009 ffde 	bl	8010e2e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e72:	4b60      	ldr	r3, [pc, #384]	; (8006ff4 <MX_GPIO_Init+0x198>)
 8006e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e76:	4b5f      	ldr	r3, [pc, #380]	; (8006ff4 <MX_GPIO_Init+0x198>)
 8006e78:	2102      	movs	r1, #2
 8006e7a:	430a      	orrs	r2, r1
 8006e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8006e7e:	4b5d      	ldr	r3, [pc, #372]	; (8006ff4 <MX_GPIO_Init+0x198>)
 8006e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e82:	2202      	movs	r2, #2
 8006e84:	4013      	ands	r3, r2
 8006e86:	60bb      	str	r3, [r7, #8]
 8006e88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e8a:	4b5a      	ldr	r3, [pc, #360]	; (8006ff4 <MX_GPIO_Init+0x198>)
 8006e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e8e:	4b59      	ldr	r3, [pc, #356]	; (8006ff4 <MX_GPIO_Init+0x198>)
 8006e90:	2104      	movs	r1, #4
 8006e92:	430a      	orrs	r2, r1
 8006e94:	635a      	str	r2, [r3, #52]	; 0x34
 8006e96:	4b57      	ldr	r3, [pc, #348]	; (8006ff4 <MX_GPIO_Init+0x198>)
 8006e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9a:	2204      	movs	r2, #4
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	607b      	str	r3, [r7, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ea2:	4b54      	ldr	r3, [pc, #336]	; (8006ff4 <MX_GPIO_Init+0x198>)
 8006ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ea6:	4b53      	ldr	r3, [pc, #332]	; (8006ff4 <MX_GPIO_Init+0x198>)
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	635a      	str	r2, [r3, #52]	; 0x34
 8006eae:	4b51      	ldr	r3, [pc, #324]	; (8006ff4 <MX_GPIO_Init+0x198>)
 8006eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	603b      	str	r3, [r7, #0]
 8006eb8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8006eba:	2397      	movs	r3, #151	; 0x97
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	484e      	ldr	r0, [pc, #312]	; (8006ff8 <MX_GPIO_Init+0x19c>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	0019      	movs	r1, r3
 8006ec4:	f004 fc73 	bl	800b7ae <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8006ec8:	2380      	movs	r3, #128	; 0x80
 8006eca:	021b      	lsls	r3, r3, #8
 8006ecc:	484b      	ldr	r0, [pc, #300]	; (8006ffc <MX_GPIO_Init+0x1a0>)
 8006ece:	2200      	movs	r2, #0
 8006ed0:	0019      	movs	r1, r3
 8006ed2:	f004 fc6c 	bl	800b7ae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(wiz_reset_GPIO_Port, wiz_reset_Pin, GPIO_PIN_RESET);
 8006ed6:	2380      	movs	r3, #128	; 0x80
 8006ed8:	0219      	lsls	r1, r3, #8
 8006eda:	23a0      	movs	r3, #160	; 0xa0
 8006edc:	05db      	lsls	r3, r3, #23
 8006ede:	2200      	movs	r2, #0
 8006ee0:	0018      	movs	r0, r3
 8006ee2:	f004 fc64 	bl	800b7ae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB2 PB3 PB4
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8006ee6:	193b      	adds	r3, r7, r4
 8006ee8:	2297      	movs	r2, #151	; 0x97
 8006eea:	0092      	lsls	r2, r2, #2
 8006eec:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006eee:	193b      	adds	r3, r7, r4
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ef4:	193b      	adds	r3, r7, r4
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006efa:	193b      	adds	r3, r7, r4
 8006efc:	2200      	movs	r2, #0
 8006efe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f00:	193b      	adds	r3, r7, r4
 8006f02:	4a3d      	ldr	r2, [pc, #244]	; (8006ff8 <MX_GPIO_Init+0x19c>)
 8006f04:	0019      	movs	r1, r3
 8006f06:	0010      	movs	r0, r2
 8006f08:	f004 fad0 	bl	800b4ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006f0c:	0021      	movs	r1, r4
 8006f0e:	187b      	adds	r3, r7, r1
 8006f10:	2280      	movs	r2, #128	; 0x80
 8006f12:	01d2      	lsls	r2, r2, #7
 8006f14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f16:	000c      	movs	r4, r1
 8006f18:	193b      	adds	r3, r7, r4
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f1e:	193b      	adds	r3, r7, r4
 8006f20:	2200      	movs	r2, #0
 8006f22:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f24:	193b      	adds	r3, r7, r4
 8006f26:	4a35      	ldr	r2, [pc, #212]	; (8006ffc <MX_GPIO_Init+0x1a0>)
 8006f28:	0019      	movs	r1, r3
 8006f2a:	0010      	movs	r0, r2
 8006f2c:	f004 fabe 	bl	800b4ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006f30:	0021      	movs	r1, r4
 8006f32:	187b      	adds	r3, r7, r1
 8006f34:	2280      	movs	r2, #128	; 0x80
 8006f36:	0212      	lsls	r2, r2, #8
 8006f38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f3a:	000c      	movs	r4, r1
 8006f3c:	193b      	adds	r3, r7, r4
 8006f3e:	2201      	movs	r2, #1
 8006f40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f42:	193b      	adds	r3, r7, r4
 8006f44:	2200      	movs	r2, #0
 8006f46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f48:	193b      	adds	r3, r7, r4
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f4e:	193b      	adds	r3, r7, r4
 8006f50:	4a2a      	ldr	r2, [pc, #168]	; (8006ffc <MX_GPIO_Init+0x1a0>)
 8006f52:	0019      	movs	r1, r3
 8006f54:	0010      	movs	r0, r2
 8006f56:	f004 faa9 	bl	800b4ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006f5a:	193b      	adds	r3, r7, r4
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f60:	193b      	adds	r3, r7, r4
 8006f62:	2200      	movs	r2, #0
 8006f64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006f66:	193b      	adds	r3, r7, r4
 8006f68:	2202      	movs	r2, #2
 8006f6a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f6c:	193a      	adds	r2, r7, r4
 8006f6e:	23a0      	movs	r3, #160	; 0xa0
 8006f70:	05db      	lsls	r3, r3, #23
 8006f72:	0011      	movs	r1, r2
 8006f74:	0018      	movs	r0, r3
 8006f76:	f004 fa99 	bl	800b4ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7|GPIO_PIN_8;
 8006f7a:	0021      	movs	r1, r4
 8006f7c:	187b      	adds	r3, r7, r1
 8006f7e:	2282      	movs	r2, #130	; 0x82
 8006f80:	32ff      	adds	r2, #255	; 0xff
 8006f82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f84:	000c      	movs	r4, r1
 8006f86:	193b      	adds	r3, r7, r4
 8006f88:	2200      	movs	r2, #0
 8006f8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006f8c:	193b      	adds	r3, r7, r4
 8006f8e:	2201      	movs	r2, #1
 8006f90:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f92:	193b      	adds	r3, r7, r4
 8006f94:	4a18      	ldr	r2, [pc, #96]	; (8006ff8 <MX_GPIO_Init+0x19c>)
 8006f96:	0019      	movs	r1, r3
 8006f98:	0010      	movs	r0, r2
 8006f9a:	f004 fa87 	bl	800b4ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006f9e:	193b      	adds	r3, r7, r4
 8006fa0:	2280      	movs	r2, #128	; 0x80
 8006fa2:	0052      	lsls	r2, r2, #1
 8006fa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006fa6:	193b      	adds	r3, r7, r4
 8006fa8:	2200      	movs	r2, #0
 8006faa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006fac:	193b      	adds	r3, r7, r4
 8006fae:	2201      	movs	r2, #1
 8006fb0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fb2:	193a      	adds	r2, r7, r4
 8006fb4:	23a0      	movs	r3, #160	; 0xa0
 8006fb6:	05db      	lsls	r3, r3, #23
 8006fb8:	0011      	movs	r1, r2
 8006fba:	0018      	movs	r0, r3
 8006fbc:	f004 fa76 	bl	800b4ac <HAL_GPIO_Init>

  /*Configure GPIO pin : wiz_reset_Pin */
  GPIO_InitStruct.Pin = wiz_reset_Pin;
 8006fc0:	0021      	movs	r1, r4
 8006fc2:	187b      	adds	r3, r7, r1
 8006fc4:	2280      	movs	r2, #128	; 0x80
 8006fc6:	0212      	lsls	r2, r2, #8
 8006fc8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fca:	187b      	adds	r3, r7, r1
 8006fcc:	2201      	movs	r2, #1
 8006fce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd0:	187b      	adds	r3, r7, r1
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fd6:	187b      	adds	r3, r7, r1
 8006fd8:	2200      	movs	r2, #0
 8006fda:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(wiz_reset_GPIO_Port, &GPIO_InitStruct);
 8006fdc:	187a      	adds	r2, r7, r1
 8006fde:	23a0      	movs	r3, #160	; 0xa0
 8006fe0:	05db      	lsls	r3, r3, #23
 8006fe2:	0011      	movs	r1, r2
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	f004 fa61 	bl	800b4ac <HAL_GPIO_Init>

}
 8006fea:	46c0      	nop			; (mov r8, r8)
 8006fec:	46bd      	mov	sp, r7
 8006fee:	b009      	add	sp, #36	; 0x24
 8006ff0:	bd90      	pop	{r4, r7, pc}
 8006ff2:	46c0      	nop			; (mov r8, r8)
 8006ff4:	40021000 	.word	0x40021000
 8006ff8:	50000400 	.word	0x50000400
 8006ffc:	50000800 	.word	0x50000800

08007000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007004:	b672      	cpsid	i
}
 8007006:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007008:	e7fe      	b.n	8007008 <Error_Handler+0x8>
	...

0800700c <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 800700c:	b5b0      	push	{r4, r5, r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	0005      	movs	r5, r0
 8007014:	000c      	movs	r4, r1
 8007016:	0010      	movs	r0, r2
 8007018:	0019      	movs	r1, r3
 800701a:	1dfb      	adds	r3, r7, #7
 800701c:	1c2a      	adds	r2, r5, #0
 800701e:	701a      	strb	r2, [r3, #0]
 8007020:	1dbb      	adds	r3, r7, #6
 8007022:	1c22      	adds	r2, r4, #0
 8007024:	701a      	strb	r2, [r3, #0]
 8007026:	1d3b      	adds	r3, r7, #4
 8007028:	1c02      	adds	r2, r0, #0
 800702a:	801a      	strh	r2, [r3, #0]
 800702c:	1cfb      	adds	r3, r7, #3
 800702e:	1c0a      	adds	r2, r1, #0
 8007030:	701a      	strb	r2, [r3, #0]
	CHECK_SOCKNUM();
 8007032:	1dfb      	adds	r3, r7, #7
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b08      	cmp	r3, #8
 8007038:	d902      	bls.n	8007040 <socket+0x34>
 800703a:	2301      	movs	r3, #1
 800703c:	425b      	negs	r3, r3
 800703e:	e10d      	b.n	800725c <socket+0x250>
	switch(protocol)
 8007040:	1dbb      	adds	r3, r7, #6
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d005      	beq.n	8007054 <socket+0x48>
 8007048:	2b00      	cmp	r3, #0
 800704a:	dd11      	ble.n	8007070 <socket+0x64>
 800704c:	3b02      	subs	r3, #2
 800704e:	2b02      	cmp	r3, #2
 8007050:	d80e      	bhi.n	8007070 <socket+0x64>
            if(taddr == 0) return SOCKERR_SOCKINIT;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8007052:	e010      	b.n	8007076 <socket+0x6a>
            getSIPR((uint8_t*)&taddr);
 8007054:	230c      	movs	r3, #12
 8007056:	18f9      	adds	r1, r7, r3
 8007058:	23f0      	movs	r3, #240	; 0xf0
 800705a:	011b      	lsls	r3, r3, #4
 800705c:	2204      	movs	r2, #4
 800705e:	0018      	movs	r0, r3
 8007060:	f001 fed4 	bl	8008e0c <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d105      	bne.n	8007076 <socket+0x6a>
 800706a:	2303      	movs	r3, #3
 800706c:	425b      	negs	r3, r3
 800706e:	e0f5      	b.n	800725c <socket+0x250>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8007070:	2305      	movs	r3, #5
 8007072:	425b      	negs	r3, r3
 8007074:	e0f2      	b.n	800725c <socket+0x250>
         break;
 8007076:	46c0      	nop			; (mov r8, r8)
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8007078:	1cfb      	adds	r3, r7, #3
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	2204      	movs	r2, #4
 800707e:	4013      	ands	r3, r2
 8007080:	d002      	beq.n	8007088 <socket+0x7c>
 8007082:	2306      	movs	r3, #6
 8007084:	425b      	negs	r3, r3
 8007086:	e0e9      	b.n	800725c <socket+0x250>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8007088:	1cfb      	adds	r3, r7, #3
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d028      	beq.n	80070e2 <socket+0xd6>
	{
   	switch(protocol)
 8007090:	1dbb      	adds	r3, r7, #6
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d002      	beq.n	800709e <socket+0x92>
 8007098:	2b02      	cmp	r3, #2
 800709a:	d008      	beq.n	80070ae <socket+0xa2>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 800709c:	e026      	b.n	80070ec <socket+0xe0>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800709e:	1cfb      	adds	r3, r7, #3
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2221      	movs	r2, #33	; 0x21
 80070a4:	4013      	ands	r3, r2
 80070a6:	d11e      	bne.n	80070e6 <socket+0xda>
 80070a8:	2306      	movs	r3, #6
 80070aa:	425b      	negs	r3, r3
 80070ac:	e0d6      	b.n	800725c <socket+0x250>
   	      if(flag & SF_IGMP_VER2)
 80070ae:	1cfb      	adds	r3, r7, #3
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	2220      	movs	r2, #32
 80070b4:	4013      	ands	r3, r2
 80070b6:	d007      	beq.n	80070c8 <socket+0xbc>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80070b8:	1cfb      	adds	r3, r7, #3
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	b25b      	sxtb	r3, r3
 80070be:	2b00      	cmp	r3, #0
 80070c0:	db02      	blt.n	80070c8 <socket+0xbc>
 80070c2:	2306      	movs	r3, #6
 80070c4:	425b      	negs	r3, r3
 80070c6:	e0c9      	b.n	800725c <socket+0x250>
      	      if(flag & SF_UNI_BLOCK)
 80070c8:	1cfb      	adds	r3, r7, #3
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2210      	movs	r2, #16
 80070ce:	4013      	ands	r3, r2
 80070d0:	d00b      	beq.n	80070ea <socket+0xde>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80070d2:	1cfb      	adds	r3, r7, #3
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	b25b      	sxtb	r3, r3
 80070d8:	2b00      	cmp	r3, #0
 80070da:	db06      	blt.n	80070ea <socket+0xde>
 80070dc:	2306      	movs	r3, #6
 80070de:	425b      	negs	r3, r3
 80070e0:	e0bc      	b.n	800725c <socket+0x250>
   	}
   }
 80070e2:	46c0      	nop			; (mov r8, r8)
 80070e4:	e002      	b.n	80070ec <socket+0xe0>
   	      break;
 80070e6:	46c0      	nop			; (mov r8, r8)
 80070e8:	e000      	b.n	80070ec <socket+0xe0>
   	      break;
 80070ea:	46c0      	nop			; (mov r8, r8)
	close(sn);
 80070ec:	1dfb      	adds	r3, r7, #7
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	0018      	movs	r0, r3
 80070f2:	f000 f8c5 	bl	8007280 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80070f6:	1dfb      	adds	r3, r7, #7
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	3301      	adds	r3, #1
 80070fe:	00db      	lsls	r3, r3, #3
 8007100:	0018      	movs	r0, r3
 8007102:	1cfb      	adds	r3, r7, #3
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	b25b      	sxtb	r3, r3
 8007108:	220f      	movs	r2, #15
 800710a:	4393      	bics	r3, r2
 800710c:	b25a      	sxtb	r2, r3
 800710e:	1dbb      	adds	r3, r7, #6
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	b25b      	sxtb	r3, r3
 8007114:	4313      	orrs	r3, r2
 8007116:	b25b      	sxtb	r3, r3
 8007118:	b2db      	uxtb	r3, r3
 800711a:	0019      	movs	r1, r3
 800711c:	f001 fe20 	bl	8008d60 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8007120:	1d3b      	adds	r3, r7, #4
 8007122:	881b      	ldrh	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d10f      	bne.n	8007148 <socket+0x13c>
	{
	   port = sock_any_port++;
 8007128:	4b4e      	ldr	r3, [pc, #312]	; (8007264 <socket+0x258>)
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	1c5a      	adds	r2, r3, #1
 800712e:	b291      	uxth	r1, r2
 8007130:	4a4c      	ldr	r2, [pc, #304]	; (8007264 <socket+0x258>)
 8007132:	8011      	strh	r1, [r2, #0]
 8007134:	1d3a      	adds	r2, r7, #4
 8007136:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8007138:	4b4a      	ldr	r3, [pc, #296]	; (8007264 <socket+0x258>)
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	4a4a      	ldr	r2, [pc, #296]	; (8007268 <socket+0x25c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d102      	bne.n	8007148 <socket+0x13c>
 8007142:	4b48      	ldr	r3, [pc, #288]	; (8007264 <socket+0x258>)
 8007144:	4a49      	ldr	r2, [pc, #292]	; (800726c <socket+0x260>)
 8007146:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);
 8007148:	1dfb      	adds	r3, r7, #7
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	3301      	adds	r3, #1
 8007150:	00db      	lsls	r3, r3, #3
 8007152:	2280      	movs	r2, #128	; 0x80
 8007154:	00d2      	lsls	r2, r2, #3
 8007156:	4694      	mov	ip, r2
 8007158:	4463      	add	r3, ip
 800715a:	001a      	movs	r2, r3
 800715c:	1d3b      	adds	r3, r7, #4
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	0a1b      	lsrs	r3, r3, #8
 8007162:	b29b      	uxth	r3, r3
 8007164:	b2db      	uxtb	r3, r3
 8007166:	0019      	movs	r1, r3
 8007168:	0010      	movs	r0, r2
 800716a:	f001 fdf9 	bl	8008d60 <WIZCHIP_WRITE>
 800716e:	1dfb      	adds	r3, r7, #7
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	3301      	adds	r3, #1
 8007176:	00db      	lsls	r3, r3, #3
 8007178:	22a0      	movs	r2, #160	; 0xa0
 800717a:	00d2      	lsls	r2, r2, #3
 800717c:	4694      	mov	ip, r2
 800717e:	4463      	add	r3, ip
 8007180:	001a      	movs	r2, r3
 8007182:	1d3b      	adds	r3, r7, #4
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	b2db      	uxtb	r3, r3
 8007188:	0019      	movs	r1, r3
 800718a:	0010      	movs	r0, r2
 800718c:	f001 fde8 	bl	8008d60 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8007190:	1dfb      	adds	r3, r7, #7
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	3301      	adds	r3, #1
 8007198:	00db      	lsls	r3, r3, #3
 800719a:	3301      	adds	r3, #1
 800719c:	33ff      	adds	r3, #255	; 0xff
 800719e:	2101      	movs	r1, #1
 80071a0:	0018      	movs	r0, r3
 80071a2:	f001 fddd 	bl	8008d60 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	1dfb      	adds	r3, r7, #7
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	3301      	adds	r3, #1
 80071b0:	00db      	lsls	r3, r3, #3
 80071b2:	3301      	adds	r3, #1
 80071b4:	33ff      	adds	r3, #255	; 0xff
 80071b6:	0018      	movs	r0, r3
 80071b8:	f001 fd80 	bl	8008cbc <WIZCHIP_READ>
 80071bc:	1e03      	subs	r3, r0, #0
 80071be:	d1f3      	bne.n	80071a8 <socket+0x19c>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 80071c0:	1dfb      	adds	r3, r7, #7
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	2201      	movs	r2, #1
 80071c6:	409a      	lsls	r2, r3
 80071c8:	0013      	movs	r3, r2
 80071ca:	b21b      	sxth	r3, r3
 80071cc:	43db      	mvns	r3, r3
 80071ce:	b21b      	sxth	r3, r3
 80071d0:	4a27      	ldr	r2, [pc, #156]	; (8007270 <socket+0x264>)
 80071d2:	8812      	ldrh	r2, [r2, #0]
 80071d4:	b212      	sxth	r2, r2
 80071d6:	4013      	ands	r3, r2
 80071d8:	b21b      	sxth	r3, r3
 80071da:	b29a      	uxth	r2, r3
 80071dc:	4b24      	ldr	r3, [pc, #144]	; (8007270 <socket+0x264>)
 80071de:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 80071e0:	1cfb      	adds	r3, r7, #3
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	2201      	movs	r2, #1
 80071e6:	401a      	ands	r2, r3
 80071e8:	1dfb      	adds	r3, r7, #7
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	409a      	lsls	r2, r3
 80071ee:	0013      	movs	r3, r2
 80071f0:	b21a      	sxth	r2, r3
 80071f2:	4b1f      	ldr	r3, [pc, #124]	; (8007270 <socket+0x264>)
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	b21b      	sxth	r3, r3
 80071f8:	4313      	orrs	r3, r2
 80071fa:	b21b      	sxth	r3, r3
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	4b1c      	ldr	r3, [pc, #112]	; (8007270 <socket+0x264>)
 8007200:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8007202:	1dfb      	adds	r3, r7, #7
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2201      	movs	r2, #1
 8007208:	409a      	lsls	r2, r3
 800720a:	0013      	movs	r3, r2
 800720c:	b21b      	sxth	r3, r3
 800720e:	43db      	mvns	r3, r3
 8007210:	b21b      	sxth	r3, r3
 8007212:	4a18      	ldr	r2, [pc, #96]	; (8007274 <socket+0x268>)
 8007214:	8812      	ldrh	r2, [r2, #0]
 8007216:	b212      	sxth	r2, r2
 8007218:	4013      	ands	r3, r2
 800721a:	b21b      	sxth	r3, r3
 800721c:	b29a      	uxth	r2, r3
 800721e:	4b15      	ldr	r3, [pc, #84]	; (8007274 <socket+0x268>)
 8007220:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8007222:	1dfb      	adds	r3, r7, #7
 8007224:	781a      	ldrb	r2, [r3, #0]
 8007226:	4b14      	ldr	r3, [pc, #80]	; (8007278 <socket+0x26c>)
 8007228:	0052      	lsls	r2, r2, #1
 800722a:	2100      	movs	r1, #0
 800722c:	52d1      	strh	r1, [r2, r3]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800722e:	1dfb      	adds	r3, r7, #7
 8007230:	781b      	ldrb	r3, [r3, #0]
 8007232:	4a12      	ldr	r2, [pc, #72]	; (800727c <socket+0x270>)
 8007234:	2100      	movs	r1, #0
 8007236:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8007238:	46c0      	nop			; (mov r8, r8)
 800723a:	1dfb      	adds	r3, r7, #7
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	3301      	adds	r3, #1
 8007242:	00db      	lsls	r3, r3, #3
 8007244:	22c0      	movs	r2, #192	; 0xc0
 8007246:	0092      	lsls	r2, r2, #2
 8007248:	4694      	mov	ip, r2
 800724a:	4463      	add	r3, ip
 800724c:	0018      	movs	r0, r3
 800724e:	f001 fd35 	bl	8008cbc <WIZCHIP_READ>
 8007252:	1e03      	subs	r3, r0, #0
 8007254:	d0f1      	beq.n	800723a <socket+0x22e>
   return (int8_t)sn;
 8007256:	1dfb      	adds	r3, r7, #7
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	b25b      	sxtb	r3, r3
}	   
 800725c:	0018      	movs	r0, r3
 800725e:	46bd      	mov	sp, r7
 8007260:	b004      	add	sp, #16
 8007262:	bdb0      	pop	{r4, r5, r7, pc}
 8007264:	20000148 	.word	0x20000148
 8007268:	0000fff0 	.word	0x0000fff0
 800726c:	ffffc000 	.word	0xffffc000
 8007270:	20000856 	.word	0x20000856
 8007274:	20000858 	.word	0x20000858
 8007278:	2000085c 	.word	0x2000085c
 800727c:	2000086c 	.word	0x2000086c

08007280 <close>:

int8_t close(uint8_t sn)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
 8007286:	0002      	movs	r2, r0
 8007288:	1dfb      	adds	r3, r7, #7
 800728a:	701a      	strb	r2, [r3, #0]
	CHECK_SOCKNUM();
 800728c:	1dfb      	adds	r3, r7, #7
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	2b08      	cmp	r3, #8
 8007292:	d902      	bls.n	800729a <close+0x1a>
 8007294:	2301      	movs	r3, #1
 8007296:	425b      	negs	r3, r3
 8007298:	e05f      	b.n	800735a <close+0xda>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800729a:	1dfb      	adds	r3, r7, #7
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	009b      	lsls	r3, r3, #2
 80072a0:	3301      	adds	r3, #1
 80072a2:	00db      	lsls	r3, r3, #3
 80072a4:	3301      	adds	r3, #1
 80072a6:	33ff      	adds	r3, #255	; 0xff
 80072a8:	2110      	movs	r1, #16
 80072aa:	0018      	movs	r0, r3
 80072ac:	f001 fd58 	bl	8008d60 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80072b0:	46c0      	nop			; (mov r8, r8)
 80072b2:	1dfb      	adds	r3, r7, #7
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	3301      	adds	r3, #1
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	3301      	adds	r3, #1
 80072be:	33ff      	adds	r3, #255	; 0xff
 80072c0:	0018      	movs	r0, r3
 80072c2:	f001 fcfb 	bl	8008cbc <WIZCHIP_READ>
 80072c6:	1e03      	subs	r3, r0, #0
 80072c8:	d1f3      	bne.n	80072b2 <close+0x32>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80072ca:	1dfb      	adds	r3, r7, #7
 80072cc:	781b      	ldrb	r3, [r3, #0]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	3301      	adds	r3, #1
 80072d2:	00db      	lsls	r3, r3, #3
 80072d4:	2280      	movs	r2, #128	; 0x80
 80072d6:	0092      	lsls	r2, r2, #2
 80072d8:	4694      	mov	ip, r2
 80072da:	4463      	add	r3, ip
 80072dc:	211f      	movs	r1, #31
 80072de:	0018      	movs	r0, r3
 80072e0:	f001 fd3e 	bl	8008d60 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 80072e4:	1dfb      	adds	r3, r7, #7
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2201      	movs	r2, #1
 80072ea:	409a      	lsls	r2, r3
 80072ec:	0013      	movs	r3, r2
 80072ee:	b21b      	sxth	r3, r3
 80072f0:	43db      	mvns	r3, r3
 80072f2:	b21b      	sxth	r3, r3
 80072f4:	4a1b      	ldr	r2, [pc, #108]	; (8007364 <close+0xe4>)
 80072f6:	8812      	ldrh	r2, [r2, #0]
 80072f8:	b212      	sxth	r2, r2
 80072fa:	4013      	ands	r3, r2
 80072fc:	b21b      	sxth	r3, r3
 80072fe:	b29a      	uxth	r2, r3
 8007300:	4b18      	ldr	r3, [pc, #96]	; (8007364 <close+0xe4>)
 8007302:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8007304:	1dfb      	adds	r3, r7, #7
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	2201      	movs	r2, #1
 800730a:	409a      	lsls	r2, r3
 800730c:	0013      	movs	r3, r2
 800730e:	b21b      	sxth	r3, r3
 8007310:	43db      	mvns	r3, r3
 8007312:	b21b      	sxth	r3, r3
 8007314:	4a14      	ldr	r2, [pc, #80]	; (8007368 <close+0xe8>)
 8007316:	8812      	ldrh	r2, [r2, #0]
 8007318:	b212      	sxth	r2, r2
 800731a:	4013      	ands	r3, r2
 800731c:	b21b      	sxth	r3, r3
 800731e:	b29a      	uxth	r2, r3
 8007320:	4b11      	ldr	r3, [pc, #68]	; (8007368 <close+0xe8>)
 8007322:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8007324:	1dfb      	adds	r3, r7, #7
 8007326:	781a      	ldrb	r2, [r3, #0]
 8007328:	4b10      	ldr	r3, [pc, #64]	; (800736c <close+0xec>)
 800732a:	0052      	lsls	r2, r2, #1
 800732c:	2100      	movs	r1, #0
 800732e:	52d1      	strh	r1, [r2, r3]
	sock_pack_info[sn] = 0;
 8007330:	1dfb      	adds	r3, r7, #7
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	4a0e      	ldr	r2, [pc, #56]	; (8007370 <close+0xf0>)
 8007336:	2100      	movs	r1, #0
 8007338:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800733a:	46c0      	nop			; (mov r8, r8)
 800733c:	1dfb      	adds	r3, r7, #7
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	3301      	adds	r3, #1
 8007344:	00db      	lsls	r3, r3, #3
 8007346:	22c0      	movs	r2, #192	; 0xc0
 8007348:	0092      	lsls	r2, r2, #2
 800734a:	4694      	mov	ip, r2
 800734c:	4463      	add	r3, ip
 800734e:	0018      	movs	r0, r3
 8007350:	f001 fcb4 	bl	8008cbc <WIZCHIP_READ>
 8007354:	1e03      	subs	r3, r0, #0
 8007356:	d1f1      	bne.n	800733c <close+0xbc>
	return SOCK_OK;
 8007358:	2301      	movs	r3, #1
}
 800735a:	0018      	movs	r0, r3
 800735c:	46bd      	mov	sp, r7
 800735e:	b002      	add	sp, #8
 8007360:	bd80      	pop	{r7, pc}
 8007362:	46c0      	nop			; (mov r8, r8)
 8007364:	20000856 	.word	0x20000856
 8007368:	20000858 	.word	0x20000858
 800736c:	2000085c 	.word	0x2000085c
 8007370:	2000086c 	.word	0x2000086c

08007374 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8007374:	b5b0      	push	{r4, r5, r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60b9      	str	r1, [r7, #8]
 800737c:	0011      	movs	r1, r2
 800737e:	607b      	str	r3, [r7, #4]
 8007380:	240f      	movs	r4, #15
 8007382:	193b      	adds	r3, r7, r4
 8007384:	1c02      	adds	r2, r0, #0
 8007386:	701a      	strb	r2, [r3, #0]
 8007388:	230c      	movs	r3, #12
 800738a:	18fb      	adds	r3, r7, r3
 800738c:	1c0a      	adds	r2, r1, #0
 800738e:	801a      	strh	r2, [r3, #0]
   uint8_t tmp = 0;
 8007390:	2317      	movs	r3, #23
 8007392:	18fb      	adds	r3, r7, r3
 8007394:	2200      	movs	r2, #0
 8007396:	701a      	strb	r2, [r3, #0]
   uint16_t freesize = 0;
 8007398:	2314      	movs	r3, #20
 800739a:	18fb      	adds	r3, r7, r3
 800739c:	2200      	movs	r2, #0
 800739e:	801a      	strh	r2, [r3, #0]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80073a0:	193b      	adds	r3, r7, r4
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	2b08      	cmp	r3, #8
 80073a6:	d902      	bls.n	80073ae <sendto+0x3a>
 80073a8:	2301      	movs	r3, #1
 80073aa:	425b      	negs	r3, r3
 80073ac:	e16f      	b.n	800768e <sendto+0x31a>
   switch(getSn_MR(sn) & 0x0F)
 80073ae:	230f      	movs	r3, #15
 80073b0:	18fb      	adds	r3, r7, r3
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	3301      	adds	r3, #1
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	0018      	movs	r0, r3
 80073bc:	f001 fc7e 	bl	8008cbc <WIZCHIP_READ>
 80073c0:	0003      	movs	r3, r0
 80073c2:	001a      	movs	r2, r3
 80073c4:	230f      	movs	r3, #15
 80073c6:	4013      	ands	r3, r2
 80073c8:	3b02      	subs	r3, #2
 80073ca:	2b02      	cmp	r3, #2
 80073cc:	d902      	bls.n	80073d4 <sendto+0x60>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 80073ce:	2305      	movs	r3, #5
 80073d0:	425b      	negs	r3, r3
 80073d2:	e15c      	b.n	800768e <sendto+0x31a>
         break;
 80073d4:	46c0      	nop			; (mov r8, r8)
   }
   CHECK_SOCKDATA();
 80073d6:	230c      	movs	r3, #12
 80073d8:	18fb      	adds	r3, r7, r3
 80073da:	881b      	ldrh	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <sendto+0x72>
 80073e0:	230e      	movs	r3, #14
 80073e2:	425b      	negs	r3, r3
 80073e4:	e153      	b.n	800768e <sendto+0x31a>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	781b      	ldrb	r3, [r3, #0]
 80073ea:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	021b      	lsls	r3, r3, #8
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	3201      	adds	r2, #1
 80073f4:	7812      	ldrb	r2, [r2, #0]
 80073f6:	189b      	adds	r3, r3, r2
 80073f8:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	021b      	lsls	r3, r3, #8
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	3202      	adds	r2, #2
 8007402:	7812      	ldrb	r2, [r2, #0]
 8007404:	189b      	adds	r3, r3, r2
 8007406:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	021b      	lsls	r3, r3, #8
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	3203      	adds	r2, #3
 8007410:	7812      	ldrb	r2, [r2, #0]
 8007412:	189b      	adds	r3, r3, r2
 8007414:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d111      	bne.n	8007440 <sendto+0xcc>
 800741c:	230f      	movs	r3, #15
 800741e:	18fb      	adds	r3, r7, r3
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	3301      	adds	r3, #1
 8007426:	00db      	lsls	r3, r3, #3
 8007428:	0018      	movs	r0, r3
 800742a:	f001 fc47 	bl	8008cbc <WIZCHIP_READ>
 800742e:	0003      	movs	r3, r0
 8007430:	001a      	movs	r2, r3
 8007432:	2304      	movs	r3, #4
 8007434:	4013      	ands	r3, r2
 8007436:	2b04      	cmp	r3, #4
 8007438:	d002      	beq.n	8007440 <sendto+0xcc>
 800743a:	230c      	movs	r3, #12
 800743c:	425b      	negs	r3, r3
 800743e:	e126      	b.n	800768e <sendto+0x31a>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8007440:	2328      	movs	r3, #40	; 0x28
 8007442:	18fb      	adds	r3, r7, r3
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d111      	bne.n	800746e <sendto+0xfa>
 800744a:	230f      	movs	r3, #15
 800744c:	18fb      	adds	r3, r7, r3
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	3301      	adds	r3, #1
 8007454:	00db      	lsls	r3, r3, #3
 8007456:	0018      	movs	r0, r3
 8007458:	f001 fc30 	bl	8008cbc <WIZCHIP_READ>
 800745c:	0003      	movs	r3, r0
 800745e:	001a      	movs	r2, r3
 8007460:	2304      	movs	r3, #4
 8007462:	4013      	ands	r3, r2
 8007464:	2b04      	cmp	r3, #4
 8007466:	d002      	beq.n	800746e <sendto+0xfa>
 8007468:	230b      	movs	r3, #11
 800746a:	425b      	negs	r3, r3
 800746c:	e10f      	b.n	800768e <sendto+0x31a>
   tmp = getSn_SR(sn);
 800746e:	230f      	movs	r3, #15
 8007470:	18fb      	adds	r3, r7, r3
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	3301      	adds	r3, #1
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	22c0      	movs	r2, #192	; 0xc0
 800747c:	0092      	lsls	r2, r2, #2
 800747e:	4694      	mov	ip, r2
 8007480:	4463      	add	r3, ip
 8007482:	2517      	movs	r5, #23
 8007484:	197c      	adds	r4, r7, r5
 8007486:	0018      	movs	r0, r3
 8007488:	f001 fc18 	bl	8008cbc <WIZCHIP_READ>
 800748c:	0003      	movs	r3, r0
 800748e:	7023      	strb	r3, [r4, #0]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8007490:	197b      	adds	r3, r7, r5
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	2b42      	cmp	r3, #66	; 0x42
 8007496:	d00a      	beq.n	80074ae <sendto+0x13a>
 8007498:	197b      	adds	r3, r7, r5
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b22      	cmp	r3, #34	; 0x22
 800749e:	d006      	beq.n	80074ae <sendto+0x13a>
 80074a0:	197b      	adds	r3, r7, r5
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b32      	cmp	r3, #50	; 0x32
 80074a6:	d002      	beq.n	80074ae <sendto+0x13a>
 80074a8:	2307      	movs	r3, #7
 80074aa:	425b      	negs	r3, r3
 80074ac:	e0ef      	b.n	800768e <sendto+0x31a>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80074ae:	240f      	movs	r4, #15
 80074b0:	193b      	adds	r3, r7, r4
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	3301      	adds	r3, #1
 80074b8:	00db      	lsls	r3, r3, #3
 80074ba:	22c0      	movs	r2, #192	; 0xc0
 80074bc:	0112      	lsls	r2, r2, #4
 80074be:	4694      	mov	ip, r2
 80074c0:	4463      	add	r3, ip
 80074c2:	0018      	movs	r0, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2204      	movs	r2, #4
 80074c8:	0019      	movs	r1, r3
 80074ca:	f001 fd0d 	bl	8008ee8 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80074ce:	193b      	adds	r3, r7, r4
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	3301      	adds	r3, #1
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	2280      	movs	r2, #128	; 0x80
 80074da:	0152      	lsls	r2, r2, #5
 80074dc:	4694      	mov	ip, r2
 80074de:	4463      	add	r3, ip
 80074e0:	001a      	movs	r2, r3
 80074e2:	2528      	movs	r5, #40	; 0x28
 80074e4:	197b      	adds	r3, r7, r5
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	0a1b      	lsrs	r3, r3, #8
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	0019      	movs	r1, r3
 80074f0:	0010      	movs	r0, r2
 80074f2:	f001 fc35 	bl	8008d60 <WIZCHIP_WRITE>
 80074f6:	193b      	adds	r3, r7, r4
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	3301      	adds	r3, #1
 80074fe:	00db      	lsls	r3, r3, #3
 8007500:	2288      	movs	r2, #136	; 0x88
 8007502:	0152      	lsls	r2, r2, #5
 8007504:	4694      	mov	ip, r2
 8007506:	4463      	add	r3, ip
 8007508:	001a      	movs	r2, r3
 800750a:	197b      	adds	r3, r7, r5
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b2db      	uxtb	r3, r3
 8007510:	0019      	movs	r1, r3
 8007512:	0010      	movs	r0, r2
 8007514:	f001 fc24 	bl	8008d60 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8007518:	193b      	adds	r3, r7, r4
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	3301      	adds	r3, #1
 8007520:	00db      	lsls	r3, r3, #3
 8007522:	22f8      	movs	r2, #248	; 0xf8
 8007524:	0152      	lsls	r2, r2, #5
 8007526:	4694      	mov	ip, r2
 8007528:	4463      	add	r3, ip
 800752a:	0018      	movs	r0, r3
 800752c:	f001 fbc6 	bl	8008cbc <WIZCHIP_READ>
 8007530:	0003      	movs	r3, r0
 8007532:	b29a      	uxth	r2, r3
 8007534:	2114      	movs	r1, #20
 8007536:	187b      	adds	r3, r7, r1
 8007538:	0292      	lsls	r2, r2, #10
 800753a:	801a      	strh	r2, [r3, #0]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800753c:	200c      	movs	r0, #12
 800753e:	183a      	adds	r2, r7, r0
 8007540:	187b      	adds	r3, r7, r1
 8007542:	8812      	ldrh	r2, [r2, #0]
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d903      	bls.n	8007552 <sendto+0x1de>
 800754a:	183b      	adds	r3, r7, r0
 800754c:	187a      	adds	r2, r7, r1
 800754e:	8812      	ldrh	r2, [r2, #0]
 8007550:	801a      	strh	r2, [r3, #0]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8007552:	2314      	movs	r3, #20
 8007554:	18fc      	adds	r4, r7, r3
 8007556:	250f      	movs	r5, #15
 8007558:	197b      	adds	r3, r7, r5
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	0018      	movs	r0, r3
 800755e:	f001 fd31 	bl	8008fc4 <getSn_TX_FSR>
 8007562:	0003      	movs	r3, r0
 8007564:	8023      	strh	r3, [r4, #0]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8007566:	197b      	adds	r3, r7, r5
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	3301      	adds	r3, #1
 800756e:	00db      	lsls	r3, r3, #3
 8007570:	22c0      	movs	r2, #192	; 0xc0
 8007572:	0092      	lsls	r2, r2, #2
 8007574:	4694      	mov	ip, r2
 8007576:	4463      	add	r3, ip
 8007578:	0018      	movs	r0, r3
 800757a:	f001 fb9f 	bl	8008cbc <WIZCHIP_READ>
 800757e:	1e03      	subs	r3, r0, #0
 8007580:	d102      	bne.n	8007588 <sendto+0x214>
 8007582:	2304      	movs	r3, #4
 8007584:	425b      	negs	r3, r3
 8007586:	e082      	b.n	800768e <sendto+0x31a>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8007588:	4b43      	ldr	r3, [pc, #268]	; (8007698 <sendto+0x324>)
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	001a      	movs	r2, r3
 800758e:	230f      	movs	r3, #15
 8007590:	18fb      	adds	r3, r7, r3
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	411a      	asrs	r2, r3
 8007596:	0013      	movs	r3, r2
 8007598:	2201      	movs	r2, #1
 800759a:	4013      	ands	r3, r2
 800759c:	d009      	beq.n	80075b2 <sendto+0x23e>
 800759e:	230c      	movs	r3, #12
 80075a0:	18fa      	adds	r2, r7, r3
 80075a2:	2314      	movs	r3, #20
 80075a4:	18fb      	adds	r3, r7, r3
 80075a6:	8812      	ldrh	r2, [r2, #0]
 80075a8:	881b      	ldrh	r3, [r3, #0]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d901      	bls.n	80075b2 <sendto+0x23e>
 80075ae:	2300      	movs	r3, #0
 80075b0:	e06d      	b.n	800768e <sendto+0x31a>
      if(len <= freesize) break;
 80075b2:	230c      	movs	r3, #12
 80075b4:	18fa      	adds	r2, r7, r3
 80075b6:	2314      	movs	r3, #20
 80075b8:	18fb      	adds	r3, r7, r3
 80075ba:	8812      	ldrh	r2, [r2, #0]
 80075bc:	881b      	ldrh	r3, [r3, #0]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d900      	bls.n	80075c4 <sendto+0x250>
      freesize = getSn_TX_FSR(sn);
 80075c2:	e7c6      	b.n	8007552 <sendto+0x1de>
      if(len <= freesize) break;
 80075c4:	46c0      	nop			; (mov r8, r8)
   };
	wiz_send_data(sn, buf, len);
 80075c6:	230c      	movs	r3, #12
 80075c8:	18fb      	adds	r3, r7, r3
 80075ca:	881a      	ldrh	r2, [r3, #0]
 80075cc:	68b9      	ldr	r1, [r7, #8]
 80075ce:	240f      	movs	r4, #15
 80075d0:	193b      	adds	r3, r7, r4
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	0018      	movs	r0, r3
 80075d6:	f001 fdcd 	bl	8009174 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80075da:	193b      	adds	r3, r7, r4
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	3301      	adds	r3, #1
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	3301      	adds	r3, #1
 80075e6:	33ff      	adds	r3, #255	; 0xff
 80075e8:	2120      	movs	r1, #32
 80075ea:	0018      	movs	r0, r3
 80075ec:	f001 fbb8 	bl	8008d60 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80075f0:	46c0      	nop			; (mov r8, r8)
 80075f2:	230f      	movs	r3, #15
 80075f4:	18fb      	adds	r3, r7, r3
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	3301      	adds	r3, #1
 80075fc:	00db      	lsls	r3, r3, #3
 80075fe:	3301      	adds	r3, #1
 8007600:	33ff      	adds	r3, #255	; 0xff
 8007602:	0018      	movs	r0, r3
 8007604:	f001 fb5a 	bl	8008cbc <WIZCHIP_READ>
 8007608:	1e03      	subs	r3, r0, #0
 800760a:	d1f2      	bne.n	80075f2 <sendto+0x27e>
   while(1)
   {
      tmp = getSn_IR(sn);
 800760c:	240f      	movs	r4, #15
 800760e:	193b      	adds	r3, r7, r4
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	3301      	adds	r3, #1
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	2280      	movs	r2, #128	; 0x80
 800761a:	0092      	lsls	r2, r2, #2
 800761c:	4694      	mov	ip, r2
 800761e:	4463      	add	r3, ip
 8007620:	0018      	movs	r0, r3
 8007622:	f001 fb4b 	bl	8008cbc <WIZCHIP_READ>
 8007626:	0003      	movs	r3, r0
 8007628:	0019      	movs	r1, r3
 800762a:	2017      	movs	r0, #23
 800762c:	183b      	adds	r3, r7, r0
 800762e:	221f      	movs	r2, #31
 8007630:	400a      	ands	r2, r1
 8007632:	701a      	strb	r2, [r3, #0]
      if(tmp & Sn_IR_SENDOK)
 8007634:	183b      	adds	r3, r7, r0
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2210      	movs	r2, #16
 800763a:	4013      	ands	r3, r2
 800763c:	d011      	beq.n	8007662 <sendto+0x2ee>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800763e:	193b      	adds	r3, r7, r4
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	009b      	lsls	r3, r3, #2
 8007644:	3301      	adds	r3, #1
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	2280      	movs	r2, #128	; 0x80
 800764a:	0092      	lsls	r2, r2, #2
 800764c:	4694      	mov	ip, r2
 800764e:	4463      	add	r3, ip
 8007650:	2110      	movs	r1, #16
 8007652:	0018      	movs	r0, r3
 8007654:	f001 fb84 	bl	8008d60 <WIZCHIP_WRITE>
         break;
 8007658:	46c0      	nop			; (mov r8, r8)
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800765a:	230c      	movs	r3, #12
 800765c:	18fb      	adds	r3, r7, r3
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	e015      	b.n	800768e <sendto+0x31a>
      else if(tmp & Sn_IR_TIMEOUT)
 8007662:	2317      	movs	r3, #23
 8007664:	18fb      	adds	r3, r7, r3
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	2208      	movs	r2, #8
 800766a:	4013      	ands	r3, r2
 800766c:	d0ce      	beq.n	800760c <sendto+0x298>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800766e:	230f      	movs	r3, #15
 8007670:	18fb      	adds	r3, r7, r3
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	3301      	adds	r3, #1
 8007678:	00db      	lsls	r3, r3, #3
 800767a:	2280      	movs	r2, #128	; 0x80
 800767c:	0092      	lsls	r2, r2, #2
 800767e:	4694      	mov	ip, r2
 8007680:	4463      	add	r3, ip
 8007682:	2108      	movs	r1, #8
 8007684:	0018      	movs	r0, r3
 8007686:	f001 fb6b 	bl	8008d60 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 800768a:	230d      	movs	r3, #13
 800768c:	425b      	negs	r3, r3
}
 800768e:	0018      	movs	r0, r3
 8007690:	46bd      	mov	sp, r7
 8007692:	b006      	add	sp, #24
 8007694:	bdb0      	pop	{r4, r5, r7, pc}
 8007696:	46c0      	nop			; (mov r8, r8)
 8007698:	20000856 	.word	0x20000856

0800769c <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 800769c:	b5b0      	push	{r4, r5, r7, lr}
 800769e:	b088      	sub	sp, #32
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	0011      	movs	r1, r2
 80076a6:	607b      	str	r3, [r7, #4]
 80076a8:	240f      	movs	r4, #15
 80076aa:	193b      	adds	r3, r7, r4
 80076ac:	1c02      	adds	r2, r0, #0
 80076ae:	701a      	strb	r2, [r3, #0]
 80076b0:	230c      	movs	r3, #12
 80076b2:	18fb      	adds	r3, r7, r3
 80076b4:	1c0a      	adds	r2, r1, #0
 80076b6:	801a      	strh	r2, [r3, #0]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80076b8:	231e      	movs	r3, #30
 80076ba:	18fb      	adds	r3, r7, r3
 80076bc:	2200      	movs	r2, #0
 80076be:	801a      	strh	r2, [r3, #0]

   CHECK_SOCKNUM();
 80076c0:	193b      	adds	r3, r7, r4
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d902      	bls.n	80076ce <recvfrom+0x32>
 80076c8:	2301      	movs	r3, #1
 80076ca:	425b      	negs	r3, r3
 80076cc:	e264      	b.n	8007b98 <recvfrom+0x4fc>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80076ce:	230f      	movs	r3, #15
 80076d0:	18fb      	adds	r3, r7, r3
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	3301      	adds	r3, #1
 80076d8:	00db      	lsls	r3, r3, #3
 80076da:	251d      	movs	r5, #29
 80076dc:	197c      	adds	r4, r7, r5
 80076de:	0018      	movs	r0, r3
 80076e0:	f001 faec 	bl	8008cbc <WIZCHIP_READ>
 80076e4:	0003      	movs	r3, r0
 80076e6:	7023      	strb	r3, [r4, #0]
 80076e8:	197b      	adds	r3, r7, r5
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	220f      	movs	r2, #15
 80076ee:	4013      	ands	r3, r2
 80076f0:	3b02      	subs	r3, #2
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d902      	bls.n	80076fc <recvfrom+0x60>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80076f6:	2305      	movs	r3, #5
 80076f8:	425b      	negs	r3, r3
 80076fa:	e24d      	b.n	8007b98 <recvfrom+0x4fc>
         break;
 80076fc:	46c0      	nop			; (mov r8, r8)
   }
   CHECK_SOCKDATA();
 80076fe:	230c      	movs	r3, #12
 8007700:	18fb      	adds	r3, r7, r3
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d102      	bne.n	800770e <recvfrom+0x72>
 8007708:	230e      	movs	r3, #14
 800770a:	425b      	negs	r3, r3
 800770c:	e244      	b.n	8007b98 <recvfrom+0x4fc>
   if(sock_remained_size[sn] == 0)
 800770e:	230f      	movs	r3, #15
 8007710:	18fb      	adds	r3, r7, r3
 8007712:	781a      	ldrb	r2, [r3, #0]
 8007714:	4baf      	ldr	r3, [pc, #700]	; (80079d4 <recvfrom+0x338>)
 8007716:	0052      	lsls	r2, r2, #1
 8007718:	5ad3      	ldrh	r3, [r2, r3]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d133      	bne.n	8007786 <recvfrom+0xea>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 800771e:	231e      	movs	r3, #30
 8007720:	18fc      	adds	r4, r7, r3
 8007722:	250f      	movs	r5, #15
 8007724:	197b      	adds	r3, r7, r5
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	0018      	movs	r0, r3
 800772a:	f001 fcb7 	bl	800909c <getSn_RX_RSR>
 800772e:	0003      	movs	r3, r0
 8007730:	8023      	strh	r3, [r4, #0]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8007732:	197b      	adds	r3, r7, r5
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	3301      	adds	r3, #1
 800773a:	00db      	lsls	r3, r3, #3
 800773c:	22c0      	movs	r2, #192	; 0xc0
 800773e:	0092      	lsls	r2, r2, #2
 8007740:	4694      	mov	ip, r2
 8007742:	4463      	add	r3, ip
 8007744:	0018      	movs	r0, r3
 8007746:	f001 fab9 	bl	8008cbc <WIZCHIP_READ>
 800774a:	1e03      	subs	r3, r0, #0
 800774c:	d102      	bne.n	8007754 <recvfrom+0xb8>
 800774e:	2304      	movs	r3, #4
 8007750:	425b      	negs	r3, r3
 8007752:	e221      	b.n	8007b98 <recvfrom+0x4fc>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8007754:	4ba0      	ldr	r3, [pc, #640]	; (80079d8 <recvfrom+0x33c>)
 8007756:	881b      	ldrh	r3, [r3, #0]
 8007758:	001a      	movs	r2, r3
 800775a:	230f      	movs	r3, #15
 800775c:	18fb      	adds	r3, r7, r3
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	411a      	asrs	r2, r3
 8007762:	0013      	movs	r3, r2
 8007764:	2201      	movs	r2, #1
 8007766:	4013      	ands	r3, r2
 8007768:	d006      	beq.n	8007778 <recvfrom+0xdc>
 800776a:	231e      	movs	r3, #30
 800776c:	18fb      	adds	r3, r7, r3
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <recvfrom+0xdc>
 8007774:	2300      	movs	r3, #0
 8007776:	e20f      	b.n	8007b98 <recvfrom+0x4fc>
         if(pack_len != 0) break;
 8007778:	231e      	movs	r3, #30
 800777a:	18fb      	adds	r3, r7, r3
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d100      	bne.n	8007784 <recvfrom+0xe8>
         pack_len = getSn_RX_RSR(sn);
 8007782:	e7cc      	b.n	800771e <recvfrom+0x82>
         if(pack_len != 0) break;
 8007784:	46c0      	nop			; (mov r8, r8)
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8007786:	231d      	movs	r3, #29
 8007788:	18fb      	adds	r3, r7, r3
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2207      	movs	r2, #7
 800778e:	4013      	ands	r3, r2
 8007790:	2b04      	cmp	r3, #4
 8007792:	d100      	bne.n	8007796 <recvfrom+0xfa>
 8007794:	e09d      	b.n	80078d2 <recvfrom+0x236>
 8007796:	dd00      	ble.n	800779a <recvfrom+0xfe>
 8007798:	e1a7      	b.n	8007aea <recvfrom+0x44e>
 800779a:	2b02      	cmp	r3, #2
 800779c:	d003      	beq.n	80077a6 <recvfrom+0x10a>
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d100      	bne.n	80077a4 <recvfrom+0x108>
 80077a2:	e121      	b.n	80079e8 <recvfrom+0x34c>
 80077a4:	e1a1      	b.n	8007aea <recvfrom+0x44e>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 80077a6:	200f      	movs	r0, #15
 80077a8:	183b      	adds	r3, r7, r0
 80077aa:	781a      	ldrb	r2, [r3, #0]
 80077ac:	4b89      	ldr	r3, [pc, #548]	; (80079d4 <recvfrom+0x338>)
 80077ae:	0052      	lsls	r2, r2, #1
 80077b0:	5ad3      	ldrh	r3, [r2, r3]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d163      	bne.n	800787e <recvfrom+0x1e2>
	      {
   			wiz_recv_data(sn, head, 8);
 80077b6:	2314      	movs	r3, #20
 80077b8:	18f9      	adds	r1, r7, r3
 80077ba:	0004      	movs	r4, r0
 80077bc:	183b      	adds	r3, r7, r0
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2208      	movs	r2, #8
 80077c2:	0018      	movs	r0, r3
 80077c4:	f001 fd4e 	bl	8009264 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80077c8:	193b      	adds	r3, r7, r4
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	3301      	adds	r3, #1
 80077d0:	00db      	lsls	r3, r3, #3
 80077d2:	3301      	adds	r3, #1
 80077d4:	33ff      	adds	r3, #255	; 0xff
 80077d6:	2140      	movs	r1, #64	; 0x40
 80077d8:	0018      	movs	r0, r3
 80077da:	f001 fac1 	bl	8008d60 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80077de:	46c0      	nop			; (mov r8, r8)
 80077e0:	240f      	movs	r4, #15
 80077e2:	193b      	adds	r3, r7, r4
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	3301      	adds	r3, #1
 80077ea:	00db      	lsls	r3, r3, #3
 80077ec:	3301      	adds	r3, #1
 80077ee:	33ff      	adds	r3, #255	; 0xff
 80077f0:	0018      	movs	r0, r3
 80077f2:	f001 fa63 	bl	8008cbc <WIZCHIP_READ>
 80077f6:	1e03      	subs	r3, r0, #0
 80077f8:	d1f2      	bne.n	80077e0 <recvfrom+0x144>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80077fa:	2014      	movs	r0, #20
 80077fc:	183b      	adds	r3, r7, r0
 80077fe:	781a      	ldrb	r2, [r3, #0]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3301      	adds	r3, #1
 8007808:	183a      	adds	r2, r7, r0
 800780a:	7852      	ldrb	r2, [r2, #1]
 800780c:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	3302      	adds	r3, #2
 8007812:	183a      	adds	r2, r7, r0
 8007814:	7892      	ldrb	r2, [r2, #2]
 8007816:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	3303      	adds	r3, #3
 800781c:	183a      	adds	r2, r7, r0
 800781e:	78d2      	ldrb	r2, [r2, #3]
 8007820:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 8007822:	183b      	adds	r3, r7, r0
 8007824:	791b      	ldrb	r3, [r3, #4]
 8007826:	b29a      	uxth	r2, r3
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	881b      	ldrh	r3, [r3, #0]
 8007830:	021b      	lsls	r3, r3, #8
 8007832:	b29a      	uxth	r2, r3
 8007834:	183b      	adds	r3, r7, r0
 8007836:	795b      	ldrb	r3, [r3, #5]
 8007838:	b29b      	uxth	r3, r3
 800783a:	18d3      	adds	r3, r2, r3
 800783c:	b29a      	uxth	r2, r3
 800783e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007840:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 8007842:	183b      	adds	r3, r7, r0
 8007844:	7999      	ldrb	r1, [r3, #6]
 8007846:	193b      	adds	r3, r7, r4
 8007848:	781a      	ldrb	r2, [r3, #0]
 800784a:	b289      	uxth	r1, r1
 800784c:	4b61      	ldr	r3, [pc, #388]	; (80079d4 <recvfrom+0x338>)
 800784e:	0052      	lsls	r2, r2, #1
 8007850:	52d1      	strh	r1, [r2, r3]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8007852:	193b      	adds	r3, r7, r4
 8007854:	781a      	ldrb	r2, [r3, #0]
 8007856:	4b5f      	ldr	r3, [pc, #380]	; (80079d4 <recvfrom+0x338>)
 8007858:	0052      	lsls	r2, r2, #1
 800785a:	5ad3      	ldrh	r3, [r2, r3]
 800785c:	021b      	lsls	r3, r3, #8
 800785e:	b299      	uxth	r1, r3
 8007860:	183b      	adds	r3, r7, r0
 8007862:	79db      	ldrb	r3, [r3, #7]
 8007864:	b29b      	uxth	r3, r3
 8007866:	193a      	adds	r2, r7, r4
 8007868:	7812      	ldrb	r2, [r2, #0]
 800786a:	18cb      	adds	r3, r1, r3
 800786c:	b299      	uxth	r1, r3
 800786e:	4b59      	ldr	r3, [pc, #356]	; (80079d4 <recvfrom+0x338>)
 8007870:	0052      	lsls	r2, r2, #1
 8007872:	52d1      	strh	r1, [r2, r3]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 8007874:	193b      	adds	r3, r7, r4
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	4a58      	ldr	r2, [pc, #352]	; (80079dc <recvfrom+0x340>)
 800787a:	2180      	movs	r1, #128	; 0x80
 800787c:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 800787e:	230f      	movs	r3, #15
 8007880:	18fb      	adds	r3, r7, r3
 8007882:	781a      	ldrb	r2, [r3, #0]
 8007884:	4b53      	ldr	r3, [pc, #332]	; (80079d4 <recvfrom+0x338>)
 8007886:	0052      	lsls	r2, r2, #1
 8007888:	5ad3      	ldrh	r3, [r2, r3]
 800788a:	210c      	movs	r1, #12
 800788c:	187a      	adds	r2, r7, r1
 800788e:	8812      	ldrh	r2, [r2, #0]
 8007890:	429a      	cmp	r2, r3
 8007892:	d205      	bcs.n	80078a0 <recvfrom+0x204>
 8007894:	231e      	movs	r3, #30
 8007896:	18fb      	adds	r3, r7, r3
 8007898:	187a      	adds	r2, r7, r1
 800789a:	8812      	ldrh	r2, [r2, #0]
 800789c:	801a      	strh	r2, [r3, #0]
 800789e:	e008      	b.n	80078b2 <recvfrom+0x216>
			else pack_len = sock_remained_size[sn];
 80078a0:	230f      	movs	r3, #15
 80078a2:	18fb      	adds	r3, r7, r3
 80078a4:	7819      	ldrb	r1, [r3, #0]
 80078a6:	231e      	movs	r3, #30
 80078a8:	18fb      	adds	r3, r7, r3
 80078aa:	4a4a      	ldr	r2, [pc, #296]	; (80079d4 <recvfrom+0x338>)
 80078ac:	0049      	lsls	r1, r1, #1
 80078ae:	5a8a      	ldrh	r2, [r1, r2]
 80078b0:	801a      	strh	r2, [r3, #0]
			//A20150601 : For W5300
			len = pack_len;
 80078b2:	230c      	movs	r3, #12
 80078b4:	18fb      	adds	r3, r7, r3
 80078b6:	211e      	movs	r1, #30
 80078b8:	187a      	adds	r2, r7, r1
 80078ba:	8812      	ldrh	r2, [r2, #0]
 80078bc:	801a      	strh	r2, [r3, #0]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 80078be:	187b      	adds	r3, r7, r1
 80078c0:	881a      	ldrh	r2, [r3, #0]
 80078c2:	68b9      	ldr	r1, [r7, #8]
 80078c4:	230f      	movs	r3, #15
 80078c6:	18fb      	adds	r3, r7, r3
 80078c8:	781b      	ldrb	r3, [r3, #0]
 80078ca:	0018      	movs	r0, r3
 80078cc:	f001 fcca 	bl	8009264 <wiz_recv_data>
			break;
 80078d0:	e11d      	b.n	8007b0e <recvfrom+0x472>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 80078d2:	200f      	movs	r0, #15
 80078d4:	183b      	adds	r3, r7, r0
 80078d6:	781a      	ldrb	r2, [r3, #0]
 80078d8:	4b3e      	ldr	r3, [pc, #248]	; (80079d4 <recvfrom+0x338>)
 80078da:	0052      	lsls	r2, r2, #1
 80078dc:	5ad3      	ldrh	r3, [r2, r3]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d152      	bne.n	8007988 <recvfrom+0x2ec>
	      {
   			wiz_recv_data(sn, head, 2);
 80078e2:	2314      	movs	r3, #20
 80078e4:	18f9      	adds	r1, r7, r3
 80078e6:	0004      	movs	r4, r0
 80078e8:	183b      	adds	r3, r7, r0
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	2202      	movs	r2, #2
 80078ee:	0018      	movs	r0, r3
 80078f0:	f001 fcb8 	bl	8009264 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80078f4:	193b      	adds	r3, r7, r4
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	3301      	adds	r3, #1
 80078fc:	00db      	lsls	r3, r3, #3
 80078fe:	3301      	adds	r3, #1
 8007900:	33ff      	adds	r3, #255	; 0xff
 8007902:	2140      	movs	r1, #64	; 0x40
 8007904:	0018      	movs	r0, r3
 8007906:	f001 fa2b 	bl	8008d60 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800790a:	46c0      	nop			; (mov r8, r8)
 800790c:	240f      	movs	r4, #15
 800790e:	193b      	adds	r3, r7, r4
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	3301      	adds	r3, #1
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	3301      	adds	r3, #1
 800791a:	33ff      	adds	r3, #255	; 0xff
 800791c:	0018      	movs	r0, r3
 800791e:	f001 f9cd 	bl	8008cbc <WIZCHIP_READ>
 8007922:	1e03      	subs	r3, r0, #0
 8007924:	d1f2      	bne.n	800790c <recvfrom+0x270>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8007926:	2014      	movs	r0, #20
 8007928:	183b      	adds	r3, r7, r0
 800792a:	7819      	ldrb	r1, [r3, #0]
 800792c:	193b      	adds	r3, r7, r4
 800792e:	781a      	ldrb	r2, [r3, #0]
 8007930:	b289      	uxth	r1, r1
 8007932:	4b28      	ldr	r3, [pc, #160]	; (80079d4 <recvfrom+0x338>)
 8007934:	0052      	lsls	r2, r2, #1
 8007936:	52d1      	strh	r1, [r2, r3]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8007938:	193b      	adds	r3, r7, r4
 800793a:	781a      	ldrb	r2, [r3, #0]
 800793c:	4b25      	ldr	r3, [pc, #148]	; (80079d4 <recvfrom+0x338>)
 800793e:	0052      	lsls	r2, r2, #1
 8007940:	5ad3      	ldrh	r3, [r2, r3]
 8007942:	021b      	lsls	r3, r3, #8
 8007944:	b29a      	uxth	r2, r3
 8007946:	183b      	adds	r3, r7, r0
 8007948:	785b      	ldrb	r3, [r3, #1]
 800794a:	b29b      	uxth	r3, r3
 800794c:	18d3      	adds	r3, r2, r3
 800794e:	b29b      	uxth	r3, r3
 8007950:	193a      	adds	r2, r7, r4
 8007952:	7812      	ldrb	r2, [r2, #0]
 8007954:	3b02      	subs	r3, #2
 8007956:	b299      	uxth	r1, r3
 8007958:	4b1e      	ldr	r3, [pc, #120]	; (80079d4 <recvfrom+0x338>)
 800795a:	0052      	lsls	r2, r2, #1
 800795c:	52d1      	strh	r1, [r2, r3]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 3050)
 800795e:	193b      	adds	r3, r7, r4
 8007960:	781a      	ldrb	r2, [r3, #0]
 8007962:	4b1c      	ldr	r3, [pc, #112]	; (80079d4 <recvfrom+0x338>)
 8007964:	0052      	lsls	r2, r2, #1
 8007966:	5ad3      	ldrh	r3, [r2, r3]
 8007968:	4a1d      	ldr	r2, [pc, #116]	; (80079e0 <recvfrom+0x344>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d906      	bls.n	800797c <recvfrom+0x2e0>
   			{
   			   close(sn);
 800796e:	193b      	adds	r3, r7, r4
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	0018      	movs	r0, r3
 8007974:	f7ff fc84 	bl	8007280 <close>
   			   return SOCKFATAL_PACKLEN;
 8007978:	4b1a      	ldr	r3, [pc, #104]	; (80079e4 <recvfrom+0x348>)
 800797a:	e10d      	b.n	8007b98 <recvfrom+0x4fc>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 800797c:	230f      	movs	r3, #15
 800797e:	18fb      	adds	r3, r7, r3
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	4a16      	ldr	r2, [pc, #88]	; (80079dc <recvfrom+0x340>)
 8007984:	2180      	movs	r1, #128	; 0x80
 8007986:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8007988:	230f      	movs	r3, #15
 800798a:	18fb      	adds	r3, r7, r3
 800798c:	781a      	ldrb	r2, [r3, #0]
 800798e:	4b11      	ldr	r3, [pc, #68]	; (80079d4 <recvfrom+0x338>)
 8007990:	0052      	lsls	r2, r2, #1
 8007992:	5ad3      	ldrh	r3, [r2, r3]
 8007994:	210c      	movs	r1, #12
 8007996:	187a      	adds	r2, r7, r1
 8007998:	8812      	ldrh	r2, [r2, #0]
 800799a:	429a      	cmp	r2, r3
 800799c:	d205      	bcs.n	80079aa <recvfrom+0x30e>
 800799e:	231e      	movs	r3, #30
 80079a0:	18fb      	adds	r3, r7, r3
 80079a2:	187a      	adds	r2, r7, r1
 80079a4:	8812      	ldrh	r2, [r2, #0]
 80079a6:	801a      	strh	r2, [r3, #0]
 80079a8:	e008      	b.n	80079bc <recvfrom+0x320>
			else pack_len = sock_remained_size[sn];
 80079aa:	230f      	movs	r3, #15
 80079ac:	18fb      	adds	r3, r7, r3
 80079ae:	7819      	ldrb	r1, [r3, #0]
 80079b0:	231e      	movs	r3, #30
 80079b2:	18fb      	adds	r3, r7, r3
 80079b4:	4a07      	ldr	r2, [pc, #28]	; (80079d4 <recvfrom+0x338>)
 80079b6:	0049      	lsls	r1, r1, #1
 80079b8:	5a8a      	ldrh	r2, [r1, r2]
 80079ba:	801a      	strh	r2, [r3, #0]
			wiz_recv_data(sn,buf,pack_len);
 80079bc:	231e      	movs	r3, #30
 80079be:	18fb      	adds	r3, r7, r3
 80079c0:	881a      	ldrh	r2, [r3, #0]
 80079c2:	68b9      	ldr	r1, [r7, #8]
 80079c4:	230f      	movs	r3, #15
 80079c6:	18fb      	adds	r3, r7, r3
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	0018      	movs	r0, r3
 80079cc:	f001 fc4a 	bl	8009264 <wiz_recv_data>
		   break;
 80079d0:	e09d      	b.n	8007b0e <recvfrom+0x472>
 80079d2:	46c0      	nop			; (mov r8, r8)
 80079d4:	2000085c 	.word	0x2000085c
 80079d8:	20000856 	.word	0x20000856
 80079dc:	2000086c 	.word	0x2000086c
 80079e0:	00000bea 	.word	0x00000bea
 80079e4:	fffffc17 	.word	0xfffffc17
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80079e8:	200f      	movs	r0, #15
 80079ea:	183b      	adds	r3, r7, r0
 80079ec:	781a      	ldrb	r2, [r3, #0]
 80079ee:	4b6c      	ldr	r3, [pc, #432]	; (8007ba0 <recvfrom+0x504>)
 80079f0:	0052      	lsls	r2, r2, #1
 80079f2:	5ad3      	ldrh	r3, [r2, r3]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d153      	bne.n	8007aa0 <recvfrom+0x404>
		   {
   			wiz_recv_data(sn, head, 6);
 80079f8:	2314      	movs	r3, #20
 80079fa:	18f9      	adds	r1, r7, r3
 80079fc:	0004      	movs	r4, r0
 80079fe:	183b      	adds	r3, r7, r0
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	2206      	movs	r2, #6
 8007a04:	0018      	movs	r0, r3
 8007a06:	f001 fc2d 	bl	8009264 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8007a0a:	193b      	adds	r3, r7, r4
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	3301      	adds	r3, #1
 8007a12:	00db      	lsls	r3, r3, #3
 8007a14:	3301      	adds	r3, #1
 8007a16:	33ff      	adds	r3, #255	; 0xff
 8007a18:	2140      	movs	r1, #64	; 0x40
 8007a1a:	0018      	movs	r0, r3
 8007a1c:	f001 f9a0 	bl	8008d60 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8007a20:	46c0      	nop			; (mov r8, r8)
 8007a22:	240f      	movs	r4, #15
 8007a24:	193b      	adds	r3, r7, r4
 8007a26:	781b      	ldrb	r3, [r3, #0]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	00db      	lsls	r3, r3, #3
 8007a2e:	3301      	adds	r3, #1
 8007a30:	33ff      	adds	r3, #255	; 0xff
 8007a32:	0018      	movs	r0, r3
 8007a34:	f001 f942 	bl	8008cbc <WIZCHIP_READ>
 8007a38:	1e03      	subs	r3, r0, #0
 8007a3a:	d1f2      	bne.n	8007a22 <recvfrom+0x386>
   			addr[0] = head[0];
 8007a3c:	2014      	movs	r0, #20
 8007a3e:	183b      	adds	r3, r7, r0
 8007a40:	781a      	ldrb	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	183a      	adds	r2, r7, r0
 8007a4c:	7852      	ldrb	r2, [r2, #1]
 8007a4e:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	3302      	adds	r3, #2
 8007a54:	183a      	adds	r2, r7, r0
 8007a56:	7892      	ldrb	r2, [r2, #2]
 8007a58:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	3303      	adds	r3, #3
 8007a5e:	183a      	adds	r2, r7, r0
 8007a60:	78d2      	ldrb	r2, [r2, #3]
 8007a62:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8007a64:	183b      	adds	r3, r7, r0
 8007a66:	7919      	ldrb	r1, [r3, #4]
 8007a68:	193b      	adds	r3, r7, r4
 8007a6a:	781a      	ldrb	r2, [r3, #0]
 8007a6c:	b289      	uxth	r1, r1
 8007a6e:	4b4c      	ldr	r3, [pc, #304]	; (8007ba0 <recvfrom+0x504>)
 8007a70:	0052      	lsls	r2, r2, #1
 8007a72:	52d1      	strh	r1, [r2, r3]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8007a74:	193b      	adds	r3, r7, r4
 8007a76:	781a      	ldrb	r2, [r3, #0]
 8007a78:	4b49      	ldr	r3, [pc, #292]	; (8007ba0 <recvfrom+0x504>)
 8007a7a:	0052      	lsls	r2, r2, #1
 8007a7c:	5ad3      	ldrh	r3, [r2, r3]
 8007a7e:	021b      	lsls	r3, r3, #8
 8007a80:	b299      	uxth	r1, r3
 8007a82:	183b      	adds	r3, r7, r0
 8007a84:	795b      	ldrb	r3, [r3, #5]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	193a      	adds	r2, r7, r4
 8007a8a:	7812      	ldrb	r2, [r2, #0]
 8007a8c:	18cb      	adds	r3, r1, r3
 8007a8e:	b299      	uxth	r1, r3
 8007a90:	4b43      	ldr	r3, [pc, #268]	; (8007ba0 <recvfrom+0x504>)
 8007a92:	0052      	lsls	r2, r2, #1
 8007a94:	52d1      	strh	r1, [r2, r3]
   			sock_pack_info[sn] = PACK_FIRST;
 8007a96:	193b      	adds	r3, r7, r4
 8007a98:	781b      	ldrb	r3, [r3, #0]
 8007a9a:	4a42      	ldr	r2, [pc, #264]	; (8007ba4 <recvfrom+0x508>)
 8007a9c:	2180      	movs	r1, #128	; 0x80
 8007a9e:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8007aa0:	230f      	movs	r3, #15
 8007aa2:	18fb      	adds	r3, r7, r3
 8007aa4:	781a      	ldrb	r2, [r3, #0]
 8007aa6:	4b3e      	ldr	r3, [pc, #248]	; (8007ba0 <recvfrom+0x504>)
 8007aa8:	0052      	lsls	r2, r2, #1
 8007aaa:	5ad3      	ldrh	r3, [r2, r3]
 8007aac:	210c      	movs	r1, #12
 8007aae:	187a      	adds	r2, r7, r1
 8007ab0:	8812      	ldrh	r2, [r2, #0]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d205      	bcs.n	8007ac2 <recvfrom+0x426>
 8007ab6:	231e      	movs	r3, #30
 8007ab8:	18fb      	adds	r3, r7, r3
 8007aba:	187a      	adds	r2, r7, r1
 8007abc:	8812      	ldrh	r2, [r2, #0]
 8007abe:	801a      	strh	r2, [r3, #0]
 8007ac0:	e008      	b.n	8007ad4 <recvfrom+0x438>
			else pack_len = sock_remained_size[sn];
 8007ac2:	230f      	movs	r3, #15
 8007ac4:	18fb      	adds	r3, r7, r3
 8007ac6:	7819      	ldrb	r1, [r3, #0]
 8007ac8:	231e      	movs	r3, #30
 8007aca:	18fb      	adds	r3, r7, r3
 8007acc:	4a34      	ldr	r2, [pc, #208]	; (8007ba0 <recvfrom+0x504>)
 8007ace:	0049      	lsls	r1, r1, #1
 8007ad0:	5a8a      	ldrh	r2, [r1, r2]
 8007ad2:	801a      	strh	r2, [r3, #0]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8007ad4:	231e      	movs	r3, #30
 8007ad6:	18fb      	adds	r3, r7, r3
 8007ad8:	881a      	ldrh	r2, [r3, #0]
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	230f      	movs	r3, #15
 8007ade:	18fb      	adds	r3, r7, r3
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	0018      	movs	r0, r3
 8007ae4:	f001 fbbe 	bl	8009264 <wiz_recv_data>
			break;
 8007ae8:	e011      	b.n	8007b0e <recvfrom+0x472>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8007aea:	241e      	movs	r4, #30
 8007aec:	193b      	adds	r3, r7, r4
 8007aee:	881a      	ldrh	r2, [r3, #0]
 8007af0:	250f      	movs	r5, #15
 8007af2:	197b      	adds	r3, r7, r5
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	0011      	movs	r1, r2
 8007af8:	0018      	movs	r0, r3
 8007afa:	f001 fc2b 	bl	8009354 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8007afe:	197b      	adds	r3, r7, r5
 8007b00:	781a      	ldrb	r2, [r3, #0]
 8007b02:	4b27      	ldr	r3, [pc, #156]	; (8007ba0 <recvfrom+0x504>)
 8007b04:	0052      	lsls	r2, r2, #1
 8007b06:	1939      	adds	r1, r7, r4
 8007b08:	8809      	ldrh	r1, [r1, #0]
 8007b0a:	52d1      	strh	r1, [r2, r3]
         break;
 8007b0c:	46c0      	nop			; (mov r8, r8)
   }
	setSn_CR(sn,Sn_CR_RECV);
 8007b0e:	230f      	movs	r3, #15
 8007b10:	18fb      	adds	r3, r7, r3
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	3301      	adds	r3, #1
 8007b18:	00db      	lsls	r3, r3, #3
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	33ff      	adds	r3, #255	; 0xff
 8007b1e:	2140      	movs	r1, #64	; 0x40
 8007b20:	0018      	movs	r0, r3
 8007b22:	f001 f91d 	bl	8008d60 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8007b26:	46c0      	nop			; (mov r8, r8)
 8007b28:	240f      	movs	r4, #15
 8007b2a:	193b      	adds	r3, r7, r4
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	3301      	adds	r3, #1
 8007b32:	00db      	lsls	r3, r3, #3
 8007b34:	3301      	adds	r3, #1
 8007b36:	33ff      	adds	r3, #255	; 0xff
 8007b38:	0018      	movs	r0, r3
 8007b3a:	f001 f8bf 	bl	8008cbc <WIZCHIP_READ>
 8007b3e:	1e03      	subs	r3, r0, #0
 8007b40:	d1f2      	bne.n	8007b28 <recvfrom+0x48c>
	sock_remained_size[sn] -= pack_len;
 8007b42:	193b      	adds	r3, r7, r4
 8007b44:	781a      	ldrb	r2, [r3, #0]
 8007b46:	4b16      	ldr	r3, [pc, #88]	; (8007ba0 <recvfrom+0x504>)
 8007b48:	0052      	lsls	r2, r2, #1
 8007b4a:	5ad1      	ldrh	r1, [r2, r3]
 8007b4c:	193b      	adds	r3, r7, r4
 8007b4e:	781a      	ldrb	r2, [r3, #0]
 8007b50:	231e      	movs	r3, #30
 8007b52:	18fb      	adds	r3, r7, r3
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	1acb      	subs	r3, r1, r3
 8007b58:	b299      	uxth	r1, r3
 8007b5a:	4b11      	ldr	r3, [pc, #68]	; (8007ba0 <recvfrom+0x504>)
 8007b5c:	0052      	lsls	r2, r2, #1
 8007b5e:	52d1      	strh	r1, [r2, r3]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8007b60:	193b      	adds	r3, r7, r4
 8007b62:	781a      	ldrb	r2, [r3, #0]
 8007b64:	4b0e      	ldr	r3, [pc, #56]	; (8007ba0 <recvfrom+0x504>)
 8007b66:	0052      	lsls	r2, r2, #1
 8007b68:	5ad3      	ldrh	r3, [r2, r3]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <recvfrom+0x4ea>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8007b6e:	193b      	adds	r3, r7, r4
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	4a0c      	ldr	r2, [pc, #48]	; (8007ba4 <recvfrom+0x508>)
 8007b74:	5cd2      	ldrb	r2, [r2, r3]
 8007b76:	193b      	adds	r3, r7, r4
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	2101      	movs	r1, #1
 8007b7c:	430a      	orrs	r2, r1
 8007b7e:	b2d1      	uxtb	r1, r2
 8007b80:	4a08      	ldr	r2, [pc, #32]	; (8007ba4 <recvfrom+0x508>)
 8007b82:	54d1      	strb	r1, [r2, r3]
 8007b84:	e005      	b.n	8007b92 <recvfrom+0x4f6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8007b86:	230f      	movs	r3, #15
 8007b88:	18fb      	adds	r3, r7, r3
 8007b8a:	781b      	ldrb	r3, [r3, #0]
 8007b8c:	4a05      	ldr	r2, [pc, #20]	; (8007ba4 <recvfrom+0x508>)
 8007b8e:	2100      	movs	r1, #0
 8007b90:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8007b92:	231e      	movs	r3, #30
 8007b94:	18fb      	adds	r3, r7, r3
 8007b96:	881b      	ldrh	r3, [r3, #0]
}
 8007b98:	0018      	movs	r0, r3
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	b008      	add	sp, #32
 8007b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8007ba0:	2000085c 	.word	0x2000085c
 8007ba4:	2000086c 	.word	0x2000086c

08007ba8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b082      	sub	sp, #8
 8007bac:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8007bae:	f000 fbe5 	bl	800837c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8007bb2:	4b5b      	ldr	r3, [pc, #364]	; (8007d20 <SSD1306_Init+0x178>)
 8007bb4:	485b      	ldr	r0, [pc, #364]	; (8007d24 <SSD1306_Init+0x17c>)
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	2178      	movs	r1, #120	; 0x78
 8007bba:	f004 fa15 	bl	800bfe8 <HAL_I2C_IsDeviceReady>
 8007bbe:	1e03      	subs	r3, r0, #0
 8007bc0:	d001      	beq.n	8007bc6 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	e0a8      	b.n	8007d18 <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8007bc6:	4b58      	ldr	r3, [pc, #352]	; (8007d28 <SSD1306_Init+0x180>)
 8007bc8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8007bca:	e002      	b.n	8007bd2 <SSD1306_Init+0x2a>
		p--;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1f9      	bne.n	8007bcc <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8007bd8:	22ae      	movs	r2, #174	; 0xae
 8007bda:	2100      	movs	r1, #0
 8007bdc:	2078      	movs	r0, #120	; 0x78
 8007bde:	f000 fc4d 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8007be2:	2220      	movs	r2, #32
 8007be4:	2100      	movs	r1, #0
 8007be6:	2078      	movs	r0, #120	; 0x78
 8007be8:	f000 fc48 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8007bec:	2210      	movs	r2, #16
 8007bee:	2100      	movs	r1, #0
 8007bf0:	2078      	movs	r0, #120	; 0x78
 8007bf2:	f000 fc43 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8007bf6:	22b0      	movs	r2, #176	; 0xb0
 8007bf8:	2100      	movs	r1, #0
 8007bfa:	2078      	movs	r0, #120	; 0x78
 8007bfc:	f000 fc3e 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8007c00:	22c8      	movs	r2, #200	; 0xc8
 8007c02:	2100      	movs	r1, #0
 8007c04:	2078      	movs	r0, #120	; 0x78
 8007c06:	f000 fc39 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2100      	movs	r1, #0
 8007c0e:	2078      	movs	r0, #120	; 0x78
 8007c10:	f000 fc34 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8007c14:	2210      	movs	r2, #16
 8007c16:	2100      	movs	r1, #0
 8007c18:	2078      	movs	r0, #120	; 0x78
 8007c1a:	f000 fc2f 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8007c1e:	2240      	movs	r2, #64	; 0x40
 8007c20:	2100      	movs	r1, #0
 8007c22:	2078      	movs	r0, #120	; 0x78
 8007c24:	f000 fc2a 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8007c28:	2281      	movs	r2, #129	; 0x81
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	2078      	movs	r0, #120	; 0x78
 8007c2e:	f000 fc25 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8007c32:	22ff      	movs	r2, #255	; 0xff
 8007c34:	2100      	movs	r1, #0
 8007c36:	2078      	movs	r0, #120	; 0x78
 8007c38:	f000 fc20 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8007c3c:	22a1      	movs	r2, #161	; 0xa1
 8007c3e:	2100      	movs	r1, #0
 8007c40:	2078      	movs	r0, #120	; 0x78
 8007c42:	f000 fc1b 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8007c46:	22a6      	movs	r2, #166	; 0xa6
 8007c48:	2100      	movs	r1, #0
 8007c4a:	2078      	movs	r0, #120	; 0x78
 8007c4c:	f000 fc16 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8007c50:	22a8      	movs	r2, #168	; 0xa8
 8007c52:	2100      	movs	r1, #0
 8007c54:	2078      	movs	r0, #120	; 0x78
 8007c56:	f000 fc11 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8007c5a:	223f      	movs	r2, #63	; 0x3f
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	2078      	movs	r0, #120	; 0x78
 8007c60:	f000 fc0c 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8007c64:	22a4      	movs	r2, #164	; 0xa4
 8007c66:	2100      	movs	r1, #0
 8007c68:	2078      	movs	r0, #120	; 0x78
 8007c6a:	f000 fc07 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8007c6e:	22d3      	movs	r2, #211	; 0xd3
 8007c70:	2100      	movs	r1, #0
 8007c72:	2078      	movs	r0, #120	; 0x78
 8007c74:	f000 fc02 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8007c78:	2200      	movs	r2, #0
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	2078      	movs	r0, #120	; 0x78
 8007c7e:	f000 fbfd 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8007c82:	22d5      	movs	r2, #213	; 0xd5
 8007c84:	2100      	movs	r1, #0
 8007c86:	2078      	movs	r0, #120	; 0x78
 8007c88:	f000 fbf8 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8007c8c:	22f0      	movs	r2, #240	; 0xf0
 8007c8e:	2100      	movs	r1, #0
 8007c90:	2078      	movs	r0, #120	; 0x78
 8007c92:	f000 fbf3 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8007c96:	22d9      	movs	r2, #217	; 0xd9
 8007c98:	2100      	movs	r1, #0
 8007c9a:	2078      	movs	r0, #120	; 0x78
 8007c9c:	f000 fbee 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8007ca0:	2222      	movs	r2, #34	; 0x22
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	2078      	movs	r0, #120	; 0x78
 8007ca6:	f000 fbe9 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8007caa:	22da      	movs	r2, #218	; 0xda
 8007cac:	2100      	movs	r1, #0
 8007cae:	2078      	movs	r0, #120	; 0x78
 8007cb0:	f000 fbe4 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8007cb4:	2212      	movs	r2, #18
 8007cb6:	2100      	movs	r1, #0
 8007cb8:	2078      	movs	r0, #120	; 0x78
 8007cba:	f000 fbdf 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8007cbe:	22db      	movs	r2, #219	; 0xdb
 8007cc0:	2100      	movs	r1, #0
 8007cc2:	2078      	movs	r0, #120	; 0x78
 8007cc4:	f000 fbda 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8007cc8:	2220      	movs	r2, #32
 8007cca:	2100      	movs	r1, #0
 8007ccc:	2078      	movs	r0, #120	; 0x78
 8007cce:	f000 fbd5 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8007cd2:	228d      	movs	r2, #141	; 0x8d
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	2078      	movs	r0, #120	; 0x78
 8007cd8:	f000 fbd0 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8007cdc:	2214      	movs	r2, #20
 8007cde:	2100      	movs	r1, #0
 8007ce0:	2078      	movs	r0, #120	; 0x78
 8007ce2:	f000 fbcb 	bl	800847c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8007ce6:	22af      	movs	r2, #175	; 0xaf
 8007ce8:	2100      	movs	r1, #0
 8007cea:	2078      	movs	r0, #120	; 0x78
 8007cec:	f000 fbc6 	bl	800847c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8007cf0:	222e      	movs	r2, #46	; 0x2e
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	2078      	movs	r0, #120	; 0x78
 8007cf6:	f000 fbc1 	bl	800847c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	f000 f850 	bl	8007da0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8007d00:	f000 f816 	bl	8007d30 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8007d04:	4b09      	ldr	r3, [pc, #36]	; (8007d2c <SSD1306_Init+0x184>)
 8007d06:	2200      	movs	r2, #0
 8007d08:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8007d0a:	4b08      	ldr	r3, [pc, #32]	; (8007d2c <SSD1306_Init+0x184>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8007d10:	4b06      	ldr	r3, [pc, #24]	; (8007d2c <SSD1306_Init+0x184>)
 8007d12:	2201      	movs	r2, #1
 8007d14:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8007d16:	2301      	movs	r3, #1
}
 8007d18:	0018      	movs	r0, r3
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	b002      	add	sp, #8
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	00004e20 	.word	0x00004e20
 8007d24:	20000454 	.word	0x20000454
 8007d28:	000009c4 	.word	0x000009c4
 8007d2c:	20000c84 	.word	0x20000c84

08007d30 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8007d36:	1dfb      	adds	r3, r7, #7
 8007d38:	2200      	movs	r2, #0
 8007d3a:	701a      	strb	r2, [r3, #0]
 8007d3c:	e025      	b.n	8007d8a <SSD1306_UpdateScreen+0x5a>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8007d3e:	1dfb      	adds	r3, r7, #7
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	3b50      	subs	r3, #80	; 0x50
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	001a      	movs	r2, r3
 8007d48:	2100      	movs	r1, #0
 8007d4a:	2078      	movs	r0, #120	; 0x78
 8007d4c:	f000 fb96 	bl	800847c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8007d50:	2200      	movs	r2, #0
 8007d52:	2100      	movs	r1, #0
 8007d54:	2078      	movs	r0, #120	; 0x78
 8007d56:	f000 fb91 	bl	800847c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8007d5a:	2210      	movs	r2, #16
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	2078      	movs	r0, #120	; 0x78
 8007d60:	f000 fb8c 	bl	800847c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8007d64:	1dfb      	adds	r3, r7, #7
 8007d66:	781a      	ldrb	r2, [r3, #0]
 8007d68:	0013      	movs	r3, r2
 8007d6a:	019b      	lsls	r3, r3, #6
 8007d6c:	189b      	adds	r3, r3, r2
 8007d6e:	005b      	lsls	r3, r3, #1
 8007d70:	001a      	movs	r2, r3
 8007d72:	4b0a      	ldr	r3, [pc, #40]	; (8007d9c <SSD1306_UpdateScreen+0x6c>)
 8007d74:	18d2      	adds	r2, r2, r3
 8007d76:	2382      	movs	r3, #130	; 0x82
 8007d78:	2140      	movs	r1, #64	; 0x40
 8007d7a:	2078      	movs	r0, #120	; 0x78
 8007d7c:	f000 fb12 	bl	80083a4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8007d80:	1dfb      	adds	r3, r7, #7
 8007d82:	781a      	ldrb	r2, [r3, #0]
 8007d84:	1dfb      	adds	r3, r7, #7
 8007d86:	3201      	adds	r2, #1
 8007d88:	701a      	strb	r2, [r3, #0]
 8007d8a:	1dfb      	adds	r3, r7, #7
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	2b07      	cmp	r3, #7
 8007d90:	d9d5      	bls.n	8007d3e <SSD1306_UpdateScreen+0xe>
	}
}
 8007d92:	46c0      	nop			; (mov r8, r8)
 8007d94:	46c0      	nop			; (mov r8, r8)
 8007d96:	46bd      	mov	sp, r7
 8007d98:	b002      	add	sp, #8
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	20000874 	.word	0x20000874

08007da0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	0002      	movs	r2, r0
 8007da8:	1dfb      	adds	r3, r7, #7
 8007daa:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8007dac:	1dfb      	adds	r3, r7, #7
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d101      	bne.n	8007db8 <SSD1306_Fill+0x18>
 8007db4:	2300      	movs	r3, #0
 8007db6:	e000      	b.n	8007dba <SSD1306_Fill+0x1a>
 8007db8:	23ff      	movs	r3, #255	; 0xff
 8007dba:	2282      	movs	r2, #130	; 0x82
 8007dbc:	00d2      	lsls	r2, r2, #3
 8007dbe:	4804      	ldr	r0, [pc, #16]	; (8007dd0 <SSD1306_Fill+0x30>)
 8007dc0:	0019      	movs	r1, r3
 8007dc2:	f009 f834 	bl	8010e2e <memset>
}
 8007dc6:	46c0      	nop			; (mov r8, r8)
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	b002      	add	sp, #8
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	46c0      	nop			; (mov r8, r8)
 8007dd0:	20000874 	.word	0x20000874

08007dd4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8007dd4:	b590      	push	{r4, r7, lr}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	0004      	movs	r4, r0
 8007ddc:	0008      	movs	r0, r1
 8007dde:	0011      	movs	r1, r2
 8007de0:	1dbb      	adds	r3, r7, #6
 8007de2:	1c22      	adds	r2, r4, #0
 8007de4:	801a      	strh	r2, [r3, #0]
 8007de6:	1d3b      	adds	r3, r7, #4
 8007de8:	1c02      	adds	r2, r0, #0
 8007dea:	801a      	strh	r2, [r3, #0]
 8007dec:	1cfb      	adds	r3, r7, #3
 8007dee:	1c0a      	adds	r2, r1, #0
 8007df0:	701a      	strb	r2, [r3, #0]
	if (
 8007df2:	1dbb      	adds	r3, r7, #6
 8007df4:	881b      	ldrh	r3, [r3, #0]
 8007df6:	2b81      	cmp	r3, #129	; 0x81
 8007df8:	d85e      	bhi.n	8007eb8 <SSD1306_DrawPixel+0xe4>
		x >= SSD1306_WIDTH ||
 8007dfa:	1d3b      	adds	r3, r7, #4
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	2b3f      	cmp	r3, #63	; 0x3f
 8007e00:	d85a      	bhi.n	8007eb8 <SSD1306_DrawPixel+0xe4>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8007e02:	4b2f      	ldr	r3, [pc, #188]	; (8007ec0 <SSD1306_DrawPixel+0xec>)
 8007e04:	791b      	ldrb	r3, [r3, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d006      	beq.n	8007e18 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8007e0a:	1cfb      	adds	r3, r7, #3
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	425a      	negs	r2, r3
 8007e10:	4153      	adcs	r3, r2
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	1cfb      	adds	r3, r7, #3
 8007e16:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8007e18:	1cfb      	adds	r3, r7, #3
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d124      	bne.n	8007e6a <SSD1306_DrawPixel+0x96>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8007e20:	1dbb      	adds	r3, r7, #6
 8007e22:	881a      	ldrh	r2, [r3, #0]
 8007e24:	1d3b      	adds	r3, r7, #4
 8007e26:	881b      	ldrh	r3, [r3, #0]
 8007e28:	08db      	lsrs	r3, r3, #3
 8007e2a:	b298      	uxth	r0, r3
 8007e2c:	0001      	movs	r1, r0
 8007e2e:	000b      	movs	r3, r1
 8007e30:	019b      	lsls	r3, r3, #6
 8007e32:	185b      	adds	r3, r3, r1
 8007e34:	005b      	lsls	r3, r3, #1
 8007e36:	18d3      	adds	r3, r2, r3
 8007e38:	4a22      	ldr	r2, [pc, #136]	; (8007ec4 <SSD1306_DrawPixel+0xf0>)
 8007e3a:	5cd3      	ldrb	r3, [r2, r3]
 8007e3c:	b25a      	sxtb	r2, r3
 8007e3e:	1d3b      	adds	r3, r7, #4
 8007e40:	881b      	ldrh	r3, [r3, #0]
 8007e42:	2107      	movs	r1, #7
 8007e44:	400b      	ands	r3, r1
 8007e46:	2101      	movs	r1, #1
 8007e48:	4099      	lsls	r1, r3
 8007e4a:	000b      	movs	r3, r1
 8007e4c:	b25b      	sxtb	r3, r3
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	b25c      	sxtb	r4, r3
 8007e52:	1dbb      	adds	r3, r7, #6
 8007e54:	881a      	ldrh	r2, [r3, #0]
 8007e56:	0001      	movs	r1, r0
 8007e58:	000b      	movs	r3, r1
 8007e5a:	019b      	lsls	r3, r3, #6
 8007e5c:	185b      	adds	r3, r3, r1
 8007e5e:	005b      	lsls	r3, r3, #1
 8007e60:	18d3      	adds	r3, r2, r3
 8007e62:	b2e1      	uxtb	r1, r4
 8007e64:	4a17      	ldr	r2, [pc, #92]	; (8007ec4 <SSD1306_DrawPixel+0xf0>)
 8007e66:	54d1      	strb	r1, [r2, r3]
 8007e68:	e027      	b.n	8007eba <SSD1306_DrawPixel+0xe6>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8007e6a:	1dbb      	adds	r3, r7, #6
 8007e6c:	881a      	ldrh	r2, [r3, #0]
 8007e6e:	1d3b      	adds	r3, r7, #4
 8007e70:	881b      	ldrh	r3, [r3, #0]
 8007e72:	08db      	lsrs	r3, r3, #3
 8007e74:	b298      	uxth	r0, r3
 8007e76:	0001      	movs	r1, r0
 8007e78:	000b      	movs	r3, r1
 8007e7a:	019b      	lsls	r3, r3, #6
 8007e7c:	185b      	adds	r3, r3, r1
 8007e7e:	005b      	lsls	r3, r3, #1
 8007e80:	18d3      	adds	r3, r2, r3
 8007e82:	4a10      	ldr	r2, [pc, #64]	; (8007ec4 <SSD1306_DrawPixel+0xf0>)
 8007e84:	5cd3      	ldrb	r3, [r2, r3]
 8007e86:	b25b      	sxtb	r3, r3
 8007e88:	1d3a      	adds	r2, r7, #4
 8007e8a:	8812      	ldrh	r2, [r2, #0]
 8007e8c:	2107      	movs	r1, #7
 8007e8e:	400a      	ands	r2, r1
 8007e90:	2101      	movs	r1, #1
 8007e92:	4091      	lsls	r1, r2
 8007e94:	000a      	movs	r2, r1
 8007e96:	b252      	sxtb	r2, r2
 8007e98:	43d2      	mvns	r2, r2
 8007e9a:	b252      	sxtb	r2, r2
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	b25c      	sxtb	r4, r3
 8007ea0:	1dbb      	adds	r3, r7, #6
 8007ea2:	881a      	ldrh	r2, [r3, #0]
 8007ea4:	0001      	movs	r1, r0
 8007ea6:	000b      	movs	r3, r1
 8007ea8:	019b      	lsls	r3, r3, #6
 8007eaa:	185b      	adds	r3, r3, r1
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	18d3      	adds	r3, r2, r3
 8007eb0:	b2e1      	uxtb	r1, r4
 8007eb2:	4a04      	ldr	r2, [pc, #16]	; (8007ec4 <SSD1306_DrawPixel+0xf0>)
 8007eb4:	54d1      	strb	r1, [r2, r3]
 8007eb6:	e000      	b.n	8007eba <SSD1306_DrawPixel+0xe6>
		return;
 8007eb8:	46c0      	nop			; (mov r8, r8)
	}
}
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	b003      	add	sp, #12
 8007ebe:	bd90      	pop	{r4, r7, pc}
 8007ec0:	20000c84 	.word	0x20000c84
 8007ec4:	20000874 	.word	0x20000874

08007ec8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	0002      	movs	r2, r0
 8007ed0:	1dbb      	adds	r3, r7, #6
 8007ed2:	801a      	strh	r2, [r3, #0]
 8007ed4:	1d3b      	adds	r3, r7, #4
 8007ed6:	1c0a      	adds	r2, r1, #0
 8007ed8:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8007eda:	4b06      	ldr	r3, [pc, #24]	; (8007ef4 <SSD1306_GotoXY+0x2c>)
 8007edc:	1dba      	adds	r2, r7, #6
 8007ede:	8812      	ldrh	r2, [r2, #0]
 8007ee0:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8007ee2:	4b04      	ldr	r3, [pc, #16]	; (8007ef4 <SSD1306_GotoXY+0x2c>)
 8007ee4:	1d3a      	adds	r2, r7, #4
 8007ee6:	8812      	ldrh	r2, [r2, #0]
 8007ee8:	805a      	strh	r2, [r3, #2]
}
 8007eea:	46c0      	nop			; (mov r8, r8)
 8007eec:	46bd      	mov	sp, r7
 8007eee:	b002      	add	sp, #8
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	46c0      	nop			; (mov r8, r8)
 8007ef4:	20000c84 	.word	0x20000c84

08007ef8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6039      	str	r1, [r7, #0]
 8007f00:	0011      	movs	r1, r2
 8007f02:	1dfb      	adds	r3, r7, #7
 8007f04:	1c02      	adds	r2, r0, #0
 8007f06:	701a      	strb	r2, [r3, #0]
 8007f08:	1dbb      	adds	r3, r7, #6
 8007f0a:	1c0a      	adds	r2, r1, #0
 8007f0c:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8007f0e:	4b3a      	ldr	r3, [pc, #232]	; (8007ff8 <SSD1306_Putc+0x100>)
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	001a      	movs	r2, r3
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	18d3      	adds	r3, r2, r3
	if (
 8007f1a:	2b81      	cmp	r3, #129	; 0x81
 8007f1c:	dc07      	bgt.n	8007f2e <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8007f1e:	4b36      	ldr	r3, [pc, #216]	; (8007ff8 <SSD1306_Putc+0x100>)
 8007f20:	885b      	ldrh	r3, [r3, #2]
 8007f22:	001a      	movs	r2, r3
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	785b      	ldrb	r3, [r3, #1]
 8007f28:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8007f2a:	2b3f      	cmp	r3, #63	; 0x3f
 8007f2c:	dd01      	ble.n	8007f32 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e05e      	b.n	8007ff0 <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8007f32:	2300      	movs	r3, #0
 8007f34:	617b      	str	r3, [r7, #20]
 8007f36:	e04a      	b.n	8007fce <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	1dfb      	adds	r3, r7, #7
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	3b20      	subs	r3, #32
 8007f42:	6839      	ldr	r1, [r7, #0]
 8007f44:	7849      	ldrb	r1, [r1, #1]
 8007f46:	434b      	muls	r3, r1
 8007f48:	0019      	movs	r1, r3
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	18cb      	adds	r3, r1, r3
 8007f4e:	005b      	lsls	r3, r3, #1
 8007f50:	18d3      	adds	r3, r2, r3
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8007f56:	2300      	movs	r3, #0
 8007f58:	613b      	str	r3, [r7, #16]
 8007f5a:	e02f      	b.n	8007fbc <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	409a      	lsls	r2, r3
 8007f62:	2380      	movs	r3, #128	; 0x80
 8007f64:	021b      	lsls	r3, r3, #8
 8007f66:	4013      	ands	r3, r2
 8007f68:	d011      	beq.n	8007f8e <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8007f6a:	4b23      	ldr	r3, [pc, #140]	; (8007ff8 <SSD1306_Putc+0x100>)
 8007f6c:	881a      	ldrh	r2, [r3, #0]
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	18d3      	adds	r3, r2, r3
 8007f74:	b298      	uxth	r0, r3
 8007f76:	4b20      	ldr	r3, [pc, #128]	; (8007ff8 <SSD1306_Putc+0x100>)
 8007f78:	885a      	ldrh	r2, [r3, #2]
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	18d3      	adds	r3, r2, r3
 8007f80:	b299      	uxth	r1, r3
 8007f82:	1dbb      	adds	r3, r7, #6
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	001a      	movs	r2, r3
 8007f88:	f7ff ff24 	bl	8007dd4 <SSD1306_DrawPixel>
 8007f8c:	e013      	b.n	8007fb6 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8007f8e:	4b1a      	ldr	r3, [pc, #104]	; (8007ff8 <SSD1306_Putc+0x100>)
 8007f90:	881a      	ldrh	r2, [r3, #0]
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	18d3      	adds	r3, r2, r3
 8007f98:	b298      	uxth	r0, r3
 8007f9a:	4b17      	ldr	r3, [pc, #92]	; (8007ff8 <SSD1306_Putc+0x100>)
 8007f9c:	885a      	ldrh	r2, [r3, #2]
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	18d3      	adds	r3, r2, r3
 8007fa4:	b299      	uxth	r1, r3
 8007fa6:	1dbb      	adds	r3, r7, #6
 8007fa8:	781b      	ldrb	r3, [r3, #0]
 8007faa:	425a      	negs	r2, r3
 8007fac:	4153      	adcs	r3, r2
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	001a      	movs	r2, r3
 8007fb2:	f7ff ff0f 	bl	8007dd4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	613b      	str	r3, [r7, #16]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	001a      	movs	r2, r3
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d3c9      	bcc.n	8007f5c <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	617b      	str	r3, [r7, #20]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	785b      	ldrb	r3, [r3, #1]
 8007fd2:	001a      	movs	r2, r3
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d3ae      	bcc.n	8007f38 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8007fda:	4b07      	ldr	r3, [pc, #28]	; (8007ff8 <SSD1306_Putc+0x100>)
 8007fdc:	881a      	ldrh	r2, [r3, #0]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	18d3      	adds	r3, r2, r3
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	4b03      	ldr	r3, [pc, #12]	; (8007ff8 <SSD1306_Putc+0x100>)
 8007fea:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8007fec:	1dfb      	adds	r3, r7, #7
 8007fee:	781b      	ldrb	r3, [r3, #0]
}
 8007ff0:	0018      	movs	r0, r3
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	b006      	add	sp, #24
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	20000c84 	.word	0x20000c84

08007ffc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b084      	sub	sp, #16
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	1dfb      	adds	r3, r7, #7
 8008008:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 800800a:	e013      	b.n	8008034 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	7818      	ldrb	r0, [r3, #0]
 8008010:	1dfb      	adds	r3, r7, #7
 8008012:	781a      	ldrb	r2, [r3, #0]
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	0019      	movs	r1, r3
 8008018:	f7ff ff6e 	bl	8007ef8 <SSD1306_Putc>
 800801c:	0003      	movs	r3, r0
 800801e:	001a      	movs	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	429a      	cmp	r2, r3
 8008026:	d002      	beq.n	800802e <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	e008      	b.n	8008040 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3301      	adds	r3, #1
 8008032:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	781b      	ldrb	r3, [r3, #0]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e7      	bne.n	800800c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	781b      	ldrb	r3, [r3, #0]
}
 8008040:	0018      	movs	r0, r3
 8008042:	46bd      	mov	sp, r7
 8008044:	b004      	add	sp, #16
 8008046:	bd80      	pop	{r7, pc}

08008048 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8008048:	b5b0      	push	{r4, r5, r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	0005      	movs	r5, r0
 8008050:	000c      	movs	r4, r1
 8008052:	0010      	movs	r0, r2
 8008054:	0019      	movs	r1, r3
 8008056:	1dbb      	adds	r3, r7, #6
 8008058:	1c2a      	adds	r2, r5, #0
 800805a:	801a      	strh	r2, [r3, #0]
 800805c:	1d3b      	adds	r3, r7, #4
 800805e:	1c22      	adds	r2, r4, #0
 8008060:	801a      	strh	r2, [r3, #0]
 8008062:	1cbb      	adds	r3, r7, #2
 8008064:	1c02      	adds	r2, r0, #0
 8008066:	801a      	strh	r2, [r3, #0]
 8008068:	003b      	movs	r3, r7
 800806a:	1c0a      	adds	r2, r1, #0
 800806c:	801a      	strh	r2, [r3, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 800806e:	1dbb      	adds	r3, r7, #6
 8008070:	881b      	ldrh	r3, [r3, #0]
 8008072:	2b81      	cmp	r3, #129	; 0x81
 8008074:	d902      	bls.n	800807c <SSD1306_DrawLine+0x34>
		x0 = SSD1306_WIDTH - 1;
 8008076:	1dbb      	adds	r3, r7, #6
 8008078:	2281      	movs	r2, #129	; 0x81
 800807a:	801a      	strh	r2, [r3, #0]
	}
	if (x1 >= SSD1306_WIDTH) {
 800807c:	1cbb      	adds	r3, r7, #2
 800807e:	881b      	ldrh	r3, [r3, #0]
 8008080:	2b81      	cmp	r3, #129	; 0x81
 8008082:	d902      	bls.n	800808a <SSD1306_DrawLine+0x42>
		x1 = SSD1306_WIDTH - 1;
 8008084:	1cbb      	adds	r3, r7, #2
 8008086:	2281      	movs	r2, #129	; 0x81
 8008088:	801a      	strh	r2, [r3, #0]
	}
	if (y0 >= SSD1306_HEIGHT) {
 800808a:	1d3b      	adds	r3, r7, #4
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	2b3f      	cmp	r3, #63	; 0x3f
 8008090:	d902      	bls.n	8008098 <SSD1306_DrawLine+0x50>
		y0 = SSD1306_HEIGHT - 1;
 8008092:	1d3b      	adds	r3, r7, #4
 8008094:	223f      	movs	r2, #63	; 0x3f
 8008096:	801a      	strh	r2, [r3, #0]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8008098:	003b      	movs	r3, r7
 800809a:	881b      	ldrh	r3, [r3, #0]
 800809c:	2b3f      	cmp	r3, #63	; 0x3f
 800809e:	d902      	bls.n	80080a6 <SSD1306_DrawLine+0x5e>
		y1 = SSD1306_HEIGHT - 1;
 80080a0:	003b      	movs	r3, r7
 80080a2:	223f      	movs	r2, #63	; 0x3f
 80080a4:	801a      	strh	r2, [r3, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80080a6:	1dba      	adds	r2, r7, #6
 80080a8:	1cbb      	adds	r3, r7, #2
 80080aa:	8812      	ldrh	r2, [r2, #0]
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d207      	bcs.n	80080c2 <SSD1306_DrawLine+0x7a>
 80080b2:	1cba      	adds	r2, r7, #2
 80080b4:	1dbb      	adds	r3, r7, #6
 80080b6:	8812      	ldrh	r2, [r2, #0]
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	b29b      	uxth	r3, r3
 80080be:	b21b      	sxth	r3, r3
 80080c0:	e006      	b.n	80080d0 <SSD1306_DrawLine+0x88>
 80080c2:	1dba      	adds	r2, r7, #6
 80080c4:	1cbb      	adds	r3, r7, #2
 80080c6:	8812      	ldrh	r2, [r2, #0]
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	1ad3      	subs	r3, r2, r3
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	b21b      	sxth	r3, r3
 80080d0:	2212      	movs	r2, #18
 80080d2:	18ba      	adds	r2, r7, r2
 80080d4:	8013      	strh	r3, [r2, #0]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80080d6:	1d3a      	adds	r2, r7, #4
 80080d8:	003b      	movs	r3, r7
 80080da:	8812      	ldrh	r2, [r2, #0]
 80080dc:	881b      	ldrh	r3, [r3, #0]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d207      	bcs.n	80080f2 <SSD1306_DrawLine+0xaa>
 80080e2:	003a      	movs	r2, r7
 80080e4:	1d3b      	adds	r3, r7, #4
 80080e6:	8812      	ldrh	r2, [r2, #0]
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	b21b      	sxth	r3, r3
 80080f0:	e006      	b.n	8008100 <SSD1306_DrawLine+0xb8>
 80080f2:	1d3a      	adds	r2, r7, #4
 80080f4:	003b      	movs	r3, r7
 80080f6:	8812      	ldrh	r2, [r2, #0]
 80080f8:	881b      	ldrh	r3, [r3, #0]
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	b21b      	sxth	r3, r3
 8008100:	2210      	movs	r2, #16
 8008102:	18ba      	adds	r2, r7, r2
 8008104:	8013      	strh	r3, [r2, #0]
	sx = (x0 < x1) ? 1 : -1; 
 8008106:	1dba      	adds	r2, r7, #6
 8008108:	1cbb      	adds	r3, r7, #2
 800810a:	8812      	ldrh	r2, [r2, #0]
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	429a      	cmp	r2, r3
 8008110:	d201      	bcs.n	8008116 <SSD1306_DrawLine+0xce>
 8008112:	2201      	movs	r2, #1
 8008114:	e001      	b.n	800811a <SSD1306_DrawLine+0xd2>
 8008116:	2301      	movs	r3, #1
 8008118:	425a      	negs	r2, r3
 800811a:	230e      	movs	r3, #14
 800811c:	18fb      	adds	r3, r7, r3
 800811e:	801a      	strh	r2, [r3, #0]
	sy = (y0 < y1) ? 1 : -1; 
 8008120:	1d3a      	adds	r2, r7, #4
 8008122:	003b      	movs	r3, r7
 8008124:	8812      	ldrh	r2, [r2, #0]
 8008126:	881b      	ldrh	r3, [r3, #0]
 8008128:	429a      	cmp	r2, r3
 800812a:	d201      	bcs.n	8008130 <SSD1306_DrawLine+0xe8>
 800812c:	2201      	movs	r2, #1
 800812e:	e001      	b.n	8008134 <SSD1306_DrawLine+0xec>
 8008130:	2301      	movs	r3, #1
 8008132:	425a      	negs	r2, r3
 8008134:	230c      	movs	r3, #12
 8008136:	18fb      	adds	r3, r7, r3
 8008138:	801a      	strh	r2, [r3, #0]
	err = ((dx > dy) ? dx : -dy) / 2; 
 800813a:	2112      	movs	r1, #18
 800813c:	187a      	adds	r2, r7, r1
 800813e:	2310      	movs	r3, #16
 8008140:	18fb      	adds	r3, r7, r3
 8008142:	2000      	movs	r0, #0
 8008144:	5e12      	ldrsh	r2, [r2, r0]
 8008146:	2000      	movs	r0, #0
 8008148:	5e1b      	ldrsh	r3, [r3, r0]
 800814a:	429a      	cmp	r2, r3
 800814c:	dd08      	ble.n	8008160 <SSD1306_DrawLine+0x118>
 800814e:	187b      	adds	r3, r7, r1
 8008150:	2200      	movs	r2, #0
 8008152:	5e9b      	ldrsh	r3, [r3, r2]
 8008154:	2b00      	cmp	r3, #0
 8008156:	da00      	bge.n	800815a <SSD1306_DrawLine+0x112>
 8008158:	3301      	adds	r3, #1
 800815a:	105b      	asrs	r3, r3, #1
 800815c:	b21b      	sxth	r3, r3
 800815e:	e009      	b.n	8008174 <SSD1306_DrawLine+0x12c>
 8008160:	2310      	movs	r3, #16
 8008162:	18fb      	adds	r3, r7, r3
 8008164:	2200      	movs	r2, #0
 8008166:	5e9b      	ldrsh	r3, [r3, r2]
 8008168:	2b00      	cmp	r3, #0
 800816a:	da00      	bge.n	800816e <SSD1306_DrawLine+0x126>
 800816c:	3301      	adds	r3, #1
 800816e:	105b      	asrs	r3, r3, #1
 8008170:	425b      	negs	r3, r3
 8008172:	b21b      	sxth	r3, r3
 8008174:	2216      	movs	r2, #22
 8008176:	18ba      	adds	r2, r7, r2
 8008178:	8013      	strh	r3, [r2, #0]

	if (dx == 0) {
 800817a:	2312      	movs	r3, #18
 800817c:	18fb      	adds	r3, r7, r3
 800817e:	2200      	movs	r2, #0
 8008180:	5e9b      	ldrsh	r3, [r3, r2]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d148      	bne.n	8008218 <SSD1306_DrawLine+0x1d0>
		if (y1 < y0) {
 8008186:	003a      	movs	r2, r7
 8008188:	1d3b      	adds	r3, r7, #4
 800818a:	8812      	ldrh	r2, [r2, #0]
 800818c:	881b      	ldrh	r3, [r3, #0]
 800818e:	429a      	cmp	r2, r3
 8008190:	d20c      	bcs.n	80081ac <SSD1306_DrawLine+0x164>
			tmp = y1;
 8008192:	2108      	movs	r1, #8
 8008194:	187b      	adds	r3, r7, r1
 8008196:	003a      	movs	r2, r7
 8008198:	8812      	ldrh	r2, [r2, #0]
 800819a:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 800819c:	003b      	movs	r3, r7
 800819e:	1d3a      	adds	r2, r7, #4
 80081a0:	8812      	ldrh	r2, [r2, #0]
 80081a2:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 80081a4:	1d3b      	adds	r3, r7, #4
 80081a6:	187a      	adds	r2, r7, r1
 80081a8:	8812      	ldrh	r2, [r2, #0]
 80081aa:	801a      	strh	r2, [r3, #0]
		}
		
		if (x1 < x0) {
 80081ac:	1cba      	adds	r2, r7, #2
 80081ae:	1dbb      	adds	r3, r7, #6
 80081b0:	8812      	ldrh	r2, [r2, #0]
 80081b2:	881b      	ldrh	r3, [r3, #0]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d20c      	bcs.n	80081d2 <SSD1306_DrawLine+0x18a>
			tmp = x1;
 80081b8:	2108      	movs	r1, #8
 80081ba:	187b      	adds	r3, r7, r1
 80081bc:	1cba      	adds	r2, r7, #2
 80081be:	8812      	ldrh	r2, [r2, #0]
 80081c0:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 80081c2:	1cbb      	adds	r3, r7, #2
 80081c4:	1dba      	adds	r2, r7, #6
 80081c6:	8812      	ldrh	r2, [r2, #0]
 80081c8:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 80081ca:	1dbb      	adds	r3, r7, #6
 80081cc:	187a      	adds	r2, r7, r1
 80081ce:	8812      	ldrh	r2, [r2, #0]
 80081d0:	801a      	strh	r2, [r3, #0]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80081d2:	2314      	movs	r3, #20
 80081d4:	18fb      	adds	r3, r7, r3
 80081d6:	1d3a      	adds	r2, r7, #4
 80081d8:	8812      	ldrh	r2, [r2, #0]
 80081da:	801a      	strh	r2, [r3, #0]
 80081dc:	e013      	b.n	8008206 <SSD1306_DrawLine+0x1be>
			SSD1306_DrawPixel(x0, i, c);
 80081de:	2414      	movs	r4, #20
 80081e0:	193b      	adds	r3, r7, r4
 80081e2:	8819      	ldrh	r1, [r3, #0]
 80081e4:	2328      	movs	r3, #40	; 0x28
 80081e6:	18fb      	adds	r3, r7, r3
 80081e8:	781a      	ldrb	r2, [r3, #0]
 80081ea:	1dbb      	adds	r3, r7, #6
 80081ec:	881b      	ldrh	r3, [r3, #0]
 80081ee:	0018      	movs	r0, r3
 80081f0:	f7ff fdf0 	bl	8007dd4 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80081f4:	0021      	movs	r1, r4
 80081f6:	187b      	adds	r3, r7, r1
 80081f8:	2200      	movs	r2, #0
 80081fa:	5e9b      	ldrsh	r3, [r3, r2]
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	3301      	adds	r3, #1
 8008200:	b29a      	uxth	r2, r3
 8008202:	187b      	adds	r3, r7, r1
 8008204:	801a      	strh	r2, [r3, #0]
 8008206:	2314      	movs	r3, #20
 8008208:	18fb      	adds	r3, r7, r3
 800820a:	2200      	movs	r2, #0
 800820c:	5e9a      	ldrsh	r2, [r3, r2]
 800820e:	003b      	movs	r3, r7
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	429a      	cmp	r2, r3
 8008214:	dde3      	ble.n	80081de <SSD1306_DrawLine+0x196>
		}
		
		/* Return from function */
		return;
 8008216:	e0a3      	b.n	8008360 <SSD1306_DrawLine+0x318>
	}
	
	if (dy == 0) {
 8008218:	2310      	movs	r3, #16
 800821a:	18fb      	adds	r3, r7, r3
 800821c:	2200      	movs	r2, #0
 800821e:	5e9b      	ldrsh	r3, [r3, r2]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d148      	bne.n	80082b6 <SSD1306_DrawLine+0x26e>
		if (y1 < y0) {
 8008224:	003a      	movs	r2, r7
 8008226:	1d3b      	adds	r3, r7, #4
 8008228:	8812      	ldrh	r2, [r2, #0]
 800822a:	881b      	ldrh	r3, [r3, #0]
 800822c:	429a      	cmp	r2, r3
 800822e:	d20c      	bcs.n	800824a <SSD1306_DrawLine+0x202>
			tmp = y1;
 8008230:	2108      	movs	r1, #8
 8008232:	187b      	adds	r3, r7, r1
 8008234:	003a      	movs	r2, r7
 8008236:	8812      	ldrh	r2, [r2, #0]
 8008238:	801a      	strh	r2, [r3, #0]
			y1 = y0;
 800823a:	003b      	movs	r3, r7
 800823c:	1d3a      	adds	r2, r7, #4
 800823e:	8812      	ldrh	r2, [r2, #0]
 8008240:	801a      	strh	r2, [r3, #0]
			y0 = tmp;
 8008242:	1d3b      	adds	r3, r7, #4
 8008244:	187a      	adds	r2, r7, r1
 8008246:	8812      	ldrh	r2, [r2, #0]
 8008248:	801a      	strh	r2, [r3, #0]
		}
		
		if (x1 < x0) {
 800824a:	1cba      	adds	r2, r7, #2
 800824c:	1dbb      	adds	r3, r7, #6
 800824e:	8812      	ldrh	r2, [r2, #0]
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	429a      	cmp	r2, r3
 8008254:	d20c      	bcs.n	8008270 <SSD1306_DrawLine+0x228>
			tmp = x1;
 8008256:	2108      	movs	r1, #8
 8008258:	187b      	adds	r3, r7, r1
 800825a:	1cba      	adds	r2, r7, #2
 800825c:	8812      	ldrh	r2, [r2, #0]
 800825e:	801a      	strh	r2, [r3, #0]
			x1 = x0;
 8008260:	1cbb      	adds	r3, r7, #2
 8008262:	1dba      	adds	r2, r7, #6
 8008264:	8812      	ldrh	r2, [r2, #0]
 8008266:	801a      	strh	r2, [r3, #0]
			x0 = tmp;
 8008268:	1dbb      	adds	r3, r7, #6
 800826a:	187a      	adds	r2, r7, r1
 800826c:	8812      	ldrh	r2, [r2, #0]
 800826e:	801a      	strh	r2, [r3, #0]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8008270:	2314      	movs	r3, #20
 8008272:	18fb      	adds	r3, r7, r3
 8008274:	1dba      	adds	r2, r7, #6
 8008276:	8812      	ldrh	r2, [r2, #0]
 8008278:	801a      	strh	r2, [r3, #0]
 800827a:	e013      	b.n	80082a4 <SSD1306_DrawLine+0x25c>
			SSD1306_DrawPixel(i, y0, c);
 800827c:	2414      	movs	r4, #20
 800827e:	193b      	adds	r3, r7, r4
 8008280:	8818      	ldrh	r0, [r3, #0]
 8008282:	2328      	movs	r3, #40	; 0x28
 8008284:	18fb      	adds	r3, r7, r3
 8008286:	781a      	ldrb	r2, [r3, #0]
 8008288:	1d3b      	adds	r3, r7, #4
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	0019      	movs	r1, r3
 800828e:	f7ff fda1 	bl	8007dd4 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8008292:	0021      	movs	r1, r4
 8008294:	187b      	adds	r3, r7, r1
 8008296:	2200      	movs	r2, #0
 8008298:	5e9b      	ldrsh	r3, [r3, r2]
 800829a:	b29b      	uxth	r3, r3
 800829c:	3301      	adds	r3, #1
 800829e:	b29a      	uxth	r2, r3
 80082a0:	187b      	adds	r3, r7, r1
 80082a2:	801a      	strh	r2, [r3, #0]
 80082a4:	2314      	movs	r3, #20
 80082a6:	18fb      	adds	r3, r7, r3
 80082a8:	2200      	movs	r2, #0
 80082aa:	5e9a      	ldrsh	r2, [r3, r2]
 80082ac:	1cbb      	adds	r3, r7, #2
 80082ae:	881b      	ldrh	r3, [r3, #0]
 80082b0:	429a      	cmp	r2, r3
 80082b2:	dde3      	ble.n	800827c <SSD1306_DrawLine+0x234>
		}
		
		/* Return from function */
		return;
 80082b4:	e054      	b.n	8008360 <SSD1306_DrawLine+0x318>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80082b6:	2328      	movs	r3, #40	; 0x28
 80082b8:	18fb      	adds	r3, r7, r3
 80082ba:	781a      	ldrb	r2, [r3, #0]
 80082bc:	1d3b      	adds	r3, r7, #4
 80082be:	8819      	ldrh	r1, [r3, #0]
 80082c0:	1dbb      	adds	r3, r7, #6
 80082c2:	881b      	ldrh	r3, [r3, #0]
 80082c4:	0018      	movs	r0, r3
 80082c6:	f7ff fd85 	bl	8007dd4 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80082ca:	1dba      	adds	r2, r7, #6
 80082cc:	1cbb      	adds	r3, r7, #2
 80082ce:	8812      	ldrh	r2, [r2, #0]
 80082d0:	881b      	ldrh	r3, [r3, #0]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d105      	bne.n	80082e2 <SSD1306_DrawLine+0x29a>
 80082d6:	1d3a      	adds	r2, r7, #4
 80082d8:	003b      	movs	r3, r7
 80082da:	8812      	ldrh	r2, [r2, #0]
 80082dc:	881b      	ldrh	r3, [r3, #0]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d03d      	beq.n	800835e <SSD1306_DrawLine+0x316>
			break;
		}
		e2 = err; 
 80082e2:	200a      	movs	r0, #10
 80082e4:	183b      	adds	r3, r7, r0
 80082e6:	2116      	movs	r1, #22
 80082e8:	187a      	adds	r2, r7, r1
 80082ea:	8812      	ldrh	r2, [r2, #0]
 80082ec:	801a      	strh	r2, [r3, #0]
		if (e2 > -dx) {
 80082ee:	183b      	adds	r3, r7, r0
 80082f0:	2200      	movs	r2, #0
 80082f2:	5e9a      	ldrsh	r2, [r3, r2]
 80082f4:	2312      	movs	r3, #18
 80082f6:	18fb      	adds	r3, r7, r3
 80082f8:	2000      	movs	r0, #0
 80082fa:	5e1b      	ldrsh	r3, [r3, r0]
 80082fc:	425b      	negs	r3, r3
 80082fe:	429a      	cmp	r2, r3
 8008300:	dd10      	ble.n	8008324 <SSD1306_DrawLine+0x2dc>
			err -= dy;
 8008302:	187b      	adds	r3, r7, r1
 8008304:	881a      	ldrh	r2, [r3, #0]
 8008306:	2310      	movs	r3, #16
 8008308:	18fb      	adds	r3, r7, r3
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	1ad3      	subs	r3, r2, r3
 800830e:	b29a      	uxth	r2, r3
 8008310:	187b      	adds	r3, r7, r1
 8008312:	801a      	strh	r2, [r3, #0]
			x0 += sx;
 8008314:	230e      	movs	r3, #14
 8008316:	18fb      	adds	r3, r7, r3
 8008318:	8819      	ldrh	r1, [r3, #0]
 800831a:	1dbb      	adds	r3, r7, #6
 800831c:	1dba      	adds	r2, r7, #6
 800831e:	8812      	ldrh	r2, [r2, #0]
 8008320:	188a      	adds	r2, r1, r2
 8008322:	801a      	strh	r2, [r3, #0]
		} 
		if (e2 < dy) {
 8008324:	230a      	movs	r3, #10
 8008326:	18fa      	adds	r2, r7, r3
 8008328:	2310      	movs	r3, #16
 800832a:	18fb      	adds	r3, r7, r3
 800832c:	2100      	movs	r1, #0
 800832e:	5e52      	ldrsh	r2, [r2, r1]
 8008330:	2100      	movs	r1, #0
 8008332:	5e5b      	ldrsh	r3, [r3, r1]
 8008334:	429a      	cmp	r2, r3
 8008336:	dabe      	bge.n	80082b6 <SSD1306_DrawLine+0x26e>
			err += dx;
 8008338:	2116      	movs	r1, #22
 800833a:	187b      	adds	r3, r7, r1
 800833c:	881a      	ldrh	r2, [r3, #0]
 800833e:	2312      	movs	r3, #18
 8008340:	18fb      	adds	r3, r7, r3
 8008342:	881b      	ldrh	r3, [r3, #0]
 8008344:	18d3      	adds	r3, r2, r3
 8008346:	b29a      	uxth	r2, r3
 8008348:	187b      	adds	r3, r7, r1
 800834a:	801a      	strh	r2, [r3, #0]
			y0 += sy;
 800834c:	230c      	movs	r3, #12
 800834e:	18fb      	adds	r3, r7, r3
 8008350:	8819      	ldrh	r1, [r3, #0]
 8008352:	1d3b      	adds	r3, r7, #4
 8008354:	1d3a      	adds	r2, r7, #4
 8008356:	8812      	ldrh	r2, [r2, #0]
 8008358:	188a      	adds	r2, r1, r2
 800835a:	801a      	strh	r2, [r3, #0]
		SSD1306_DrawPixel(x0, y0, c);
 800835c:	e7ab      	b.n	80082b6 <SSD1306_DrawLine+0x26e>
			break;
 800835e:	46c0      	nop			; (mov r8, r8)
		} 
	}
}
 8008360:	46bd      	mov	sp, r7
 8008362:	b006      	add	sp, #24
 8008364:	bdb0      	pop	{r4, r5, r7, pc}

08008366 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800836a:	2000      	movs	r0, #0
 800836c:	f7ff fd18 	bl	8007da0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8008370:	f7ff fcde 	bl	8007d30 <SSD1306_UpdateScreen>
}
 8008374:	46c0      	nop			; (mov r8, r8)
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
	...

0800837c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8008382:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <ssd1306_I2C_Init+0x24>)
 8008384:	607b      	str	r3, [r7, #4]
	while(p>0)
 8008386:	e002      	b.n	800838e <ssd1306_I2C_Init+0x12>
		p--;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	3b01      	subs	r3, #1
 800838c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1f9      	bne.n	8008388 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8008394:	46c0      	nop			; (mov r8, r8)
 8008396:	46c0      	nop			; (mov r8, r8)
 8008398:	46bd      	mov	sp, r7
 800839a:	b002      	add	sp, #8
 800839c:	bd80      	pop	{r7, pc}
 800839e:	46c0      	nop			; (mov r8, r8)
 80083a0:	0003d090 	.word	0x0003d090

080083a4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80083a4:	b5b0      	push	{r4, r5, r7, lr}
 80083a6:	b0c6      	sub	sp, #280	; 0x118
 80083a8:	af02      	add	r7, sp, #8
 80083aa:	0004      	movs	r4, r0
 80083ac:	0008      	movs	r0, r1
 80083ae:	603a      	str	r2, [r7, #0]
 80083b0:	0019      	movs	r1, r3
 80083b2:	4b2d      	ldr	r3, [pc, #180]	; (8008468 <ssd1306_I2C_WriteMulti+0xc4>)
 80083b4:	2588      	movs	r5, #136	; 0x88
 80083b6:	006d      	lsls	r5, r5, #1
 80083b8:	195b      	adds	r3, r3, r5
 80083ba:	19db      	adds	r3, r3, r7
 80083bc:	1c22      	adds	r2, r4, #0
 80083be:	701a      	strb	r2, [r3, #0]
 80083c0:	4b2a      	ldr	r3, [pc, #168]	; (800846c <ssd1306_I2C_WriteMulti+0xc8>)
 80083c2:	002c      	movs	r4, r5
 80083c4:	191b      	adds	r3, r3, r4
 80083c6:	19db      	adds	r3, r3, r7
 80083c8:	1c02      	adds	r2, r0, #0
 80083ca:	701a      	strb	r2, [r3, #0]
 80083cc:	4b28      	ldr	r3, [pc, #160]	; (8008470 <ssd1306_I2C_WriteMulti+0xcc>)
 80083ce:	0020      	movs	r0, r4
 80083d0:	181b      	adds	r3, r3, r0
 80083d2:	19db      	adds	r3, r3, r7
 80083d4:	1c0a      	adds	r2, r1, #0
 80083d6:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80083d8:	4b26      	ldr	r3, [pc, #152]	; (8008474 <ssd1306_I2C_WriteMulti+0xd0>)
 80083da:	181b      	adds	r3, r3, r0
 80083dc:	19db      	adds	r3, r3, r7
 80083de:	4a23      	ldr	r2, [pc, #140]	; (800846c <ssd1306_I2C_WriteMulti+0xc8>)
 80083e0:	1812      	adds	r2, r2, r0
 80083e2:	19d2      	adds	r2, r2, r7
 80083e4:	7812      	ldrb	r2, [r2, #0]
 80083e6:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80083e8:	2310      	movs	r3, #16
 80083ea:	33ff      	adds	r3, #255	; 0xff
 80083ec:	18fb      	adds	r3, r7, r3
 80083ee:	2200      	movs	r2, #0
 80083f0:	701a      	strb	r2, [r3, #0]
 80083f2:	e014      	b.n	800841e <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 80083f4:	2010      	movs	r0, #16
 80083f6:	30ff      	adds	r0, #255	; 0xff
 80083f8:	183b      	adds	r3, r7, r0
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	683a      	ldr	r2, [r7, #0]
 80083fe:	18d2      	adds	r2, r2, r3
 8008400:	183b      	adds	r3, r7, r0
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	3301      	adds	r3, #1
 8008406:	7811      	ldrb	r1, [r2, #0]
 8008408:	4a1a      	ldr	r2, [pc, #104]	; (8008474 <ssd1306_I2C_WriteMulti+0xd0>)
 800840a:	2488      	movs	r4, #136	; 0x88
 800840c:	0064      	lsls	r4, r4, #1
 800840e:	1912      	adds	r2, r2, r4
 8008410:	19d2      	adds	r2, r2, r7
 8008412:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8008414:	183b      	adds	r3, r7, r0
 8008416:	781a      	ldrb	r2, [r3, #0]
 8008418:	183b      	adds	r3, r7, r0
 800841a:	3201      	adds	r2, #1
 800841c:	701a      	strb	r2, [r3, #0]
 800841e:	2310      	movs	r3, #16
 8008420:	33ff      	adds	r3, #255	; 0xff
 8008422:	18fb      	adds	r3, r7, r3
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	b29b      	uxth	r3, r3
 8008428:	4a11      	ldr	r2, [pc, #68]	; (8008470 <ssd1306_I2C_WriteMulti+0xcc>)
 800842a:	2188      	movs	r1, #136	; 0x88
 800842c:	0049      	lsls	r1, r1, #1
 800842e:	1852      	adds	r2, r2, r1
 8008430:	19d2      	adds	r2, r2, r7
 8008432:	8812      	ldrh	r2, [r2, #0]
 8008434:	429a      	cmp	r2, r3
 8008436:	d8dd      	bhi.n	80083f4 <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8008438:	4b0b      	ldr	r3, [pc, #44]	; (8008468 <ssd1306_I2C_WriteMulti+0xc4>)
 800843a:	000a      	movs	r2, r1
 800843c:	189b      	adds	r3, r3, r2
 800843e:	19db      	adds	r3, r3, r7
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	b299      	uxth	r1, r3
 8008444:	4b0a      	ldr	r3, [pc, #40]	; (8008470 <ssd1306_I2C_WriteMulti+0xcc>)
 8008446:	189b      	adds	r3, r3, r2
 8008448:	19db      	adds	r3, r3, r7
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	3301      	adds	r3, #1
 800844e:	b29b      	uxth	r3, r3
 8008450:	220c      	movs	r2, #12
 8008452:	18ba      	adds	r2, r7, r2
 8008454:	4808      	ldr	r0, [pc, #32]	; (8008478 <ssd1306_I2C_WriteMulti+0xd4>)
 8008456:	240a      	movs	r4, #10
 8008458:	9400      	str	r4, [sp, #0]
 800845a:	f003 fa5b 	bl	800b914 <HAL_I2C_Master_Transmit>
}
 800845e:	46c0      	nop			; (mov r8, r8)
 8008460:	46bd      	mov	sp, r7
 8008462:	b044      	add	sp, #272	; 0x110
 8008464:	bdb0      	pop	{r4, r5, r7, pc}
 8008466:	46c0      	nop			; (mov r8, r8)
 8008468:	fffffef7 	.word	0xfffffef7
 800846c:	fffffef6 	.word	0xfffffef6
 8008470:	fffffef4 	.word	0xfffffef4
 8008474:	fffffefc 	.word	0xfffffefc
 8008478:	20000454 	.word	0x20000454

0800847c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800847c:	b590      	push	{r4, r7, lr}
 800847e:	b087      	sub	sp, #28
 8008480:	af02      	add	r7, sp, #8
 8008482:	0004      	movs	r4, r0
 8008484:	0008      	movs	r0, r1
 8008486:	0011      	movs	r1, r2
 8008488:	1dfb      	adds	r3, r7, #7
 800848a:	1c22      	adds	r2, r4, #0
 800848c:	701a      	strb	r2, [r3, #0]
 800848e:	1dbb      	adds	r3, r7, #6
 8008490:	1c02      	adds	r2, r0, #0
 8008492:	701a      	strb	r2, [r3, #0]
 8008494:	1d7b      	adds	r3, r7, #5
 8008496:	1c0a      	adds	r2, r1, #0
 8008498:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 800849a:	200c      	movs	r0, #12
 800849c:	183b      	adds	r3, r7, r0
 800849e:	1dba      	adds	r2, r7, #6
 80084a0:	7812      	ldrb	r2, [r2, #0]
 80084a2:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 80084a4:	183b      	adds	r3, r7, r0
 80084a6:	1d7a      	adds	r2, r7, #5
 80084a8:	7812      	ldrb	r2, [r2, #0]
 80084aa:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 80084ac:	1dfb      	adds	r3, r7, #7
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	b299      	uxth	r1, r3
 80084b2:	183a      	adds	r2, r7, r0
 80084b4:	4804      	ldr	r0, [pc, #16]	; (80084c8 <ssd1306_I2C_Write+0x4c>)
 80084b6:	230a      	movs	r3, #10
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	2302      	movs	r3, #2
 80084bc:	f003 fa2a 	bl	800b914 <HAL_I2C_Master_Transmit>
}
 80084c0:	46c0      	nop			; (mov r8, r8)
 80084c2:	46bd      	mov	sp, r7
 80084c4:	b005      	add	sp, #20
 80084c6:	bd90      	pop	{r4, r7, pc}
 80084c8:	20000454 	.word	0x20000454

080084cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b082      	sub	sp, #8
 80084d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80084d2:	4b11      	ldr	r3, [pc, #68]	; (8008518 <HAL_MspInit+0x4c>)
 80084d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084d6:	4b10      	ldr	r3, [pc, #64]	; (8008518 <HAL_MspInit+0x4c>)
 80084d8:	2101      	movs	r1, #1
 80084da:	430a      	orrs	r2, r1
 80084dc:	641a      	str	r2, [r3, #64]	; 0x40
 80084de:	4b0e      	ldr	r3, [pc, #56]	; (8008518 <HAL_MspInit+0x4c>)
 80084e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e2:	2201      	movs	r2, #1
 80084e4:	4013      	ands	r3, r2
 80084e6:	607b      	str	r3, [r7, #4]
 80084e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80084ea:	4b0b      	ldr	r3, [pc, #44]	; (8008518 <HAL_MspInit+0x4c>)
 80084ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084ee:	4b0a      	ldr	r3, [pc, #40]	; (8008518 <HAL_MspInit+0x4c>)
 80084f0:	2180      	movs	r1, #128	; 0x80
 80084f2:	0549      	lsls	r1, r1, #21
 80084f4:	430a      	orrs	r2, r1
 80084f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80084f8:	4b07      	ldr	r3, [pc, #28]	; (8008518 <HAL_MspInit+0x4c>)
 80084fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084fc:	2380      	movs	r3, #128	; 0x80
 80084fe:	055b      	lsls	r3, r3, #21
 8008500:	4013      	ands	r3, r2
 8008502:	603b      	str	r3, [r7, #0]
 8008504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8008506:	23c0      	movs	r3, #192	; 0xc0
 8008508:	00db      	lsls	r3, r3, #3
 800850a:	0018      	movs	r0, r3
 800850c:	f001 fa30 	bl	8009970 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008510:	46c0      	nop			; (mov r8, r8)
 8008512:	46bd      	mov	sp, r7
 8008514:	b002      	add	sp, #8
 8008516:	bd80      	pop	{r7, pc}
 8008518:	40021000 	.word	0x40021000

0800851c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800851c:	b590      	push	{r4, r7, lr}
 800851e:	b08b      	sub	sp, #44	; 0x2c
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008524:	2414      	movs	r4, #20
 8008526:	193b      	adds	r3, r7, r4
 8008528:	0018      	movs	r0, r3
 800852a:	2314      	movs	r3, #20
 800852c:	001a      	movs	r2, r3
 800852e:	2100      	movs	r1, #0
 8008530:	f008 fc7d 	bl	8010e2e <memset>
  if(hadc->Instance==ADC1)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a2c      	ldr	r2, [pc, #176]	; (80085ec <HAL_ADC_MspInit+0xd0>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d152      	bne.n	80085e4 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800853e:	4b2c      	ldr	r3, [pc, #176]	; (80085f0 <HAL_ADC_MspInit+0xd4>)
 8008540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008542:	4b2b      	ldr	r3, [pc, #172]	; (80085f0 <HAL_ADC_MspInit+0xd4>)
 8008544:	2180      	movs	r1, #128	; 0x80
 8008546:	0349      	lsls	r1, r1, #13
 8008548:	430a      	orrs	r2, r1
 800854a:	641a      	str	r2, [r3, #64]	; 0x40
 800854c:	4b28      	ldr	r3, [pc, #160]	; (80085f0 <HAL_ADC_MspInit+0xd4>)
 800854e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008550:	2380      	movs	r3, #128	; 0x80
 8008552:	035b      	lsls	r3, r3, #13
 8008554:	4013      	ands	r3, r2
 8008556:	613b      	str	r3, [r7, #16]
 8008558:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800855a:	4b25      	ldr	r3, [pc, #148]	; (80085f0 <HAL_ADC_MspInit+0xd4>)
 800855c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800855e:	4b24      	ldr	r3, [pc, #144]	; (80085f0 <HAL_ADC_MspInit+0xd4>)
 8008560:	2101      	movs	r1, #1
 8008562:	430a      	orrs	r2, r1
 8008564:	635a      	str	r2, [r3, #52]	; 0x34
 8008566:	4b22      	ldr	r3, [pc, #136]	; (80085f0 <HAL_ADC_MspInit+0xd4>)
 8008568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800856a:	2201      	movs	r2, #1
 800856c:	4013      	ands	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8008572:	193b      	adds	r3, r7, r4
 8008574:	22b8      	movs	r2, #184	; 0xb8
 8008576:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008578:	193b      	adds	r3, r7, r4
 800857a:	2203      	movs	r2, #3
 800857c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800857e:	193b      	adds	r3, r7, r4
 8008580:	2200      	movs	r2, #0
 8008582:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008584:	193a      	adds	r2, r7, r4
 8008586:	23a0      	movs	r3, #160	; 0xa0
 8008588:	05db      	lsls	r3, r3, #23
 800858a:	0011      	movs	r1, r2
 800858c:	0018      	movs	r0, r3
 800858e:	f002 ff8d 	bl	800b4ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8008592:	4b18      	ldr	r3, [pc, #96]	; (80085f4 <HAL_ADC_MspInit+0xd8>)
 8008594:	4a18      	ldr	r2, [pc, #96]	; (80085f8 <HAL_ADC_MspInit+0xdc>)
 8008596:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8008598:	4b16      	ldr	r3, [pc, #88]	; (80085f4 <HAL_ADC_MspInit+0xd8>)
 800859a:	2205      	movs	r2, #5
 800859c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800859e:	4b15      	ldr	r3, [pc, #84]	; (80085f4 <HAL_ADC_MspInit+0xd8>)
 80085a0:	2200      	movs	r2, #0
 80085a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80085a4:	4b13      	ldr	r3, [pc, #76]	; (80085f4 <HAL_ADC_MspInit+0xd8>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80085aa:	4b12      	ldr	r3, [pc, #72]	; (80085f4 <HAL_ADC_MspInit+0xd8>)
 80085ac:	2280      	movs	r2, #128	; 0x80
 80085ae:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80085b0:	4b10      	ldr	r3, [pc, #64]	; (80085f4 <HAL_ADC_MspInit+0xd8>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80085b6:	4b0f      	ldr	r3, [pc, #60]	; (80085f4 <HAL_ADC_MspInit+0xd8>)
 80085b8:	2200      	movs	r2, #0
 80085ba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80085bc:	4b0d      	ldr	r3, [pc, #52]	; (80085f4 <HAL_ADC_MspInit+0xd8>)
 80085be:	2220      	movs	r2, #32
 80085c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80085c2:	4b0c      	ldr	r3, [pc, #48]	; (80085f4 <HAL_ADC_MspInit+0xd8>)
 80085c4:	2200      	movs	r2, #0
 80085c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80085c8:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <HAL_ADC_MspInit+0xd8>)
 80085ca:	0018      	movs	r0, r3
 80085cc:	f002 fc50 	bl	800ae70 <HAL_DMA_Init>
 80085d0:	1e03      	subs	r3, r0, #0
 80085d2:	d001      	beq.n	80085d8 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 80085d4:	f7fe fd14 	bl	8007000 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	4a06      	ldr	r2, [pc, #24]	; (80085f4 <HAL_ADC_MspInit+0xd8>)
 80085dc:	651a      	str	r2, [r3, #80]	; 0x50
 80085de:	4b05      	ldr	r3, [pc, #20]	; (80085f4 <HAL_ADC_MspInit+0xd8>)
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80085e4:	46c0      	nop			; (mov r8, r8)
 80085e6:	46bd      	mov	sp, r7
 80085e8:	b00b      	add	sp, #44	; 0x2c
 80085ea:	bd90      	pop	{r4, r7, pc}
 80085ec:	40012400 	.word	0x40012400
 80085f0:	40021000 	.word	0x40021000
 80085f4:	200003d4 	.word	0x200003d4
 80085f8:	40020008 	.word	0x40020008

080085fc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a0a      	ldr	r2, [pc, #40]	; (8008634 <HAL_CRC_MspInit+0x38>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d10d      	bne.n	800862a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800860e:	4b0a      	ldr	r3, [pc, #40]	; (8008638 <HAL_CRC_MspInit+0x3c>)
 8008610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008612:	4b09      	ldr	r3, [pc, #36]	; (8008638 <HAL_CRC_MspInit+0x3c>)
 8008614:	2180      	movs	r1, #128	; 0x80
 8008616:	0149      	lsls	r1, r1, #5
 8008618:	430a      	orrs	r2, r1
 800861a:	639a      	str	r2, [r3, #56]	; 0x38
 800861c:	4b06      	ldr	r3, [pc, #24]	; (8008638 <HAL_CRC_MspInit+0x3c>)
 800861e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008620:	2380      	movs	r3, #128	; 0x80
 8008622:	015b      	lsls	r3, r3, #5
 8008624:	4013      	ands	r3, r2
 8008626:	60fb      	str	r3, [r7, #12]
 8008628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800862a:	46c0      	nop			; (mov r8, r8)
 800862c:	46bd      	mov	sp, r7
 800862e:	b004      	add	sp, #16
 8008630:	bd80      	pop	{r7, pc}
 8008632:	46c0      	nop			; (mov r8, r8)
 8008634:	40023000 	.word	0x40023000
 8008638:	40021000 	.word	0x40021000

0800863c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800863c:	b590      	push	{r4, r7, lr}
 800863e:	b08b      	sub	sp, #44	; 0x2c
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008644:	2414      	movs	r4, #20
 8008646:	193b      	adds	r3, r7, r4
 8008648:	0018      	movs	r0, r3
 800864a:	2314      	movs	r3, #20
 800864c:	001a      	movs	r2, r3
 800864e:	2100      	movs	r1, #0
 8008650:	f008 fbed 	bl	8010e2e <memset>
  if(hi2c->Instance==I2C2)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a1c      	ldr	r2, [pc, #112]	; (80086cc <HAL_I2C_MspInit+0x90>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d131      	bne.n	80086c2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800865e:	4b1c      	ldr	r3, [pc, #112]	; (80086d0 <HAL_I2C_MspInit+0x94>)
 8008660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008662:	4b1b      	ldr	r3, [pc, #108]	; (80086d0 <HAL_I2C_MspInit+0x94>)
 8008664:	2101      	movs	r1, #1
 8008666:	430a      	orrs	r2, r1
 8008668:	635a      	str	r2, [r3, #52]	; 0x34
 800866a:	4b19      	ldr	r3, [pc, #100]	; (80086d0 <HAL_I2C_MspInit+0x94>)
 800866c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800866e:	2201      	movs	r2, #1
 8008670:	4013      	ands	r3, r2
 8008672:	613b      	str	r3, [r7, #16]
 8008674:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008676:	193b      	adds	r3, r7, r4
 8008678:	22c0      	movs	r2, #192	; 0xc0
 800867a:	0152      	lsls	r2, r2, #5
 800867c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800867e:	0021      	movs	r1, r4
 8008680:	187b      	adds	r3, r7, r1
 8008682:	2212      	movs	r2, #18
 8008684:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008686:	187b      	adds	r3, r7, r1
 8008688:	2201      	movs	r2, #1
 800868a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800868c:	187b      	adds	r3, r7, r1
 800868e:	2200      	movs	r2, #0
 8008690:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8008692:	187b      	adds	r3, r7, r1
 8008694:	2206      	movs	r2, #6
 8008696:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008698:	187a      	adds	r2, r7, r1
 800869a:	23a0      	movs	r3, #160	; 0xa0
 800869c:	05db      	lsls	r3, r3, #23
 800869e:	0011      	movs	r1, r2
 80086a0:	0018      	movs	r0, r3
 80086a2:	f002 ff03 	bl	800b4ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80086a6:	4b0a      	ldr	r3, [pc, #40]	; (80086d0 <HAL_I2C_MspInit+0x94>)
 80086a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086aa:	4b09      	ldr	r3, [pc, #36]	; (80086d0 <HAL_I2C_MspInit+0x94>)
 80086ac:	2180      	movs	r1, #128	; 0x80
 80086ae:	03c9      	lsls	r1, r1, #15
 80086b0:	430a      	orrs	r2, r1
 80086b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80086b4:	4b06      	ldr	r3, [pc, #24]	; (80086d0 <HAL_I2C_MspInit+0x94>)
 80086b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086b8:	2380      	movs	r3, #128	; 0x80
 80086ba:	03db      	lsls	r3, r3, #15
 80086bc:	4013      	ands	r3, r2
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80086c2:	46c0      	nop			; (mov r8, r8)
 80086c4:	46bd      	mov	sp, r7
 80086c6:	b00b      	add	sp, #44	; 0x2c
 80086c8:	bd90      	pop	{r4, r7, pc}
 80086ca:	46c0      	nop			; (mov r8, r8)
 80086cc:	40005800 	.word	0x40005800
 80086d0:	40021000 	.word	0x40021000

080086d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80086d4:	b590      	push	{r4, r7, lr}
 80086d6:	b08b      	sub	sp, #44	; 0x2c
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086dc:	2414      	movs	r4, #20
 80086de:	193b      	adds	r3, r7, r4
 80086e0:	0018      	movs	r0, r3
 80086e2:	2314      	movs	r3, #20
 80086e4:	001a      	movs	r2, r3
 80086e6:	2100      	movs	r1, #0
 80086e8:	f008 fba1 	bl	8010e2e <memset>
  if(hspi->Instance==SPI1)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a1b      	ldr	r2, [pc, #108]	; (8008760 <HAL_SPI_MspInit+0x8c>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d130      	bne.n	8008758 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80086f6:	4b1b      	ldr	r3, [pc, #108]	; (8008764 <HAL_SPI_MspInit+0x90>)
 80086f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086fa:	4b1a      	ldr	r3, [pc, #104]	; (8008764 <HAL_SPI_MspInit+0x90>)
 80086fc:	2180      	movs	r1, #128	; 0x80
 80086fe:	0149      	lsls	r1, r1, #5
 8008700:	430a      	orrs	r2, r1
 8008702:	641a      	str	r2, [r3, #64]	; 0x40
 8008704:	4b17      	ldr	r3, [pc, #92]	; (8008764 <HAL_SPI_MspInit+0x90>)
 8008706:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008708:	2380      	movs	r3, #128	; 0x80
 800870a:	015b      	lsls	r3, r3, #5
 800870c:	4013      	ands	r3, r2
 800870e:	613b      	str	r3, [r7, #16]
 8008710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008712:	4b14      	ldr	r3, [pc, #80]	; (8008764 <HAL_SPI_MspInit+0x90>)
 8008714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008716:	4b13      	ldr	r3, [pc, #76]	; (8008764 <HAL_SPI_MspInit+0x90>)
 8008718:	2101      	movs	r1, #1
 800871a:	430a      	orrs	r2, r1
 800871c:	635a      	str	r2, [r3, #52]	; 0x34
 800871e:	4b11      	ldr	r3, [pc, #68]	; (8008764 <HAL_SPI_MspInit+0x90>)
 8008720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008722:	2201      	movs	r2, #1
 8008724:	4013      	ands	r3, r2
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 800872a:	0021      	movs	r1, r4
 800872c:	187b      	adds	r3, r7, r1
 800872e:	2246      	movs	r2, #70	; 0x46
 8008730:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008732:	187b      	adds	r3, r7, r1
 8008734:	2202      	movs	r2, #2
 8008736:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008738:	187b      	adds	r3, r7, r1
 800873a:	2200      	movs	r2, #0
 800873c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800873e:	187b      	adds	r3, r7, r1
 8008740:	2200      	movs	r2, #0
 8008742:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8008744:	187b      	adds	r3, r7, r1
 8008746:	2200      	movs	r2, #0
 8008748:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800874a:	187a      	adds	r2, r7, r1
 800874c:	23a0      	movs	r3, #160	; 0xa0
 800874e:	05db      	lsls	r3, r3, #23
 8008750:	0011      	movs	r1, r2
 8008752:	0018      	movs	r0, r3
 8008754:	f002 feaa 	bl	800b4ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008758:	46c0      	nop			; (mov r8, r8)
 800875a:	46bd      	mov	sp, r7
 800875c:	b00b      	add	sp, #44	; 0x2c
 800875e:	bd90      	pop	{r4, r7, pc}
 8008760:	40013000 	.word	0x40013000
 8008764:	40021000 	.word	0x40021000

08008768 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a31      	ldr	r2, [pc, #196]	; (800883c <HAL_TIM_Base_MspInit+0xd4>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d10c      	bne.n	8008794 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800877a:	4b31      	ldr	r3, [pc, #196]	; (8008840 <HAL_TIM_Base_MspInit+0xd8>)
 800877c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800877e:	4b30      	ldr	r3, [pc, #192]	; (8008840 <HAL_TIM_Base_MspInit+0xd8>)
 8008780:	2102      	movs	r1, #2
 8008782:	430a      	orrs	r2, r1
 8008784:	63da      	str	r2, [r3, #60]	; 0x3c
 8008786:	4b2e      	ldr	r3, [pc, #184]	; (8008840 <HAL_TIM_Base_MspInit+0xd8>)
 8008788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800878a:	2202      	movs	r2, #2
 800878c:	4013      	ands	r3, r2
 800878e:	617b      	str	r3, [r7, #20]
 8008790:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8008792:	e04e      	b.n	8008832 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM6)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a2a      	ldr	r2, [pc, #168]	; (8008844 <HAL_TIM_Base_MspInit+0xdc>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d114      	bne.n	80087c8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800879e:	4b28      	ldr	r3, [pc, #160]	; (8008840 <HAL_TIM_Base_MspInit+0xd8>)
 80087a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087a2:	4b27      	ldr	r3, [pc, #156]	; (8008840 <HAL_TIM_Base_MspInit+0xd8>)
 80087a4:	2110      	movs	r1, #16
 80087a6:	430a      	orrs	r2, r1
 80087a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80087aa:	4b25      	ldr	r3, [pc, #148]	; (8008840 <HAL_TIM_Base_MspInit+0xd8>)
 80087ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ae:	2210      	movs	r2, #16
 80087b0:	4013      	ands	r3, r2
 80087b2:	613b      	str	r3, [r7, #16]
 80087b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80087b6:	2200      	movs	r2, #0
 80087b8:	2100      	movs	r1, #0
 80087ba:	2011      	movs	r0, #17
 80087bc:	f002 f93c 	bl	800aa38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80087c0:	2011      	movs	r0, #17
 80087c2:	f002 f94e 	bl	800aa62 <HAL_NVIC_EnableIRQ>
}
 80087c6:	e034      	b.n	8008832 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM7)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a1e      	ldr	r2, [pc, #120]	; (8008848 <HAL_TIM_Base_MspInit+0xe0>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d114      	bne.n	80087fc <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80087d2:	4b1b      	ldr	r3, [pc, #108]	; (8008840 <HAL_TIM_Base_MspInit+0xd8>)
 80087d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087d6:	4b1a      	ldr	r3, [pc, #104]	; (8008840 <HAL_TIM_Base_MspInit+0xd8>)
 80087d8:	2120      	movs	r1, #32
 80087da:	430a      	orrs	r2, r1
 80087dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80087de:	4b18      	ldr	r3, [pc, #96]	; (8008840 <HAL_TIM_Base_MspInit+0xd8>)
 80087e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087e2:	2220      	movs	r2, #32
 80087e4:	4013      	ands	r3, r2
 80087e6:	60fb      	str	r3, [r7, #12]
 80087e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80087ea:	2200      	movs	r2, #0
 80087ec:	2101      	movs	r1, #1
 80087ee:	2012      	movs	r0, #18
 80087f0:	f002 f922 	bl	800aa38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80087f4:	2012      	movs	r0, #18
 80087f6:	f002 f934 	bl	800aa62 <HAL_NVIC_EnableIRQ>
}
 80087fa:	e01a      	b.n	8008832 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM14)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a12      	ldr	r2, [pc, #72]	; (800884c <HAL_TIM_Base_MspInit+0xe4>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d115      	bne.n	8008832 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8008806:	4b0e      	ldr	r3, [pc, #56]	; (8008840 <HAL_TIM_Base_MspInit+0xd8>)
 8008808:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800880a:	4b0d      	ldr	r3, [pc, #52]	; (8008840 <HAL_TIM_Base_MspInit+0xd8>)
 800880c:	2180      	movs	r1, #128	; 0x80
 800880e:	0209      	lsls	r1, r1, #8
 8008810:	430a      	orrs	r2, r1
 8008812:	641a      	str	r2, [r3, #64]	; 0x40
 8008814:	4b0a      	ldr	r3, [pc, #40]	; (8008840 <HAL_TIM_Base_MspInit+0xd8>)
 8008816:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008818:	2380      	movs	r3, #128	; 0x80
 800881a:	021b      	lsls	r3, r3, #8
 800881c:	4013      	ands	r3, r2
 800881e:	60bb      	str	r3, [r7, #8]
 8008820:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 2, 0);
 8008822:	2200      	movs	r2, #0
 8008824:	2102      	movs	r1, #2
 8008826:	2013      	movs	r0, #19
 8008828:	f002 f906 	bl	800aa38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 800882c:	2013      	movs	r0, #19
 800882e:	f002 f918 	bl	800aa62 <HAL_NVIC_EnableIRQ>
}
 8008832:	46c0      	nop			; (mov r8, r8)
 8008834:	46bd      	mov	sp, r7
 8008836:	b006      	add	sp, #24
 8008838:	bd80      	pop	{r7, pc}
 800883a:	46c0      	nop			; (mov r8, r8)
 800883c:	40000400 	.word	0x40000400
 8008840:	40021000 	.word	0x40021000
 8008844:	40001000 	.word	0x40001000
 8008848:	40001400 	.word	0x40001400
 800884c:	40002000 	.word	0x40002000

08008850 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008850:	b590      	push	{r4, r7, lr}
 8008852:	b08b      	sub	sp, #44	; 0x2c
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008858:	2414      	movs	r4, #20
 800885a:	193b      	adds	r3, r7, r4
 800885c:	0018      	movs	r0, r3
 800885e:	2314      	movs	r3, #20
 8008860:	001a      	movs	r2, r3
 8008862:	2100      	movs	r1, #0
 8008864:	f008 fae3 	bl	8010e2e <memset>
  if(htim->Instance==TIM3)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a24      	ldr	r2, [pc, #144]	; (8008900 <HAL_TIM_MspPostInit+0xb0>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d142      	bne.n	80088f8 <HAL_TIM_MspPostInit+0xa8>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008872:	4b24      	ldr	r3, [pc, #144]	; (8008904 <HAL_TIM_MspPostInit+0xb4>)
 8008874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008876:	4b23      	ldr	r3, [pc, #140]	; (8008904 <HAL_TIM_MspPostInit+0xb4>)
 8008878:	2102      	movs	r1, #2
 800887a:	430a      	orrs	r2, r1
 800887c:	635a      	str	r2, [r3, #52]	; 0x34
 800887e:	4b21      	ldr	r3, [pc, #132]	; (8008904 <HAL_TIM_MspPostInit+0xb4>)
 8008880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008882:	2202      	movs	r2, #2
 8008884:	4013      	ands	r3, r2
 8008886:	613b      	str	r3, [r7, #16]
 8008888:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800888a:	4b1e      	ldr	r3, [pc, #120]	; (8008904 <HAL_TIM_MspPostInit+0xb4>)
 800888c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800888e:	4b1d      	ldr	r3, [pc, #116]	; (8008904 <HAL_TIM_MspPostInit+0xb4>)
 8008890:	2104      	movs	r1, #4
 8008892:	430a      	orrs	r2, r1
 8008894:	635a      	str	r2, [r3, #52]	; 0x34
 8008896:	4b1b      	ldr	r3, [pc, #108]	; (8008904 <HAL_TIM_MspPostInit+0xb4>)
 8008898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800889a:	2204      	movs	r2, #4
 800889c:	4013      	ands	r3, r2
 800889e:	60fb      	str	r3, [r7, #12]
 80088a0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80088a2:	193b      	adds	r3, r7, r4
 80088a4:	2222      	movs	r2, #34	; 0x22
 80088a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088a8:	193b      	adds	r3, r7, r4
 80088aa:	2202      	movs	r2, #2
 80088ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ae:	193b      	adds	r3, r7, r4
 80088b0:	2200      	movs	r2, #0
 80088b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088b4:	193b      	adds	r3, r7, r4
 80088b6:	2200      	movs	r2, #0
 80088b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80088ba:	193b      	adds	r3, r7, r4
 80088bc:	2201      	movs	r2, #1
 80088be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088c0:	193b      	adds	r3, r7, r4
 80088c2:	4a11      	ldr	r2, [pc, #68]	; (8008908 <HAL_TIM_MspPostInit+0xb8>)
 80088c4:	0019      	movs	r1, r3
 80088c6:	0010      	movs	r0, r2
 80088c8:	f002 fdf0 	bl	800b4ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80088cc:	0021      	movs	r1, r4
 80088ce:	187b      	adds	r3, r7, r1
 80088d0:	2240      	movs	r2, #64	; 0x40
 80088d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088d4:	187b      	adds	r3, r7, r1
 80088d6:	2202      	movs	r2, #2
 80088d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088da:	187b      	adds	r3, r7, r1
 80088dc:	2200      	movs	r2, #0
 80088de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088e0:	187b      	adds	r3, r7, r1
 80088e2:	2200      	movs	r2, #0
 80088e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80088e6:	187b      	adds	r3, r7, r1
 80088e8:	2201      	movs	r2, #1
 80088ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088ec:	187b      	adds	r3, r7, r1
 80088ee:	4a07      	ldr	r2, [pc, #28]	; (800890c <HAL_TIM_MspPostInit+0xbc>)
 80088f0:	0019      	movs	r1, r3
 80088f2:	0010      	movs	r0, r2
 80088f4:	f002 fdda 	bl	800b4ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80088f8:	46c0      	nop			; (mov r8, r8)
 80088fa:	46bd      	mov	sp, r7
 80088fc:	b00b      	add	sp, #44	; 0x2c
 80088fe:	bd90      	pop	{r4, r7, pc}
 8008900:	40000400 	.word	0x40000400
 8008904:	40021000 	.word	0x40021000
 8008908:	50000400 	.word	0x50000400
 800890c:	50000800 	.word	0x50000800

08008910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008910:	b590      	push	{r4, r7, lr}
 8008912:	b08b      	sub	sp, #44	; 0x2c
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008918:	2414      	movs	r4, #20
 800891a:	193b      	adds	r3, r7, r4
 800891c:	0018      	movs	r0, r3
 800891e:	2314      	movs	r3, #20
 8008920:	001a      	movs	r2, r3
 8008922:	2100      	movs	r1, #0
 8008924:	f008 fa83 	bl	8010e2e <memset>
  if(huart->Instance==USART1)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a20      	ldr	r2, [pc, #128]	; (80089b0 <HAL_UART_MspInit+0xa0>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d139      	bne.n	80089a6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008932:	4b20      	ldr	r3, [pc, #128]	; (80089b4 <HAL_UART_MspInit+0xa4>)
 8008934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008936:	4b1f      	ldr	r3, [pc, #124]	; (80089b4 <HAL_UART_MspInit+0xa4>)
 8008938:	2180      	movs	r1, #128	; 0x80
 800893a:	01c9      	lsls	r1, r1, #7
 800893c:	430a      	orrs	r2, r1
 800893e:	641a      	str	r2, [r3, #64]	; 0x40
 8008940:	4b1c      	ldr	r3, [pc, #112]	; (80089b4 <HAL_UART_MspInit+0xa4>)
 8008942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008944:	2380      	movs	r3, #128	; 0x80
 8008946:	01db      	lsls	r3, r3, #7
 8008948:	4013      	ands	r3, r2
 800894a:	613b      	str	r3, [r7, #16]
 800894c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800894e:	4b19      	ldr	r3, [pc, #100]	; (80089b4 <HAL_UART_MspInit+0xa4>)
 8008950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008952:	4b18      	ldr	r3, [pc, #96]	; (80089b4 <HAL_UART_MspInit+0xa4>)
 8008954:	2101      	movs	r1, #1
 8008956:	430a      	orrs	r2, r1
 8008958:	635a      	str	r2, [r3, #52]	; 0x34
 800895a:	4b16      	ldr	r3, [pc, #88]	; (80089b4 <HAL_UART_MspInit+0xa4>)
 800895c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895e:	2201      	movs	r2, #1
 8008960:	4013      	ands	r3, r2
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008966:	193b      	adds	r3, r7, r4
 8008968:	22c0      	movs	r2, #192	; 0xc0
 800896a:	00d2      	lsls	r2, r2, #3
 800896c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800896e:	0021      	movs	r1, r4
 8008970:	187b      	adds	r3, r7, r1
 8008972:	2202      	movs	r2, #2
 8008974:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008976:	187b      	adds	r3, r7, r1
 8008978:	2200      	movs	r2, #0
 800897a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800897c:	187b      	adds	r3, r7, r1
 800897e:	2200      	movs	r2, #0
 8008980:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8008982:	187b      	adds	r3, r7, r1
 8008984:	2201      	movs	r2, #1
 8008986:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008988:	187a      	adds	r2, r7, r1
 800898a:	23a0      	movs	r3, #160	; 0xa0
 800898c:	05db      	lsls	r3, r3, #23
 800898e:	0011      	movs	r1, r2
 8008990:	0018      	movs	r0, r3
 8008992:	f002 fd8b 	bl	800b4ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8008996:	2200      	movs	r2, #0
 8008998:	2103      	movs	r1, #3
 800899a:	201b      	movs	r0, #27
 800899c:	f002 f84c 	bl	800aa38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80089a0:	201b      	movs	r0, #27
 80089a2:	f002 f85e 	bl	800aa62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80089a6:	46c0      	nop			; (mov r8, r8)
 80089a8:	46bd      	mov	sp, r7
 80089aa:	b00b      	add	sp, #44	; 0x2c
 80089ac:	bd90      	pop	{r4, r7, pc}
 80089ae:	46c0      	nop			; (mov r8, r8)
 80089b0:	40013800 	.word	0x40013800
 80089b4:	40021000 	.word	0x40021000

080089b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80089bc:	e7fe      	b.n	80089bc <NMI_Handler+0x4>

080089be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80089be:	b580      	push	{r7, lr}
 80089c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80089c2:	e7fe      	b.n	80089c2 <HardFault_Handler+0x4>

080089c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80089c8:	46c0      	nop			; (mov r8, r8)
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80089d2:	46c0      	nop			; (mov r8, r8)
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80089dc:	f000 ff88 	bl	80098f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80089e0:	46c0      	nop			; (mov r8, r8)
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
	...

080089e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80089ec:	4b03      	ldr	r3, [pc, #12]	; (80089fc <DMA1_Channel1_IRQHandler+0x14>)
 80089ee:	0018      	movs	r0, r3
 80089f0:	f002 fc1a 	bl	800b228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80089f4:	46c0      	nop			; (mov r8, r8)
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	46c0      	nop			; (mov r8, r8)
 80089fc:	200003d4 	.word	0x200003d4

08008a00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	af00      	add	r7, sp, #0
	return 1;
 8008a04:	2301      	movs	r3, #1
}
 8008a06:	0018      	movs	r0, r3
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <_kill>:

int _kill(int pid, int sig)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b082      	sub	sp, #8
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
 8008a14:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8008a16:	f008 f9d7 	bl	8010dc8 <__errno>
 8008a1a:	0003      	movs	r3, r0
 8008a1c:	2216      	movs	r2, #22
 8008a1e:	601a      	str	r2, [r3, #0]
	return -1;
 8008a20:	2301      	movs	r3, #1
 8008a22:	425b      	negs	r3, r3
}
 8008a24:	0018      	movs	r0, r3
 8008a26:	46bd      	mov	sp, r7
 8008a28:	b002      	add	sp, #8
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <_exit>:

void _exit (int status)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8008a34:	2301      	movs	r3, #1
 8008a36:	425a      	negs	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	0011      	movs	r1, r2
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	f7ff ffe5 	bl	8008a0c <_kill>
	while (1) {}		/* Make sure we hang here */
 8008a42:	e7fe      	b.n	8008a42 <_exit+0x16>

08008a44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b086      	sub	sp, #24
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	60f8      	str	r0, [r7, #12]
 8008a4c:	60b9      	str	r1, [r7, #8]
 8008a4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a50:	2300      	movs	r3, #0
 8008a52:	617b      	str	r3, [r7, #20]
 8008a54:	e00a      	b.n	8008a6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8008a56:	e000      	b.n	8008a5a <_read+0x16>
 8008a58:	bf00      	nop
 8008a5a:	0001      	movs	r1, r0
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	1c5a      	adds	r2, r3, #1
 8008a60:	60ba      	str	r2, [r7, #8]
 8008a62:	b2ca      	uxtb	r2, r1
 8008a64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	617b      	str	r3, [r7, #20]
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	dbf0      	blt.n	8008a56 <_read+0x12>
	}

return len;
 8008a74:	687b      	ldr	r3, [r7, #4]
}
 8008a76:	0018      	movs	r0, r3
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	b006      	add	sp, #24
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b086      	sub	sp, #24
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	60f8      	str	r0, [r7, #12]
 8008a86:	60b9      	str	r1, [r7, #8]
 8008a88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	617b      	str	r3, [r7, #20]
 8008a8e:	e009      	b.n	8008aa4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	60ba      	str	r2, [r7, #8]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	0018      	movs	r0, r3
 8008a9a:	e000      	b.n	8008a9e <_write+0x20>
 8008a9c:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	617b      	str	r3, [r7, #20]
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	dbf1      	blt.n	8008a90 <_write+0x12>
	}
	return len;
 8008aac:	687b      	ldr	r3, [r7, #4]
}
 8008aae:	0018      	movs	r0, r3
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	b006      	add	sp, #24
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <_close>:

int _close(int file)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b082      	sub	sp, #8
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
	return -1;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	425b      	negs	r3, r3
}
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	b002      	add	sp, #8
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b082      	sub	sp, #8
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2280      	movs	r2, #128	; 0x80
 8008ad8:	0192      	lsls	r2, r2, #6
 8008ada:	605a      	str	r2, [r3, #4]
	return 0;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	0018      	movs	r0, r3
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	b002      	add	sp, #8
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <_isatty>:

int _isatty(int file)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b082      	sub	sp, #8
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
	return 1;
 8008aee:	2301      	movs	r3, #1
}
 8008af0:	0018      	movs	r0, r3
 8008af2:	46bd      	mov	sp, r7
 8008af4:	b002      	add	sp, #8
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
	return 0;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	0018      	movs	r0, r3
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	b004      	add	sp, #16
 8008b0c:	bd80      	pop	{r7, pc}
	...

08008b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b086      	sub	sp, #24
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008b18:	4a14      	ldr	r2, [pc, #80]	; (8008b6c <_sbrk+0x5c>)
 8008b1a:	4b15      	ldr	r3, [pc, #84]	; (8008b70 <_sbrk+0x60>)
 8008b1c:	1ad3      	subs	r3, r2, r3
 8008b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008b24:	4b13      	ldr	r3, [pc, #76]	; (8008b74 <_sbrk+0x64>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d102      	bne.n	8008b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008b2c:	4b11      	ldr	r3, [pc, #68]	; (8008b74 <_sbrk+0x64>)
 8008b2e:	4a12      	ldr	r2, [pc, #72]	; (8008b78 <_sbrk+0x68>)
 8008b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008b32:	4b10      	ldr	r3, [pc, #64]	; (8008b74 <_sbrk+0x64>)
 8008b34:	681a      	ldr	r2, [r3, #0]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	18d3      	adds	r3, r2, r3
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d207      	bcs.n	8008b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008b40:	f008 f942 	bl	8010dc8 <__errno>
 8008b44:	0003      	movs	r3, r0
 8008b46:	220c      	movs	r2, #12
 8008b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	425b      	negs	r3, r3
 8008b4e:	e009      	b.n	8008b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008b50:	4b08      	ldr	r3, [pc, #32]	; (8008b74 <_sbrk+0x64>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008b56:	4b07      	ldr	r3, [pc, #28]	; (8008b74 <_sbrk+0x64>)
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	18d2      	adds	r2, r2, r3
 8008b5e:	4b05      	ldr	r3, [pc, #20]	; (8008b74 <_sbrk+0x64>)
 8008b60:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8008b62:	68fb      	ldr	r3, [r7, #12]
}
 8008b64:	0018      	movs	r0, r3
 8008b66:	46bd      	mov	sp, r7
 8008b68:	b006      	add	sp, #24
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20009000 	.word	0x20009000
 8008b70:	00000400 	.word	0x00000400
 8008b74:	20000c8c 	.word	0x20000c8c
 8008b78:	20000ca8 	.word	0x20000ca8

08008b7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008b80:	4b03      	ldr	r3, [pc, #12]	; (8008b90 <SystemInit+0x14>)
 8008b82:	2280      	movs	r2, #128	; 0x80
 8008b84:	0512      	lsls	r2, r2, #20
 8008b86:	609a      	str	r2, [r3, #8]
#endif
}
 8008b88:	46c0      	nop			; (mov r8, r8)
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	46c0      	nop			; (mov r8, r8)
 8008b90:	e000ed00 	.word	0xe000ed00

08008b94 <checksum>:
////////////////////////////////////////////////////


uint16_t checksum(uint8_t * data_buf, uint16_t len)

{
 8008b94:	b590      	push	{r4, r7, lr}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	000a      	movs	r2, r1
 8008b9e:	1cbb      	adds	r3, r7, #2
 8008ba0:	801a      	strh	r2, [r3, #0]
  uint16_t sum, tsum, i, j;
  uint32_t lsum;

  j = len >> 1;
 8008ba2:	230e      	movs	r3, #14
 8008ba4:	18fb      	adds	r3, r7, r3
 8008ba6:	1cba      	adds	r2, r7, #2
 8008ba8:	8812      	ldrh	r2, [r2, #0]
 8008baa:	0852      	lsrs	r2, r2, #1
 8008bac:	801a      	strh	r2, [r3, #0]
  lsum = 0;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	613b      	str	r3, [r7, #16]
  tsum = 0;
 8008bb2:	230c      	movs	r3, #12
 8008bb4:	18fb      	adds	r3, r7, r3
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < j; i++)
 8008bba:	2316      	movs	r3, #22
 8008bbc:	18fb      	adds	r3, r7, r3
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	801a      	strh	r2, [r3, #0]
 8008bc2:	e026      	b.n	8008c12 <checksum+0x7e>
    {
      tsum = data_buf[i * 2];
 8008bc4:	2416      	movs	r4, #22
 8008bc6:	193b      	adds	r3, r7, r4
 8008bc8:	881b      	ldrh	r3, [r3, #0]
 8008bca:	005b      	lsls	r3, r3, #1
 8008bcc:	001a      	movs	r2, r3
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	189b      	adds	r3, r3, r2
 8008bd2:	781a      	ldrb	r2, [r3, #0]
 8008bd4:	200c      	movs	r0, #12
 8008bd6:	183b      	adds	r3, r7, r0
 8008bd8:	801a      	strh	r2, [r3, #0]
      tsum = tsum << 8;
 8008bda:	183b      	adds	r3, r7, r0
 8008bdc:	183a      	adds	r2, r7, r0
 8008bde:	8812      	ldrh	r2, [r2, #0]
 8008be0:	0212      	lsls	r2, r2, #8
 8008be2:	801a      	strh	r2, [r3, #0]
      tsum += data_buf[i * 2 + 1];
 8008be4:	193b      	adds	r3, r7, r4
 8008be6:	881b      	ldrh	r3, [r3, #0]
 8008be8:	005b      	lsls	r3, r3, #1
 8008bea:	3301      	adds	r3, #1
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	18d3      	adds	r3, r2, r3
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	b299      	uxth	r1, r3
 8008bf4:	183b      	adds	r3, r7, r0
 8008bf6:	183a      	adds	r2, r7, r0
 8008bf8:	8812      	ldrh	r2, [r2, #0]
 8008bfa:	188a      	adds	r2, r1, r2
 8008bfc:	801a      	strh	r2, [r3, #0]
      lsum += tsum;
 8008bfe:	183b      	adds	r3, r7, r0
 8008c00:	881b      	ldrh	r3, [r3, #0]
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	18d3      	adds	r3, r2, r3
 8008c06:	613b      	str	r3, [r7, #16]
  for (i = 0; i < j; i++)
 8008c08:	193b      	adds	r3, r7, r4
 8008c0a:	881a      	ldrh	r2, [r3, #0]
 8008c0c:	193b      	adds	r3, r7, r4
 8008c0e:	3201      	adds	r2, #1
 8008c10:	801a      	strh	r2, [r3, #0]
 8008c12:	2116      	movs	r1, #22
 8008c14:	187a      	adds	r2, r7, r1
 8008c16:	230e      	movs	r3, #14
 8008c18:	18fb      	adds	r3, r7, r3
 8008c1a:	8812      	ldrh	r2, [r2, #0]
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d3d0      	bcc.n	8008bc4 <checksum+0x30>
    }
   if (len % 2)
 8008c22:	1cbb      	adds	r3, r7, #2
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	2201      	movs	r2, #1
 8008c28:	4013      	ands	r3, r2
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d010      	beq.n	8008c52 <checksum+0xbe>
    {
      tsum = data_buf[i * 2];
 8008c30:	187b      	adds	r3, r7, r1
 8008c32:	881b      	ldrh	r3, [r3, #0]
 8008c34:	005b      	lsls	r3, r3, #1
 8008c36:	001a      	movs	r2, r3
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	189b      	adds	r3, r3, r2
 8008c3c:	781a      	ldrb	r2, [r3, #0]
 8008c3e:	210c      	movs	r1, #12
 8008c40:	187b      	adds	r3, r7, r1
 8008c42:	801a      	strh	r2, [r3, #0]
      lsum += (tsum << 8);
 8008c44:	187b      	adds	r3, r7, r1
 8008c46:	881b      	ldrh	r3, [r3, #0]
 8008c48:	021b      	lsls	r3, r3, #8
 8008c4a:	001a      	movs	r2, r3
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	189b      	adds	r3, r3, r2
 8008c50:	613b      	str	r3, [r7, #16]
    }
    sum = (uint16_t)lsum;
 8008c52:	210a      	movs	r1, #10
 8008c54:	187b      	adds	r3, r7, r1
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	801a      	strh	r2, [r3, #0]
    sum = ~(sum + (lsum >> 16));
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	0c1b      	lsrs	r3, r3, #16
 8008c5e:	b29a      	uxth	r2, r3
 8008c60:	187b      	adds	r3, r7, r1
 8008c62:	881b      	ldrh	r3, [r3, #0]
 8008c64:	18d3      	adds	r3, r2, r3
 8008c66:	b29a      	uxth	r2, r3
 8008c68:	187b      	adds	r3, r7, r1
 8008c6a:	43d2      	mvns	r2, r2
 8008c6c:	801a      	strh	r2, [r3, #0]
  return sum;
 8008c6e:	187b      	adds	r3, r7, r1
 8008c70:	881b      	ldrh	r3, [r3, #0]

}
 8008c72:	0018      	movs	r0, r3
 8008c74:	46bd      	mov	sp, r7
 8008c76:	b007      	add	sp, #28
 8008c78:	bd90      	pop	{r4, r7, pc}

08008c7a <htons>:

uint16_t htons( uint16_t hostshort)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b084      	sub	sp, #16
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	0002      	movs	r2, r0
 8008c82:	1dbb      	adds	r3, r7, #6
 8008c84:	801a      	strh	r2, [r3, #0]
#if 1
  //#ifdef LITTLE_ENDIAN
	uint16_t netshort=0;
 8008c86:	210e      	movs	r1, #14
 8008c88:	187b      	adds	r3, r7, r1
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	801a      	strh	r2, [r3, #0]
	netshort = (hostshort & 0xFF) << 8;
 8008c8e:	1dbb      	adds	r3, r7, #6
 8008c90:	881b      	ldrh	r3, [r3, #0]
 8008c92:	021a      	lsls	r2, r3, #8
 8008c94:	187b      	adds	r3, r7, r1
 8008c96:	801a      	strh	r2, [r3, #0]

	netshort |= ((hostshort >> 8)& 0xFF);
 8008c98:	1dbb      	adds	r3, r7, #6
 8008c9a:	881b      	ldrh	r3, [r3, #0]
 8008c9c:	0a1b      	lsrs	r3, r3, #8
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	b21a      	sxth	r2, r3
 8008ca2:	187b      	adds	r3, r7, r1
 8008ca4:	2000      	movs	r0, #0
 8008ca6:	5e1b      	ldrsh	r3, [r3, r0]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	b21a      	sxth	r2, r3
 8008cac:	187b      	adds	r3, r7, r1
 8008cae:	801a      	strh	r2, [r3, #0]
	return netshort;
 8008cb0:	187b      	adds	r3, r7, r1
 8008cb2:	881b      	ldrh	r3, [r3, #0]
#else
	return hostshort;
#endif
}
 8008cb4:	0018      	movs	r0, r3
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	b004      	add	sp, #16
 8008cba:	bd80      	pop	{r7, pc}

08008cbc <WIZCHIP_READ>:


uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8008cbc:	b5b0      	push	{r4, r5, r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8008cc4:	4b25      	ldr	r3, [pc, #148]	; (8008d5c <WIZCHIP_READ+0xa0>)
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008cca:	4b24      	ldr	r3, [pc, #144]	; (8008d5c <WIZCHIP_READ+0xa0>)
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008cd0:	4b22      	ldr	r3, [pc, #136]	; (8008d5c <WIZCHIP_READ+0xa0>)
 8008cd2:	6a1b      	ldr	r3, [r3, #32]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d003      	beq.n	8008ce0 <WIZCHIP_READ+0x24>
 8008cd8:	4b20      	ldr	r3, [pc, #128]	; (8008d5c <WIZCHIP_READ+0xa0>)
 8008cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d114      	bne.n	8008d0a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008ce0:	4b1e      	ldr	r3, [pc, #120]	; (8008d5c <WIZCHIP_READ+0xa0>)
 8008ce2:	69db      	ldr	r3, [r3, #28]
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	0c12      	lsrs	r2, r2, #16
 8008ce8:	b2d2      	uxtb	r2, r2
 8008cea:	0010      	movs	r0, r2
 8008cec:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008cee:	4b1b      	ldr	r3, [pc, #108]	; (8008d5c <WIZCHIP_READ+0xa0>)
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	0a12      	lsrs	r2, r2, #8
 8008cf6:	b2d2      	uxtb	r2, r2
 8008cf8:	0010      	movs	r0, r2
 8008cfa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008cfc:	4b17      	ldr	r3, [pc, #92]	; (8008d5c <WIZCHIP_READ+0xa0>)
 8008cfe:	69db      	ldr	r3, [r3, #28]
 8008d00:	687a      	ldr	r2, [r7, #4]
 8008d02:	b2d2      	uxtb	r2, r2
 8008d04:	0010      	movs	r0, r2
 8008d06:	4798      	blx	r3
 8008d08:	e014      	b.n	8008d34 <WIZCHIP_READ+0x78>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	0c1b      	lsrs	r3, r3, #16
 8008d0e:	b2da      	uxtb	r2, r3
 8008d10:	210c      	movs	r1, #12
 8008d12:	187b      	adds	r3, r7, r1
 8008d14:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	0a1b      	lsrs	r3, r3, #8
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	187b      	adds	r3, r7, r1
 8008d1e:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	b2da      	uxtb	r2, r3
 8008d24:	187b      	adds	r3, r7, r1
 8008d26:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8008d28:	4b0c      	ldr	r3, [pc, #48]	; (8008d5c <WIZCHIP_READ+0xa0>)
 8008d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2c:	187a      	adds	r2, r7, r1
 8008d2e:	2103      	movs	r1, #3
 8008d30:	0010      	movs	r0, r2
 8008d32:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8008d34:	4b09      	ldr	r3, [pc, #36]	; (8008d5c <WIZCHIP_READ+0xa0>)
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	250f      	movs	r5, #15
 8008d3a:	197c      	adds	r4, r7, r5
 8008d3c:	4798      	blx	r3
 8008d3e:	0003      	movs	r3, r0
 8008d40:	7023      	strb	r3, [r4, #0]

   WIZCHIP.CS._deselect();
 8008d42:	4b06      	ldr	r3, [pc, #24]	; (8008d5c <WIZCHIP_READ+0xa0>)
 8008d44:	695b      	ldr	r3, [r3, #20]
 8008d46:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008d48:	4b04      	ldr	r3, [pc, #16]	; (8008d5c <WIZCHIP_READ+0xa0>)
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	4798      	blx	r3
   return ret;
 8008d4e:	197b      	adds	r3, r7, r5
 8008d50:	781b      	ldrb	r3, [r3, #0]
}
 8008d52:	0018      	movs	r0, r3
 8008d54:	46bd      	mov	sp, r7
 8008d56:	b004      	add	sp, #16
 8008d58:	bdb0      	pop	{r4, r5, r7, pc}
 8008d5a:	46c0      	nop			; (mov r8, r8)
 8008d5c:	20000150 	.word	0x20000150

08008d60 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	000a      	movs	r2, r1
 8008d6a:	1cfb      	adds	r3, r7, #3
 8008d6c:	701a      	strb	r2, [r3, #0]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8008d6e:	4b26      	ldr	r3, [pc, #152]	; (8008e08 <WIZCHIP_WRITE+0xa8>)
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008d74:	4b24      	ldr	r3, [pc, #144]	; (8008e08 <WIZCHIP_WRITE+0xa8>)
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2204      	movs	r2, #4
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008d82:	4b21      	ldr	r3, [pc, #132]	; (8008e08 <WIZCHIP_WRITE+0xa8>)
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d11a      	bne.n	8008dc0 <WIZCHIP_WRITE+0x60>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008d8a:	4b1f      	ldr	r3, [pc, #124]	; (8008e08 <WIZCHIP_WRITE+0xa8>)
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	0c12      	lsrs	r2, r2, #16
 8008d92:	b2d2      	uxtb	r2, r2
 8008d94:	0010      	movs	r0, r2
 8008d96:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008d98:	4b1b      	ldr	r3, [pc, #108]	; (8008e08 <WIZCHIP_WRITE+0xa8>)
 8008d9a:	69db      	ldr	r3, [r3, #28]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	0a12      	lsrs	r2, r2, #8
 8008da0:	b2d2      	uxtb	r2, r2
 8008da2:	0010      	movs	r0, r2
 8008da4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008da6:	4b18      	ldr	r3, [pc, #96]	; (8008e08 <WIZCHIP_WRITE+0xa8>)
 8008da8:	69db      	ldr	r3, [r3, #28]
 8008daa:	687a      	ldr	r2, [r7, #4]
 8008dac:	b2d2      	uxtb	r2, r2
 8008dae:	0010      	movs	r0, r2
 8008db0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8008db2:	4b15      	ldr	r3, [pc, #84]	; (8008e08 <WIZCHIP_WRITE+0xa8>)
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	1cfa      	adds	r2, r7, #3
 8008db8:	7812      	ldrb	r2, [r2, #0]
 8008dba:	0010      	movs	r0, r2
 8008dbc:	4798      	blx	r3
 8008dbe:	e018      	b.n	8008df2 <WIZCHIP_WRITE+0x92>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	0c1b      	lsrs	r3, r3, #16
 8008dc4:	b2da      	uxtb	r2, r3
 8008dc6:	210c      	movs	r1, #12
 8008dc8:	187b      	adds	r3, r7, r1
 8008dca:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	0a1b      	lsrs	r3, r3, #8
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	187b      	adds	r3, r7, r1
 8008dd4:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	b2da      	uxtb	r2, r3
 8008dda:	187b      	adds	r3, r7, r1
 8008ddc:	709a      	strb	r2, [r3, #2]
		spi_data[3] = wb;
 8008dde:	187b      	adds	r3, r7, r1
 8008de0:	1cfa      	adds	r2, r7, #3
 8008de2:	7812      	ldrb	r2, [r2, #0]
 8008de4:	70da      	strb	r2, [r3, #3]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8008de6:	4b08      	ldr	r3, [pc, #32]	; (8008e08 <WIZCHIP_WRITE+0xa8>)
 8008de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dea:	187a      	adds	r2, r7, r1
 8008dec:	2104      	movs	r1, #4
 8008dee:	0010      	movs	r0, r2
 8008df0:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8008df2:	4b05      	ldr	r3, [pc, #20]	; (8008e08 <WIZCHIP_WRITE+0xa8>)
 8008df4:	695b      	ldr	r3, [r3, #20]
 8008df6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008df8:	4b03      	ldr	r3, [pc, #12]	; (8008e08 <WIZCHIP_WRITE+0xa8>)
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	4798      	blx	r3
}
 8008dfe:	46c0      	nop			; (mov r8, r8)
 8008e00:	46bd      	mov	sp, r7
 8008e02:	b004      	add	sp, #16
 8008e04:	bd80      	pop	{r7, pc}
 8008e06:	46c0      	nop			; (mov r8, r8)
 8008e08:	20000150 	.word	0x20000150

08008e0c <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8008e0c:	b5b0      	push	{r4, r5, r7, lr}
 8008e0e:	b086      	sub	sp, #24
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	1dbb      	adds	r3, r7, #6
 8008e18:	801a      	strh	r2, [r3, #0]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8008e1a:	4b32      	ldr	r3, [pc, #200]	; (8008ee4 <WIZCHIP_READ_BUF+0xd8>)
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008e20:	4b30      	ldr	r3, [pc, #192]	; (8008ee4 <WIZCHIP_READ_BUF+0xd8>)
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008e26:	4b2f      	ldr	r3, [pc, #188]	; (8008ee4 <WIZCHIP_READ_BUF+0xd8>)
 8008e28:	6a1b      	ldr	r3, [r3, #32]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d003      	beq.n	8008e36 <WIZCHIP_READ_BUF+0x2a>
 8008e2e:	4b2d      	ldr	r3, [pc, #180]	; (8008ee4 <WIZCHIP_READ_BUF+0xd8>)
 8008e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d12f      	bne.n	8008e96 <WIZCHIP_READ_BUF+0x8a>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008e36:	4b2b      	ldr	r3, [pc, #172]	; (8008ee4 <WIZCHIP_READ_BUF+0xd8>)
 8008e38:	69db      	ldr	r3, [r3, #28]
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	0c12      	lsrs	r2, r2, #16
 8008e3e:	b2d2      	uxtb	r2, r2
 8008e40:	0010      	movs	r0, r2
 8008e42:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008e44:	4b27      	ldr	r3, [pc, #156]	; (8008ee4 <WIZCHIP_READ_BUF+0xd8>)
 8008e46:	69db      	ldr	r3, [r3, #28]
 8008e48:	68fa      	ldr	r2, [r7, #12]
 8008e4a:	0a12      	lsrs	r2, r2, #8
 8008e4c:	b2d2      	uxtb	r2, r2
 8008e4e:	0010      	movs	r0, r2
 8008e50:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008e52:	4b24      	ldr	r3, [pc, #144]	; (8008ee4 <WIZCHIP_READ_BUF+0xd8>)
 8008e54:	69db      	ldr	r3, [r3, #28]
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	b2d2      	uxtb	r2, r2
 8008e5a:	0010      	movs	r0, r2
 8008e5c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8008e5e:	2316      	movs	r3, #22
 8008e60:	18fb      	adds	r3, r7, r3
 8008e62:	2200      	movs	r2, #0
 8008e64:	801a      	strh	r2, [r3, #0]
 8008e66:	e00e      	b.n	8008e86 <WIZCHIP_READ_BUF+0x7a>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8008e68:	4b1e      	ldr	r3, [pc, #120]	; (8008ee4 <WIZCHIP_READ_BUF+0xd8>)
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	2516      	movs	r5, #22
 8008e6e:	197a      	adds	r2, r7, r5
 8008e70:	8812      	ldrh	r2, [r2, #0]
 8008e72:	68b9      	ldr	r1, [r7, #8]
 8008e74:	188c      	adds	r4, r1, r2
 8008e76:	4798      	blx	r3
 8008e78:	0003      	movs	r3, r0
 8008e7a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8008e7c:	197b      	adds	r3, r7, r5
 8008e7e:	881a      	ldrh	r2, [r3, #0]
 8008e80:	197b      	adds	r3, r7, r5
 8008e82:	3201      	adds	r2, #1
 8008e84:	801a      	strh	r2, [r3, #0]
 8008e86:	2316      	movs	r3, #22
 8008e88:	18fa      	adds	r2, r7, r3
 8008e8a:	1dbb      	adds	r3, r7, #6
 8008e8c:	8812      	ldrh	r2, [r2, #0]
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d3e9      	bcc.n	8008e68 <WIZCHIP_READ_BUF+0x5c>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008e94:	e01b      	b.n	8008ece <WIZCHIP_READ_BUF+0xc2>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	0c1b      	lsrs	r3, r3, #16
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	2110      	movs	r1, #16
 8008e9e:	187b      	adds	r3, r7, r1
 8008ea0:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	0a1b      	lsrs	r3, r3, #8
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	187b      	adds	r3, r7, r1
 8008eaa:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	187b      	adds	r3, r7, r1
 8008eb2:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8008eb4:	4b0b      	ldr	r3, [pc, #44]	; (8008ee4 <WIZCHIP_READ_BUF+0xd8>)
 8008eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb8:	187a      	adds	r2, r7, r1
 8008eba:	2103      	movs	r1, #3
 8008ebc:	0010      	movs	r0, r2
 8008ebe:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8008ec0:	4b08      	ldr	r3, [pc, #32]	; (8008ee4 <WIZCHIP_READ_BUF+0xd8>)
 8008ec2:	6a1b      	ldr	r3, [r3, #32]
 8008ec4:	1dba      	adds	r2, r7, #6
 8008ec6:	8811      	ldrh	r1, [r2, #0]
 8008ec8:	68ba      	ldr	r2, [r7, #8]
 8008eca:	0010      	movs	r0, r2
 8008ecc:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8008ece:	4b05      	ldr	r3, [pc, #20]	; (8008ee4 <WIZCHIP_READ_BUF+0xd8>)
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008ed4:	4b03      	ldr	r3, [pc, #12]	; (8008ee4 <WIZCHIP_READ_BUF+0xd8>)
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	4798      	blx	r3
}
 8008eda:	46c0      	nop			; (mov r8, r8)
 8008edc:	46bd      	mov	sp, r7
 8008ede:	b006      	add	sp, #24
 8008ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8008ee2:	46c0      	nop			; (mov r8, r8)
 8008ee4:	20000150 	.word	0x20000150

08008ee8 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8008ee8:	b590      	push	{r4, r7, lr}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	1dbb      	adds	r3, r7, #6
 8008ef4:	801a      	strh	r2, [r3, #0]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8008ef6:	4b32      	ldr	r3, [pc, #200]	; (8008fc0 <WIZCHIP_WRITE_BUF+0xd8>)
 8008ef8:	689b      	ldr	r3, [r3, #8]
 8008efa:	4798      	blx	r3
   WIZCHIP.CS._select();
 8008efc:	4b30      	ldr	r3, [pc, #192]	; (8008fc0 <WIZCHIP_WRITE_BUF+0xd8>)
 8008efe:	691b      	ldr	r3, [r3, #16]
 8008f00:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2204      	movs	r2, #4
 8008f06:	4313      	orrs	r3, r2
 8008f08:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8008f0a:	4b2d      	ldr	r3, [pc, #180]	; (8008fc0 <WIZCHIP_WRITE_BUF+0xd8>)
 8008f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d12f      	bne.n	8008f72 <WIZCHIP_WRITE_BUF+0x8a>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8008f12:	4b2b      	ldr	r3, [pc, #172]	; (8008fc0 <WIZCHIP_WRITE_BUF+0xd8>)
 8008f14:	69db      	ldr	r3, [r3, #28]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	0c12      	lsrs	r2, r2, #16
 8008f1a:	b2d2      	uxtb	r2, r2
 8008f1c:	0010      	movs	r0, r2
 8008f1e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8008f20:	4b27      	ldr	r3, [pc, #156]	; (8008fc0 <WIZCHIP_WRITE_BUF+0xd8>)
 8008f22:	69db      	ldr	r3, [r3, #28]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	0a12      	lsrs	r2, r2, #8
 8008f28:	b2d2      	uxtb	r2, r2
 8008f2a:	0010      	movs	r0, r2
 8008f2c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8008f2e:	4b24      	ldr	r3, [pc, #144]	; (8008fc0 <WIZCHIP_WRITE_BUF+0xd8>)
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	b2d2      	uxtb	r2, r2
 8008f36:	0010      	movs	r0, r2
 8008f38:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8008f3a:	2316      	movs	r3, #22
 8008f3c:	18fb      	adds	r3, r7, r3
 8008f3e:	2200      	movs	r2, #0
 8008f40:	801a      	strh	r2, [r3, #0]
 8008f42:	e00e      	b.n	8008f62 <WIZCHIP_WRITE_BUF+0x7a>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8008f44:	4b1e      	ldr	r3, [pc, #120]	; (8008fc0 <WIZCHIP_WRITE_BUF+0xd8>)
 8008f46:	69db      	ldr	r3, [r3, #28]
 8008f48:	2416      	movs	r4, #22
 8008f4a:	193a      	adds	r2, r7, r4
 8008f4c:	8812      	ldrh	r2, [r2, #0]
 8008f4e:	68b9      	ldr	r1, [r7, #8]
 8008f50:	188a      	adds	r2, r1, r2
 8008f52:	7812      	ldrb	r2, [r2, #0]
 8008f54:	0010      	movs	r0, r2
 8008f56:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8008f58:	193b      	adds	r3, r7, r4
 8008f5a:	881a      	ldrh	r2, [r3, #0]
 8008f5c:	193b      	adds	r3, r7, r4
 8008f5e:	3201      	adds	r2, #1
 8008f60:	801a      	strh	r2, [r3, #0]
 8008f62:	2316      	movs	r3, #22
 8008f64:	18fa      	adds	r2, r7, r3
 8008f66:	1dbb      	adds	r3, r7, #6
 8008f68:	8812      	ldrh	r2, [r2, #0]
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d3e9      	bcc.n	8008f44 <WIZCHIP_WRITE_BUF+0x5c>
 8008f70:	e01b      	b.n	8008faa <WIZCHIP_WRITE_BUF+0xc2>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	0c1b      	lsrs	r3, r3, #16
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	2110      	movs	r1, #16
 8008f7a:	187b      	adds	r3, r7, r1
 8008f7c:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	0a1b      	lsrs	r3, r3, #8
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	187b      	adds	r3, r7, r1
 8008f86:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	b2da      	uxtb	r2, r3
 8008f8c:	187b      	adds	r3, r7, r1
 8008f8e:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8008f90:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <WIZCHIP_WRITE_BUF+0xd8>)
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	187a      	adds	r2, r7, r1
 8008f96:	2103      	movs	r1, #3
 8008f98:	0010      	movs	r0, r2
 8008f9a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8008f9c:	4b08      	ldr	r3, [pc, #32]	; (8008fc0 <WIZCHIP_WRITE_BUF+0xd8>)
 8008f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa0:	1dba      	adds	r2, r7, #6
 8008fa2:	8811      	ldrh	r1, [r2, #0]
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	0010      	movs	r0, r2
 8008fa8:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8008faa:	4b05      	ldr	r3, [pc, #20]	; (8008fc0 <WIZCHIP_WRITE_BUF+0xd8>)
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8008fb0:	4b03      	ldr	r3, [pc, #12]	; (8008fc0 <WIZCHIP_WRITE_BUF+0xd8>)
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	4798      	blx	r3
}
 8008fb6:	46c0      	nop			; (mov r8, r8)
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	b007      	add	sp, #28
 8008fbc:	bd90      	pop	{r4, r7, pc}
 8008fbe:	46c0      	nop			; (mov r8, r8)
 8008fc0:	20000150 	.word	0x20000150

08008fc4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8008fc4:	b5b0      	push	{r4, r5, r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	0002      	movs	r2, r0
 8008fcc:	1dfb      	adds	r3, r7, #7
 8008fce:	701a      	strb	r2, [r3, #0]
   uint16_t val=0,val1=0;
 8008fd0:	230e      	movs	r3, #14
 8008fd2:	18fb      	adds	r3, r7, r3
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	801a      	strh	r2, [r3, #0]
 8008fd8:	230c      	movs	r3, #12
 8008fda:	18fb      	adds	r3, r7, r3
 8008fdc:	2200      	movs	r2, #0
 8008fde:	801a      	strh	r2, [r3, #0]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8008fe0:	1dfb      	adds	r3, r7, #7
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	00db      	lsls	r3, r3, #3
 8008fea:	2280      	movs	r2, #128	; 0x80
 8008fec:	0192      	lsls	r2, r2, #6
 8008fee:	4694      	mov	ip, r2
 8008ff0:	4463      	add	r3, ip
 8008ff2:	0018      	movs	r0, r3
 8008ff4:	f7ff fe62 	bl	8008cbc <WIZCHIP_READ>
 8008ff8:	0003      	movs	r3, r0
 8008ffa:	001a      	movs	r2, r3
 8008ffc:	250c      	movs	r5, #12
 8008ffe:	197b      	adds	r3, r7, r5
 8009000:	801a      	strh	r2, [r3, #0]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8009002:	197b      	adds	r3, r7, r5
 8009004:	881b      	ldrh	r3, [r3, #0]
 8009006:	021b      	lsls	r3, r3, #8
 8009008:	b29c      	uxth	r4, r3
 800900a:	1dfb      	adds	r3, r7, #7
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	3301      	adds	r3, #1
 8009012:	00db      	lsls	r3, r3, #3
 8009014:	2284      	movs	r2, #132	; 0x84
 8009016:	0192      	lsls	r2, r2, #6
 8009018:	4694      	mov	ip, r2
 800901a:	4463      	add	r3, ip
 800901c:	0018      	movs	r0, r3
 800901e:	f7ff fe4d 	bl	8008cbc <WIZCHIP_READ>
 8009022:	0003      	movs	r3, r0
 8009024:	b29a      	uxth	r2, r3
 8009026:	197b      	adds	r3, r7, r5
 8009028:	18a2      	adds	r2, r4, r2
 800902a:	801a      	strh	r2, [r3, #0]
      if (val1 != 0)
 800902c:	197b      	adds	r3, r7, r5
 800902e:	881b      	ldrh	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d025      	beq.n	8009080 <getSn_TX_FSR+0xbc>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8009034:	1dfb      	adds	r3, r7, #7
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	3301      	adds	r3, #1
 800903c:	00db      	lsls	r3, r3, #3
 800903e:	2280      	movs	r2, #128	; 0x80
 8009040:	0192      	lsls	r2, r2, #6
 8009042:	4694      	mov	ip, r2
 8009044:	4463      	add	r3, ip
 8009046:	0018      	movs	r0, r3
 8009048:	f7ff fe38 	bl	8008cbc <WIZCHIP_READ>
 800904c:	0003      	movs	r3, r0
 800904e:	001a      	movs	r2, r3
 8009050:	250e      	movs	r5, #14
 8009052:	197b      	adds	r3, r7, r5
 8009054:	801a      	strh	r2, [r3, #0]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8009056:	197b      	adds	r3, r7, r5
 8009058:	881b      	ldrh	r3, [r3, #0]
 800905a:	021b      	lsls	r3, r3, #8
 800905c:	b29c      	uxth	r4, r3
 800905e:	1dfb      	adds	r3, r7, #7
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	3301      	adds	r3, #1
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	2284      	movs	r2, #132	; 0x84
 800906a:	0192      	lsls	r2, r2, #6
 800906c:	4694      	mov	ip, r2
 800906e:	4463      	add	r3, ip
 8009070:	0018      	movs	r0, r3
 8009072:	f7ff fe23 	bl	8008cbc <WIZCHIP_READ>
 8009076:	0003      	movs	r3, r0
 8009078:	b29a      	uxth	r2, r3
 800907a:	197b      	adds	r3, r7, r5
 800907c:	18a2      	adds	r2, r4, r2
 800907e:	801a      	strh	r2, [r3, #0]
      }
   }while (val != val1);
 8009080:	210e      	movs	r1, #14
 8009082:	187a      	adds	r2, r7, r1
 8009084:	230c      	movs	r3, #12
 8009086:	18fb      	adds	r3, r7, r3
 8009088:	8812      	ldrh	r2, [r2, #0]
 800908a:	881b      	ldrh	r3, [r3, #0]
 800908c:	429a      	cmp	r2, r3
 800908e:	d1a7      	bne.n	8008fe0 <getSn_TX_FSR+0x1c>
   return val;
 8009090:	187b      	adds	r3, r7, r1
 8009092:	881b      	ldrh	r3, [r3, #0]
}
 8009094:	0018      	movs	r0, r3
 8009096:	46bd      	mov	sp, r7
 8009098:	b004      	add	sp, #16
 800909a:	bdb0      	pop	{r4, r5, r7, pc}

0800909c <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 800909c:	b5b0      	push	{r4, r5, r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	0002      	movs	r2, r0
 80090a4:	1dfb      	adds	r3, r7, #7
 80090a6:	701a      	strb	r2, [r3, #0]
   uint16_t val=0,val1=0;
 80090a8:	230e      	movs	r3, #14
 80090aa:	18fb      	adds	r3, r7, r3
 80090ac:	2200      	movs	r2, #0
 80090ae:	801a      	strh	r2, [r3, #0]
 80090b0:	230c      	movs	r3, #12
 80090b2:	18fb      	adds	r3, r7, r3
 80090b4:	2200      	movs	r2, #0
 80090b6:	801a      	strh	r2, [r3, #0]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80090b8:	1dfb      	adds	r3, r7, #7
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	3301      	adds	r3, #1
 80090c0:	00db      	lsls	r3, r3, #3
 80090c2:	2298      	movs	r2, #152	; 0x98
 80090c4:	0192      	lsls	r2, r2, #6
 80090c6:	4694      	mov	ip, r2
 80090c8:	4463      	add	r3, ip
 80090ca:	0018      	movs	r0, r3
 80090cc:	f7ff fdf6 	bl	8008cbc <WIZCHIP_READ>
 80090d0:	0003      	movs	r3, r0
 80090d2:	001a      	movs	r2, r3
 80090d4:	250c      	movs	r5, #12
 80090d6:	197b      	adds	r3, r7, r5
 80090d8:	801a      	strh	r2, [r3, #0]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80090da:	197b      	adds	r3, r7, r5
 80090dc:	881b      	ldrh	r3, [r3, #0]
 80090de:	021b      	lsls	r3, r3, #8
 80090e0:	b29c      	uxth	r4, r3
 80090e2:	1dfb      	adds	r3, r7, #7
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	3301      	adds	r3, #1
 80090ea:	00db      	lsls	r3, r3, #3
 80090ec:	229c      	movs	r2, #156	; 0x9c
 80090ee:	0192      	lsls	r2, r2, #6
 80090f0:	4694      	mov	ip, r2
 80090f2:	4463      	add	r3, ip
 80090f4:	0018      	movs	r0, r3
 80090f6:	f7ff fde1 	bl	8008cbc <WIZCHIP_READ>
 80090fa:	0003      	movs	r3, r0
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	197b      	adds	r3, r7, r5
 8009100:	18a2      	adds	r2, r4, r2
 8009102:	801a      	strh	r2, [r3, #0]
      if (val1 != 0)
 8009104:	197b      	adds	r3, r7, r5
 8009106:	881b      	ldrh	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d025      	beq.n	8009158 <getSn_RX_RSR+0xbc>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800910c:	1dfb      	adds	r3, r7, #7
 800910e:	781b      	ldrb	r3, [r3, #0]
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	3301      	adds	r3, #1
 8009114:	00db      	lsls	r3, r3, #3
 8009116:	2298      	movs	r2, #152	; 0x98
 8009118:	0192      	lsls	r2, r2, #6
 800911a:	4694      	mov	ip, r2
 800911c:	4463      	add	r3, ip
 800911e:	0018      	movs	r0, r3
 8009120:	f7ff fdcc 	bl	8008cbc <WIZCHIP_READ>
 8009124:	0003      	movs	r3, r0
 8009126:	001a      	movs	r2, r3
 8009128:	250e      	movs	r5, #14
 800912a:	197b      	adds	r3, r7, r5
 800912c:	801a      	strh	r2, [r3, #0]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800912e:	197b      	adds	r3, r7, r5
 8009130:	881b      	ldrh	r3, [r3, #0]
 8009132:	021b      	lsls	r3, r3, #8
 8009134:	b29c      	uxth	r4, r3
 8009136:	1dfb      	adds	r3, r7, #7
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	009b      	lsls	r3, r3, #2
 800913c:	3301      	adds	r3, #1
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	229c      	movs	r2, #156	; 0x9c
 8009142:	0192      	lsls	r2, r2, #6
 8009144:	4694      	mov	ip, r2
 8009146:	4463      	add	r3, ip
 8009148:	0018      	movs	r0, r3
 800914a:	f7ff fdb7 	bl	8008cbc <WIZCHIP_READ>
 800914e:	0003      	movs	r3, r0
 8009150:	b29a      	uxth	r2, r3
 8009152:	197b      	adds	r3, r7, r5
 8009154:	18a2      	adds	r2, r4, r2
 8009156:	801a      	strh	r2, [r3, #0]
      }
   }while (val != val1);
 8009158:	210e      	movs	r1, #14
 800915a:	187a      	adds	r2, r7, r1
 800915c:	230c      	movs	r3, #12
 800915e:	18fb      	adds	r3, r7, r3
 8009160:	8812      	ldrh	r2, [r2, #0]
 8009162:	881b      	ldrh	r3, [r3, #0]
 8009164:	429a      	cmp	r2, r3
 8009166:	d1a7      	bne.n	80090b8 <getSn_RX_RSR+0x1c>
   return val;
 8009168:	187b      	adds	r3, r7, r1
 800916a:	881b      	ldrh	r3, [r3, #0]
}
 800916c:	0018      	movs	r0, r3
 800916e:	46bd      	mov	sp, r7
 8009170:	b004      	add	sp, #16
 8009172:	bdb0      	pop	{r4, r5, r7, pc}

08009174 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8009174:	b5b0      	push	{r4, r5, r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6039      	str	r1, [r7, #0]
 800917c:	0011      	movs	r1, r2
 800917e:	1dfb      	adds	r3, r7, #7
 8009180:	1c02      	adds	r2, r0, #0
 8009182:	701a      	strb	r2, [r3, #0]
 8009184:	1d3b      	adds	r3, r7, #4
 8009186:	1c0a      	adds	r2, r1, #0
 8009188:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 800918a:	250e      	movs	r5, #14
 800918c:	197b      	adds	r3, r7, r5
 800918e:	2200      	movs	r2, #0
 8009190:	801a      	strh	r2, [r3, #0]
   uint32_t addrsel = 0;
 8009192:	2300      	movs	r3, #0
 8009194:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8009196:	1d3b      	adds	r3, r7, #4
 8009198:	881b      	ldrh	r3, [r3, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d05e      	beq.n	800925c <wiz_send_data+0xe8>
   ptr = getSn_TX_WR(sn);
 800919e:	1dfb      	adds	r3, r7, #7
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	009b      	lsls	r3, r3, #2
 80091a4:	3301      	adds	r3, #1
 80091a6:	00db      	lsls	r3, r3, #3
 80091a8:	2290      	movs	r2, #144	; 0x90
 80091aa:	0192      	lsls	r2, r2, #6
 80091ac:	4694      	mov	ip, r2
 80091ae:	4463      	add	r3, ip
 80091b0:	0018      	movs	r0, r3
 80091b2:	f7ff fd83 	bl	8008cbc <WIZCHIP_READ>
 80091b6:	0003      	movs	r3, r0
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	021b      	lsls	r3, r3, #8
 80091bc:	b29c      	uxth	r4, r3
 80091be:	1dfb      	adds	r3, r7, #7
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	3301      	adds	r3, #1
 80091c6:	00db      	lsls	r3, r3, #3
 80091c8:	2294      	movs	r2, #148	; 0x94
 80091ca:	0192      	lsls	r2, r2, #6
 80091cc:	4694      	mov	ip, r2
 80091ce:	4463      	add	r3, ip
 80091d0:	0018      	movs	r0, r3
 80091d2:	f7ff fd73 	bl	8008cbc <WIZCHIP_READ>
 80091d6:	0003      	movs	r3, r0
 80091d8:	b29a      	uxth	r2, r3
 80091da:	197b      	adds	r3, r7, r5
 80091dc:	18a2      	adds	r2, r4, r2
 80091de:	801a      	strh	r2, [r3, #0]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80091e0:	002c      	movs	r4, r5
 80091e2:	197b      	adds	r3, r7, r5
 80091e4:	881b      	ldrh	r3, [r3, #0]
 80091e6:	021b      	lsls	r3, r3, #8
 80091e8:	1dfa      	adds	r2, r7, #7
 80091ea:	7812      	ldrb	r2, [r2, #0]
 80091ec:	0092      	lsls	r2, r2, #2
 80091ee:	3202      	adds	r2, #2
 80091f0:	00d2      	lsls	r2, r2, #3
 80091f2:	189b      	adds	r3, r3, r2
 80091f4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80091f6:	1d3b      	adds	r3, r7, #4
 80091f8:	881a      	ldrh	r2, [r3, #0]
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	0018      	movs	r0, r3
 8009200:	f7ff fe72 	bl	8008ee8 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8009204:	193b      	adds	r3, r7, r4
 8009206:	1939      	adds	r1, r7, r4
 8009208:	1d3a      	adds	r2, r7, #4
 800920a:	8809      	ldrh	r1, [r1, #0]
 800920c:	8812      	ldrh	r2, [r2, #0]
 800920e:	188a      	adds	r2, r1, r2
 8009210:	801a      	strh	r2, [r3, #0]
   setSn_TX_WR(sn,ptr);
 8009212:	1dfb      	adds	r3, r7, #7
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	3301      	adds	r3, #1
 800921a:	00db      	lsls	r3, r3, #3
 800921c:	2290      	movs	r2, #144	; 0x90
 800921e:	0192      	lsls	r2, r2, #6
 8009220:	4694      	mov	ip, r2
 8009222:	4463      	add	r3, ip
 8009224:	001a      	movs	r2, r3
 8009226:	193b      	adds	r3, r7, r4
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	0a1b      	lsrs	r3, r3, #8
 800922c:	b29b      	uxth	r3, r3
 800922e:	b2db      	uxtb	r3, r3
 8009230:	0019      	movs	r1, r3
 8009232:	0010      	movs	r0, r2
 8009234:	f7ff fd94 	bl	8008d60 <WIZCHIP_WRITE>
 8009238:	1dfb      	adds	r3, r7, #7
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	3301      	adds	r3, #1
 8009240:	00db      	lsls	r3, r3, #3
 8009242:	2294      	movs	r2, #148	; 0x94
 8009244:	0192      	lsls	r2, r2, #6
 8009246:	4694      	mov	ip, r2
 8009248:	4463      	add	r3, ip
 800924a:	001a      	movs	r2, r3
 800924c:	193b      	adds	r3, r7, r4
 800924e:	881b      	ldrh	r3, [r3, #0]
 8009250:	b2db      	uxtb	r3, r3
 8009252:	0019      	movs	r1, r3
 8009254:	0010      	movs	r0, r2
 8009256:	f7ff fd83 	bl	8008d60 <WIZCHIP_WRITE>
 800925a:	e000      	b.n	800925e <wiz_send_data+0xea>
   if(len == 0)  return;
 800925c:	46c0      	nop			; (mov r8, r8)
}
 800925e:	46bd      	mov	sp, r7
 8009260:	b004      	add	sp, #16
 8009262:	bdb0      	pop	{r4, r5, r7, pc}

08009264 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8009264:	b5b0      	push	{r4, r5, r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6039      	str	r1, [r7, #0]
 800926c:	0011      	movs	r1, r2
 800926e:	1dfb      	adds	r3, r7, #7
 8009270:	1c02      	adds	r2, r0, #0
 8009272:	701a      	strb	r2, [r3, #0]
 8009274:	1d3b      	adds	r3, r7, #4
 8009276:	1c0a      	adds	r2, r1, #0
 8009278:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 800927a:	250e      	movs	r5, #14
 800927c:	197b      	adds	r3, r7, r5
 800927e:	2200      	movs	r2, #0
 8009280:	801a      	strh	r2, [r3, #0]
   uint32_t addrsel = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8009286:	1d3b      	adds	r3, r7, #4
 8009288:	881b      	ldrh	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d05e      	beq.n	800934c <wiz_recv_data+0xe8>
   ptr = getSn_RX_RD(sn);
 800928e:	1dfb      	adds	r3, r7, #7
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	3301      	adds	r3, #1
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	22a0      	movs	r2, #160	; 0xa0
 800929a:	0192      	lsls	r2, r2, #6
 800929c:	4694      	mov	ip, r2
 800929e:	4463      	add	r3, ip
 80092a0:	0018      	movs	r0, r3
 80092a2:	f7ff fd0b 	bl	8008cbc <WIZCHIP_READ>
 80092a6:	0003      	movs	r3, r0
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	021b      	lsls	r3, r3, #8
 80092ac:	b29c      	uxth	r4, r3
 80092ae:	1dfb      	adds	r3, r7, #7
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	3301      	adds	r3, #1
 80092b6:	00db      	lsls	r3, r3, #3
 80092b8:	22a4      	movs	r2, #164	; 0xa4
 80092ba:	0192      	lsls	r2, r2, #6
 80092bc:	4694      	mov	ip, r2
 80092be:	4463      	add	r3, ip
 80092c0:	0018      	movs	r0, r3
 80092c2:	f7ff fcfb 	bl	8008cbc <WIZCHIP_READ>
 80092c6:	0003      	movs	r3, r0
 80092c8:	b29a      	uxth	r2, r3
 80092ca:	197b      	adds	r3, r7, r5
 80092cc:	18a2      	adds	r2, r4, r2
 80092ce:	801a      	strh	r2, [r3, #0]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80092d0:	002c      	movs	r4, r5
 80092d2:	197b      	adds	r3, r7, r5
 80092d4:	881b      	ldrh	r3, [r3, #0]
 80092d6:	021b      	lsls	r3, r3, #8
 80092d8:	1dfa      	adds	r2, r7, #7
 80092da:	7812      	ldrb	r2, [r2, #0]
 80092dc:	0092      	lsls	r2, r2, #2
 80092de:	3203      	adds	r2, #3
 80092e0:	00d2      	lsls	r2, r2, #3
 80092e2:	189b      	adds	r3, r3, r2
 80092e4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 80092e6:	1d3b      	adds	r3, r7, #4
 80092e8:	881a      	ldrh	r2, [r3, #0]
 80092ea:	6839      	ldr	r1, [r7, #0]
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	0018      	movs	r0, r3
 80092f0:	f7ff fd8c 	bl	8008e0c <WIZCHIP_READ_BUF>
   ptr += len;
 80092f4:	193b      	adds	r3, r7, r4
 80092f6:	1939      	adds	r1, r7, r4
 80092f8:	1d3a      	adds	r2, r7, #4
 80092fa:	8809      	ldrh	r1, [r1, #0]
 80092fc:	8812      	ldrh	r2, [r2, #0]
 80092fe:	188a      	adds	r2, r1, r2
 8009300:	801a      	strh	r2, [r3, #0]
   
   setSn_RX_RD(sn,ptr);
 8009302:	1dfb      	adds	r3, r7, #7
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	3301      	adds	r3, #1
 800930a:	00db      	lsls	r3, r3, #3
 800930c:	22a0      	movs	r2, #160	; 0xa0
 800930e:	0192      	lsls	r2, r2, #6
 8009310:	4694      	mov	ip, r2
 8009312:	4463      	add	r3, ip
 8009314:	001a      	movs	r2, r3
 8009316:	193b      	adds	r3, r7, r4
 8009318:	881b      	ldrh	r3, [r3, #0]
 800931a:	0a1b      	lsrs	r3, r3, #8
 800931c:	b29b      	uxth	r3, r3
 800931e:	b2db      	uxtb	r3, r3
 8009320:	0019      	movs	r1, r3
 8009322:	0010      	movs	r0, r2
 8009324:	f7ff fd1c 	bl	8008d60 <WIZCHIP_WRITE>
 8009328:	1dfb      	adds	r3, r7, #7
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	3301      	adds	r3, #1
 8009330:	00db      	lsls	r3, r3, #3
 8009332:	22a4      	movs	r2, #164	; 0xa4
 8009334:	0192      	lsls	r2, r2, #6
 8009336:	4694      	mov	ip, r2
 8009338:	4463      	add	r3, ip
 800933a:	001a      	movs	r2, r3
 800933c:	193b      	adds	r3, r7, r4
 800933e:	881b      	ldrh	r3, [r3, #0]
 8009340:	b2db      	uxtb	r3, r3
 8009342:	0019      	movs	r1, r3
 8009344:	0010      	movs	r0, r2
 8009346:	f7ff fd0b 	bl	8008d60 <WIZCHIP_WRITE>
 800934a:	e000      	b.n	800934e <wiz_recv_data+0xea>
   if(len == 0) return;
 800934c:	46c0      	nop			; (mov r8, r8)
}
 800934e:	46bd      	mov	sp, r7
 8009350:	b004      	add	sp, #16
 8009352:	bdb0      	pop	{r4, r5, r7, pc}

08009354 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8009354:	b5b0      	push	{r4, r5, r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
 800935a:	0002      	movs	r2, r0
 800935c:	1dfb      	adds	r3, r7, #7
 800935e:	701a      	strb	r2, [r3, #0]
 8009360:	1d3b      	adds	r3, r7, #4
 8009362:	1c0a      	adds	r2, r1, #0
 8009364:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 8009366:	250e      	movs	r5, #14
 8009368:	197b      	adds	r3, r7, r5
 800936a:	2200      	movs	r2, #0
 800936c:	801a      	strh	r2, [r3, #0]

   ptr = getSn_RX_RD(sn);
 800936e:	1dfb      	adds	r3, r7, #7
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	3301      	adds	r3, #1
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	22a0      	movs	r2, #160	; 0xa0
 800937a:	0192      	lsls	r2, r2, #6
 800937c:	4694      	mov	ip, r2
 800937e:	4463      	add	r3, ip
 8009380:	0018      	movs	r0, r3
 8009382:	f7ff fc9b 	bl	8008cbc <WIZCHIP_READ>
 8009386:	0003      	movs	r3, r0
 8009388:	b29b      	uxth	r3, r3
 800938a:	021b      	lsls	r3, r3, #8
 800938c:	b29c      	uxth	r4, r3
 800938e:	1dfb      	adds	r3, r7, #7
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	3301      	adds	r3, #1
 8009396:	00db      	lsls	r3, r3, #3
 8009398:	22a4      	movs	r2, #164	; 0xa4
 800939a:	0192      	lsls	r2, r2, #6
 800939c:	4694      	mov	ip, r2
 800939e:	4463      	add	r3, ip
 80093a0:	0018      	movs	r0, r3
 80093a2:	f7ff fc8b 	bl	8008cbc <WIZCHIP_READ>
 80093a6:	0003      	movs	r3, r0
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	197b      	adds	r3, r7, r5
 80093ac:	18a2      	adds	r2, r4, r2
 80093ae:	801a      	strh	r2, [r3, #0]
   ptr += len;
 80093b0:	002c      	movs	r4, r5
 80093b2:	193b      	adds	r3, r7, r4
 80093b4:	1939      	adds	r1, r7, r4
 80093b6:	1d3a      	adds	r2, r7, #4
 80093b8:	8809      	ldrh	r1, [r1, #0]
 80093ba:	8812      	ldrh	r2, [r2, #0]
 80093bc:	188a      	adds	r2, r1, r2
 80093be:	801a      	strh	r2, [r3, #0]
   setSn_RX_RD(sn,ptr);
 80093c0:	1dfb      	adds	r3, r7, #7
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	3301      	adds	r3, #1
 80093c8:	00db      	lsls	r3, r3, #3
 80093ca:	22a0      	movs	r2, #160	; 0xa0
 80093cc:	0192      	lsls	r2, r2, #6
 80093ce:	4694      	mov	ip, r2
 80093d0:	4463      	add	r3, ip
 80093d2:	001a      	movs	r2, r3
 80093d4:	193b      	adds	r3, r7, r4
 80093d6:	881b      	ldrh	r3, [r3, #0]
 80093d8:	0a1b      	lsrs	r3, r3, #8
 80093da:	b29b      	uxth	r3, r3
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	0019      	movs	r1, r3
 80093e0:	0010      	movs	r0, r2
 80093e2:	f7ff fcbd 	bl	8008d60 <WIZCHIP_WRITE>
 80093e6:	1dfb      	adds	r3, r7, #7
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	3301      	adds	r3, #1
 80093ee:	00db      	lsls	r3, r3, #3
 80093f0:	22a4      	movs	r2, #164	; 0xa4
 80093f2:	0192      	lsls	r2, r2, #6
 80093f4:	4694      	mov	ip, r2
 80093f6:	4463      	add	r3, ip
 80093f8:	001a      	movs	r2, r3
 80093fa:	193b      	adds	r3, r7, r4
 80093fc:	881b      	ldrh	r3, [r3, #0]
 80093fe:	b2db      	uxtb	r3, r3
 8009400:	0019      	movs	r1, r3
 8009402:	0010      	movs	r0, r2
 8009404:	f7ff fcac 	bl	8008d60 <WIZCHIP_WRITE>
}
 8009408:	46c0      	nop			; (mov r8, r8)
 800940a:	46bd      	mov	sp, r7
 800940c:	b004      	add	sp, #16
 800940e:	bdb0      	pop	{r4, r5, r7, pc}

08009410 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 8009410:	b580      	push	{r7, lr}
 8009412:	af00      	add	r7, sp, #0
 8009414:	46c0      	nop			; (mov r8, r8)
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}

0800941a <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 800941a:	b580      	push	{r7, lr}
 800941c:	af00      	add	r7, sp, #0
 800941e:	46c0      	nop			; (mov r8, r8)
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 8009424:	b580      	push	{r7, lr}
 8009426:	af00      	add	r7, sp, #0
 8009428:	46c0      	nop			; (mov r8, r8)
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 800942e:	b580      	push	{r7, lr}
 8009430:	af00      	add	r7, sp, #0
 8009432:	46c0      	nop			; (mov r8, r8)
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	781b      	ldrb	r3, [r3, #0]
 8009444:	b2db      	uxtb	r3, r3
 8009446:	0018      	movs	r0, r3
 8009448:	46bd      	mov	sp, r7
 800944a:	b002      	add	sp, #8
 800944c:	bd80      	pop	{r7, pc}

0800944e <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 800944e:	b580      	push	{r7, lr}
 8009450:	b082      	sub	sp, #8
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	000a      	movs	r2, r1
 8009458:	1cfb      	adds	r3, r7, #3
 800945a:	701a      	strb	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	1cfa      	adds	r2, r7, #3
 8009460:	7812      	ldrb	r2, [r2, #0]
 8009462:	701a      	strb	r2, [r3, #0]
 8009464:	46c0      	nop			; (mov r8, r8)
 8009466:	46bd      	mov	sp, r7
 8009468:	b002      	add	sp, #8
 800946a:	bd80      	pop	{r7, pc}

0800946c <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 800946c:	b580      	push	{r7, lr}
 800946e:	af00      	add	r7, sp, #0
 8009470:	2300      	movs	r3, #0
 8009472:	0018      	movs	r0, r3
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	0002      	movs	r2, r0
 8009480:	1dfb      	adds	r3, r7, #7
 8009482:	701a      	strb	r2, [r3, #0]
 8009484:	46c0      	nop			; (mov r8, r8)
 8009486:	46bd      	mov	sp, r7
 8009488:	b002      	add	sp, #8
 800948a:	bd80      	pop	{r7, pc}

0800948c <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	000a      	movs	r2, r1
 8009496:	1cbb      	adds	r3, r7, #2
 8009498:	801a      	strh	r2, [r3, #0]
 800949a:	46c0      	nop			; (mov r8, r8)
 800949c:	46bd      	mov	sp, r7
 800949e:	b002      	add	sp, #8
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b082      	sub	sp, #8
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	000a      	movs	r2, r1
 80094ac:	1cbb      	adds	r3, r7, #2
 80094ae:	801a      	strh	r2, [r3, #0]
 80094b0:	46c0      	nop			; (mov r8, r8)
 80094b2:	46bd      	mov	sp, r7
 80094b4:	b002      	add	sp, #8
 80094b6:	bd80      	pop	{r7, pc}

080094b8 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <reg_wizchip_cs_cbfunc+0x16>
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d106      	bne.n	80094dc <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80094ce:	4b09      	ldr	r3, [pc, #36]	; (80094f4 <reg_wizchip_cs_cbfunc+0x3c>)
 80094d0:	4a09      	ldr	r2, [pc, #36]	; (80094f8 <reg_wizchip_cs_cbfunc+0x40>)
 80094d2:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80094d4:	4b07      	ldr	r3, [pc, #28]	; (80094f4 <reg_wizchip_cs_cbfunc+0x3c>)
 80094d6:	4a09      	ldr	r2, [pc, #36]	; (80094fc <reg_wizchip_cs_cbfunc+0x44>)
 80094d8:	615a      	str	r2, [r3, #20]
 80094da:	e006      	b.n	80094ea <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80094dc:	4b05      	ldr	r3, [pc, #20]	; (80094f4 <reg_wizchip_cs_cbfunc+0x3c>)
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = cs_desel;
 80094e2:	4b04      	ldr	r3, [pc, #16]	; (80094f4 <reg_wizchip_cs_cbfunc+0x3c>)
 80094e4:	683a      	ldr	r2, [r7, #0]
 80094e6:	615a      	str	r2, [r3, #20]
   }
}
 80094e8:	46c0      	nop			; (mov r8, r8)
 80094ea:	46c0      	nop			; (mov r8, r8)
 80094ec:	46bd      	mov	sp, r7
 80094ee:	b002      	add	sp, #8
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	46c0      	nop			; (mov r8, r8)
 80094f4:	20000150 	.word	0x20000150
 80094f8:	08009425 	.word	0x08009425
 80094fc:	0800942f 	.word	0x0800942f

08009500 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b082      	sub	sp, #8
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
   
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800950a:	46c0      	nop			; (mov r8, r8)
 800950c:	4b0f      	ldr	r3, [pc, #60]	; (800954c <reg_wizchip_spi_cbfunc+0x4c>)
 800950e:	881b      	ldrh	r3, [r3, #0]
 8009510:	001a      	movs	r2, r3
 8009512:	2380      	movs	r3, #128	; 0x80
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	4013      	ands	r3, r2
 8009518:	d0f8      	beq.n	800950c <reg_wizchip_spi_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <reg_wizchip_spi_cbfunc+0x26>
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d106      	bne.n	8009534 <reg_wizchip_spi_cbfunc+0x34>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8009526:	4b09      	ldr	r3, [pc, #36]	; (800954c <reg_wizchip_spi_cbfunc+0x4c>)
 8009528:	4a09      	ldr	r2, [pc, #36]	; (8009550 <reg_wizchip_spi_cbfunc+0x50>)
 800952a:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800952c:	4b07      	ldr	r3, [pc, #28]	; (800954c <reg_wizchip_spi_cbfunc+0x4c>)
 800952e:	4a09      	ldr	r2, [pc, #36]	; (8009554 <reg_wizchip_spi_cbfunc+0x54>)
 8009530:	61da      	str	r2, [r3, #28]
 8009532:	e006      	b.n	8009542 <reg_wizchip_spi_cbfunc+0x42>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8009534:	4b05      	ldr	r3, [pc, #20]	; (800954c <reg_wizchip_spi_cbfunc+0x4c>)
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800953a:	4b04      	ldr	r3, [pc, #16]	; (800954c <reg_wizchip_spi_cbfunc+0x4c>)
 800953c:	683a      	ldr	r2, [r7, #0]
 800953e:	61da      	str	r2, [r3, #28]
   }
}
 8009540:	46c0      	nop			; (mov r8, r8)
 8009542:	46c0      	nop			; (mov r8, r8)
 8009544:	46bd      	mov	sp, r7
 8009546:	b002      	add	sp, #8
 8009548:	bd80      	pop	{r7, pc}
 800954a:	46c0      	nop			; (mov r8, r8)
 800954c:	20000150 	.word	0x20000150
 8009550:	0800946d 	.word	0x0800946d
 8009554:	08009479 	.word	0x08009479

08009558 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8009562:	46c0      	nop			; (mov r8, r8)
 8009564:	4b0f      	ldr	r3, [pc, #60]	; (80095a4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8009566:	881b      	ldrh	r3, [r3, #0]
 8009568:	001a      	movs	r2, r3
 800956a:	2380      	movs	r3, #128	; 0x80
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4013      	ands	r3, r2
 8009570:	d0f8      	beq.n	8009564 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d002      	beq.n	800957e <reg_wizchip_spiburst_cbfunc+0x26>
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d106      	bne.n	800958c <reg_wizchip_spiburst_cbfunc+0x34>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 800957e:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8009580:	4a09      	ldr	r2, [pc, #36]	; (80095a8 <reg_wizchip_spiburst_cbfunc+0x50>)
 8009582:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8009584:	4b07      	ldr	r3, [pc, #28]	; (80095a4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8009586:	4a09      	ldr	r2, [pc, #36]	; (80095ac <reg_wizchip_spiburst_cbfunc+0x54>)
 8009588:	625a      	str	r2, [r3, #36]	; 0x24
 800958a:	e006      	b.n	800959a <reg_wizchip_spiburst_cbfunc+0x42>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 800958c:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8009592:	4b04      	ldr	r3, [pc, #16]	; (80095a4 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8009594:	683a      	ldr	r2, [r7, #0]
 8009596:	625a      	str	r2, [r3, #36]	; 0x24
   }
}
 8009598:	46c0      	nop			; (mov r8, r8)
 800959a:	46c0      	nop			; (mov r8, r8)
 800959c:	46bd      	mov	sp, r7
 800959e:	b002      	add	sp, #8
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	46c0      	nop			; (mov r8, r8)
 80095a4:	20000150 	.word	0x20000150
 80095a8:	0800948d 	.word	0x0800948d
 80095ac:	080094a3 	.word	0x080094a3

080095b0 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 80095b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095b2:	b087      	sub	sp, #28
 80095b4:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80095b6:	1d39      	adds	r1, r7, #4
 80095b8:	2390      	movs	r3, #144	; 0x90
 80095ba:	011b      	lsls	r3, r3, #4
 80095bc:	2206      	movs	r2, #6
 80095be:	0018      	movs	r0, r3
 80095c0:	f7ff fc24 	bl	8008e0c <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80095c4:	2414      	movs	r4, #20
 80095c6:	1939      	adds	r1, r7, r4
 80095c8:	2380      	movs	r3, #128	; 0x80
 80095ca:	005b      	lsls	r3, r3, #1
 80095cc:	2204      	movs	r2, #4
 80095ce:	0018      	movs	r0, r3
 80095d0:	f7ff fc1c 	bl	8008e0c <WIZCHIP_READ_BUF>
 80095d4:	2510      	movs	r5, #16
 80095d6:	1979      	adds	r1, r7, r5
 80095d8:	23a0      	movs	r3, #160	; 0xa0
 80095da:	00db      	lsls	r3, r3, #3
 80095dc:	2204      	movs	r2, #4
 80095de:	0018      	movs	r0, r3
 80095e0:	f7ff fc14 	bl	8008e0c <WIZCHIP_READ_BUF>
 80095e4:	260c      	movs	r6, #12
 80095e6:	19b9      	adds	r1, r7, r6
 80095e8:	23f0      	movs	r3, #240	; 0xf0
 80095ea:	011b      	lsls	r3, r3, #4
 80095ec:	2204      	movs	r2, #4
 80095ee:	0018      	movs	r0, r3
 80095f0:	f7ff fc0c 	bl	8008e0c <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80095f4:	2180      	movs	r1, #128	; 0x80
 80095f6:	2000      	movs	r0, #0
 80095f8:	f7ff fbb2 	bl	8008d60 <WIZCHIP_WRITE>
   getMR(); // for delay
 80095fc:	2000      	movs	r0, #0
 80095fe:	f7ff fb5d 	bl	8008cbc <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8009602:	1d39      	adds	r1, r7, #4
 8009604:	2390      	movs	r3, #144	; 0x90
 8009606:	011b      	lsls	r3, r3, #4
 8009608:	2206      	movs	r2, #6
 800960a:	0018      	movs	r0, r3
 800960c:	f7ff fc6c 	bl	8008ee8 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8009610:	1939      	adds	r1, r7, r4
 8009612:	2380      	movs	r3, #128	; 0x80
 8009614:	005b      	lsls	r3, r3, #1
 8009616:	2204      	movs	r2, #4
 8009618:	0018      	movs	r0, r3
 800961a:	f7ff fc65 	bl	8008ee8 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 800961e:	1979      	adds	r1, r7, r5
 8009620:	23a0      	movs	r3, #160	; 0xa0
 8009622:	00db      	lsls	r3, r3, #3
 8009624:	2204      	movs	r2, #4
 8009626:	0018      	movs	r0, r3
 8009628:	f7ff fc5e 	bl	8008ee8 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 800962c:	19b9      	adds	r1, r7, r6
 800962e:	23f0      	movs	r3, #240	; 0xf0
 8009630:	011b      	lsls	r3, r3, #4
 8009632:	2204      	movs	r2, #4
 8009634:	0018      	movs	r0, r3
 8009636:	f7ff fc57 	bl	8008ee8 <WIZCHIP_WRITE_BUF>
}
 800963a:	46c0      	nop			; (mov r8, r8)
 800963c:	46bd      	mov	sp, r7
 800963e:	b007      	add	sp, #28
 8009640:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009642 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8009642:	b590      	push	{r4, r7, lr}
 8009644:	b085      	sub	sp, #20
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
 800964a:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 800964c:	240e      	movs	r4, #14
 800964e:	193b      	adds	r3, r7, r4
 8009650:	2200      	movs	r2, #0
 8009652:	701a      	strb	r2, [r3, #0]
   wizchip_sw_reset();
 8009654:	f7ff ffac 	bl	80095b0 <wizchip_sw_reset>
   if(txsize)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d055      	beq.n	800970a <wizchip_init+0xc8>
   {
      tmp = 0;
 800965e:	193b      	adds	r3, r7, r4
 8009660:	2200      	movs	r2, #0
 8009662:	701a      	strb	r2, [r3, #0]
            tmp += txsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009664:	230f      	movs	r3, #15
 8009666:	18fb      	adds	r3, r7, r3
 8009668:	2200      	movs	r2, #0
 800966a:	701a      	strb	r2, [r3, #0]
 800966c:	e01e      	b.n	80096ac <wizchip_init+0x6a>
        {
            tmp += txsize[i];
 800966e:	230f      	movs	r3, #15
 8009670:	18fb      	adds	r3, r7, r3
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	b25b      	sxtb	r3, r3
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	18d3      	adds	r3, r2, r3
 800967a:	781a      	ldrb	r2, [r3, #0]
 800967c:	210e      	movs	r1, #14
 800967e:	187b      	adds	r3, r7, r1
 8009680:	781b      	ldrb	r3, [r3, #0]
 8009682:	18d3      	adds	r3, r2, r3
 8009684:	b2da      	uxtb	r2, r3
 8009686:	187b      	adds	r3, r7, r1
 8009688:	701a      	strb	r2, [r3, #0]

        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 800968a:	187b      	adds	r3, r7, r1
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	b25b      	sxtb	r3, r3
 8009690:	2b10      	cmp	r3, #16
 8009692:	dd02      	ble.n	800969a <wizchip_init+0x58>
 8009694:	2301      	movs	r3, #1
 8009696:	425b      	negs	r3, r3
 8009698:	e092      	b.n	80097c0 <wizchip_init+0x17e>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800969a:	210f      	movs	r1, #15
 800969c:	187b      	adds	r3, r7, r1
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	b25b      	sxtb	r3, r3
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	3301      	adds	r3, #1
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	187b      	adds	r3, r7, r1
 80096aa:	701a      	strb	r2, [r3, #0]
 80096ac:	220f      	movs	r2, #15
 80096ae:	18bb      	adds	r3, r7, r2
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	b25b      	sxtb	r3, r3
 80096b4:	2b07      	cmp	r3, #7
 80096b6:	ddda      	ble.n	800966e <wizchip_init+0x2c>
        #endif
        }
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80096b8:	18bb      	adds	r3, r7, r2
 80096ba:	2200      	movs	r2, #0
 80096bc:	701a      	strb	r2, [r3, #0]
 80096be:	e01e      	b.n	80096fe <wizchip_init+0xbc>
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100
            j = 0;
            while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_TXBUF_SIZE(i, j);
        #else
            setSn_TXBUF_SIZE(i, txsize[i]);
 80096c0:	220f      	movs	r2, #15
 80096c2:	18bb      	adds	r3, r7, r2
 80096c4:	781b      	ldrb	r3, [r3, #0]
 80096c6:	b25b      	sxtb	r3, r3
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	3301      	adds	r3, #1
 80096cc:	00db      	lsls	r3, r3, #3
 80096ce:	21f8      	movs	r1, #248	; 0xf8
 80096d0:	0149      	lsls	r1, r1, #5
 80096d2:	468c      	mov	ip, r1
 80096d4:	4463      	add	r3, ip
 80096d6:	0018      	movs	r0, r3
 80096d8:	0014      	movs	r4, r2
 80096da:	18bb      	adds	r3, r7, r2
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	b25b      	sxtb	r3, r3
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	18d3      	adds	r3, r2, r3
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	0019      	movs	r1, r3
 80096e8:	f7ff fb3a 	bl	8008d60 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80096ec:	0021      	movs	r1, r4
 80096ee:	187b      	adds	r3, r7, r1
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	b25b      	sxtb	r3, r3
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	3301      	adds	r3, #1
 80096f8:	b2da      	uxtb	r2, r3
 80096fa:	187b      	adds	r3, r7, r1
 80096fc:	701a      	strb	r2, [r3, #0]
 80096fe:	230f      	movs	r3, #15
 8009700:	18fb      	adds	r3, r7, r3
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	b25b      	sxtb	r3, r3
 8009706:	2b07      	cmp	r3, #7
 8009708:	ddda      	ble.n	80096c0 <wizchip_init+0x7e>
        }

    #endif
   }

   if(rxsize)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d056      	beq.n	80097be <wizchip_init+0x17c>
   {
      tmp = 0;
 8009710:	230e      	movs	r3, #14
 8009712:	18fb      	adds	r3, r7, r3
 8009714:	2200      	movs	r2, #0
 8009716:	701a      	strb	r2, [r3, #0]
            tmp += rxsize[i];
            if(tmp > 128) return -1;
        }
        if(tmp % 8) return -1;
   #else
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8009718:	230f      	movs	r3, #15
 800971a:	18fb      	adds	r3, r7, r3
 800971c:	2200      	movs	r2, #0
 800971e:	701a      	strb	r2, [r3, #0]
 8009720:	e01e      	b.n	8009760 <wizchip_init+0x11e>
        {
            tmp += rxsize[i];
 8009722:	230f      	movs	r3, #15
 8009724:	18fb      	adds	r3, r7, r3
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	b25b      	sxtb	r3, r3
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	18d3      	adds	r3, r2, r3
 800972e:	781a      	ldrb	r2, [r3, #0]
 8009730:	210e      	movs	r1, #14
 8009732:	187b      	adds	r3, r7, r1
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	18d3      	adds	r3, r2, r3
 8009738:	b2da      	uxtb	r2, r3
 800973a:	187b      	adds	r3, r7, r1
 800973c:	701a      	strb	r2, [r3, #0]
        #if _WIZCHIP_ < W5200    //2016.10.28 peter add condition for w5100 and w5100s
            if(tmp > 8) return -1;
        #else
            if(tmp > 16) return -1;
 800973e:	187b      	adds	r3, r7, r1
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	b25b      	sxtb	r3, r3
 8009744:	2b10      	cmp	r3, #16
 8009746:	dd02      	ble.n	800974e <wizchip_init+0x10c>
 8009748:	2301      	movs	r3, #1
 800974a:	425b      	negs	r3, r3
 800974c:	e038      	b.n	80097c0 <wizchip_init+0x17e>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800974e:	210f      	movs	r1, #15
 8009750:	187b      	adds	r3, r7, r1
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	b25b      	sxtb	r3, r3
 8009756:	b2db      	uxtb	r3, r3
 8009758:	3301      	adds	r3, #1
 800975a:	b2da      	uxtb	r2, r3
 800975c:	187b      	adds	r3, r7, r1
 800975e:	701a      	strb	r2, [r3, #0]
 8009760:	220f      	movs	r2, #15
 8009762:	18bb      	adds	r3, r7, r2
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	b25b      	sxtb	r3, r3
 8009768:	2b07      	cmp	r3, #7
 800976a:	ddda      	ble.n	8009722 <wizchip_init+0xe0>
        #endif
        }

        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800976c:	18bb      	adds	r3, r7, r2
 800976e:	2200      	movs	r2, #0
 8009770:	701a      	strb	r2, [r3, #0]
 8009772:	e01e      	b.n	80097b2 <wizchip_init+0x170>
        #if _WIZCHIP_ < W5200    // add condition for w5100
            j = 0;
            while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
            setSn_RXBUF_SIZE(i, j);
        #else
            setSn_RXBUF_SIZE(i, rxsize[i]);
 8009774:	220f      	movs	r2, #15
 8009776:	18bb      	adds	r3, r7, r2
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	b25b      	sxtb	r3, r3
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	3301      	adds	r3, #1
 8009780:	00db      	lsls	r3, r3, #3
 8009782:	21f0      	movs	r1, #240	; 0xf0
 8009784:	0149      	lsls	r1, r1, #5
 8009786:	468c      	mov	ip, r1
 8009788:	4463      	add	r3, ip
 800978a:	0018      	movs	r0, r3
 800978c:	0014      	movs	r4, r2
 800978e:	18bb      	adds	r3, r7, r2
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	b25b      	sxtb	r3, r3
 8009794:	683a      	ldr	r2, [r7, #0]
 8009796:	18d3      	adds	r3, r2, r3
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	0019      	movs	r1, r3
 800979c:	f7ff fae0 	bl	8008d60 <WIZCHIP_WRITE>
        for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80097a0:	0021      	movs	r1, r4
 80097a2:	187b      	adds	r3, r7, r1
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	b25b      	sxtb	r3, r3
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	3301      	adds	r3, #1
 80097ac:	b2da      	uxtb	r2, r3
 80097ae:	187b      	adds	r3, r7, r1
 80097b0:	701a      	strb	r2, [r3, #0]
 80097b2:	230f      	movs	r3, #15
 80097b4:	18fb      	adds	r3, r7, r3
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	b25b      	sxtb	r3, r3
 80097ba:	2b07      	cmp	r3, #7
 80097bc:	ddda      	ble.n	8009774 <wizchip_init+0x132>
        #endif
        }
    #endif
   }
   return 0;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	0018      	movs	r0, r3
 80097c2:	46bd      	mov	sp, r7
 80097c4:	b005      	add	sp, #20
 80097c6:	bd90      	pop	{r4, r7, pc}

080097c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80097c8:	480d      	ldr	r0, [pc, #52]	; (8009800 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80097ca:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80097cc:	f7ff f9d6 	bl	8008b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80097d0:	480c      	ldr	r0, [pc, #48]	; (8009804 <LoopForever+0x6>)
  ldr r1, =_edata
 80097d2:	490d      	ldr	r1, [pc, #52]	; (8009808 <LoopForever+0xa>)
  ldr r2, =_sidata
 80097d4:	4a0d      	ldr	r2, [pc, #52]	; (800980c <LoopForever+0xe>)
  movs r3, #0
 80097d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80097d8:	e002      	b.n	80097e0 <LoopCopyDataInit>

080097da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80097da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80097dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80097de:	3304      	adds	r3, #4

080097e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80097e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80097e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80097e4:	d3f9      	bcc.n	80097da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80097e6:	4a0a      	ldr	r2, [pc, #40]	; (8009810 <LoopForever+0x12>)
  ldr r4, =_ebss
 80097e8:	4c0a      	ldr	r4, [pc, #40]	; (8009814 <LoopForever+0x16>)
  movs r3, #0
 80097ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80097ec:	e001      	b.n	80097f2 <LoopFillZerobss>

080097ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80097ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80097f0:	3204      	adds	r2, #4

080097f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80097f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80097f4:	d3fb      	bcc.n	80097ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80097f6:	f007 faed 	bl	8010dd4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80097fa:	f7fc f9b3 	bl	8005b64 <main>

080097fe <LoopForever>:

LoopForever:
  b LoopForever
 80097fe:	e7fe      	b.n	80097fe <LoopForever>
  ldr   r0, =_estack
 8009800:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8009804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009808:	20000354 	.word	0x20000354
  ldr r2, =_sidata
 800980c:	08017c80 	.word	0x08017c80
  ldr r2, =_sbss
 8009810:	20000354 	.word	0x20000354
  ldr r4, =_ebss
 8009814:	20000ca4 	.word	0x20000ca4

08009818 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009818:	e7fe      	b.n	8009818 <ADC1_IRQHandler>
	...

0800981c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009822:	1dfb      	adds	r3, r7, #7
 8009824:	2200      	movs	r2, #0
 8009826:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009828:	4b0b      	ldr	r3, [pc, #44]	; (8009858 <HAL_Init+0x3c>)
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	4b0a      	ldr	r3, [pc, #40]	; (8009858 <HAL_Init+0x3c>)
 800982e:	2180      	movs	r1, #128	; 0x80
 8009830:	0049      	lsls	r1, r1, #1
 8009832:	430a      	orrs	r2, r1
 8009834:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009836:	2000      	movs	r0, #0
 8009838:	f000 f810 	bl	800985c <HAL_InitTick>
 800983c:	1e03      	subs	r3, r0, #0
 800983e:	d003      	beq.n	8009848 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8009840:	1dfb      	adds	r3, r7, #7
 8009842:	2201      	movs	r2, #1
 8009844:	701a      	strb	r2, [r3, #0]
 8009846:	e001      	b.n	800984c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8009848:	f7fe fe40 	bl	80084cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800984c:	1dfb      	adds	r3, r7, #7
 800984e:	781b      	ldrb	r3, [r3, #0]
}
 8009850:	0018      	movs	r0, r3
 8009852:	46bd      	mov	sp, r7
 8009854:	b002      	add	sp, #8
 8009856:	bd80      	pop	{r7, pc}
 8009858:	40022000 	.word	0x40022000

0800985c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800985c:	b590      	push	{r4, r7, lr}
 800985e:	b085      	sub	sp, #20
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009864:	230f      	movs	r3, #15
 8009866:	18fb      	adds	r3, r7, r3
 8009868:	2200      	movs	r2, #0
 800986a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800986c:	4b1d      	ldr	r3, [pc, #116]	; (80098e4 <HAL_InitTick+0x88>)
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d02b      	beq.n	80098cc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8009874:	4b1c      	ldr	r3, [pc, #112]	; (80098e8 <HAL_InitTick+0x8c>)
 8009876:	681c      	ldr	r4, [r3, #0]
 8009878:	4b1a      	ldr	r3, [pc, #104]	; (80098e4 <HAL_InitTick+0x88>)
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	0019      	movs	r1, r3
 800987e:	23fa      	movs	r3, #250	; 0xfa
 8009880:	0098      	lsls	r0, r3, #2
 8009882:	f7f6 fc63 	bl	800014c <__udivsi3>
 8009886:	0003      	movs	r3, r0
 8009888:	0019      	movs	r1, r3
 800988a:	0020      	movs	r0, r4
 800988c:	f7f6 fc5e 	bl	800014c <__udivsi3>
 8009890:	0003      	movs	r3, r0
 8009892:	0018      	movs	r0, r3
 8009894:	f001 f8f5 	bl	800aa82 <HAL_SYSTICK_Config>
 8009898:	1e03      	subs	r3, r0, #0
 800989a:	d112      	bne.n	80098c2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b03      	cmp	r3, #3
 80098a0:	d80a      	bhi.n	80098b8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	2301      	movs	r3, #1
 80098a6:	425b      	negs	r3, r3
 80098a8:	2200      	movs	r2, #0
 80098aa:	0018      	movs	r0, r3
 80098ac:	f001 f8c4 	bl	800aa38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80098b0:	4b0e      	ldr	r3, [pc, #56]	; (80098ec <HAL_InitTick+0x90>)
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	601a      	str	r2, [r3, #0]
 80098b6:	e00d      	b.n	80098d4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80098b8:	230f      	movs	r3, #15
 80098ba:	18fb      	adds	r3, r7, r3
 80098bc:	2201      	movs	r2, #1
 80098be:	701a      	strb	r2, [r3, #0]
 80098c0:	e008      	b.n	80098d4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80098c2:	230f      	movs	r3, #15
 80098c4:	18fb      	adds	r3, r7, r3
 80098c6:	2201      	movs	r2, #1
 80098c8:	701a      	strb	r2, [r3, #0]
 80098ca:	e003      	b.n	80098d4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80098cc:	230f      	movs	r3, #15
 80098ce:	18fb      	adds	r3, r7, r3
 80098d0:	2201      	movs	r2, #1
 80098d2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80098d4:	230f      	movs	r3, #15
 80098d6:	18fb      	adds	r3, r7, r3
 80098d8:	781b      	ldrb	r3, [r3, #0]
}
 80098da:	0018      	movs	r0, r3
 80098dc:	46bd      	mov	sp, r7
 80098de:	b005      	add	sp, #20
 80098e0:	bd90      	pop	{r4, r7, pc}
 80098e2:	46c0      	nop			; (mov r8, r8)
 80098e4:	2000017c 	.word	0x2000017c
 80098e8:	2000014c 	.word	0x2000014c
 80098ec:	20000178 	.word	0x20000178

080098f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80098f4:	4b05      	ldr	r3, [pc, #20]	; (800990c <HAL_IncTick+0x1c>)
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	001a      	movs	r2, r3
 80098fa:	4b05      	ldr	r3, [pc, #20]	; (8009910 <HAL_IncTick+0x20>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	18d2      	adds	r2, r2, r3
 8009900:	4b03      	ldr	r3, [pc, #12]	; (8009910 <HAL_IncTick+0x20>)
 8009902:	601a      	str	r2, [r3, #0]
}
 8009904:	46c0      	nop			; (mov r8, r8)
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	46c0      	nop			; (mov r8, r8)
 800990c:	2000017c 	.word	0x2000017c
 8009910:	20000c90 	.word	0x20000c90

08009914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	af00      	add	r7, sp, #0
  return uwTick;
 8009918:	4b02      	ldr	r3, [pc, #8]	; (8009924 <HAL_GetTick+0x10>)
 800991a:	681b      	ldr	r3, [r3, #0]
}
 800991c:	0018      	movs	r0, r3
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}
 8009922:	46c0      	nop			; (mov r8, r8)
 8009924:	20000c90 	.word	0x20000c90

08009928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009930:	f7ff fff0 	bl	8009914 <HAL_GetTick>
 8009934:	0003      	movs	r3, r0
 8009936:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	3301      	adds	r3, #1
 8009940:	d005      	beq.n	800994e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009942:	4b0a      	ldr	r3, [pc, #40]	; (800996c <HAL_Delay+0x44>)
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	001a      	movs	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	189b      	adds	r3, r3, r2
 800994c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800994e:	46c0      	nop			; (mov r8, r8)
 8009950:	f7ff ffe0 	bl	8009914 <HAL_GetTick>
 8009954:	0002      	movs	r2, r0
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	68fa      	ldr	r2, [r7, #12]
 800995c:	429a      	cmp	r2, r3
 800995e:	d8f7      	bhi.n	8009950 <HAL_Delay+0x28>
  {
  }
}
 8009960:	46c0      	nop			; (mov r8, r8)
 8009962:	46c0      	nop			; (mov r8, r8)
 8009964:	46bd      	mov	sp, r7
 8009966:	b004      	add	sp, #16
 8009968:	bd80      	pop	{r7, pc}
 800996a:	46c0      	nop			; (mov r8, r8)
 800996c:	2000017c 	.word	0x2000017c

08009970 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8009978:	4b06      	ldr	r3, [pc, #24]	; (8009994 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a06      	ldr	r2, [pc, #24]	; (8009998 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800997e:	4013      	ands	r3, r2
 8009980:	0019      	movs	r1, r3
 8009982:	4b04      	ldr	r3, [pc, #16]	; (8009994 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	430a      	orrs	r2, r1
 8009988:	601a      	str	r2, [r3, #0]
}
 800998a:	46c0      	nop			; (mov r8, r8)
 800998c:	46bd      	mov	sp, r7
 800998e:	b002      	add	sp, #8
 8009990:	bd80      	pop	{r7, pc}
 8009992:	46c0      	nop			; (mov r8, r8)
 8009994:	40010000 	.word	0x40010000
 8009998:	fffff9ff 	.word	0xfffff9ff

0800999c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b082      	sub	sp, #8
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a05      	ldr	r2, [pc, #20]	; (80099c0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80099ac:	401a      	ands	r2, r3
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	431a      	orrs	r2, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	601a      	str	r2, [r3, #0]
}
 80099b6:	46c0      	nop			; (mov r8, r8)
 80099b8:	46bd      	mov	sp, r7
 80099ba:	b002      	add	sp, #8
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	46c0      	nop			; (mov r8, r8)
 80099c0:	fe3fffff 	.word	0xfe3fffff

080099c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	23e0      	movs	r3, #224	; 0xe0
 80099d2:	045b      	lsls	r3, r3, #17
 80099d4:	4013      	ands	r3, r2
}
 80099d6:	0018      	movs	r0, r3
 80099d8:	46bd      	mov	sp, r7
 80099da:	b002      	add	sp, #8
 80099dc:	bd80      	pop	{r7, pc}

080099de <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80099de:	b580      	push	{r7, lr}
 80099e0:	b084      	sub	sp, #16
 80099e2:	af00      	add	r7, sp, #0
 80099e4:	60f8      	str	r0, [r7, #12]
 80099e6:	60b9      	str	r1, [r7, #8]
 80099e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	2104      	movs	r1, #4
 80099f2:	400a      	ands	r2, r1
 80099f4:	2107      	movs	r1, #7
 80099f6:	4091      	lsls	r1, r2
 80099f8:	000a      	movs	r2, r1
 80099fa:	43d2      	mvns	r2, r2
 80099fc:	401a      	ands	r2, r3
 80099fe:	68bb      	ldr	r3, [r7, #8]
 8009a00:	2104      	movs	r1, #4
 8009a02:	400b      	ands	r3, r1
 8009a04:	6879      	ldr	r1, [r7, #4]
 8009a06:	4099      	lsls	r1, r3
 8009a08:	000b      	movs	r3, r1
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8009a10:	46c0      	nop			; (mov r8, r8)
 8009a12:	46bd      	mov	sp, r7
 8009a14:	b004      	add	sp, #16
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	68da      	ldr	r2, [r3, #12]
 8009a24:	23c0      	movs	r3, #192	; 0xc0
 8009a26:	011b      	lsls	r3, r3, #4
 8009a28:	4013      	ands	r3, r2
 8009a2a:	d101      	bne.n	8009a30 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e000      	b.n	8009a32 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	0018      	movs	r0, r3
 8009a34:	46bd      	mov	sp, r7
 8009a36:	b002      	add	sp, #8
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b084      	sub	sp, #16
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	60f8      	str	r0, [r7, #12]
 8009a42:	60b9      	str	r1, [r7, #8]
 8009a44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	211f      	movs	r1, #31
 8009a4e:	400a      	ands	r2, r1
 8009a50:	210f      	movs	r1, #15
 8009a52:	4091      	lsls	r1, r2
 8009a54:	000a      	movs	r2, r1
 8009a56:	43d2      	mvns	r2, r2
 8009a58:	401a      	ands	r2, r3
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	0e9b      	lsrs	r3, r3, #26
 8009a5e:	210f      	movs	r1, #15
 8009a60:	4019      	ands	r1, r3
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	201f      	movs	r0, #31
 8009a66:	4003      	ands	r3, r0
 8009a68:	4099      	lsls	r1, r3
 8009a6a:	000b      	movs	r3, r1
 8009a6c:	431a      	orrs	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009a72:	46c0      	nop			; (mov r8, r8)
 8009a74:	46bd      	mov	sp, r7
 8009a76:	b004      	add	sp, #16
 8009a78:	bd80      	pop	{r7, pc}

08009a7a <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b082      	sub	sp, #8
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	035b      	lsls	r3, r3, #13
 8009a8c:	0b5b      	lsrs	r3, r3, #13
 8009a8e:	431a      	orrs	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009a94:	46c0      	nop			; (mov r8, r8)
 8009a96:	46bd      	mov	sp, r7
 8009a98:	b002      	add	sp, #8
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aaa:	683a      	ldr	r2, [r7, #0]
 8009aac:	0352      	lsls	r2, r2, #13
 8009aae:	0b52      	lsrs	r2, r2, #13
 8009ab0:	43d2      	mvns	r2, r2
 8009ab2:	401a      	ands	r2, r3
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009ab8:	46c0      	nop			; (mov r8, r8)
 8009aba:	46bd      	mov	sp, r7
 8009abc:	b002      	add	sp, #8
 8009abe:	bd80      	pop	{r7, pc}

08009ac0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	695b      	ldr	r3, [r3, #20]
 8009ad0:	68ba      	ldr	r2, [r7, #8]
 8009ad2:	0212      	lsls	r2, r2, #8
 8009ad4:	43d2      	mvns	r2, r2
 8009ad6:	401a      	ands	r2, r3
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	021b      	lsls	r3, r3, #8
 8009adc:	6879      	ldr	r1, [r7, #4]
 8009ade:	400b      	ands	r3, r1
 8009ae0:	4904      	ldr	r1, [pc, #16]	; (8009af4 <LL_ADC_SetChannelSamplingTime+0x34>)
 8009ae2:	400b      	ands	r3, r1
 8009ae4:	431a      	orrs	r2, r3
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8009aea:	46c0      	nop			; (mov r8, r8)
 8009aec:	46bd      	mov	sp, r7
 8009aee:	b004      	add	sp, #16
 8009af0:	bd80      	pop	{r7, pc}
 8009af2:	46c0      	nop			; (mov r8, r8)
 8009af4:	07ffff00 	.word	0x07ffff00

08009af8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	4a05      	ldr	r2, [pc, #20]	; (8009b1c <LL_ADC_EnableInternalRegulator+0x24>)
 8009b06:	4013      	ands	r3, r2
 8009b08:	2280      	movs	r2, #128	; 0x80
 8009b0a:	0552      	lsls	r2, r2, #21
 8009b0c:	431a      	orrs	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009b12:	46c0      	nop			; (mov r8, r8)
 8009b14:	46bd      	mov	sp, r7
 8009b16:	b002      	add	sp, #8
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	46c0      	nop			; (mov r8, r8)
 8009b1c:	6fffffe8 	.word	0x6fffffe8

08009b20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	689a      	ldr	r2, [r3, #8]
 8009b2c:	2380      	movs	r3, #128	; 0x80
 8009b2e:	055b      	lsls	r3, r3, #21
 8009b30:	401a      	ands	r2, r3
 8009b32:	2380      	movs	r3, #128	; 0x80
 8009b34:	055b      	lsls	r3, r3, #21
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d101      	bne.n	8009b3e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e000      	b.n	8009b40 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	0018      	movs	r0, r3
 8009b42:	46bd      	mov	sp, r7
 8009b44:	b002      	add	sp, #8
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	4a04      	ldr	r2, [pc, #16]	; (8009b68 <LL_ADC_Enable+0x20>)
 8009b56:	4013      	ands	r3, r2
 8009b58:	2201      	movs	r2, #1
 8009b5a:	431a      	orrs	r2, r3
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8009b60:	46c0      	nop			; (mov r8, r8)
 8009b62:	46bd      	mov	sp, r7
 8009b64:	b002      	add	sp, #8
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	7fffffe8 	.word	0x7fffffe8

08009b6c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	4a04      	ldr	r2, [pc, #16]	; (8009b8c <LL_ADC_Disable+0x20>)
 8009b7a:	4013      	ands	r3, r2
 8009b7c:	2202      	movs	r2, #2
 8009b7e:	431a      	orrs	r2, r3
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009b84:	46c0      	nop			; (mov r8, r8)
 8009b86:	46bd      	mov	sp, r7
 8009b88:	b002      	add	sp, #8
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	7fffffe8 	.word	0x7fffffe8

08009b90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	689b      	ldr	r3, [r3, #8]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	4013      	ands	r3, r2
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d101      	bne.n	8009ba8 <LL_ADC_IsEnabled+0x18>
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	e000      	b.n	8009baa <LL_ADC_IsEnabled+0x1a>
 8009ba8:	2300      	movs	r3, #0
}
 8009baa:	0018      	movs	r0, r3
 8009bac:	46bd      	mov	sp, r7
 8009bae:	b002      	add	sp, #8
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b082      	sub	sp, #8
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	2202      	movs	r2, #2
 8009bc0:	4013      	ands	r3, r2
 8009bc2:	2b02      	cmp	r3, #2
 8009bc4:	d101      	bne.n	8009bca <LL_ADC_IsDisableOngoing+0x18>
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e000      	b.n	8009bcc <LL_ADC_IsDisableOngoing+0x1a>
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	0018      	movs	r0, r3
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	b002      	add	sp, #8
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b082      	sub	sp, #8
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	4a04      	ldr	r2, [pc, #16]	; (8009bf4 <LL_ADC_REG_StartConversion+0x20>)
 8009be2:	4013      	ands	r3, r2
 8009be4:	2204      	movs	r2, #4
 8009be6:	431a      	orrs	r2, r3
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009bec:	46c0      	nop			; (mov r8, r8)
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	b002      	add	sp, #8
 8009bf2:	bd80      	pop	{r7, pc}
 8009bf4:	7fffffe8 	.word	0x7fffffe8

08009bf8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b082      	sub	sp, #8
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	2204      	movs	r2, #4
 8009c06:	4013      	ands	r3, r2
 8009c08:	2b04      	cmp	r3, #4
 8009c0a:	d101      	bne.n	8009c10 <LL_ADC_REG_IsConversionOngoing+0x18>
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e000      	b.n	8009c12 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	0018      	movs	r0, r3
 8009c14:	46bd      	mov	sp, r7
 8009c16:	b002      	add	sp, #8
 8009c18:	bd80      	pop	{r7, pc}
	...

08009c1c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b088      	sub	sp, #32
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009c24:	231f      	movs	r3, #31
 8009c26:	18fb      	adds	r3, r7, r3
 8009c28:	2200      	movs	r2, #0
 8009c2a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8009c30:	2300      	movs	r3, #0
 8009c32:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009c34:	2300      	movs	r3, #0
 8009c36:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d101      	bne.n	8009c42 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e1ab      	b.n	8009f9a <HAL_ADC_Init+0x37e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d10a      	bne.n	8009c60 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	0018      	movs	r0, r3
 8009c4e:	f7fe fc65 	bl	800851c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2200      	movs	r2, #0
 8009c56:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2254      	movs	r2, #84	; 0x54
 8009c5c:	2100      	movs	r1, #0
 8009c5e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	0018      	movs	r0, r3
 8009c66:	f7ff ff5b 	bl	8009b20 <LL_ADC_IsInternalRegulatorEnabled>
 8009c6a:	1e03      	subs	r3, r0, #0
 8009c6c:	d114      	bne.n	8009c98 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	0018      	movs	r0, r3
 8009c74:	f7ff ff40 	bl	8009af8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009c78:	4bca      	ldr	r3, [pc, #808]	; (8009fa4 <HAL_ADC_Init+0x388>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	49ca      	ldr	r1, [pc, #808]	; (8009fa8 <HAL_ADC_Init+0x38c>)
 8009c7e:	0018      	movs	r0, r3
 8009c80:	f7f6 fa64 	bl	800014c <__udivsi3>
 8009c84:	0003      	movs	r3, r0
 8009c86:	005b      	lsls	r3, r3, #1
 8009c88:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009c8a:	e002      	b.n	8009c92 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1f9      	bne.n	8009c8c <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	0018      	movs	r0, r3
 8009c9e:	f7ff ff3f 	bl	8009b20 <LL_ADC_IsInternalRegulatorEnabled>
 8009ca2:	1e03      	subs	r3, r0, #0
 8009ca4:	d10f      	bne.n	8009cc6 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009caa:	2210      	movs	r2, #16
 8009cac:	431a      	orrs	r2, r3
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	431a      	orrs	r2, r3
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009cbe:	231f      	movs	r3, #31
 8009cc0:	18fb      	adds	r3, r7, r3
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	0018      	movs	r0, r3
 8009ccc:	f7ff ff94 	bl	8009bf8 <LL_ADC_REG_IsConversionOngoing>
 8009cd0:	0003      	movs	r3, r0
 8009cd2:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cd8:	2210      	movs	r2, #16
 8009cda:	4013      	ands	r3, r2
 8009cdc:	d000      	beq.n	8009ce0 <HAL_ADC_Init+0xc4>
 8009cde:	e14f      	b.n	8009f80 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d000      	beq.n	8009ce8 <HAL_ADC_Init+0xcc>
 8009ce6:	e14b      	b.n	8009f80 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cec:	4aaf      	ldr	r2, [pc, #700]	; (8009fac <HAL_ADC_Init+0x390>)
 8009cee:	4013      	ands	r3, r2
 8009cf0:	2202      	movs	r2, #2
 8009cf2:	431a      	orrs	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	0018      	movs	r0, r3
 8009cfe:	f7ff ff47 	bl	8009b90 <LL_ADC_IsEnabled>
 8009d02:	1e03      	subs	r3, r0, #0
 8009d04:	d151      	bne.n	8009daa <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68db      	ldr	r3, [r3, #12]
 8009d0c:	2218      	movs	r2, #24
 8009d0e:	4393      	bics	r3, r2
 8009d10:	0019      	movs	r1, r3
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	689a      	ldr	r2, [r3, #8]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	430a      	orrs	r2, r1
 8009d1c:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	0f9b      	lsrs	r3, r3, #30
 8009d24:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8009d2a:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 8009d30:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 8009d36:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 8009d3c:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	223c      	movs	r2, #60	; 0x3c
 8009d48:	5c9b      	ldrb	r3, [r3, r2]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d103      	bne.n	8009d56 <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	2201      	movs	r2, #1
 8009d52:	4313      	orrs	r3, r2
 8009d54:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	4a94      	ldr	r2, [pc, #592]	; (8009fb0 <HAL_ADC_Init+0x394>)
 8009d5e:	4013      	ands	r3, r2
 8009d60:	0019      	movs	r1, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	430a      	orrs	r2, r1
 8009d6a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	685a      	ldr	r2, [r3, #4]
 8009d70:	23c0      	movs	r3, #192	; 0xc0
 8009d72:	061b      	lsls	r3, r3, #24
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d018      	beq.n	8009daa <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8009d7c:	2380      	movs	r3, #128	; 0x80
 8009d7e:	05db      	lsls	r3, r3, #23
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d012      	beq.n	8009daa <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8009d88:	2380      	movs	r3, #128	; 0x80
 8009d8a:	061b      	lsls	r3, r3, #24
 8009d8c:	429a      	cmp	r2, r3
 8009d8e:	d00c      	beq.n	8009daa <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8009d90:	4b88      	ldr	r3, [pc, #544]	; (8009fb4 <HAL_ADC_Init+0x398>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a88      	ldr	r2, [pc, #544]	; (8009fb8 <HAL_ADC_Init+0x39c>)
 8009d96:	4013      	ands	r3, r2
 8009d98:	0019      	movs	r1, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685a      	ldr	r2, [r3, #4]
 8009d9e:	23f0      	movs	r3, #240	; 0xf0
 8009da0:	039b      	lsls	r3, r3, #14
 8009da2:	401a      	ands	r2, r3
 8009da4:	4b83      	ldr	r3, [pc, #524]	; (8009fb4 <HAL_ADC_Init+0x398>)
 8009da6:	430a      	orrs	r2, r1
 8009da8:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	7e1b      	ldrb	r3, [r3, #24]
 8009dae:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	7e5b      	ldrb	r3, [r3, #25]
 8009db4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8009db6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	7e9b      	ldrb	r3, [r3, #26]
 8009dbc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8009dbe:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d002      	beq.n	8009dce <HAL_ADC_Init+0x1b2>
 8009dc8:	2380      	movs	r3, #128	; 0x80
 8009dca:	015b      	lsls	r3, r3, #5
 8009dcc:	e000      	b.n	8009dd0 <HAL_ADC_Init+0x1b4>
 8009dce:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8009dd0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8009dd6:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	691b      	ldr	r3, [r3, #16]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	da04      	bge.n	8009dea <HAL_ADC_Init+0x1ce>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	691b      	ldr	r3, [r3, #16]
 8009de4:	005b      	lsls	r3, r3, #1
 8009de6:	085b      	lsrs	r3, r3, #1
 8009de8:	e001      	b.n	8009dee <HAL_ADC_Init+0x1d2>
 8009dea:	2380      	movs	r3, #128	; 0x80
 8009dec:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8009dee:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	212c      	movs	r1, #44	; 0x2c
 8009df4:	5c5b      	ldrb	r3, [r3, r1]
 8009df6:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8009df8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8009dfa:	69ba      	ldr	r2, [r7, #24]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2220      	movs	r2, #32
 8009e04:	5c9b      	ldrb	r3, [r3, r2]
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d115      	bne.n	8009e36 <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	7e9b      	ldrb	r3, [r3, #26]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d105      	bne.n	8009e1e <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	2280      	movs	r2, #128	; 0x80
 8009e16:	0252      	lsls	r2, r2, #9
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	61bb      	str	r3, [r7, #24]
 8009e1c:	e00b      	b.n	8009e36 <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e22:	2220      	movs	r2, #32
 8009e24:	431a      	orrs	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e2e:	2201      	movs	r2, #1
 8009e30:	431a      	orrs	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00a      	beq.n	8009e54 <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e42:	23e0      	movs	r3, #224	; 0xe0
 8009e44:	005b      	lsls	r3, r3, #1
 8009e46:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	69ba      	ldr	r2, [r7, #24]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	4a58      	ldr	r2, [pc, #352]	; (8009fbc <HAL_ADC_Init+0x3a0>)
 8009e5c:	4013      	ands	r3, r2
 8009e5e:	0019      	movs	r1, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	69ba      	ldr	r2, [r7, #24]
 8009e66:	430a      	orrs	r2, r1
 8009e68:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	691b      	ldr	r3, [r3, #16]
 8009e70:	4a53      	ldr	r2, [pc, #332]	; (8009fc0 <HAL_ADC_Init+0x3a4>)
 8009e72:	4013      	ands	r3, r2
 8009e74:	0019      	movs	r1, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	430a      	orrs	r2, r1
 8009e7e:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6818      	ldr	r0, [r3, #0]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e88:	001a      	movs	r2, r3
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	f7ff fda7 	bl	80099de <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6818      	ldr	r0, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e98:	494a      	ldr	r1, [pc, #296]	; (8009fc4 <HAL_ADC_Init+0x3a8>)
 8009e9a:	001a      	movs	r2, r3
 8009e9c:	f7ff fd9f 	bl	80099de <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d109      	bne.n	8009ebc <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	2110      	movs	r1, #16
 8009eb4:	4249      	negs	r1, r1
 8009eb6:	430a      	orrs	r2, r1
 8009eb8:	629a      	str	r2, [r3, #40]	; 0x28
 8009eba:	e03a      	b.n	8009f32 <HAL_ADC_Init+0x316>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	691a      	ldr	r2, [r3, #16]
 8009ec0:	2380      	movs	r3, #128	; 0x80
 8009ec2:	039b      	lsls	r3, r3, #14
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d134      	bne.n	8009f32 <HAL_ADC_Init+0x316>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8009ec8:	2300      	movs	r3, #0
 8009eca:	613b      	str	r3, [r7, #16]
 8009ecc:	e00c      	b.n	8009ee8 <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	40da      	lsrs	r2, r3
 8009ed8:	0013      	movs	r3, r2
 8009eda:	220f      	movs	r2, #15
 8009edc:	4013      	ands	r3, r2
 8009ede:	2b0f      	cmp	r3, #15
 8009ee0:	d006      	beq.n	8009ef0 <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	3301      	adds	r3, #1
 8009ee6:	613b      	str	r3, [r7, #16]
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	2b07      	cmp	r3, #7
 8009eec:	d9ef      	bls.n	8009ece <HAL_ADC_Init+0x2b2>
 8009eee:	e000      	b.n	8009ef2 <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 8009ef0:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d109      	bne.n	8009f0c <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2110      	movs	r1, #16
 8009f04:	4249      	negs	r1, r1
 8009f06:	430a      	orrs	r2, r1
 8009f08:	629a      	str	r2, [r3, #40]	; 0x28
 8009f0a:	e012      	b.n	8009f32 <HAL_ADC_Init+0x316>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	69db      	ldr	r3, [r3, #28]
 8009f16:	3b01      	subs	r3, #1
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	221c      	movs	r2, #28
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	2210      	movs	r2, #16
 8009f20:	4252      	negs	r2, r2
 8009f22:	409a      	lsls	r2, r3
 8009f24:	0011      	movs	r1, r2
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	430a      	orrs	r2, r1
 8009f30:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	4a23      	ldr	r2, [pc, #140]	; (8009fc8 <HAL_ADC_Init+0x3ac>)
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	69ba      	ldr	r2, [r7, #24]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d10b      	bne.n	8009f5a <HAL_ADC_Init+0x33e>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2200      	movs	r2, #0
 8009f46:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f4c:	2203      	movs	r2, #3
 8009f4e:	4393      	bics	r3, r2
 8009f50:	2201      	movs	r2, #1
 8009f52:	431a      	orrs	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8009f58:	e01c      	b.n	8009f94 <HAL_ADC_Init+0x378>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f5e:	2212      	movs	r2, #18
 8009f60:	4393      	bics	r3, r2
 8009f62:	2210      	movs	r2, #16
 8009f64:	431a      	orrs	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f6e:	2201      	movs	r2, #1
 8009f70:	431a      	orrs	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8009f76:	231f      	movs	r3, #31
 8009f78:	18fb      	adds	r3, r7, r3
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8009f7e:	e009      	b.n	8009f94 <HAL_ADC_Init+0x378>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f84:	2210      	movs	r2, #16
 8009f86:	431a      	orrs	r2, r3
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8009f8c:	231f      	movs	r3, #31
 8009f8e:	18fb      	adds	r3, r7, r3
 8009f90:	2201      	movs	r2, #1
 8009f92:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8009f94:	231f      	movs	r3, #31
 8009f96:	18fb      	adds	r3, r7, r3
 8009f98:	781b      	ldrb	r3, [r3, #0]
}
 8009f9a:	0018      	movs	r0, r3
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	b008      	add	sp, #32
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	46c0      	nop			; (mov r8, r8)
 8009fa4:	2000014c 	.word	0x2000014c
 8009fa8:	00030d40 	.word	0x00030d40
 8009fac:	fffffefd 	.word	0xfffffefd
 8009fb0:	1ffffc02 	.word	0x1ffffc02
 8009fb4:	40012708 	.word	0x40012708
 8009fb8:	ffc3ffff 	.word	0xffc3ffff
 8009fbc:	fffe0219 	.word	0xfffe0219
 8009fc0:	dffffc02 	.word	0xdffffc02
 8009fc4:	07ffff04 	.word	0x07ffff04
 8009fc8:	833fffe7 	.word	0x833fffe7

08009fcc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009fcc:	b5b0      	push	{r4, r5, r7, lr}
 8009fce:	b086      	sub	sp, #24
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	60f8      	str	r0, [r7, #12]
 8009fd4:	60b9      	str	r1, [r7, #8]
 8009fd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	0018      	movs	r0, r3
 8009fde:	f7ff fe0b 	bl	8009bf8 <LL_ADC_REG_IsConversionOngoing>
 8009fe2:	1e03      	subs	r3, r0, #0
 8009fe4:	d16c      	bne.n	800a0c0 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2254      	movs	r2, #84	; 0x54
 8009fea:	5c9b      	ldrb	r3, [r3, r2]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d101      	bne.n	8009ff4 <HAL_ADC_Start_DMA+0x28>
 8009ff0:	2302      	movs	r3, #2
 8009ff2:	e06c      	b.n	800a0ce <HAL_ADC_Start_DMA+0x102>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2254      	movs	r2, #84	; 0x54
 8009ff8:	2101      	movs	r1, #1
 8009ffa:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	2201      	movs	r2, #1
 800a004:	4013      	ands	r3, r2
 800a006:	d113      	bne.n	800a030 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	0018      	movs	r0, r3
 800a00e:	f7ff fdbf 	bl	8009b90 <LL_ADC_IsEnabled>
 800a012:	1e03      	subs	r3, r0, #0
 800a014:	d004      	beq.n	800a020 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	0018      	movs	r0, r3
 800a01c:	f7ff fda6 	bl	8009b6c <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	68da      	ldr	r2, [r3, #12]
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2101      	movs	r1, #1
 800a02c:	430a      	orrs	r2, r1
 800a02e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800a030:	2517      	movs	r5, #23
 800a032:	197c      	adds	r4, r7, r5
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	0018      	movs	r0, r3
 800a038:	f000 fa48 	bl	800a4cc <ADC_Enable>
 800a03c:	0003      	movs	r3, r0
 800a03e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800a040:	002c      	movs	r4, r5
 800a042:	193b      	adds	r3, r7, r4
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d13e      	bne.n	800a0c8 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a04e:	4a22      	ldr	r2, [pc, #136]	; (800a0d8 <HAL_ADC_Start_DMA+0x10c>)
 800a050:	4013      	ands	r3, r2
 800a052:	2280      	movs	r2, #128	; 0x80
 800a054:	0052      	lsls	r2, r2, #1
 800a056:	431a      	orrs	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a066:	4a1d      	ldr	r2, [pc, #116]	; (800a0dc <HAL_ADC_Start_DMA+0x110>)
 800a068:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a06e:	4a1c      	ldr	r2, [pc, #112]	; (800a0e0 <HAL_ADC_Start_DMA+0x114>)
 800a070:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a076:	4a1b      	ldr	r2, [pc, #108]	; (800a0e4 <HAL_ADC_Start_DMA+0x118>)
 800a078:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	221c      	movs	r2, #28
 800a080:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2254      	movs	r2, #84	; 0x54
 800a086:	2100      	movs	r1, #0
 800a088:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	685a      	ldr	r2, [r3, #4]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2110      	movs	r1, #16
 800a096:	430a      	orrs	r2, r1
 800a098:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	3340      	adds	r3, #64	; 0x40
 800a0a4:	0019      	movs	r1, r3
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	193c      	adds	r4, r7, r4
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f000 ff6a 	bl	800af84 <HAL_DMA_Start_IT>
 800a0b0:	0003      	movs	r3, r0
 800a0b2:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	0018      	movs	r0, r3
 800a0ba:	f7ff fd8b 	bl	8009bd4 <LL_ADC_REG_StartConversion>
 800a0be:	e003      	b.n	800a0c8 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800a0c0:	2317      	movs	r3, #23
 800a0c2:	18fb      	adds	r3, r7, r3
 800a0c4:	2202      	movs	r2, #2
 800a0c6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800a0c8:	2317      	movs	r3, #23
 800a0ca:	18fb      	adds	r3, r7, r3
 800a0cc:	781b      	ldrb	r3, [r3, #0]
}
 800a0ce:	0018      	movs	r0, r3
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	b006      	add	sp, #24
 800a0d4:	bdb0      	pop	{r4, r5, r7, pc}
 800a0d6:	46c0      	nop			; (mov r8, r8)
 800a0d8:	fffff0fe 	.word	0xfffff0fe
 800a0dc:	0800a679 	.word	0x0800a679
 800a0e0:	0800a741 	.word	0x0800a741
 800a0e4:	0800a75f 	.word	0x0800a75f

0800a0e8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800a0f0:	46c0      	nop			; (mov r8, r8)
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	b002      	add	sp, #8
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800a100:	46c0      	nop			; (mov r8, r8)
 800a102:	46bd      	mov	sp, r7
 800a104:	b002      	add	sp, #8
 800a106:	bd80      	pop	{r7, pc}

0800a108 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800a110:	46c0      	nop			; (mov r8, r8)
 800a112:	46bd      	mov	sp, r7
 800a114:	b002      	add	sp, #8
 800a116:	bd80      	pop	{r7, pc}

0800a118 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a122:	2317      	movs	r3, #23
 800a124:	18fb      	adds	r3, r7, r3
 800a126:	2200      	movs	r2, #0
 800a128:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800a12a:	2300      	movs	r3, #0
 800a12c:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2254      	movs	r2, #84	; 0x54
 800a132:	5c9b      	ldrb	r3, [r3, r2]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d101      	bne.n	800a13c <HAL_ADC_ConfigChannel+0x24>
 800a138:	2302      	movs	r3, #2
 800a13a:	e1c2      	b.n	800a4c2 <HAL_ADC_ConfigChannel+0x3aa>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2254      	movs	r2, #84	; 0x54
 800a140:	2101      	movs	r1, #1
 800a142:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	0018      	movs	r0, r3
 800a14a:	f7ff fd55 	bl	8009bf8 <LL_ADC_REG_IsConversionOngoing>
 800a14e:	1e03      	subs	r3, r0, #0
 800a150:	d000      	beq.n	800a154 <HAL_ADC_ConfigChannel+0x3c>
 800a152:	e1a5      	b.n	800a4a0 <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d100      	bne.n	800a15e <HAL_ADC_ConfigChannel+0x46>
 800a15c:	e144      	b.n	800a3e8 <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	691a      	ldr	r2, [r3, #16]
 800a162:	2380      	movs	r3, #128	; 0x80
 800a164:	061b      	lsls	r3, r3, #24
 800a166:	429a      	cmp	r2, r3
 800a168:	d004      	beq.n	800a174 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800a16e:	4ac2      	ldr	r2, [pc, #776]	; (800a478 <HAL_ADC_ConfigChannel+0x360>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d108      	bne.n	800a186 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	0019      	movs	r1, r3
 800a17e:	0010      	movs	r0, r2
 800a180:	f7ff fc7b 	bl	8009a7a <LL_ADC_REG_SetSequencerChAdd>
 800a184:	e0c9      	b.n	800a31a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	211f      	movs	r1, #31
 800a190:	400b      	ands	r3, r1
 800a192:	210f      	movs	r1, #15
 800a194:	4099      	lsls	r1, r3
 800a196:	000b      	movs	r3, r1
 800a198:	43db      	mvns	r3, r3
 800a19a:	4013      	ands	r3, r2
 800a19c:	0019      	movs	r1, r3
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	035b      	lsls	r3, r3, #13
 800a1a4:	0b5b      	lsrs	r3, r3, #13
 800a1a6:	d105      	bne.n	800a1b4 <HAL_ADC_ConfigChannel+0x9c>
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	0e9b      	lsrs	r3, r3, #26
 800a1ae:	221f      	movs	r2, #31
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	e098      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	4013      	ands	r3, r2
 800a1bc:	d000      	beq.n	800a1c0 <HAL_ADC_ConfigChannel+0xa8>
 800a1be:	e091      	b.n	800a2e4 <HAL_ADC_ConfigChannel+0x1cc>
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	2202      	movs	r2, #2
 800a1c6:	4013      	ands	r3, r2
 800a1c8:	d000      	beq.n	800a1cc <HAL_ADC_ConfigChannel+0xb4>
 800a1ca:	e089      	b.n	800a2e0 <HAL_ADC_ConfigChannel+0x1c8>
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2204      	movs	r2, #4
 800a1d2:	4013      	ands	r3, r2
 800a1d4:	d000      	beq.n	800a1d8 <HAL_ADC_ConfigChannel+0xc0>
 800a1d6:	e081      	b.n	800a2dc <HAL_ADC_ConfigChannel+0x1c4>
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	2208      	movs	r2, #8
 800a1de:	4013      	ands	r3, r2
 800a1e0:	d000      	beq.n	800a1e4 <HAL_ADC_ConfigChannel+0xcc>
 800a1e2:	e079      	b.n	800a2d8 <HAL_ADC_ConfigChannel+0x1c0>
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	2210      	movs	r2, #16
 800a1ea:	4013      	ands	r3, r2
 800a1ec:	d000      	beq.n	800a1f0 <HAL_ADC_ConfigChannel+0xd8>
 800a1ee:	e071      	b.n	800a2d4 <HAL_ADC_ConfigChannel+0x1bc>
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2220      	movs	r2, #32
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	d000      	beq.n	800a1fc <HAL_ADC_ConfigChannel+0xe4>
 800a1fa:	e069      	b.n	800a2d0 <HAL_ADC_ConfigChannel+0x1b8>
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2240      	movs	r2, #64	; 0x40
 800a202:	4013      	ands	r3, r2
 800a204:	d000      	beq.n	800a208 <HAL_ADC_ConfigChannel+0xf0>
 800a206:	e061      	b.n	800a2cc <HAL_ADC_ConfigChannel+0x1b4>
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2280      	movs	r2, #128	; 0x80
 800a20e:	4013      	ands	r3, r2
 800a210:	d000      	beq.n	800a214 <HAL_ADC_ConfigChannel+0xfc>
 800a212:	e059      	b.n	800a2c8 <HAL_ADC_ConfigChannel+0x1b0>
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	2380      	movs	r3, #128	; 0x80
 800a21a:	005b      	lsls	r3, r3, #1
 800a21c:	4013      	ands	r3, r2
 800a21e:	d151      	bne.n	800a2c4 <HAL_ADC_ConfigChannel+0x1ac>
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	2380      	movs	r3, #128	; 0x80
 800a226:	009b      	lsls	r3, r3, #2
 800a228:	4013      	ands	r3, r2
 800a22a:	d149      	bne.n	800a2c0 <HAL_ADC_ConfigChannel+0x1a8>
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	2380      	movs	r3, #128	; 0x80
 800a232:	00db      	lsls	r3, r3, #3
 800a234:	4013      	ands	r3, r2
 800a236:	d141      	bne.n	800a2bc <HAL_ADC_ConfigChannel+0x1a4>
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	2380      	movs	r3, #128	; 0x80
 800a23e:	011b      	lsls	r3, r3, #4
 800a240:	4013      	ands	r3, r2
 800a242:	d139      	bne.n	800a2b8 <HAL_ADC_ConfigChannel+0x1a0>
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	2380      	movs	r3, #128	; 0x80
 800a24a:	015b      	lsls	r3, r3, #5
 800a24c:	4013      	ands	r3, r2
 800a24e:	d131      	bne.n	800a2b4 <HAL_ADC_ConfigChannel+0x19c>
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	2380      	movs	r3, #128	; 0x80
 800a256:	019b      	lsls	r3, r3, #6
 800a258:	4013      	ands	r3, r2
 800a25a:	d129      	bne.n	800a2b0 <HAL_ADC_ConfigChannel+0x198>
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	2380      	movs	r3, #128	; 0x80
 800a262:	01db      	lsls	r3, r3, #7
 800a264:	4013      	ands	r3, r2
 800a266:	d121      	bne.n	800a2ac <HAL_ADC_ConfigChannel+0x194>
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	2380      	movs	r3, #128	; 0x80
 800a26e:	021b      	lsls	r3, r3, #8
 800a270:	4013      	ands	r3, r2
 800a272:	d119      	bne.n	800a2a8 <HAL_ADC_ConfigChannel+0x190>
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	2380      	movs	r3, #128	; 0x80
 800a27a:	025b      	lsls	r3, r3, #9
 800a27c:	4013      	ands	r3, r2
 800a27e:	d111      	bne.n	800a2a4 <HAL_ADC_ConfigChannel+0x18c>
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	2380      	movs	r3, #128	; 0x80
 800a286:	029b      	lsls	r3, r3, #10
 800a288:	4013      	ands	r3, r2
 800a28a:	d109      	bne.n	800a2a0 <HAL_ADC_ConfigChannel+0x188>
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	2380      	movs	r3, #128	; 0x80
 800a292:	02db      	lsls	r3, r3, #11
 800a294:	4013      	ands	r3, r2
 800a296:	d001      	beq.n	800a29c <HAL_ADC_ConfigChannel+0x184>
 800a298:	2312      	movs	r3, #18
 800a29a:	e024      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a29c:	2300      	movs	r3, #0
 800a29e:	e022      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2a0:	2311      	movs	r3, #17
 800a2a2:	e020      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2a4:	2310      	movs	r3, #16
 800a2a6:	e01e      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2a8:	230f      	movs	r3, #15
 800a2aa:	e01c      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2ac:	230e      	movs	r3, #14
 800a2ae:	e01a      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2b0:	230d      	movs	r3, #13
 800a2b2:	e018      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2b4:	230c      	movs	r3, #12
 800a2b6:	e016      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2b8:	230b      	movs	r3, #11
 800a2ba:	e014      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2bc:	230a      	movs	r3, #10
 800a2be:	e012      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2c0:	2309      	movs	r3, #9
 800a2c2:	e010      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2c4:	2308      	movs	r3, #8
 800a2c6:	e00e      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2c8:	2307      	movs	r3, #7
 800a2ca:	e00c      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2cc:	2306      	movs	r3, #6
 800a2ce:	e00a      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2d0:	2305      	movs	r3, #5
 800a2d2:	e008      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2d4:	2304      	movs	r3, #4
 800a2d6:	e006      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2d8:	2303      	movs	r3, #3
 800a2da:	e004      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2dc:	2302      	movs	r3, #2
 800a2de:	e002      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e000      	b.n	800a2e6 <HAL_ADC_ConfigChannel+0x1ce>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	683a      	ldr	r2, [r7, #0]
 800a2e8:	6852      	ldr	r2, [r2, #4]
 800a2ea:	201f      	movs	r0, #31
 800a2ec:	4002      	ands	r2, r0
 800a2ee:	4093      	lsls	r3, r2
 800a2f0:	000a      	movs	r2, r1
 800a2f2:	431a      	orrs	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	089b      	lsrs	r3, r3, #2
 800a2fe:	1c5a      	adds	r2, r3, #1
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	69db      	ldr	r3, [r3, #28]
 800a304:	429a      	cmp	r2, r3
 800a306:	d808      	bhi.n	800a31a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6818      	ldr	r0, [r3, #0]
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	6859      	ldr	r1, [r3, #4]
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	001a      	movs	r2, r3
 800a316:	f7ff fb90 	bl	8009a3a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6818      	ldr	r0, [r3, #0]
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	6819      	ldr	r1, [r3, #0]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	001a      	movs	r2, r3
 800a328:	f7ff fbca 	bl	8009ac0 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	db00      	blt.n	800a336 <HAL_ADC_ConfigChannel+0x21e>
 800a334:	e0be      	b.n	800a4b4 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a336:	4b51      	ldr	r3, [pc, #324]	; (800a47c <HAL_ADC_ConfigChannel+0x364>)
 800a338:	0018      	movs	r0, r3
 800a33a:	f7ff fb43 	bl	80099c4 <LL_ADC_GetCommonPathInternalCh>
 800a33e:	0003      	movs	r3, r0
 800a340:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a4e      	ldr	r2, [pc, #312]	; (800a480 <HAL_ADC_ConfigChannel+0x368>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d123      	bne.n	800a394 <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a34c:	693a      	ldr	r2, [r7, #16]
 800a34e:	2380      	movs	r3, #128	; 0x80
 800a350:	041b      	lsls	r3, r3, #16
 800a352:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800a354:	d11e      	bne.n	800a394 <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	2280      	movs	r2, #128	; 0x80
 800a35a:	0412      	lsls	r2, r2, #16
 800a35c:	4313      	orrs	r3, r2
 800a35e:	4a47      	ldr	r2, [pc, #284]	; (800a47c <HAL_ADC_ConfigChannel+0x364>)
 800a360:	0019      	movs	r1, r3
 800a362:	0010      	movs	r0, r2
 800a364:	f7ff fb1a 	bl	800999c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800a368:	4b46      	ldr	r3, [pc, #280]	; (800a484 <HAL_ADC_ConfigChannel+0x36c>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4946      	ldr	r1, [pc, #280]	; (800a488 <HAL_ADC_ConfigChannel+0x370>)
 800a36e:	0018      	movs	r0, r3
 800a370:	f7f5 feec 	bl	800014c <__udivsi3>
 800a374:	0003      	movs	r3, r0
 800a376:	001a      	movs	r2, r3
 800a378:	0013      	movs	r3, r2
 800a37a:	005b      	lsls	r3, r3, #1
 800a37c:	189b      	adds	r3, r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	3301      	adds	r3, #1
 800a382:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800a384:	e002      	b.n	800a38c <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	3b01      	subs	r3, #1
 800a38a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d1f9      	bne.n	800a386 <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800a392:	e08f      	b.n	800a4b4 <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a3c      	ldr	r2, [pc, #240]	; (800a48c <HAL_ADC_ConfigChannel+0x374>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d10e      	bne.n	800a3bc <HAL_ADC_ConfigChannel+0x2a4>
 800a39e:	693a      	ldr	r2, [r7, #16]
 800a3a0:	2380      	movs	r3, #128	; 0x80
 800a3a2:	045b      	lsls	r3, r3, #17
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	d109      	bne.n	800a3bc <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	2280      	movs	r2, #128	; 0x80
 800a3ac:	0452      	lsls	r2, r2, #17
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	4a32      	ldr	r2, [pc, #200]	; (800a47c <HAL_ADC_ConfigChannel+0x364>)
 800a3b2:	0019      	movs	r1, r3
 800a3b4:	0010      	movs	r0, r2
 800a3b6:	f7ff faf1 	bl	800999c <LL_ADC_SetCommonPathInternalCh>
 800a3ba:	e07b      	b.n	800a4b4 <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a33      	ldr	r2, [pc, #204]	; (800a490 <HAL_ADC_ConfigChannel+0x378>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d000      	beq.n	800a3c8 <HAL_ADC_ConfigChannel+0x2b0>
 800a3c6:	e075      	b.n	800a4b4 <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	2380      	movs	r3, #128	; 0x80
 800a3cc:	03db      	lsls	r3, r3, #15
 800a3ce:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800a3d0:	d000      	beq.n	800a3d4 <HAL_ADC_ConfigChannel+0x2bc>
 800a3d2:	e06f      	b.n	800a4b4 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	2280      	movs	r2, #128	; 0x80
 800a3d8:	03d2      	lsls	r2, r2, #15
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	4a27      	ldr	r2, [pc, #156]	; (800a47c <HAL_ADC_ConfigChannel+0x364>)
 800a3de:	0019      	movs	r1, r3
 800a3e0:	0010      	movs	r0, r2
 800a3e2:	f7ff fadb 	bl	800999c <LL_ADC_SetCommonPathInternalCh>
 800a3e6:	e065      	b.n	800a4b4 <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	691a      	ldr	r2, [r3, #16]
 800a3ec:	2380      	movs	r3, #128	; 0x80
 800a3ee:	061b      	lsls	r3, r3, #24
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d004      	beq.n	800a3fe <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800a3f8:	4a1f      	ldr	r2, [pc, #124]	; (800a478 <HAL_ADC_ConfigChannel+0x360>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d107      	bne.n	800a40e <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	0019      	movs	r1, r3
 800a408:	0010      	movs	r0, r2
 800a40a:	f7ff fb47 	bl	8009a9c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	da4e      	bge.n	800a4b4 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a416:	4b19      	ldr	r3, [pc, #100]	; (800a47c <HAL_ADC_ConfigChannel+0x364>)
 800a418:	0018      	movs	r0, r3
 800a41a:	f7ff fad3 	bl	80099c4 <LL_ADC_GetCommonPathInternalCh>
 800a41e:	0003      	movs	r3, r0
 800a420:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a16      	ldr	r2, [pc, #88]	; (800a480 <HAL_ADC_ConfigChannel+0x368>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d108      	bne.n	800a43e <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	4a19      	ldr	r2, [pc, #100]	; (800a494 <HAL_ADC_ConfigChannel+0x37c>)
 800a430:	4013      	ands	r3, r2
 800a432:	4a12      	ldr	r2, [pc, #72]	; (800a47c <HAL_ADC_ConfigChannel+0x364>)
 800a434:	0019      	movs	r1, r3
 800a436:	0010      	movs	r0, r2
 800a438:	f7ff fab0 	bl	800999c <LL_ADC_SetCommonPathInternalCh>
 800a43c:	e03a      	b.n	800a4b4 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4a12      	ldr	r2, [pc, #72]	; (800a48c <HAL_ADC_ConfigChannel+0x374>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d108      	bne.n	800a45a <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	4a13      	ldr	r2, [pc, #76]	; (800a498 <HAL_ADC_ConfigChannel+0x380>)
 800a44c:	4013      	ands	r3, r2
 800a44e:	4a0b      	ldr	r2, [pc, #44]	; (800a47c <HAL_ADC_ConfigChannel+0x364>)
 800a450:	0019      	movs	r1, r3
 800a452:	0010      	movs	r0, r2
 800a454:	f7ff faa2 	bl	800999c <LL_ADC_SetCommonPathInternalCh>
 800a458:	e02c      	b.n	800a4b4 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a0c      	ldr	r2, [pc, #48]	; (800a490 <HAL_ADC_ConfigChannel+0x378>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d127      	bne.n	800a4b4 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	4a0d      	ldr	r2, [pc, #52]	; (800a49c <HAL_ADC_ConfigChannel+0x384>)
 800a468:	4013      	ands	r3, r2
 800a46a:	4a04      	ldr	r2, [pc, #16]	; (800a47c <HAL_ADC_ConfigChannel+0x364>)
 800a46c:	0019      	movs	r1, r3
 800a46e:	0010      	movs	r0, r2
 800a470:	f7ff fa94 	bl	800999c <LL_ADC_SetCommonPathInternalCh>
 800a474:	e01e      	b.n	800a4b4 <HAL_ADC_ConfigChannel+0x39c>
 800a476:	46c0      	nop			; (mov r8, r8)
 800a478:	80000004 	.word	0x80000004
 800a47c:	40012708 	.word	0x40012708
 800a480:	b0001000 	.word	0xb0001000
 800a484:	2000014c 	.word	0x2000014c
 800a488:	00030d40 	.word	0x00030d40
 800a48c:	b8004000 	.word	0xb8004000
 800a490:	b4002000 	.word	0xb4002000
 800a494:	ff7fffff 	.word	0xff7fffff
 800a498:	feffffff 	.word	0xfeffffff
 800a49c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4a4:	2220      	movs	r2, #32
 800a4a6:	431a      	orrs	r2, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800a4ac:	2317      	movs	r3, #23
 800a4ae:	18fb      	adds	r3, r7, r3
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2254      	movs	r2, #84	; 0x54
 800a4b8:	2100      	movs	r1, #0
 800a4ba:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800a4bc:	2317      	movs	r3, #23
 800a4be:	18fb      	adds	r3, r7, r3
 800a4c0:	781b      	ldrb	r3, [r3, #0]
}
 800a4c2:	0018      	movs	r0, r3
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	b006      	add	sp, #24
 800a4c8:	bd80      	pop	{r7, pc}
 800a4ca:	46c0      	nop			; (mov r8, r8)

0800a4cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b084      	sub	sp, #16
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	0018      	movs	r0, r3
 800a4de:	f7ff fb57 	bl	8009b90 <LL_ADC_IsEnabled>
 800a4e2:	1e03      	subs	r3, r0, #0
 800a4e4:	d162      	bne.n	800a5ac <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	4a32      	ldr	r2, [pc, #200]	; (800a5b8 <ADC_Enable+0xec>)
 800a4ee:	4013      	ands	r3, r2
 800a4f0:	d00d      	beq.n	800a50e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4f6:	2210      	movs	r2, #16
 800a4f8:	431a      	orrs	r2, r3
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a502:	2201      	movs	r2, #1
 800a504:	431a      	orrs	r2, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800a50a:	2301      	movs	r3, #1
 800a50c:	e04f      	b.n	800a5ae <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	0018      	movs	r0, r3
 800a514:	f7ff fb18 	bl	8009b48 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800a518:	4b28      	ldr	r3, [pc, #160]	; (800a5bc <ADC_Enable+0xf0>)
 800a51a:	0018      	movs	r0, r3
 800a51c:	f7ff fa52 	bl	80099c4 <LL_ADC_GetCommonPathInternalCh>
 800a520:	0002      	movs	r2, r0
 800a522:	2380      	movs	r3, #128	; 0x80
 800a524:	041b      	lsls	r3, r3, #16
 800a526:	4013      	ands	r3, r2
 800a528:	d00f      	beq.n	800a54a <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800a52a:	4b25      	ldr	r3, [pc, #148]	; (800a5c0 <ADC_Enable+0xf4>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	4925      	ldr	r1, [pc, #148]	; (800a5c4 <ADC_Enable+0xf8>)
 800a530:	0018      	movs	r0, r3
 800a532:	f7f5 fe0b 	bl	800014c <__udivsi3>
 800a536:	0003      	movs	r3, r0
 800a538:	3301      	adds	r3, #1
 800a53a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a53c:	e002      	b.n	800a544 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	3b01      	subs	r3, #1
 800a542:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1f9      	bne.n	800a53e <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	7e5b      	ldrb	r3, [r3, #25]
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d02c      	beq.n	800a5ac <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800a552:	f7ff f9df 	bl	8009914 <HAL_GetTick>
 800a556:	0003      	movs	r3, r0
 800a558:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a55a:	e020      	b.n	800a59e <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	0018      	movs	r0, r3
 800a562:	f7ff fb15 	bl	8009b90 <LL_ADC_IsEnabled>
 800a566:	1e03      	subs	r3, r0, #0
 800a568:	d104      	bne.n	800a574 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	0018      	movs	r0, r3
 800a570:	f7ff faea 	bl	8009b48 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a574:	f7ff f9ce 	bl	8009914 <HAL_GetTick>
 800a578:	0002      	movs	r2, r0
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	1ad3      	subs	r3, r2, r3
 800a57e:	2b02      	cmp	r3, #2
 800a580:	d90d      	bls.n	800a59e <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a586:	2210      	movs	r2, #16
 800a588:	431a      	orrs	r2, r3
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a592:	2201      	movs	r2, #1
 800a594:	431a      	orrs	r2, r3
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e007      	b.n	800a5ae <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d1d7      	bne.n	800a55c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	0018      	movs	r0, r3
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	b004      	add	sp, #16
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	46c0      	nop			; (mov r8, r8)
 800a5b8:	80000017 	.word	0x80000017
 800a5bc:	40012708 	.word	0x40012708
 800a5c0:	2000014c 	.word	0x2000014c
 800a5c4:	00030d40 	.word	0x00030d40

0800a5c8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b084      	sub	sp, #16
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	0018      	movs	r0, r3
 800a5d6:	f7ff faec 	bl	8009bb2 <LL_ADC_IsDisableOngoing>
 800a5da:	0003      	movs	r3, r0
 800a5dc:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	0018      	movs	r0, r3
 800a5e4:	f7ff fad4 	bl	8009b90 <LL_ADC_IsEnabled>
 800a5e8:	1e03      	subs	r3, r0, #0
 800a5ea:	d040      	beq.n	800a66e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d13d      	bne.n	800a66e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	2205      	movs	r2, #5
 800a5fa:	4013      	ands	r3, r2
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d10d      	bne.n	800a61c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	0018      	movs	r0, r3
 800a606:	f7ff fab1 	bl	8009b6c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2203      	movs	r2, #3
 800a610:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a612:	f7ff f97f 	bl	8009914 <HAL_GetTick>
 800a616:	0003      	movs	r3, r0
 800a618:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a61a:	e022      	b.n	800a662 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a620:	2210      	movs	r2, #16
 800a622:	431a      	orrs	r2, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a62c:	2201      	movs	r2, #1
 800a62e:	431a      	orrs	r2, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	e01b      	b.n	800a670 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a638:	f7ff f96c 	bl	8009914 <HAL_GetTick>
 800a63c:	0002      	movs	r2, r0
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	1ad3      	subs	r3, r2, r3
 800a642:	2b02      	cmp	r3, #2
 800a644:	d90d      	bls.n	800a662 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a64a:	2210      	movs	r2, #16
 800a64c:	431a      	orrs	r2, r3
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a656:	2201      	movs	r2, #1
 800a658:	431a      	orrs	r2, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	65da      	str	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e006      	b.n	800a670 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	689b      	ldr	r3, [r3, #8]
 800a668:	2201      	movs	r2, #1
 800a66a:	4013      	ands	r3, r2
 800a66c:	d1e4      	bne.n	800a638 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	0018      	movs	r0, r3
 800a672:	46bd      	mov	sp, r7
 800a674:	b004      	add	sp, #16
 800a676:	bd80      	pop	{r7, pc}

0800a678 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a684:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a68a:	2250      	movs	r2, #80	; 0x50
 800a68c:	4013      	ands	r3, r2
 800a68e:	d141      	bne.n	800a714 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a694:	2280      	movs	r2, #128	; 0x80
 800a696:	0092      	lsls	r2, r2, #2
 800a698:	431a      	orrs	r2, r3
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	0018      	movs	r0, r3
 800a6a4:	f7ff f9b8 	bl	8009a18 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a6a8:	1e03      	subs	r3, r0, #0
 800a6aa:	d02e      	beq.n	800a70a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	7e9b      	ldrb	r3, [r3, #26]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d12a      	bne.n	800a70a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	2208      	movs	r2, #8
 800a6bc:	4013      	ands	r3, r2
 800a6be:	2b08      	cmp	r3, #8
 800a6c0:	d123      	bne.n	800a70a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	0018      	movs	r0, r3
 800a6c8:	f7ff fa96 	bl	8009bf8 <LL_ADC_REG_IsConversionOngoing>
 800a6cc:	1e03      	subs	r3, r0, #0
 800a6ce:	d110      	bne.n	800a6f2 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	685a      	ldr	r2, [r3, #4]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	210c      	movs	r1, #12
 800a6dc:	438a      	bics	r2, r1
 800a6de:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6e4:	4a15      	ldr	r2, [pc, #84]	; (800a73c <ADC_DMAConvCplt+0xc4>)
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	2201      	movs	r2, #1
 800a6ea:	431a      	orrs	r2, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	659a      	str	r2, [r3, #88]	; 0x58
 800a6f0:	e00b      	b.n	800a70a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6f6:	2220      	movs	r2, #32
 800a6f8:	431a      	orrs	r2, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a702:	2201      	movs	r2, #1
 800a704:	431a      	orrs	r2, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	0018      	movs	r0, r3
 800a70e:	f7ff fceb 	bl	800a0e8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a712:	e00f      	b.n	800a734 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a718:	2210      	movs	r2, #16
 800a71a:	4013      	ands	r3, r2
 800a71c:	d004      	beq.n	800a728 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	0018      	movs	r0, r3
 800a722:	f7ff fcf1 	bl	800a108 <HAL_ADC_ErrorCallback>
}
 800a726:	e005      	b.n	800a734 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a72c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	0010      	movs	r0, r2
 800a732:	4798      	blx	r3
}
 800a734:	46c0      	nop			; (mov r8, r8)
 800a736:	46bd      	mov	sp, r7
 800a738:	b004      	add	sp, #16
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	fffffefe 	.word	0xfffffefe

0800a740 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a74c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	0018      	movs	r0, r3
 800a752:	f7ff fcd1 	bl	800a0f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a756:	46c0      	nop			; (mov r8, r8)
 800a758:	46bd      	mov	sp, r7
 800a75a:	b004      	add	sp, #16
 800a75c:	bd80      	pop	{r7, pc}

0800a75e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a770:	2240      	movs	r2, #64	; 0x40
 800a772:	431a      	orrs	r2, r3
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a77c:	2204      	movs	r2, #4
 800a77e:	431a      	orrs	r2, r3
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	0018      	movs	r0, r3
 800a788:	f7ff fcbe 	bl	800a108 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a78c:	46c0      	nop			; (mov r8, r8)
 800a78e:	46bd      	mov	sp, r7
 800a790:	b004      	add	sp, #16
 800a792:	bd80      	pop	{r7, pc}

0800a794 <LL_ADC_IsEnabled>:
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b082      	sub	sp, #8
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d101      	bne.n	800a7ac <LL_ADC_IsEnabled+0x18>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e000      	b.n	800a7ae <LL_ADC_IsEnabled+0x1a>
 800a7ac:	2300      	movs	r3, #0
}
 800a7ae:	0018      	movs	r0, r3
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	b002      	add	sp, #8
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <LL_ADC_IsCalibrationOnGoing>:
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b082      	sub	sp, #8
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	0fdb      	lsrs	r3, r3, #31
 800a7c4:	07da      	lsls	r2, r3, #31
 800a7c6:	2380      	movs	r3, #128	; 0x80
 800a7c8:	061b      	lsls	r3, r3, #24
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d101      	bne.n	800a7d2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e000      	b.n	800a7d4 <LL_ADC_IsCalibrationOnGoing+0x1e>
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	0018      	movs	r0, r3
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	b002      	add	sp, #8
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 800a7dc:	b590      	push	{r4, r7, lr}
 800a7de:	b087      	sub	sp, #28
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2254      	movs	r2, #84	; 0x54
 800a7ec:	5c9b      	ldrb	r3, [r3, r2]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d101      	bne.n	800a7f6 <HAL_ADCEx_Calibration_Start+0x1a>
 800a7f2:	2302      	movs	r3, #2
 800a7f4:	e06c      	b.n	800a8d0 <HAL_ADCEx_Calibration_Start+0xf4>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2254      	movs	r2, #84	; 0x54
 800a7fa:	2101      	movs	r1, #1
 800a7fc:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800a7fe:	2317      	movs	r3, #23
 800a800:	18fc      	adds	r4, r7, r3
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	0018      	movs	r0, r3
 800a806:	f7ff fedf 	bl	800a5c8 <ADC_Disable>
 800a80a:	0003      	movs	r3, r0
 800a80c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	0018      	movs	r0, r3
 800a814:	f7ff ffbe 	bl	800a794 <LL_ADC_IsEnabled>
 800a818:	1e03      	subs	r3, r0, #0
 800a81a:	d14c      	bne.n	800a8b6 <HAL_ADCEx_Calibration_Start+0xda>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a820:	4a2d      	ldr	r2, [pc, #180]	; (800a8d8 <HAL_ADCEx_Calibration_Start+0xfc>)
 800a822:	4013      	ands	r3, r2
 800a824:	2202      	movs	r2, #2
 800a826:	431a      	orrs	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	2203      	movs	r2, #3
 800a834:	4013      	ands	r3, r2
 800a836:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68da      	ldr	r2, [r3, #12]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2103      	movs	r1, #3
 800a844:	438a      	bics	r2, r1
 800a846:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    SET_BIT(hadc->Instance->CR, ADC_CR_ADCAL);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	689a      	ldr	r2, [r3, #8]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2180      	movs	r1, #128	; 0x80
 800a854:	0609      	lsls	r1, r1, #24
 800a856:	430a      	orrs	r2, r1
 800a858:	609a      	str	r2, [r3, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a85a:	e014      	b.n	800a886 <HAL_ADCEx_Calibration_Start+0xaa>
    {
      wait_loop_index++;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	3301      	adds	r3, #1
 800a860:	60fb      	str	r3, [r7, #12]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	4a1d      	ldr	r2, [pc, #116]	; (800a8dc <HAL_ADCEx_Calibration_Start+0x100>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d90d      	bls.n	800a886 <HAL_ADCEx_Calibration_Start+0xaa>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a86e:	2212      	movs	r2, #18
 800a870:	4393      	bics	r3, r2
 800a872:	2210      	movs	r2, #16
 800a874:	431a      	orrs	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	659a      	str	r2, [r3, #88]	; 0x58
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2254      	movs	r2, #84	; 0x54
 800a87e:	2100      	movs	r1, #0
 800a880:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a882:	2301      	movs	r3, #1
 800a884:	e024      	b.n	800a8d0 <HAL_ADCEx_Calibration_Start+0xf4>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	0018      	movs	r0, r3
 800a88c:	f7ff ff93 	bl	800a7b6 <LL_ADC_IsCalibrationOnGoing>
 800a890:	1e03      	subs	r3, r0, #0
 800a892:	d1e3      	bne.n	800a85c <HAL_ADCEx_Calibration_Start+0x80>
      }
    }

    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68d9      	ldr	r1, [r3, #12]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	693a      	ldr	r2, [r7, #16]
 800a8a0:	430a      	orrs	r2, r1
 800a8a2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8a8:	2203      	movs	r2, #3
 800a8aa:	4393      	bics	r3, r2
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	431a      	orrs	r2, r3
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	659a      	str	r2, [r3, #88]	; 0x58
 800a8b4:	e005      	b.n	800a8c2 <HAL_ADCEx_Calibration_Start+0xe6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8ba:	2210      	movs	r2, #16
 800a8bc:	431a      	orrs	r2, r3
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2254      	movs	r2, #84	; 0x54
 800a8c6:	2100      	movs	r1, #0
 800a8c8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800a8ca:	2317      	movs	r3, #23
 800a8cc:	18fb      	adds	r3, r7, r3
 800a8ce:	781b      	ldrb	r3, [r3, #0]
}
 800a8d0:	0018      	movs	r0, r3
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	b007      	add	sp, #28
 800a8d6:	bd90      	pop	{r4, r7, pc}
 800a8d8:	fffffefd 	.word	0xfffffefd
 800a8dc:	0002f1ff 	.word	0x0002f1ff

0800a8e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	0002      	movs	r2, r0
 800a8e8:	1dfb      	adds	r3, r7, #7
 800a8ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a8ec:	1dfb      	adds	r3, r7, #7
 800a8ee:	781b      	ldrb	r3, [r3, #0]
 800a8f0:	2b7f      	cmp	r3, #127	; 0x7f
 800a8f2:	d809      	bhi.n	800a908 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a8f4:	1dfb      	adds	r3, r7, #7
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	001a      	movs	r2, r3
 800a8fa:	231f      	movs	r3, #31
 800a8fc:	401a      	ands	r2, r3
 800a8fe:	4b04      	ldr	r3, [pc, #16]	; (800a910 <__NVIC_EnableIRQ+0x30>)
 800a900:	2101      	movs	r1, #1
 800a902:	4091      	lsls	r1, r2
 800a904:	000a      	movs	r2, r1
 800a906:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800a908:	46c0      	nop			; (mov r8, r8)
 800a90a:	46bd      	mov	sp, r7
 800a90c:	b002      	add	sp, #8
 800a90e:	bd80      	pop	{r7, pc}
 800a910:	e000e100 	.word	0xe000e100

0800a914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a914:	b590      	push	{r4, r7, lr}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	0002      	movs	r2, r0
 800a91c:	6039      	str	r1, [r7, #0]
 800a91e:	1dfb      	adds	r3, r7, #7
 800a920:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800a922:	1dfb      	adds	r3, r7, #7
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	2b7f      	cmp	r3, #127	; 0x7f
 800a928:	d828      	bhi.n	800a97c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a92a:	4a2f      	ldr	r2, [pc, #188]	; (800a9e8 <__NVIC_SetPriority+0xd4>)
 800a92c:	1dfb      	adds	r3, r7, #7
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	b25b      	sxtb	r3, r3
 800a932:	089b      	lsrs	r3, r3, #2
 800a934:	33c0      	adds	r3, #192	; 0xc0
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	589b      	ldr	r3, [r3, r2]
 800a93a:	1dfa      	adds	r2, r7, #7
 800a93c:	7812      	ldrb	r2, [r2, #0]
 800a93e:	0011      	movs	r1, r2
 800a940:	2203      	movs	r2, #3
 800a942:	400a      	ands	r2, r1
 800a944:	00d2      	lsls	r2, r2, #3
 800a946:	21ff      	movs	r1, #255	; 0xff
 800a948:	4091      	lsls	r1, r2
 800a94a:	000a      	movs	r2, r1
 800a94c:	43d2      	mvns	r2, r2
 800a94e:	401a      	ands	r2, r3
 800a950:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	019b      	lsls	r3, r3, #6
 800a956:	22ff      	movs	r2, #255	; 0xff
 800a958:	401a      	ands	r2, r3
 800a95a:	1dfb      	adds	r3, r7, #7
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	0018      	movs	r0, r3
 800a960:	2303      	movs	r3, #3
 800a962:	4003      	ands	r3, r0
 800a964:	00db      	lsls	r3, r3, #3
 800a966:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a968:	481f      	ldr	r0, [pc, #124]	; (800a9e8 <__NVIC_SetPriority+0xd4>)
 800a96a:	1dfb      	adds	r3, r7, #7
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	b25b      	sxtb	r3, r3
 800a970:	089b      	lsrs	r3, r3, #2
 800a972:	430a      	orrs	r2, r1
 800a974:	33c0      	adds	r3, #192	; 0xc0
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800a97a:	e031      	b.n	800a9e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a97c:	4a1b      	ldr	r2, [pc, #108]	; (800a9ec <__NVIC_SetPriority+0xd8>)
 800a97e:	1dfb      	adds	r3, r7, #7
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	0019      	movs	r1, r3
 800a984:	230f      	movs	r3, #15
 800a986:	400b      	ands	r3, r1
 800a988:	3b08      	subs	r3, #8
 800a98a:	089b      	lsrs	r3, r3, #2
 800a98c:	3306      	adds	r3, #6
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	18d3      	adds	r3, r2, r3
 800a992:	3304      	adds	r3, #4
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	1dfa      	adds	r2, r7, #7
 800a998:	7812      	ldrb	r2, [r2, #0]
 800a99a:	0011      	movs	r1, r2
 800a99c:	2203      	movs	r2, #3
 800a99e:	400a      	ands	r2, r1
 800a9a0:	00d2      	lsls	r2, r2, #3
 800a9a2:	21ff      	movs	r1, #255	; 0xff
 800a9a4:	4091      	lsls	r1, r2
 800a9a6:	000a      	movs	r2, r1
 800a9a8:	43d2      	mvns	r2, r2
 800a9aa:	401a      	ands	r2, r3
 800a9ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	019b      	lsls	r3, r3, #6
 800a9b2:	22ff      	movs	r2, #255	; 0xff
 800a9b4:	401a      	ands	r2, r3
 800a9b6:	1dfb      	adds	r3, r7, #7
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	0018      	movs	r0, r3
 800a9bc:	2303      	movs	r3, #3
 800a9be:	4003      	ands	r3, r0
 800a9c0:	00db      	lsls	r3, r3, #3
 800a9c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800a9c4:	4809      	ldr	r0, [pc, #36]	; (800a9ec <__NVIC_SetPriority+0xd8>)
 800a9c6:	1dfb      	adds	r3, r7, #7
 800a9c8:	781b      	ldrb	r3, [r3, #0]
 800a9ca:	001c      	movs	r4, r3
 800a9cc:	230f      	movs	r3, #15
 800a9ce:	4023      	ands	r3, r4
 800a9d0:	3b08      	subs	r3, #8
 800a9d2:	089b      	lsrs	r3, r3, #2
 800a9d4:	430a      	orrs	r2, r1
 800a9d6:	3306      	adds	r3, #6
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	18c3      	adds	r3, r0, r3
 800a9dc:	3304      	adds	r3, #4
 800a9de:	601a      	str	r2, [r3, #0]
}
 800a9e0:	46c0      	nop			; (mov r8, r8)
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	b003      	add	sp, #12
 800a9e6:	bd90      	pop	{r4, r7, pc}
 800a9e8:	e000e100 	.word	0xe000e100
 800a9ec:	e000ed00 	.word	0xe000ed00

0800a9f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	1e5a      	subs	r2, r3, #1
 800a9fc:	2380      	movs	r3, #128	; 0x80
 800a9fe:	045b      	lsls	r3, r3, #17
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d301      	bcc.n	800aa08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800aa04:	2301      	movs	r3, #1
 800aa06:	e010      	b.n	800aa2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800aa08:	4b0a      	ldr	r3, [pc, #40]	; (800aa34 <SysTick_Config+0x44>)
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	3a01      	subs	r2, #1
 800aa0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800aa10:	2301      	movs	r3, #1
 800aa12:	425b      	negs	r3, r3
 800aa14:	2103      	movs	r1, #3
 800aa16:	0018      	movs	r0, r3
 800aa18:	f7ff ff7c 	bl	800a914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800aa1c:	4b05      	ldr	r3, [pc, #20]	; (800aa34 <SysTick_Config+0x44>)
 800aa1e:	2200      	movs	r2, #0
 800aa20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800aa22:	4b04      	ldr	r3, [pc, #16]	; (800aa34 <SysTick_Config+0x44>)
 800aa24:	2207      	movs	r2, #7
 800aa26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	0018      	movs	r0, r3
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	b002      	add	sp, #8
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	46c0      	nop			; (mov r8, r8)
 800aa34:	e000e010 	.word	0xe000e010

0800aa38 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60b9      	str	r1, [r7, #8]
 800aa40:	607a      	str	r2, [r7, #4]
 800aa42:	210f      	movs	r1, #15
 800aa44:	187b      	adds	r3, r7, r1
 800aa46:	1c02      	adds	r2, r0, #0
 800aa48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	187b      	adds	r3, r7, r1
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	b25b      	sxtb	r3, r3
 800aa52:	0011      	movs	r1, r2
 800aa54:	0018      	movs	r0, r3
 800aa56:	f7ff ff5d 	bl	800a914 <__NVIC_SetPriority>
}
 800aa5a:	46c0      	nop			; (mov r8, r8)
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	b004      	add	sp, #16
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b082      	sub	sp, #8
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	0002      	movs	r2, r0
 800aa6a:	1dfb      	adds	r3, r7, #7
 800aa6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800aa6e:	1dfb      	adds	r3, r7, #7
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	b25b      	sxtb	r3, r3
 800aa74:	0018      	movs	r0, r3
 800aa76:	f7ff ff33 	bl	800a8e0 <__NVIC_EnableIRQ>
}
 800aa7a:	46c0      	nop			; (mov r8, r8)
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	b002      	add	sp, #8
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b082      	sub	sp, #8
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	0018      	movs	r0, r3
 800aa8e:	f7ff ffaf 	bl	800a9f0 <SysTick_Config>
 800aa92:	0003      	movs	r3, r0
}
 800aa94:	0018      	movs	r0, r3
 800aa96:	46bd      	mov	sp, r7
 800aa98:	b002      	add	sp, #8
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d101      	bne.n	800aaae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e056      	b.n	800ab5c <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	7f5b      	ldrb	r3, [r3, #29]
 800aab2:	b2db      	uxtb	r3, r3
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d106      	bne.n	800aac6 <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	0018      	movs	r0, r3
 800aac2:	f7fd fd9b 	bl	80085fc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2202      	movs	r2, #2
 800aaca:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	791b      	ldrb	r3, [r3, #4]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10c      	bne.n	800aaee <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a22      	ldr	r2, [pc, #136]	; (800ab64 <HAL_CRC_Init+0xc8>)
 800aada:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	689a      	ldr	r2, [r3, #8]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2118      	movs	r1, #24
 800aae8:	438a      	bics	r2, r1
 800aaea:	609a      	str	r2, [r3, #8]
 800aaec:	e00b      	b.n	800ab06 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6899      	ldr	r1, [r3, #8]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	68da      	ldr	r2, [r3, #12]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	0018      	movs	r0, r3
 800aafa:	f000 f94c 	bl	800ad96 <HAL_CRCEx_Polynomial_Set>
 800aafe:	1e03      	subs	r3, r0, #0
 800ab00:	d001      	beq.n	800ab06 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	e02a      	b.n	800ab5c <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	795b      	ldrb	r3, [r3, #5]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d105      	bne.n	800ab1a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2201      	movs	r2, #1
 800ab14:	4252      	negs	r2, r2
 800ab16:	611a      	str	r2, [r3, #16]
 800ab18:	e004      	b.n	800ab24 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	6912      	ldr	r2, [r2, #16]
 800ab22:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	689b      	ldr	r3, [r3, #8]
 800ab2a:	2260      	movs	r2, #96	; 0x60
 800ab2c:	4393      	bics	r3, r2
 800ab2e:	0019      	movs	r1, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	695a      	ldr	r2, [r3, #20]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	430a      	orrs	r2, r1
 800ab3a:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	2280      	movs	r2, #128	; 0x80
 800ab44:	4393      	bics	r3, r2
 800ab46:	0019      	movs	r1, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	699a      	ldr	r2, [r3, #24]
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	430a      	orrs	r2, r1
 800ab52:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	0018      	movs	r0, r3
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	b002      	add	sp, #8
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	04c11db7 	.word	0x04c11db7

0800ab68 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b086      	sub	sp, #24
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 800ab74:	2300      	movs	r3, #0
 800ab76:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2202      	movs	r2, #2
 800ab7c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	689a      	ldr	r2, [r3, #8]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	2101      	movs	r1, #1
 800ab8a:	430a      	orrs	r2, r1
 800ab8c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6a1b      	ldr	r3, [r3, #32]
 800ab92:	2b03      	cmp	r3, #3
 800ab94:	d005      	beq.n	800aba2 <HAL_CRC_Calculate+0x3a>
 800ab96:	d82d      	bhi.n	800abf4 <HAL_CRC_Calculate+0x8c>
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d019      	beq.n	800abd0 <HAL_CRC_Calculate+0x68>
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	d020      	beq.n	800abe2 <HAL_CRC_Calculate+0x7a>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800aba0:	e028      	b.n	800abf4 <HAL_CRC_Calculate+0x8c>
      for (index = 0U; index < BufferLength; index++)
 800aba2:	2300      	movs	r3, #0
 800aba4:	617b      	str	r3, [r7, #20]
 800aba6:	e00a      	b.n	800abbe <HAL_CRC_Calculate+0x56>
        hcrc->Instance->DR = pBuffer[index];
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	68ba      	ldr	r2, [r7, #8]
 800abae:	18d2      	adds	r2, r2, r3
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	6812      	ldr	r2, [r2, #0]
 800abb6:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	3301      	adds	r3, #1
 800abbc:	617b      	str	r3, [r7, #20]
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d3f0      	bcc.n	800aba8 <HAL_CRC_Calculate+0x40>
      temp = hcrc->Instance->DR;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	613b      	str	r3, [r7, #16]
      break;
 800abce:	e012      	b.n	800abf6 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	68b9      	ldr	r1, [r7, #8]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	0018      	movs	r0, r3
 800abd8:	f000 f815 	bl	800ac06 <CRC_Handle_8>
 800abdc:	0003      	movs	r3, r0
 800abde:	613b      	str	r3, [r7, #16]
      break;
 800abe0:	e009      	b.n	800abf6 <HAL_CRC_Calculate+0x8e>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	68b9      	ldr	r1, [r7, #8]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	0018      	movs	r0, r3
 800abea:	f000 f89d 	bl	800ad28 <CRC_Handle_16>
 800abee:	0003      	movs	r3, r0
 800abf0:	613b      	str	r3, [r7, #16]
      break;
 800abf2:	e000      	b.n	800abf6 <HAL_CRC_Calculate+0x8e>
      break;
 800abf4:	46c0      	nop			; (mov r8, r8)
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2201      	movs	r2, #1
 800abfa:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800abfc:	693b      	ldr	r3, [r7, #16]
}
 800abfe:	0018      	movs	r0, r3
 800ac00:	46bd      	mov	sp, r7
 800ac02:	b006      	add	sp, #24
 800ac04:	bd80      	pop	{r7, pc}

0800ac06 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b088      	sub	sp, #32
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	60f8      	str	r0, [r7, #12]
 800ac0e:	60b9      	str	r1, [r7, #8]
 800ac10:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800ac12:	2300      	movs	r3, #0
 800ac14:	61fb      	str	r3, [r7, #28]
 800ac16:	e023      	b.n	800ac60 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	009b      	lsls	r3, r3, #2
 800ac1c:	68ba      	ldr	r2, [r7, #8]
 800ac1e:	18d3      	adds	r3, r2, r3
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	3301      	adds	r3, #1
 800ac2a:	68b9      	ldr	r1, [r7, #8]
 800ac2c:	18cb      	adds	r3, r1, r3
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800ac32:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	3302      	adds	r3, #2
 800ac3a:	68b9      	ldr	r1, [r7, #8]
 800ac3c:	18cb      	adds	r3, r1, r3
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800ac42:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800ac44:	69fb      	ldr	r3, [r7, #28]
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	3303      	adds	r3, #3
 800ac4a:	68b9      	ldr	r1, [r7, #8]
 800ac4c:	18cb      	adds	r3, r1, r3
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	0019      	movs	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800ac56:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800ac58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800ac5a:	69fb      	ldr	r3, [r7, #28]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	61fb      	str	r3, [r7, #28]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	089b      	lsrs	r3, r3, #2
 800ac64:	69fa      	ldr	r2, [r7, #28]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d3d6      	bcc.n	800ac18 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2203      	movs	r2, #3
 800ac6e:	4013      	ands	r3, r2
 800ac70:	d053      	beq.n	800ad1a <CRC_Handle_8+0x114>
  {
    if ((BufferLength % 4U) == 1U)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2203      	movs	r2, #3
 800ac76:	4013      	ands	r3, r2
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d107      	bne.n	800ac8c <CRC_Handle_8+0x86>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	68ba      	ldr	r2, [r7, #8]
 800ac82:	18d2      	adds	r2, r2, r3
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	7812      	ldrb	r2, [r2, #0]
 800ac8a:	701a      	strb	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2203      	movs	r2, #3
 800ac90:	4013      	ands	r3, r2
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d119      	bne.n	800acca <CRC_Handle_8+0xc4>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	68ba      	ldr	r2, [r7, #8]
 800ac9c:	18d3      	adds	r3, r2, r3
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	021b      	lsls	r3, r3, #8
 800aca2:	b21a      	sxth	r2, r3
 800aca4:	69fb      	ldr	r3, [r7, #28]
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	3301      	adds	r3, #1
 800acaa:	68b9      	ldr	r1, [r7, #8]
 800acac:	18cb      	adds	r3, r1, r3
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	b21b      	sxth	r3, r3
 800acb2:	4313      	orrs	r3, r2
 800acb4:	b21a      	sxth	r2, r3
 800acb6:	211a      	movs	r1, #26
 800acb8:	187b      	adds	r3, r7, r1
 800acba:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	187a      	adds	r2, r7, r1
 800acc6:	8812      	ldrh	r2, [r2, #0]
 800acc8:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2203      	movs	r2, #3
 800acce:	4013      	ands	r3, r2
 800acd0:	2b03      	cmp	r3, #3
 800acd2:	d122      	bne.n	800ad1a <CRC_Handle_8+0x114>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	68ba      	ldr	r2, [r7, #8]
 800acda:	18d3      	adds	r3, r2, r3
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	021b      	lsls	r3, r3, #8
 800ace0:	b21a      	sxth	r2, r3
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	3301      	adds	r3, #1
 800ace8:	68b9      	ldr	r1, [r7, #8]
 800acea:	18cb      	adds	r3, r1, r3
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	b21b      	sxth	r3, r3
 800acf0:	4313      	orrs	r3, r2
 800acf2:	b21a      	sxth	r2, r3
 800acf4:	211a      	movs	r1, #26
 800acf6:	187b      	adds	r3, r7, r1
 800acf8:	801a      	strh	r2, [r3, #0]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800ad00:	697b      	ldr	r3, [r7, #20]
 800ad02:	187a      	adds	r2, r7, r1
 800ad04:	8812      	ldrh	r2, [r2, #0]
 800ad06:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	009b      	lsls	r3, r3, #2
 800ad0c:	3302      	adds	r3, #2
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	18d2      	adds	r2, r2, r3
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	7812      	ldrb	r2, [r2, #0]
 800ad18:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	681b      	ldr	r3, [r3, #0]
}
 800ad20:	0018      	movs	r0, r3
 800ad22:	46bd      	mov	sp, r7
 800ad24:	b008      	add	sp, #32
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800ad34:	2300      	movs	r3, #0
 800ad36:	617b      	str	r3, [r7, #20]
 800ad38:	e013      	b.n	800ad62 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	68ba      	ldr	r2, [r7, #8]
 800ad40:	18d3      	adds	r3, r2, r3
 800ad42:	881b      	ldrh	r3, [r3, #0]
 800ad44:	041a      	lsls	r2, r3, #16
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	3302      	adds	r3, #2
 800ad4c:	68b9      	ldr	r1, [r7, #8]
 800ad4e:	18cb      	adds	r3, r1, r3
 800ad50:	881b      	ldrh	r3, [r3, #0]
 800ad52:	0019      	movs	r1, r3
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	430a      	orrs	r2, r1
 800ad5a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	617b      	str	r3, [r7, #20]
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	085b      	lsrs	r3, r3, #1
 800ad66:	697a      	ldr	r2, [r7, #20]
 800ad68:	429a      	cmp	r2, r3
 800ad6a:	d3e6      	bcc.n	800ad3a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2201      	movs	r2, #1
 800ad70:	4013      	ands	r3, r2
 800ad72:	d009      	beq.n	800ad88 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	68ba      	ldr	r2, [r7, #8]
 800ad80:	18d3      	adds	r3, r2, r3
 800ad82:	881a      	ldrh	r2, [r3, #0]
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	681b      	ldr	r3, [r3, #0]
}
 800ad8e:	0018      	movs	r0, r3
 800ad90:	46bd      	mov	sp, r7
 800ad92:	b006      	add	sp, #24
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b086      	sub	sp, #24
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	60f8      	str	r0, [r7, #12]
 800ad9e:	60b9      	str	r1, [r7, #8]
 800ada0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ada2:	2317      	movs	r3, #23
 800ada4:	18fb      	adds	r3, r7, r3
 800ada6:	2200      	movs	r2, #0
 800ada8:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800adaa:	231f      	movs	r3, #31
 800adac:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800adae:	46c0      	nop			; (mov r8, r8)
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	1e5a      	subs	r2, r3, #1
 800adb4:	613a      	str	r2, [r7, #16]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d008      	beq.n	800adcc <HAL_CRCEx_Polynomial_Set+0x36>
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	221f      	movs	r2, #31
 800adbe:	4013      	ands	r3, r2
 800adc0:	68ba      	ldr	r2, [r7, #8]
 800adc2:	40da      	lsrs	r2, r3
 800adc4:	0013      	movs	r3, r2
 800adc6:	2201      	movs	r2, #1
 800adc8:	4013      	ands	r3, r2
 800adca:	d0f1      	beq.n	800adb0 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b18      	cmp	r3, #24
 800add0:	d00f      	beq.n	800adf2 <HAL_CRCEx_Polynomial_Set+0x5c>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2b18      	cmp	r3, #24
 800add6:	d824      	bhi.n	800ae22 <HAL_CRCEx_Polynomial_Set+0x8c>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b10      	cmp	r3, #16
 800addc:	d011      	beq.n	800ae02 <HAL_CRCEx_Polynomial_Set+0x6c>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2b10      	cmp	r3, #16
 800ade2:	d81e      	bhi.n	800ae22 <HAL_CRCEx_Polynomial_Set+0x8c>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d020      	beq.n	800ae2c <HAL_CRCEx_Polynomial_Set+0x96>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2b08      	cmp	r3, #8
 800adee:	d010      	beq.n	800ae12 <HAL_CRCEx_Polynomial_Set+0x7c>
 800adf0:	e017      	b.n	800ae22 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	2b06      	cmp	r3, #6
 800adf6:	d91b      	bls.n	800ae30 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 800adf8:	2317      	movs	r3, #23
 800adfa:	18fb      	adds	r3, r7, r3
 800adfc:	2201      	movs	r2, #1
 800adfe:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ae00:	e016      	b.n	800ae30 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	2b07      	cmp	r3, #7
 800ae06:	d915      	bls.n	800ae34 <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 800ae08:	2317      	movs	r3, #23
 800ae0a:	18fb      	adds	r3, r7, r3
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ae10:	e010      	b.n	800ae34 <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	2b0f      	cmp	r3, #15
 800ae16:	d90f      	bls.n	800ae38 <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 800ae18:	2317      	movs	r3, #23
 800ae1a:	18fb      	adds	r3, r7, r3
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ae20:	e00a      	b.n	800ae38 <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800ae22:	2317      	movs	r3, #23
 800ae24:	18fb      	adds	r3, r7, r3
 800ae26:	2201      	movs	r2, #1
 800ae28:	701a      	strb	r2, [r3, #0]
      break;
 800ae2a:	e006      	b.n	800ae3a <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800ae2c:	46c0      	nop			; (mov r8, r8)
 800ae2e:	e004      	b.n	800ae3a <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800ae30:	46c0      	nop			; (mov r8, r8)
 800ae32:	e002      	b.n	800ae3a <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800ae34:	46c0      	nop			; (mov r8, r8)
 800ae36:	e000      	b.n	800ae3a <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800ae38:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 800ae3a:	2317      	movs	r3, #23
 800ae3c:	18fb      	adds	r3, r7, r3
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10e      	bne.n	800ae62 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	689b      	ldr	r3, [r3, #8]
 800ae52:	2218      	movs	r2, #24
 800ae54:	4393      	bics	r3, r2
 800ae56:	0019      	movs	r1, r3
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	430a      	orrs	r2, r1
 800ae60:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800ae62:	2317      	movs	r3, #23
 800ae64:	18fb      	adds	r3, r7, r3
 800ae66:	781b      	ldrb	r3, [r3, #0]
}
 800ae68:	0018      	movs	r0, r3
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	b006      	add	sp, #24
 800ae6e:	bd80      	pop	{r7, pc}

0800ae70 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b082      	sub	sp, #8
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d101      	bne.n	800ae82 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e077      	b.n	800af72 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a3d      	ldr	r2, [pc, #244]	; (800af7c <HAL_DMA_Init+0x10c>)
 800ae88:	4694      	mov	ip, r2
 800ae8a:	4463      	add	r3, ip
 800ae8c:	2114      	movs	r1, #20
 800ae8e:	0018      	movs	r0, r3
 800ae90:	f7f5 f95c 	bl	800014c <__udivsi3>
 800ae94:	0003      	movs	r3, r0
 800ae96:	009a      	lsls	r2, r3, #2
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	641a      	str	r2, [r3, #64]	; 0x40
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2225      	movs	r2, #37	; 0x25
 800aea0:	2102      	movs	r1, #2
 800aea2:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4934      	ldr	r1, [pc, #208]	; (800af80 <HAL_DMA_Init+0x110>)
 800aeb0:	400a      	ands	r2, r1
 800aeb2:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	6819      	ldr	r1, [r3, #0]
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	689a      	ldr	r2, [r3, #8]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	68db      	ldr	r3, [r3, #12]
 800aec2:	431a      	orrs	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	431a      	orrs	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	695b      	ldr	r3, [r3, #20]
 800aece:	431a      	orrs	r2, r3
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	699b      	ldr	r3, [r3, #24]
 800aed4:	431a      	orrs	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	69db      	ldr	r3, [r3, #28]
 800aeda:	431a      	orrs	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6a1b      	ldr	r3, [r3, #32]
 800aee0:	431a      	orrs	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	430a      	orrs	r2, r1
 800aee8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	0018      	movs	r0, r3
 800aeee:	f000 fa8d 	bl	800b40c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	689a      	ldr	r2, [r3, #8]
 800aef6:	2380      	movs	r3, #128	; 0x80
 800aef8:	01db      	lsls	r3, r3, #7
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d102      	bne.n	800af04 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685a      	ldr	r2, [r3, #4]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af0c:	213f      	movs	r1, #63	; 0x3f
 800af0e:	400a      	ands	r2, r1
 800af10:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af16:	687a      	ldr	r2, [r7, #4]
 800af18:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800af1a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	685b      	ldr	r3, [r3, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d011      	beq.n	800af48 <HAL_DMA_Init+0xd8>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	2b04      	cmp	r3, #4
 800af2a:	d80d      	bhi.n	800af48 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	0018      	movs	r0, r3
 800af30:	f000 fa98 	bl	800b464 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af38:	2200      	movs	r2, #0
 800af3a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800af44:	605a      	str	r2, [r3, #4]
 800af46:	e008      	b.n	800af5a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2200      	movs	r2, #0
 800af52:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2225      	movs	r2, #37	; 0x25
 800af64:	2101      	movs	r1, #1
 800af66:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2224      	movs	r2, #36	; 0x24
 800af6c:	2100      	movs	r1, #0
 800af6e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800af70:	2300      	movs	r3, #0
}
 800af72:	0018      	movs	r0, r3
 800af74:	46bd      	mov	sp, r7
 800af76:	b002      	add	sp, #8
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	46c0      	nop			; (mov r8, r8)
 800af7c:	bffdfff8 	.word	0xbffdfff8
 800af80:	ffff800f 	.word	0xffff800f

0800af84 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b086      	sub	sp, #24
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
 800af90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af92:	2317      	movs	r3, #23
 800af94:	18fb      	adds	r3, r7, r3
 800af96:	2200      	movs	r2, #0
 800af98:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	2224      	movs	r2, #36	; 0x24
 800af9e:	5c9b      	ldrb	r3, [r3, r2]
 800afa0:	2b01      	cmp	r3, #1
 800afa2:	d101      	bne.n	800afa8 <HAL_DMA_Start_IT+0x24>
 800afa4:	2302      	movs	r3, #2
 800afa6:	e06f      	b.n	800b088 <HAL_DMA_Start_IT+0x104>
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2224      	movs	r2, #36	; 0x24
 800afac:	2101      	movs	r1, #1
 800afae:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2225      	movs	r2, #37	; 0x25
 800afb4:	5c9b      	ldrb	r3, [r3, r2]
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	2b01      	cmp	r3, #1
 800afba:	d157      	bne.n	800b06c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2225      	movs	r2, #37	; 0x25
 800afc0:	2102      	movs	r1, #2
 800afc2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2101      	movs	r1, #1
 800afd6:	438a      	bics	r2, r1
 800afd8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	687a      	ldr	r2, [r7, #4]
 800afde:	68b9      	ldr	r1, [r7, #8]
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f000 f9d3 	bl	800b38c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afea:	2b00      	cmp	r3, #0
 800afec:	d008      	beq.n	800b000 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	210e      	movs	r1, #14
 800affa:	430a      	orrs	r2, r1
 800affc:	601a      	str	r2, [r3, #0]
 800affe:	e00f      	b.n	800b020 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2104      	movs	r1, #4
 800b00c:	438a      	bics	r2, r1
 800b00e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	210a      	movs	r1, #10
 800b01c:	430a      	orrs	r2, r1
 800b01e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	2380      	movs	r3, #128	; 0x80
 800b028:	025b      	lsls	r3, r3, #9
 800b02a:	4013      	ands	r3, r2
 800b02c:	d008      	beq.n	800b040 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b038:	2180      	movs	r1, #128	; 0x80
 800b03a:	0049      	lsls	r1, r1, #1
 800b03c:	430a      	orrs	r2, r1
 800b03e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b044:	2b00      	cmp	r3, #0
 800b046:	d008      	beq.n	800b05a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b04c:	681a      	ldr	r2, [r3, #0]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b052:	2180      	movs	r1, #128	; 0x80
 800b054:	0049      	lsls	r1, r1, #1
 800b056:	430a      	orrs	r2, r1
 800b058:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2101      	movs	r1, #1
 800b066:	430a      	orrs	r2, r1
 800b068:	601a      	str	r2, [r3, #0]
 800b06a:	e00a      	b.n	800b082 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	2280      	movs	r2, #128	; 0x80
 800b070:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	2224      	movs	r2, #36	; 0x24
 800b076:	2100      	movs	r1, #0
 800b078:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800b07a:	2317      	movs	r3, #23
 800b07c:	18fb      	adds	r3, r7, r3
 800b07e:	2201      	movs	r2, #1
 800b080:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800b082:	2317      	movs	r3, #23
 800b084:	18fb      	adds	r3, r7, r3
 800b086:	781b      	ldrb	r3, [r3, #0]
}
 800b088:	0018      	movs	r0, r3
 800b08a:	46bd      	mov	sp, r7
 800b08c:	b006      	add	sp, #24
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d101      	bne.n	800b0a2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e050      	b.n	800b144 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	2225      	movs	r2, #37	; 0x25
 800b0a6:	5c9b      	ldrb	r3, [r3, r2]
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d008      	beq.n	800b0c0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	2204      	movs	r2, #4
 800b0b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2224      	movs	r2, #36	; 0x24
 800b0b8:	2100      	movs	r1, #0
 800b0ba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	e041      	b.n	800b144 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	210e      	movs	r1, #14
 800b0cc:	438a      	bics	r2, r1
 800b0ce:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0da:	491c      	ldr	r1, [pc, #112]	; (800b14c <HAL_DMA_Abort+0xbc>)
 800b0dc:	400a      	ands	r2, r1
 800b0de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2101      	movs	r1, #1
 800b0ec:	438a      	bics	r2, r1
 800b0ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800b0f0:	4b17      	ldr	r3, [pc, #92]	; (800b150 <HAL_DMA_Abort+0xc0>)
 800b0f2:	6859      	ldr	r1, [r3, #4]
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f8:	221c      	movs	r2, #28
 800b0fa:	4013      	ands	r3, r2
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	409a      	lsls	r2, r3
 800b100:	4b13      	ldr	r3, [pc, #76]	; (800b150 <HAL_DMA_Abort+0xc0>)
 800b102:	430a      	orrs	r2, r1
 800b104:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b10e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00c      	beq.n	800b132 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b122:	490a      	ldr	r1, [pc, #40]	; (800b14c <HAL_DMA_Abort+0xbc>)
 800b124:	400a      	ands	r2, r1
 800b126:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b12c:	687a      	ldr	r2, [r7, #4]
 800b12e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b130:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2225      	movs	r2, #37	; 0x25
 800b136:	2101      	movs	r1, #1
 800b138:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2224      	movs	r2, #36	; 0x24
 800b13e:	2100      	movs	r1, #0
 800b140:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800b142:	2300      	movs	r3, #0
}
 800b144:	0018      	movs	r0, r3
 800b146:	46bd      	mov	sp, r7
 800b148:	b002      	add	sp, #8
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	fffffeff 	.word	0xfffffeff
 800b150:	40020000 	.word	0x40020000

0800b154 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b15c:	210f      	movs	r1, #15
 800b15e:	187b      	adds	r3, r7, r1
 800b160:	2200      	movs	r2, #0
 800b162:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2225      	movs	r2, #37	; 0x25
 800b168:	5c9b      	ldrb	r3, [r3, r2]
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d006      	beq.n	800b17e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2204      	movs	r2, #4
 800b174:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b176:	187b      	adds	r3, r7, r1
 800b178:	2201      	movs	r2, #1
 800b17a:	701a      	strb	r2, [r3, #0]
 800b17c:	e049      	b.n	800b212 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	210e      	movs	r1, #14
 800b18a:	438a      	bics	r2, r1
 800b18c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2101      	movs	r1, #1
 800b19a:	438a      	bics	r2, r1
 800b19c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1a8:	491d      	ldr	r1, [pc, #116]	; (800b220 <HAL_DMA_Abort_IT+0xcc>)
 800b1aa:	400a      	ands	r2, r1
 800b1ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800b1ae:	4b1d      	ldr	r3, [pc, #116]	; (800b224 <HAL_DMA_Abort_IT+0xd0>)
 800b1b0:	6859      	ldr	r1, [r3, #4]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b6:	221c      	movs	r2, #28
 800b1b8:	4013      	ands	r3, r2
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	409a      	lsls	r2, r3
 800b1be:	4b19      	ldr	r3, [pc, #100]	; (800b224 <HAL_DMA_Abort_IT+0xd0>)
 800b1c0:	430a      	orrs	r2, r1
 800b1c2:	605a      	str	r2, [r3, #4]
#endif

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b1cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00c      	beq.n	800b1f0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1e0:	490f      	ldr	r1, [pc, #60]	; (800b220 <HAL_DMA_Abort_IT+0xcc>)
 800b1e2:	400a      	ands	r2, r1
 800b1e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b1ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2225      	movs	r2, #37	; 0x25
 800b1f4:	2101      	movs	r1, #1
 800b1f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2224      	movs	r2, #36	; 0x24
 800b1fc:	2100      	movs	r1, #0
 800b1fe:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b204:	2b00      	cmp	r3, #0
 800b206:	d004      	beq.n	800b212 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	0010      	movs	r0, r2
 800b210:	4798      	blx	r3
    }
  }
  return status;
 800b212:	230f      	movs	r3, #15
 800b214:	18fb      	adds	r3, r7, r3
 800b216:	781b      	ldrb	r3, [r3, #0]
}
 800b218:	0018      	movs	r0, r3
 800b21a:	46bd      	mov	sp, r7
 800b21c:	b004      	add	sp, #16
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	fffffeff 	.word	0xfffffeff
 800b224:	40020000 	.word	0x40020000

0800b228 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 800b230:	4b55      	ldr	r3, [pc, #340]	; (800b388 <HAL_DMA_IRQHandler+0x160>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t source_it = hdma->Instance->CCR;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b242:	221c      	movs	r2, #28
 800b244:	4013      	ands	r3, r2
 800b246:	2204      	movs	r2, #4
 800b248:	409a      	lsls	r2, r3
 800b24a:	0013      	movs	r3, r2
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	4013      	ands	r3, r2
 800b250:	d027      	beq.n	800b2a2 <HAL_DMA_IRQHandler+0x7a>
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	2204      	movs	r2, #4
 800b256:	4013      	ands	r3, r2
 800b258:	d023      	beq.n	800b2a2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2220      	movs	r2, #32
 800b262:	4013      	ands	r3, r2
 800b264:	d107      	bne.n	800b276 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2104      	movs	r1, #4
 800b272:	438a      	bics	r2, r1
 800b274:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800b276:	4b44      	ldr	r3, [pc, #272]	; (800b388 <HAL_DMA_IRQHandler+0x160>)
 800b278:	6859      	ldr	r1, [r3, #4]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b27e:	221c      	movs	r2, #28
 800b280:	4013      	ands	r3, r2
 800b282:	2204      	movs	r2, #4
 800b284:	409a      	lsls	r2, r3
 800b286:	4b40      	ldr	r3, [pc, #256]	; (800b388 <HAL_DMA_IRQHandler+0x160>)
 800b288:	430a      	orrs	r2, r1
 800b28a:	605a      	str	r2, [r3, #4]
#endif

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b290:	2b00      	cmp	r3, #0
 800b292:	d100      	bne.n	800b296 <HAL_DMA_IRQHandler+0x6e>
 800b294:	e073      	b.n	800b37e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b29a:	687a      	ldr	r2, [r7, #4]
 800b29c:	0010      	movs	r0, r2
 800b29e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800b2a0:	e06d      	b.n	800b37e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a6:	221c      	movs	r2, #28
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	2202      	movs	r2, #2
 800b2ac:	409a      	lsls	r2, r3
 800b2ae:	0013      	movs	r3, r2
 800b2b0:	68fa      	ldr	r2, [r7, #12]
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	d02e      	beq.n	800b314 <HAL_DMA_IRQHandler+0xec>
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	2202      	movs	r2, #2
 800b2ba:	4013      	ands	r3, r2
 800b2bc:	d02a      	beq.n	800b314 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	2220      	movs	r2, #32
 800b2c6:	4013      	ands	r3, r2
 800b2c8:	d10b      	bne.n	800b2e2 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681a      	ldr	r2, [r3, #0]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	210a      	movs	r1, #10
 800b2d6:	438a      	bics	r2, r1
 800b2d8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2225      	movs	r2, #37	; 0x25
 800b2de:	2101      	movs	r1, #1
 800b2e0:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800b2e2:	4b29      	ldr	r3, [pc, #164]	; (800b388 <HAL_DMA_IRQHandler+0x160>)
 800b2e4:	6859      	ldr	r1, [r3, #4]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2ea:	221c      	movs	r2, #28
 800b2ec:	4013      	ands	r3, r2
 800b2ee:	2202      	movs	r2, #2
 800b2f0:	409a      	lsls	r2, r3
 800b2f2:	4b25      	ldr	r3, [pc, #148]	; (800b388 <HAL_DMA_IRQHandler+0x160>)
 800b2f4:	430a      	orrs	r2, r1
 800b2f6:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2224      	movs	r2, #36	; 0x24
 800b2fc:	2100      	movs	r1, #0
 800b2fe:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b304:	2b00      	cmp	r3, #0
 800b306:	d03a      	beq.n	800b37e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	0010      	movs	r0, r2
 800b310:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800b312:	e034      	b.n	800b37e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b318:	221c      	movs	r2, #28
 800b31a:	4013      	ands	r3, r2
 800b31c:	2208      	movs	r2, #8
 800b31e:	409a      	lsls	r2, r3
 800b320:	0013      	movs	r3, r2
 800b322:	68fa      	ldr	r2, [r7, #12]
 800b324:	4013      	ands	r3, r2
 800b326:	d02b      	beq.n	800b380 <HAL_DMA_IRQHandler+0x158>
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	2208      	movs	r2, #8
 800b32c:	4013      	ands	r3, r2
 800b32e:	d027      	beq.n	800b380 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	210e      	movs	r1, #14
 800b33c:	438a      	bics	r2, r1
 800b33e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800b340:	4b11      	ldr	r3, [pc, #68]	; (800b388 <HAL_DMA_IRQHandler+0x160>)
 800b342:	6859      	ldr	r1, [r3, #4]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b348:	221c      	movs	r2, #28
 800b34a:	4013      	ands	r3, r2
 800b34c:	2201      	movs	r2, #1
 800b34e:	409a      	lsls	r2, r3
 800b350:	4b0d      	ldr	r3, [pc, #52]	; (800b388 <HAL_DMA_IRQHandler+0x160>)
 800b352:	430a      	orrs	r2, r1
 800b354:	605a      	str	r2, [r3, #4]
#endif

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2201      	movs	r2, #1
 800b35a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2225      	movs	r2, #37	; 0x25
 800b360:	2101      	movs	r1, #1
 800b362:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2224      	movs	r2, #36	; 0x24
 800b368:	2100      	movs	r1, #0
 800b36a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b370:	2b00      	cmp	r3, #0
 800b372:	d005      	beq.n	800b380 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	0010      	movs	r0, r2
 800b37c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800b37e:	46c0      	nop			; (mov r8, r8)
 800b380:	46c0      	nop			; (mov r8, r8)
}
 800b382:	46bd      	mov	sp, r7
 800b384:	b004      	add	sp, #16
 800b386:	bd80      	pop	{r7, pc}
 800b388:	40020000 	.word	0x40020000

0800b38c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]
 800b398:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b3a2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d004      	beq.n	800b3b6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b3b4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800b3b6:	4b14      	ldr	r3, [pc, #80]	; (800b408 <DMA_SetConfig+0x7c>)
 800b3b8:	6859      	ldr	r1, [r3, #4]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3be:	221c      	movs	r2, #28
 800b3c0:	4013      	ands	r3, r2
 800b3c2:	2201      	movs	r2, #1
 800b3c4:	409a      	lsls	r2, r3
 800b3c6:	4b10      	ldr	r3, [pc, #64]	; (800b408 <DMA_SetConfig+0x7c>)
 800b3c8:	430a      	orrs	r2, r1
 800b3ca:	605a      	str	r2, [r3, #4]
#endif

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	683a      	ldr	r2, [r7, #0]
 800b3d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	2b10      	cmp	r3, #16
 800b3da:	d108      	bne.n	800b3ee <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800b3ec:	e007      	b.n	800b3fe <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68ba      	ldr	r2, [r7, #8]
 800b3f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	687a      	ldr	r2, [r7, #4]
 800b3fc:	60da      	str	r2, [r3, #12]
}
 800b3fe:	46c0      	nop			; (mov r8, r8)
 800b400:	46bd      	mov	sp, r7
 800b402:	b004      	add	sp, #16
 800b404:	bd80      	pop	{r7, pc}
 800b406:	46c0      	nop			; (mov r8, r8)
 800b408:	40020000 	.word	0x40020000

0800b40c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b084      	sub	sp, #16
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b418:	089b      	lsrs	r3, r3, #2
 800b41a:	4a10      	ldr	r2, [pc, #64]	; (800b45c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800b41c:	4694      	mov	ip, r2
 800b41e:	4463      	add	r3, ip
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	001a      	movs	r2, r3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	001a      	movs	r2, r3
 800b42e:	23ff      	movs	r3, #255	; 0xff
 800b430:	4013      	ands	r3, r2
 800b432:	3b08      	subs	r3, #8
 800b434:	2114      	movs	r1, #20
 800b436:	0018      	movs	r0, r3
 800b438:	f7f4 fe88 	bl	800014c <__udivsi3>
 800b43c:	0003      	movs	r3, r0
 800b43e:	60fb      	str	r3, [r7, #12]
#endif

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a07      	ldr	r2, [pc, #28]	; (800b460 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800b444:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	221f      	movs	r2, #31
 800b44a:	4013      	ands	r3, r2
 800b44c:	2201      	movs	r2, #1
 800b44e:	409a      	lsls	r2, r3
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800b454:	46c0      	nop			; (mov r8, r8)
 800b456:	46bd      	mov	sp, r7
 800b458:	b004      	add	sp, #16
 800b45a:	bd80      	pop	{r7, pc}
 800b45c:	10008200 	.word	0x10008200
 800b460:	40020880 	.word	0x40020880

0800b464 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	223f      	movs	r2, #63	; 0x3f
 800b472:	4013      	ands	r3, r2
 800b474:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	4a0a      	ldr	r2, [pc, #40]	; (800b4a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800b47a:	4694      	mov	ip, r2
 800b47c:	4463      	add	r3, ip
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	001a      	movs	r2, r3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	4a07      	ldr	r2, [pc, #28]	; (800b4a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800b48a:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	3b01      	subs	r3, #1
 800b490:	2203      	movs	r2, #3
 800b492:	4013      	ands	r3, r2
 800b494:	2201      	movs	r2, #1
 800b496:	409a      	lsls	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800b49c:	46c0      	nop			; (mov r8, r8)
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	b004      	add	sp, #16
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	1000823f 	.word	0x1000823f
 800b4a8:	40020940 	.word	0x40020940

0800b4ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b4ba:	e147      	b.n	800b74c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2101      	movs	r1, #1
 800b4c2:	697a      	ldr	r2, [r7, #20]
 800b4c4:	4091      	lsls	r1, r2
 800b4c6:	000a      	movs	r2, r1
 800b4c8:	4013      	ands	r3, r2
 800b4ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d100      	bne.n	800b4d4 <HAL_GPIO_Init+0x28>
 800b4d2:	e138      	b.n	800b746 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	685b      	ldr	r3, [r3, #4]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d00b      	beq.n	800b4f4 <HAL_GPIO_Init+0x48>
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d007      	beq.n	800b4f4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b4e8:	2b11      	cmp	r3, #17
 800b4ea:	d003      	beq.n	800b4f4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	2b12      	cmp	r3, #18
 800b4f2:	d130      	bne.n	800b556 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	005b      	lsls	r3, r3, #1
 800b4fe:	2203      	movs	r2, #3
 800b500:	409a      	lsls	r2, r3
 800b502:	0013      	movs	r3, r2
 800b504:	43da      	mvns	r2, r3
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	4013      	ands	r3, r2
 800b50a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	68da      	ldr	r2, [r3, #12]
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	005b      	lsls	r3, r3, #1
 800b514:	409a      	lsls	r2, r3
 800b516:	0013      	movs	r3, r2
 800b518:	693a      	ldr	r2, [r7, #16]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	693a      	ldr	r2, [r7, #16]
 800b522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b52a:	2201      	movs	r2, #1
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	409a      	lsls	r2, r3
 800b530:	0013      	movs	r3, r2
 800b532:	43da      	mvns	r2, r3
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	4013      	ands	r3, r2
 800b538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	091b      	lsrs	r3, r3, #4
 800b540:	2201      	movs	r2, #1
 800b542:	401a      	ands	r2, r3
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	409a      	lsls	r2, r3
 800b548:	0013      	movs	r3, r2
 800b54a:	693a      	ldr	r2, [r7, #16]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	693a      	ldr	r2, [r7, #16]
 800b554:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	005b      	lsls	r3, r3, #1
 800b560:	2203      	movs	r2, #3
 800b562:	409a      	lsls	r2, r3
 800b564:	0013      	movs	r3, r2
 800b566:	43da      	mvns	r2, r3
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	4013      	ands	r3, r2
 800b56c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	689a      	ldr	r2, [r3, #8]
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	005b      	lsls	r3, r3, #1
 800b576:	409a      	lsls	r2, r3
 800b578:	0013      	movs	r3, r2
 800b57a:	693a      	ldr	r2, [r7, #16]
 800b57c:	4313      	orrs	r3, r2
 800b57e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	693a      	ldr	r2, [r7, #16]
 800b584:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	d003      	beq.n	800b596 <HAL_GPIO_Init+0xea>
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	2b12      	cmp	r3, #18
 800b594:	d123      	bne.n	800b5de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	08da      	lsrs	r2, r3, #3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	3208      	adds	r2, #8
 800b59e:	0092      	lsls	r2, r2, #2
 800b5a0:	58d3      	ldr	r3, [r2, r3]
 800b5a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	2207      	movs	r2, #7
 800b5a8:	4013      	ands	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	220f      	movs	r2, #15
 800b5ae:	409a      	lsls	r2, r3
 800b5b0:	0013      	movs	r3, r2
 800b5b2:	43da      	mvns	r2, r3
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	4013      	ands	r3, r2
 800b5b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	691a      	ldr	r2, [r3, #16]
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	2107      	movs	r1, #7
 800b5c2:	400b      	ands	r3, r1
 800b5c4:	009b      	lsls	r3, r3, #2
 800b5c6:	409a      	lsls	r2, r3
 800b5c8:	0013      	movs	r3, r2
 800b5ca:	693a      	ldr	r2, [r7, #16]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	08da      	lsrs	r2, r3, #3
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	3208      	adds	r2, #8
 800b5d8:	0092      	lsls	r2, r2, #2
 800b5da:	6939      	ldr	r1, [r7, #16]
 800b5dc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	005b      	lsls	r3, r3, #1
 800b5e8:	2203      	movs	r2, #3
 800b5ea:	409a      	lsls	r2, r3
 800b5ec:	0013      	movs	r3, r2
 800b5ee:	43da      	mvns	r2, r3
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	4013      	ands	r3, r2
 800b5f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	2203      	movs	r2, #3
 800b5fc:	401a      	ands	r2, r3
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	005b      	lsls	r3, r3, #1
 800b602:	409a      	lsls	r2, r3
 800b604:	0013      	movs	r3, r2
 800b606:	693a      	ldr	r2, [r7, #16]
 800b608:	4313      	orrs	r3, r2
 800b60a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	693a      	ldr	r2, [r7, #16]
 800b610:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	685a      	ldr	r2, [r3, #4]
 800b616:	2380      	movs	r3, #128	; 0x80
 800b618:	055b      	lsls	r3, r3, #21
 800b61a:	4013      	ands	r3, r2
 800b61c:	d100      	bne.n	800b620 <HAL_GPIO_Init+0x174>
 800b61e:	e092      	b.n	800b746 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800b620:	4a50      	ldr	r2, [pc, #320]	; (800b764 <HAL_GPIO_Init+0x2b8>)
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	089b      	lsrs	r3, r3, #2
 800b626:	3318      	adds	r3, #24
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	589b      	ldr	r3, [r3, r2]
 800b62c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800b62e:	697b      	ldr	r3, [r7, #20]
 800b630:	2203      	movs	r2, #3
 800b632:	4013      	ands	r3, r2
 800b634:	00db      	lsls	r3, r3, #3
 800b636:	220f      	movs	r2, #15
 800b638:	409a      	lsls	r2, r3
 800b63a:	0013      	movs	r3, r2
 800b63c:	43da      	mvns	r2, r3
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	4013      	ands	r3, r2
 800b642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800b644:	687a      	ldr	r2, [r7, #4]
 800b646:	23a0      	movs	r3, #160	; 0xa0
 800b648:	05db      	lsls	r3, r3, #23
 800b64a:	429a      	cmp	r2, r3
 800b64c:	d013      	beq.n	800b676 <HAL_GPIO_Init+0x1ca>
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	4a45      	ldr	r2, [pc, #276]	; (800b768 <HAL_GPIO_Init+0x2bc>)
 800b652:	4293      	cmp	r3, r2
 800b654:	d00d      	beq.n	800b672 <HAL_GPIO_Init+0x1c6>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a44      	ldr	r2, [pc, #272]	; (800b76c <HAL_GPIO_Init+0x2c0>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d007      	beq.n	800b66e <HAL_GPIO_Init+0x1c2>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a43      	ldr	r2, [pc, #268]	; (800b770 <HAL_GPIO_Init+0x2c4>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d101      	bne.n	800b66a <HAL_GPIO_Init+0x1be>
 800b666:	2303      	movs	r3, #3
 800b668:	e006      	b.n	800b678 <HAL_GPIO_Init+0x1cc>
 800b66a:	2305      	movs	r3, #5
 800b66c:	e004      	b.n	800b678 <HAL_GPIO_Init+0x1cc>
 800b66e:	2302      	movs	r3, #2
 800b670:	e002      	b.n	800b678 <HAL_GPIO_Init+0x1cc>
 800b672:	2301      	movs	r3, #1
 800b674:	e000      	b.n	800b678 <HAL_GPIO_Init+0x1cc>
 800b676:	2300      	movs	r3, #0
 800b678:	697a      	ldr	r2, [r7, #20]
 800b67a:	2103      	movs	r1, #3
 800b67c:	400a      	ands	r2, r1
 800b67e:	00d2      	lsls	r2, r2, #3
 800b680:	4093      	lsls	r3, r2
 800b682:	693a      	ldr	r2, [r7, #16]
 800b684:	4313      	orrs	r3, r2
 800b686:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800b688:	4936      	ldr	r1, [pc, #216]	; (800b764 <HAL_GPIO_Init+0x2b8>)
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	089b      	lsrs	r3, r3, #2
 800b68e:	3318      	adds	r3, #24
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	693a      	ldr	r2, [r7, #16]
 800b694:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b696:	4a33      	ldr	r2, [pc, #204]	; (800b764 <HAL_GPIO_Init+0x2b8>)
 800b698:	2380      	movs	r3, #128	; 0x80
 800b69a:	58d3      	ldr	r3, [r2, r3]
 800b69c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	43da      	mvns	r2, r3
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	4013      	ands	r3, r2
 800b6a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	685a      	ldr	r2, [r3, #4]
 800b6ac:	2380      	movs	r3, #128	; 0x80
 800b6ae:	025b      	lsls	r3, r3, #9
 800b6b0:	4013      	ands	r3, r2
 800b6b2:	d003      	beq.n	800b6bc <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800b6b4:	693a      	ldr	r2, [r7, #16]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b6bc:	4929      	ldr	r1, [pc, #164]	; (800b764 <HAL_GPIO_Init+0x2b8>)
 800b6be:	2280      	movs	r2, #128	; 0x80
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800b6c4:	4a27      	ldr	r2, [pc, #156]	; (800b764 <HAL_GPIO_Init+0x2b8>)
 800b6c6:	2384      	movs	r3, #132	; 0x84
 800b6c8:	58d3      	ldr	r3, [r2, r3]
 800b6ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	43da      	mvns	r2, r3
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	4013      	ands	r3, r2
 800b6d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b6d6:	683b      	ldr	r3, [r7, #0]
 800b6d8:	685a      	ldr	r2, [r3, #4]
 800b6da:	2380      	movs	r3, #128	; 0x80
 800b6dc:	029b      	lsls	r3, r3, #10
 800b6de:	4013      	ands	r3, r2
 800b6e0:	d003      	beq.n	800b6ea <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800b6e2:	693a      	ldr	r2, [r7, #16]
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b6ea:	491e      	ldr	r1, [pc, #120]	; (800b764 <HAL_GPIO_Init+0x2b8>)
 800b6ec:	2284      	movs	r2, #132	; 0x84
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b6f2:	4b1c      	ldr	r3, [pc, #112]	; (800b764 <HAL_GPIO_Init+0x2b8>)
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	43da      	mvns	r2, r3
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	4013      	ands	r3, r2
 800b700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	685a      	ldr	r2, [r3, #4]
 800b706:	2380      	movs	r3, #128	; 0x80
 800b708:	035b      	lsls	r3, r3, #13
 800b70a:	4013      	ands	r3, r2
 800b70c:	d003      	beq.n	800b716 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b70e:	693a      	ldr	r2, [r7, #16]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	4313      	orrs	r3, r2
 800b714:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b716:	4b13      	ldr	r3, [pc, #76]	; (800b764 <HAL_GPIO_Init+0x2b8>)
 800b718:	693a      	ldr	r2, [r7, #16]
 800b71a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800b71c:	4b11      	ldr	r3, [pc, #68]	; (800b764 <HAL_GPIO_Init+0x2b8>)
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	43da      	mvns	r2, r3
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	4013      	ands	r3, r2
 800b72a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	685a      	ldr	r2, [r3, #4]
 800b730:	2380      	movs	r3, #128	; 0x80
 800b732:	039b      	lsls	r3, r3, #14
 800b734:	4013      	ands	r3, r2
 800b736:	d003      	beq.n	800b740 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b738:	693a      	ldr	r2, [r7, #16]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	4313      	orrs	r3, r2
 800b73e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b740:	4b08      	ldr	r3, [pc, #32]	; (800b764 <HAL_GPIO_Init+0x2b8>)
 800b742:	693a      	ldr	r2, [r7, #16]
 800b744:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800b746:	697b      	ldr	r3, [r7, #20]
 800b748:	3301      	adds	r3, #1
 800b74a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	40da      	lsrs	r2, r3
 800b754:	1e13      	subs	r3, r2, #0
 800b756:	d000      	beq.n	800b75a <HAL_GPIO_Init+0x2ae>
 800b758:	e6b0      	b.n	800b4bc <HAL_GPIO_Init+0x10>
  }
}
 800b75a:	46c0      	nop			; (mov r8, r8)
 800b75c:	46c0      	nop			; (mov r8, r8)
 800b75e:	46bd      	mov	sp, r7
 800b760:	b006      	add	sp, #24
 800b762:	bd80      	pop	{r7, pc}
 800b764:	40021800 	.word	0x40021800
 800b768:	50000400 	.word	0x50000400
 800b76c:	50000800 	.word	0x50000800
 800b770:	50000c00 	.word	0x50000c00

0800b774 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	000a      	movs	r2, r1
 800b77e:	1cbb      	adds	r3, r7, #2
 800b780:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	691b      	ldr	r3, [r3, #16]
 800b786:	1cba      	adds	r2, r7, #2
 800b788:	8812      	ldrh	r2, [r2, #0]
 800b78a:	4013      	ands	r3, r2
 800b78c:	d004      	beq.n	800b798 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800b78e:	230f      	movs	r3, #15
 800b790:	18fb      	adds	r3, r7, r3
 800b792:	2201      	movs	r2, #1
 800b794:	701a      	strb	r2, [r3, #0]
 800b796:	e003      	b.n	800b7a0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b798:	230f      	movs	r3, #15
 800b79a:	18fb      	adds	r3, r7, r3
 800b79c:	2200      	movs	r2, #0
 800b79e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800b7a0:	230f      	movs	r3, #15
 800b7a2:	18fb      	adds	r3, r7, r3
 800b7a4:	781b      	ldrb	r3, [r3, #0]
}
 800b7a6:	0018      	movs	r0, r3
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	b004      	add	sp, #16
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b082      	sub	sp, #8
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
 800b7b6:	0008      	movs	r0, r1
 800b7b8:	0011      	movs	r1, r2
 800b7ba:	1cbb      	adds	r3, r7, #2
 800b7bc:	1c02      	adds	r2, r0, #0
 800b7be:	801a      	strh	r2, [r3, #0]
 800b7c0:	1c7b      	adds	r3, r7, #1
 800b7c2:	1c0a      	adds	r2, r1, #0
 800b7c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b7c6:	1c7b      	adds	r3, r7, #1
 800b7c8:	781b      	ldrb	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d004      	beq.n	800b7d8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b7ce:	1cbb      	adds	r3, r7, #2
 800b7d0:	881a      	ldrh	r2, [r3, #0]
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b7d6:	e003      	b.n	800b7e0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b7d8:	1cbb      	adds	r3, r7, #2
 800b7da:	881a      	ldrh	r2, [r3, #0]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b7e0:	46c0      	nop			; (mov r8, r8)
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	b002      	add	sp, #8
 800b7e6:	bd80      	pop	{r7, pc}

0800b7e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b082      	sub	sp, #8
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d101      	bne.n	800b7fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e082      	b.n	800b900 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2241      	movs	r2, #65	; 0x41
 800b7fe:	5c9b      	ldrb	r3, [r3, r2]
 800b800:	b2db      	uxtb	r3, r3
 800b802:	2b00      	cmp	r3, #0
 800b804:	d107      	bne.n	800b816 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2240      	movs	r2, #64	; 0x40
 800b80a:	2100      	movs	r1, #0
 800b80c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	0018      	movs	r0, r3
 800b812:	f7fc ff13 	bl	800863c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2241      	movs	r2, #65	; 0x41
 800b81a:	2124      	movs	r1, #36	; 0x24
 800b81c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2101      	movs	r1, #1
 800b82a:	438a      	bics	r2, r1
 800b82c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	685a      	ldr	r2, [r3, #4]
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	4934      	ldr	r1, [pc, #208]	; (800b908 <HAL_I2C_Init+0x120>)
 800b838:	400a      	ands	r2, r1
 800b83a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	689a      	ldr	r2, [r3, #8]
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4931      	ldr	r1, [pc, #196]	; (800b90c <HAL_I2C_Init+0x124>)
 800b848:	400a      	ands	r2, r1
 800b84a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d108      	bne.n	800b866 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	689a      	ldr	r2, [r3, #8]
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2180      	movs	r1, #128	; 0x80
 800b85e:	0209      	lsls	r1, r1, #8
 800b860:	430a      	orrs	r2, r1
 800b862:	609a      	str	r2, [r3, #8]
 800b864:	e007      	b.n	800b876 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	689a      	ldr	r2, [r3, #8]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2184      	movs	r1, #132	; 0x84
 800b870:	0209      	lsls	r1, r1, #8
 800b872:	430a      	orrs	r2, r1
 800b874:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d104      	bne.n	800b888 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	2280      	movs	r2, #128	; 0x80
 800b884:	0112      	lsls	r2, r2, #4
 800b886:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	685a      	ldr	r2, [r3, #4]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	491f      	ldr	r1, [pc, #124]	; (800b910 <HAL_I2C_Init+0x128>)
 800b894:	430a      	orrs	r2, r1
 800b896:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68da      	ldr	r2, [r3, #12]
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	491a      	ldr	r1, [pc, #104]	; (800b90c <HAL_I2C_Init+0x124>)
 800b8a4:	400a      	ands	r2, r1
 800b8a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	691a      	ldr	r2, [r3, #16]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	695b      	ldr	r3, [r3, #20]
 800b8b0:	431a      	orrs	r2, r3
 800b8b2:	0011      	movs	r1, r2
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	699b      	ldr	r3, [r3, #24]
 800b8b8:	021a      	lsls	r2, r3, #8
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	430a      	orrs	r2, r1
 800b8c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	69d9      	ldr	r1, [r3, #28]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6a1a      	ldr	r2, [r3, #32]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	430a      	orrs	r2, r1
 800b8d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2101      	movs	r1, #1
 800b8de:	430a      	orrs	r2, r1
 800b8e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2241      	movs	r2, #65	; 0x41
 800b8ec:	2120      	movs	r1, #32
 800b8ee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2242      	movs	r2, #66	; 0x42
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	0018      	movs	r0, r3
 800b902:	46bd      	mov	sp, r7
 800b904:	b002      	add	sp, #8
 800b906:	bd80      	pop	{r7, pc}
 800b908:	f0ffffff 	.word	0xf0ffffff
 800b90c:	ffff7fff 	.word	0xffff7fff
 800b910:	02008000 	.word	0x02008000

0800b914 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b914:	b590      	push	{r4, r7, lr}
 800b916:	b089      	sub	sp, #36	; 0x24
 800b918:	af02      	add	r7, sp, #8
 800b91a:	60f8      	str	r0, [r7, #12]
 800b91c:	0008      	movs	r0, r1
 800b91e:	607a      	str	r2, [r7, #4]
 800b920:	0019      	movs	r1, r3
 800b922:	230a      	movs	r3, #10
 800b924:	18fb      	adds	r3, r7, r3
 800b926:	1c02      	adds	r2, r0, #0
 800b928:	801a      	strh	r2, [r3, #0]
 800b92a:	2308      	movs	r3, #8
 800b92c:	18fb      	adds	r3, r7, r3
 800b92e:	1c0a      	adds	r2, r1, #0
 800b930:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2241      	movs	r2, #65	; 0x41
 800b936:	5c9b      	ldrb	r3, [r3, r2]
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	2b20      	cmp	r3, #32
 800b93c:	d000      	beq.n	800b940 <HAL_I2C_Master_Transmit+0x2c>
 800b93e:	e0e7      	b.n	800bb10 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2240      	movs	r2, #64	; 0x40
 800b944:	5c9b      	ldrb	r3, [r3, r2]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d101      	bne.n	800b94e <HAL_I2C_Master_Transmit+0x3a>
 800b94a:	2302      	movs	r3, #2
 800b94c:	e0e1      	b.n	800bb12 <HAL_I2C_Master_Transmit+0x1fe>
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2240      	movs	r2, #64	; 0x40
 800b952:	2101      	movs	r1, #1
 800b954:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b956:	f7fd ffdd 	bl	8009914 <HAL_GetTick>
 800b95a:	0003      	movs	r3, r0
 800b95c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b95e:	2380      	movs	r3, #128	; 0x80
 800b960:	0219      	lsls	r1, r3, #8
 800b962:	68f8      	ldr	r0, [r7, #12]
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	9300      	str	r3, [sp, #0]
 800b968:	2319      	movs	r3, #25
 800b96a:	2201      	movs	r2, #1
 800b96c:	f000 fd3e 	bl	800c3ec <I2C_WaitOnFlagUntilTimeout>
 800b970:	1e03      	subs	r3, r0, #0
 800b972:	d001      	beq.n	800b978 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800b974:	2301      	movs	r3, #1
 800b976:	e0cc      	b.n	800bb12 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2241      	movs	r2, #65	; 0x41
 800b97c:	2121      	movs	r1, #33	; 0x21
 800b97e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2242      	movs	r2, #66	; 0x42
 800b984:	2110      	movs	r1, #16
 800b986:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	2200      	movs	r2, #0
 800b98c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2208      	movs	r2, #8
 800b998:	18ba      	adds	r2, r7, r2
 800b99a:	8812      	ldrh	r2, [r2, #0]
 800b99c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	2bff      	cmp	r3, #255	; 0xff
 800b9ac:	d911      	bls.n	800b9d2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	22ff      	movs	r2, #255	; 0xff
 800b9b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9b8:	b2da      	uxtb	r2, r3
 800b9ba:	2380      	movs	r3, #128	; 0x80
 800b9bc:	045c      	lsls	r4, r3, #17
 800b9be:	230a      	movs	r3, #10
 800b9c0:	18fb      	adds	r3, r7, r3
 800b9c2:	8819      	ldrh	r1, [r3, #0]
 800b9c4:	68f8      	ldr	r0, [r7, #12]
 800b9c6:	4b55      	ldr	r3, [pc, #340]	; (800bb1c <HAL_I2C_Master_Transmit+0x208>)
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	0023      	movs	r3, r4
 800b9cc:	f000 fe2e 	bl	800c62c <I2C_TransferConfig>
 800b9d0:	e075      	b.n	800babe <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9e0:	b2da      	uxtb	r2, r3
 800b9e2:	2380      	movs	r3, #128	; 0x80
 800b9e4:	049c      	lsls	r4, r3, #18
 800b9e6:	230a      	movs	r3, #10
 800b9e8:	18fb      	adds	r3, r7, r3
 800b9ea:	8819      	ldrh	r1, [r3, #0]
 800b9ec:	68f8      	ldr	r0, [r7, #12]
 800b9ee:	4b4b      	ldr	r3, [pc, #300]	; (800bb1c <HAL_I2C_Master_Transmit+0x208>)
 800b9f0:	9300      	str	r3, [sp, #0]
 800b9f2:	0023      	movs	r3, r4
 800b9f4:	f000 fe1a 	bl	800c62c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b9f8:	e061      	b.n	800babe <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b9fa:	697a      	ldr	r2, [r7, #20]
 800b9fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	0018      	movs	r0, r3
 800ba02:	f000 fd32 	bl	800c46a <I2C_WaitOnTXISFlagUntilTimeout>
 800ba06:	1e03      	subs	r3, r0, #0
 800ba08:	d001      	beq.n	800ba0e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	e081      	b.n	800bb12 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba12:	781a      	ldrb	r2, [r3, #0]
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba1e:	1c5a      	adds	r2, r3, #1
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	3b01      	subs	r3, #1
 800ba2c:	b29a      	uxth	r2, r3
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba36:	3b01      	subs	r3, #1
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d03a      	beq.n	800babe <HAL_I2C_Master_Transmit+0x1aa>
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d136      	bne.n	800babe <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ba50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba52:	68f8      	ldr	r0, [r7, #12]
 800ba54:	697b      	ldr	r3, [r7, #20]
 800ba56:	9300      	str	r3, [sp, #0]
 800ba58:	0013      	movs	r3, r2
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	2180      	movs	r1, #128	; 0x80
 800ba5e:	f000 fcc5 	bl	800c3ec <I2C_WaitOnFlagUntilTimeout>
 800ba62:	1e03      	subs	r3, r0, #0
 800ba64:	d001      	beq.n	800ba6a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	e053      	b.n	800bb12 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	2bff      	cmp	r3, #255	; 0xff
 800ba72:	d911      	bls.n	800ba98 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	22ff      	movs	r2, #255	; 0xff
 800ba78:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba7e:	b2da      	uxtb	r2, r3
 800ba80:	2380      	movs	r3, #128	; 0x80
 800ba82:	045c      	lsls	r4, r3, #17
 800ba84:	230a      	movs	r3, #10
 800ba86:	18fb      	adds	r3, r7, r3
 800ba88:	8819      	ldrh	r1, [r3, #0]
 800ba8a:	68f8      	ldr	r0, [r7, #12]
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	9300      	str	r3, [sp, #0]
 800ba90:	0023      	movs	r3, r4
 800ba92:	f000 fdcb 	bl	800c62c <I2C_TransferConfig>
 800ba96:	e012      	b.n	800babe <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba9c:	b29a      	uxth	r2, r3
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baa6:	b2da      	uxtb	r2, r3
 800baa8:	2380      	movs	r3, #128	; 0x80
 800baaa:	049c      	lsls	r4, r3, #18
 800baac:	230a      	movs	r3, #10
 800baae:	18fb      	adds	r3, r7, r3
 800bab0:	8819      	ldrh	r1, [r3, #0]
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	2300      	movs	r3, #0
 800bab6:	9300      	str	r3, [sp, #0]
 800bab8:	0023      	movs	r3, r4
 800baba:	f000 fdb7 	bl	800c62c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d198      	bne.n	800b9fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bac8:	697a      	ldr	r2, [r7, #20]
 800baca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	0018      	movs	r0, r3
 800bad0:	f000 fd0a 	bl	800c4e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bad4:	1e03      	subs	r3, r0, #0
 800bad6:	d001      	beq.n	800badc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800bad8:	2301      	movs	r3, #1
 800bada:	e01a      	b.n	800bb12 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2220      	movs	r2, #32
 800bae2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	685a      	ldr	r2, [r3, #4]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	490c      	ldr	r1, [pc, #48]	; (800bb20 <HAL_I2C_Master_Transmit+0x20c>)
 800baf0:	400a      	ands	r2, r1
 800baf2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	2241      	movs	r2, #65	; 0x41
 800baf8:	2120      	movs	r1, #32
 800bafa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2242      	movs	r2, #66	; 0x42
 800bb00:	2100      	movs	r1, #0
 800bb02:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2240      	movs	r2, #64	; 0x40
 800bb08:	2100      	movs	r1, #0
 800bb0a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	e000      	b.n	800bb12 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800bb10:	2302      	movs	r3, #2
  }
}
 800bb12:	0018      	movs	r0, r3
 800bb14:	46bd      	mov	sp, r7
 800bb16:	b007      	add	sp, #28
 800bb18:	bd90      	pop	{r4, r7, pc}
 800bb1a:	46c0      	nop			; (mov r8, r8)
 800bb1c:	80002000 	.word	0x80002000
 800bb20:	fe00e800 	.word	0xfe00e800

0800bb24 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bb24:	b590      	push	{r4, r7, lr}
 800bb26:	b089      	sub	sp, #36	; 0x24
 800bb28:	af02      	add	r7, sp, #8
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	000c      	movs	r4, r1
 800bb2e:	0010      	movs	r0, r2
 800bb30:	0019      	movs	r1, r3
 800bb32:	230a      	movs	r3, #10
 800bb34:	18fb      	adds	r3, r7, r3
 800bb36:	1c22      	adds	r2, r4, #0
 800bb38:	801a      	strh	r2, [r3, #0]
 800bb3a:	2308      	movs	r3, #8
 800bb3c:	18fb      	adds	r3, r7, r3
 800bb3e:	1c02      	adds	r2, r0, #0
 800bb40:	801a      	strh	r2, [r3, #0]
 800bb42:	1dbb      	adds	r3, r7, #6
 800bb44:	1c0a      	adds	r2, r1, #0
 800bb46:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2241      	movs	r2, #65	; 0x41
 800bb4c:	5c9b      	ldrb	r3, [r3, r2]
 800bb4e:	b2db      	uxtb	r3, r3
 800bb50:	2b20      	cmp	r3, #32
 800bb52:	d000      	beq.n	800bb56 <HAL_I2C_Mem_Write+0x32>
 800bb54:	e10c      	b.n	800bd70 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800bb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d004      	beq.n	800bb66 <HAL_I2C_Mem_Write+0x42>
 800bb5c:	232c      	movs	r3, #44	; 0x2c
 800bb5e:	18fb      	adds	r3, r7, r3
 800bb60:	881b      	ldrh	r3, [r3, #0]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d105      	bne.n	800bb72 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2280      	movs	r2, #128	; 0x80
 800bb6a:	0092      	lsls	r2, r2, #2
 800bb6c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	e0ff      	b.n	800bd72 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2240      	movs	r2, #64	; 0x40
 800bb76:	5c9b      	ldrb	r3, [r3, r2]
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d101      	bne.n	800bb80 <HAL_I2C_Mem_Write+0x5c>
 800bb7c:	2302      	movs	r3, #2
 800bb7e:	e0f8      	b.n	800bd72 <HAL_I2C_Mem_Write+0x24e>
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2240      	movs	r2, #64	; 0x40
 800bb84:	2101      	movs	r1, #1
 800bb86:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bb88:	f7fd fec4 	bl	8009914 <HAL_GetTick>
 800bb8c:	0003      	movs	r3, r0
 800bb8e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bb90:	2380      	movs	r3, #128	; 0x80
 800bb92:	0219      	lsls	r1, r3, #8
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	697b      	ldr	r3, [r7, #20]
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	2319      	movs	r3, #25
 800bb9c:	2201      	movs	r2, #1
 800bb9e:	f000 fc25 	bl	800c3ec <I2C_WaitOnFlagUntilTimeout>
 800bba2:	1e03      	subs	r3, r0, #0
 800bba4:	d001      	beq.n	800bbaa <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800bba6:	2301      	movs	r3, #1
 800bba8:	e0e3      	b.n	800bd72 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2241      	movs	r2, #65	; 0x41
 800bbae:	2121      	movs	r1, #33	; 0x21
 800bbb0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2242      	movs	r2, #66	; 0x42
 800bbb6:	2140      	movs	r1, #64	; 0x40
 800bbb8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	222c      	movs	r2, #44	; 0x2c
 800bbca:	18ba      	adds	r2, r7, r2
 800bbcc:	8812      	ldrh	r2, [r2, #0]
 800bbce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800bbd6:	1dbb      	adds	r3, r7, #6
 800bbd8:	881c      	ldrh	r4, [r3, #0]
 800bbda:	2308      	movs	r3, #8
 800bbdc:	18fb      	adds	r3, r7, r3
 800bbde:	881a      	ldrh	r2, [r3, #0]
 800bbe0:	230a      	movs	r3, #10
 800bbe2:	18fb      	adds	r3, r7, r3
 800bbe4:	8819      	ldrh	r1, [r3, #0]
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	9301      	str	r3, [sp, #4]
 800bbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbee:	9300      	str	r3, [sp, #0]
 800bbf0:	0023      	movs	r3, r4
 800bbf2:	f000 fb13 	bl	800c21c <I2C_RequestMemoryWrite>
 800bbf6:	1e03      	subs	r3, r0, #0
 800bbf8:	d005      	beq.n	800bc06 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2240      	movs	r2, #64	; 0x40
 800bbfe:	2100      	movs	r1, #0
 800bc00:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800bc02:	2301      	movs	r3, #1
 800bc04:	e0b5      	b.n	800bd72 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	2bff      	cmp	r3, #255	; 0xff
 800bc0e:	d911      	bls.n	800bc34 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	22ff      	movs	r2, #255	; 0xff
 800bc14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc1a:	b2da      	uxtb	r2, r3
 800bc1c:	2380      	movs	r3, #128	; 0x80
 800bc1e:	045c      	lsls	r4, r3, #17
 800bc20:	230a      	movs	r3, #10
 800bc22:	18fb      	adds	r3, r7, r3
 800bc24:	8819      	ldrh	r1, [r3, #0]
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	2300      	movs	r3, #0
 800bc2a:	9300      	str	r3, [sp, #0]
 800bc2c:	0023      	movs	r3, r4
 800bc2e:	f000 fcfd 	bl	800c62c <I2C_TransferConfig>
 800bc32:	e012      	b.n	800bc5a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc38:	b29a      	uxth	r2, r3
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc42:	b2da      	uxtb	r2, r3
 800bc44:	2380      	movs	r3, #128	; 0x80
 800bc46:	049c      	lsls	r4, r3, #18
 800bc48:	230a      	movs	r3, #10
 800bc4a:	18fb      	adds	r3, r7, r3
 800bc4c:	8819      	ldrh	r1, [r3, #0]
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	2300      	movs	r3, #0
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	0023      	movs	r3, r4
 800bc56:	f000 fce9 	bl	800c62c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc5a:	697a      	ldr	r2, [r7, #20]
 800bc5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	0018      	movs	r0, r3
 800bc62:	f000 fc02 	bl	800c46a <I2C_WaitOnTXISFlagUntilTimeout>
 800bc66:	1e03      	subs	r3, r0, #0
 800bc68:	d001      	beq.n	800bc6e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e081      	b.n	800bd72 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc72:	781a      	ldrb	r2, [r3, #0]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc7e:	1c5a      	adds	r2, r3, #1
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc88:	b29b      	uxth	r3, r3
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	b29a      	uxth	r2, r3
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc96:	3b01      	subs	r3, #1
 800bc98:	b29a      	uxth	r2, r3
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d03a      	beq.n	800bd1e <HAL_I2C_Mem_Write+0x1fa>
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d136      	bne.n	800bd1e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bcb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcb2:	68f8      	ldr	r0, [r7, #12]
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	0013      	movs	r3, r2
 800bcba:	2200      	movs	r2, #0
 800bcbc:	2180      	movs	r1, #128	; 0x80
 800bcbe:	f000 fb95 	bl	800c3ec <I2C_WaitOnFlagUntilTimeout>
 800bcc2:	1e03      	subs	r3, r0, #0
 800bcc4:	d001      	beq.n	800bcca <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e053      	b.n	800bd72 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	2bff      	cmp	r3, #255	; 0xff
 800bcd2:	d911      	bls.n	800bcf8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	22ff      	movs	r2, #255	; 0xff
 800bcd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bcde:	b2da      	uxtb	r2, r3
 800bce0:	2380      	movs	r3, #128	; 0x80
 800bce2:	045c      	lsls	r4, r3, #17
 800bce4:	230a      	movs	r3, #10
 800bce6:	18fb      	adds	r3, r7, r3
 800bce8:	8819      	ldrh	r1, [r3, #0]
 800bcea:	68f8      	ldr	r0, [r7, #12]
 800bcec:	2300      	movs	r3, #0
 800bcee:	9300      	str	r3, [sp, #0]
 800bcf0:	0023      	movs	r3, r4
 800bcf2:	f000 fc9b 	bl	800c62c <I2C_TransferConfig>
 800bcf6:	e012      	b.n	800bd1e <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bd06:	b2da      	uxtb	r2, r3
 800bd08:	2380      	movs	r3, #128	; 0x80
 800bd0a:	049c      	lsls	r4, r3, #18
 800bd0c:	230a      	movs	r3, #10
 800bd0e:	18fb      	adds	r3, r7, r3
 800bd10:	8819      	ldrh	r1, [r3, #0]
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	2300      	movs	r3, #0
 800bd16:	9300      	str	r3, [sp, #0]
 800bd18:	0023      	movs	r3, r4
 800bd1a:	f000 fc87 	bl	800c62c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d198      	bne.n	800bc5a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bd28:	697a      	ldr	r2, [r7, #20]
 800bd2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	0018      	movs	r0, r3
 800bd30:	f000 fbda 	bl	800c4e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bd34:	1e03      	subs	r3, r0, #0
 800bd36:	d001      	beq.n	800bd3c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800bd38:	2301      	movs	r3, #1
 800bd3a:	e01a      	b.n	800bd72 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2220      	movs	r2, #32
 800bd42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	685a      	ldr	r2, [r3, #4]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	490b      	ldr	r1, [pc, #44]	; (800bd7c <HAL_I2C_Mem_Write+0x258>)
 800bd50:	400a      	ands	r2, r1
 800bd52:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2241      	movs	r2, #65	; 0x41
 800bd58:	2120      	movs	r1, #32
 800bd5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2242      	movs	r2, #66	; 0x42
 800bd60:	2100      	movs	r1, #0
 800bd62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2240      	movs	r2, #64	; 0x40
 800bd68:	2100      	movs	r1, #0
 800bd6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	e000      	b.n	800bd72 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800bd70:	2302      	movs	r3, #2
  }
}
 800bd72:	0018      	movs	r0, r3
 800bd74:	46bd      	mov	sp, r7
 800bd76:	b007      	add	sp, #28
 800bd78:	bd90      	pop	{r4, r7, pc}
 800bd7a:	46c0      	nop			; (mov r8, r8)
 800bd7c:	fe00e800 	.word	0xfe00e800

0800bd80 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd80:	b590      	push	{r4, r7, lr}
 800bd82:	b089      	sub	sp, #36	; 0x24
 800bd84:	af02      	add	r7, sp, #8
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	000c      	movs	r4, r1
 800bd8a:	0010      	movs	r0, r2
 800bd8c:	0019      	movs	r1, r3
 800bd8e:	230a      	movs	r3, #10
 800bd90:	18fb      	adds	r3, r7, r3
 800bd92:	1c22      	adds	r2, r4, #0
 800bd94:	801a      	strh	r2, [r3, #0]
 800bd96:	2308      	movs	r3, #8
 800bd98:	18fb      	adds	r3, r7, r3
 800bd9a:	1c02      	adds	r2, r0, #0
 800bd9c:	801a      	strh	r2, [r3, #0]
 800bd9e:	1dbb      	adds	r3, r7, #6
 800bda0:	1c0a      	adds	r2, r1, #0
 800bda2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2241      	movs	r2, #65	; 0x41
 800bda8:	5c9b      	ldrb	r3, [r3, r2]
 800bdaa:	b2db      	uxtb	r3, r3
 800bdac:	2b20      	cmp	r3, #32
 800bdae:	d000      	beq.n	800bdb2 <HAL_I2C_Mem_Read+0x32>
 800bdb0:	e110      	b.n	800bfd4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800bdb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d004      	beq.n	800bdc2 <HAL_I2C_Mem_Read+0x42>
 800bdb8:	232c      	movs	r3, #44	; 0x2c
 800bdba:	18fb      	adds	r3, r7, r3
 800bdbc:	881b      	ldrh	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d105      	bne.n	800bdce <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	2280      	movs	r2, #128	; 0x80
 800bdc6:	0092      	lsls	r2, r2, #2
 800bdc8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800bdca:	2301      	movs	r3, #1
 800bdcc:	e103      	b.n	800bfd6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	2240      	movs	r2, #64	; 0x40
 800bdd2:	5c9b      	ldrb	r3, [r3, r2]
 800bdd4:	2b01      	cmp	r3, #1
 800bdd6:	d101      	bne.n	800bddc <HAL_I2C_Mem_Read+0x5c>
 800bdd8:	2302      	movs	r3, #2
 800bdda:	e0fc      	b.n	800bfd6 <HAL_I2C_Mem_Read+0x256>
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2240      	movs	r2, #64	; 0x40
 800bde0:	2101      	movs	r1, #1
 800bde2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800bde4:	f7fd fd96 	bl	8009914 <HAL_GetTick>
 800bde8:	0003      	movs	r3, r0
 800bdea:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bdec:	2380      	movs	r3, #128	; 0x80
 800bdee:	0219      	lsls	r1, r3, #8
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	9300      	str	r3, [sp, #0]
 800bdf6:	2319      	movs	r3, #25
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	f000 faf7 	bl	800c3ec <I2C_WaitOnFlagUntilTimeout>
 800bdfe:	1e03      	subs	r3, r0, #0
 800be00:	d001      	beq.n	800be06 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	e0e7      	b.n	800bfd6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2241      	movs	r2, #65	; 0x41
 800be0a:	2122      	movs	r1, #34	; 0x22
 800be0c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	2242      	movs	r2, #66	; 0x42
 800be12:	2140      	movs	r1, #64	; 0x40
 800be14:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2200      	movs	r2, #0
 800be1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	222c      	movs	r2, #44	; 0x2c
 800be26:	18ba      	adds	r2, r7, r2
 800be28:	8812      	ldrh	r2, [r2, #0]
 800be2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2200      	movs	r2, #0
 800be30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800be32:	1dbb      	adds	r3, r7, #6
 800be34:	881c      	ldrh	r4, [r3, #0]
 800be36:	2308      	movs	r3, #8
 800be38:	18fb      	adds	r3, r7, r3
 800be3a:	881a      	ldrh	r2, [r3, #0]
 800be3c:	230a      	movs	r3, #10
 800be3e:	18fb      	adds	r3, r7, r3
 800be40:	8819      	ldrh	r1, [r3, #0]
 800be42:	68f8      	ldr	r0, [r7, #12]
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4a:	9300      	str	r3, [sp, #0]
 800be4c:	0023      	movs	r3, r4
 800be4e:	f000 fa49 	bl	800c2e4 <I2C_RequestMemoryRead>
 800be52:	1e03      	subs	r3, r0, #0
 800be54:	d005      	beq.n	800be62 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2240      	movs	r2, #64	; 0x40
 800be5a:	2100      	movs	r1, #0
 800be5c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800be5e:	2301      	movs	r3, #1
 800be60:	e0b9      	b.n	800bfd6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be66:	b29b      	uxth	r3, r3
 800be68:	2bff      	cmp	r3, #255	; 0xff
 800be6a:	d911      	bls.n	800be90 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	22ff      	movs	r2, #255	; 0xff
 800be70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be76:	b2da      	uxtb	r2, r3
 800be78:	2380      	movs	r3, #128	; 0x80
 800be7a:	045c      	lsls	r4, r3, #17
 800be7c:	230a      	movs	r3, #10
 800be7e:	18fb      	adds	r3, r7, r3
 800be80:	8819      	ldrh	r1, [r3, #0]
 800be82:	68f8      	ldr	r0, [r7, #12]
 800be84:	4b56      	ldr	r3, [pc, #344]	; (800bfe0 <HAL_I2C_Mem_Read+0x260>)
 800be86:	9300      	str	r3, [sp, #0]
 800be88:	0023      	movs	r3, r4
 800be8a:	f000 fbcf 	bl	800c62c <I2C_TransferConfig>
 800be8e:	e012      	b.n	800beb6 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be94:	b29a      	uxth	r2, r3
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800be9e:	b2da      	uxtb	r2, r3
 800bea0:	2380      	movs	r3, #128	; 0x80
 800bea2:	049c      	lsls	r4, r3, #18
 800bea4:	230a      	movs	r3, #10
 800bea6:	18fb      	adds	r3, r7, r3
 800bea8:	8819      	ldrh	r1, [r3, #0]
 800beaa:	68f8      	ldr	r0, [r7, #12]
 800beac:	4b4c      	ldr	r3, [pc, #304]	; (800bfe0 <HAL_I2C_Mem_Read+0x260>)
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	0023      	movs	r3, r4
 800beb2:	f000 fbbb 	bl	800c62c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800beb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	697b      	ldr	r3, [r7, #20]
 800bebc:	9300      	str	r3, [sp, #0]
 800bebe:	0013      	movs	r3, r2
 800bec0:	2200      	movs	r2, #0
 800bec2:	2104      	movs	r1, #4
 800bec4:	f000 fa92 	bl	800c3ec <I2C_WaitOnFlagUntilTimeout>
 800bec8:	1e03      	subs	r3, r0, #0
 800beca:	d001      	beq.n	800bed0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800becc:	2301      	movs	r3, #1
 800bece:	e082      	b.n	800bfd6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beda:	b2d2      	uxtb	r2, r2
 800bedc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee2:	1c5a      	adds	r2, r3, #1
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800beec:	3b01      	subs	r3, #1
 800beee:	b29a      	uxth	r2, r3
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bef8:	b29b      	uxth	r3, r3
 800befa:	3b01      	subs	r3, #1
 800befc:	b29a      	uxth	r2, r3
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d03a      	beq.n	800bf82 <HAL_I2C_Mem_Read+0x202>
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d136      	bne.n	800bf82 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bf14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf16:	68f8      	ldr	r0, [r7, #12]
 800bf18:	697b      	ldr	r3, [r7, #20]
 800bf1a:	9300      	str	r3, [sp, #0]
 800bf1c:	0013      	movs	r3, r2
 800bf1e:	2200      	movs	r2, #0
 800bf20:	2180      	movs	r1, #128	; 0x80
 800bf22:	f000 fa63 	bl	800c3ec <I2C_WaitOnFlagUntilTimeout>
 800bf26:	1e03      	subs	r3, r0, #0
 800bf28:	d001      	beq.n	800bf2e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	e053      	b.n	800bfd6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	2bff      	cmp	r3, #255	; 0xff
 800bf36:	d911      	bls.n	800bf5c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	22ff      	movs	r2, #255	; 0xff
 800bf3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf42:	b2da      	uxtb	r2, r3
 800bf44:	2380      	movs	r3, #128	; 0x80
 800bf46:	045c      	lsls	r4, r3, #17
 800bf48:	230a      	movs	r3, #10
 800bf4a:	18fb      	adds	r3, r7, r3
 800bf4c:	8819      	ldrh	r1, [r3, #0]
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	2300      	movs	r3, #0
 800bf52:	9300      	str	r3, [sp, #0]
 800bf54:	0023      	movs	r3, r4
 800bf56:	f000 fb69 	bl	800c62c <I2C_TransferConfig>
 800bf5a:	e012      	b.n	800bf82 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf60:	b29a      	uxth	r2, r3
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf6a:	b2da      	uxtb	r2, r3
 800bf6c:	2380      	movs	r3, #128	; 0x80
 800bf6e:	049c      	lsls	r4, r3, #18
 800bf70:	230a      	movs	r3, #10
 800bf72:	18fb      	adds	r3, r7, r3
 800bf74:	8819      	ldrh	r1, [r3, #0]
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	2300      	movs	r3, #0
 800bf7a:	9300      	str	r3, [sp, #0]
 800bf7c:	0023      	movs	r3, r4
 800bf7e:	f000 fb55 	bl	800c62c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d194      	bne.n	800beb6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bf8c:	697a      	ldr	r2, [r7, #20]
 800bf8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	0018      	movs	r0, r3
 800bf94:	f000 faa8 	bl	800c4e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bf98:	1e03      	subs	r3, r0, #0
 800bf9a:	d001      	beq.n	800bfa0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	e01a      	b.n	800bfd6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2220      	movs	r2, #32
 800bfa6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	685a      	ldr	r2, [r3, #4]
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	490c      	ldr	r1, [pc, #48]	; (800bfe4 <HAL_I2C_Mem_Read+0x264>)
 800bfb4:	400a      	ands	r2, r1
 800bfb6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	2241      	movs	r2, #65	; 0x41
 800bfbc:	2120      	movs	r1, #32
 800bfbe:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2242      	movs	r2, #66	; 0x42
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2240      	movs	r2, #64	; 0x40
 800bfcc:	2100      	movs	r1, #0
 800bfce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	e000      	b.n	800bfd6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800bfd4:	2302      	movs	r3, #2
  }
}
 800bfd6:	0018      	movs	r0, r3
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	b007      	add	sp, #28
 800bfdc:	bd90      	pop	{r4, r7, pc}
 800bfde:	46c0      	nop			; (mov r8, r8)
 800bfe0:	80002400 	.word	0x80002400
 800bfe4:	fe00e800 	.word	0xfe00e800

0800bfe8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b08a      	sub	sp, #40	; 0x28
 800bfec:	af02      	add	r7, sp, #8
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	607a      	str	r2, [r7, #4]
 800bff2:	603b      	str	r3, [r7, #0]
 800bff4:	230a      	movs	r3, #10
 800bff6:	18fb      	adds	r3, r7, r3
 800bff8:	1c0a      	adds	r2, r1, #0
 800bffa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800bffc:	2300      	movs	r3, #0
 800bffe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	2241      	movs	r2, #65	; 0x41
 800c004:	5c9b      	ldrb	r3, [r3, r2]
 800c006:	b2db      	uxtb	r3, r3
 800c008:	2b20      	cmp	r3, #32
 800c00a:	d000      	beq.n	800c00e <HAL_I2C_IsDeviceReady+0x26>
 800c00c:	e0fe      	b.n	800c20c <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	699a      	ldr	r2, [r3, #24]
 800c014:	2380      	movs	r3, #128	; 0x80
 800c016:	021b      	lsls	r3, r3, #8
 800c018:	401a      	ands	r2, r3
 800c01a:	2380      	movs	r3, #128	; 0x80
 800c01c:	021b      	lsls	r3, r3, #8
 800c01e:	429a      	cmp	r2, r3
 800c020:	d101      	bne.n	800c026 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800c022:	2302      	movs	r3, #2
 800c024:	e0f3      	b.n	800c20e <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2240      	movs	r2, #64	; 0x40
 800c02a:	5c9b      	ldrb	r3, [r3, r2]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d101      	bne.n	800c034 <HAL_I2C_IsDeviceReady+0x4c>
 800c030:	2302      	movs	r3, #2
 800c032:	e0ec      	b.n	800c20e <HAL_I2C_IsDeviceReady+0x226>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	2240      	movs	r2, #64	; 0x40
 800c038:	2101      	movs	r1, #1
 800c03a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	2241      	movs	r2, #65	; 0x41
 800c040:	2124      	movs	r1, #36	; 0x24
 800c042:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	2200      	movs	r2, #0
 800c048:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d107      	bne.n	800c062 <HAL_I2C_IsDeviceReady+0x7a>
 800c052:	230a      	movs	r3, #10
 800c054:	18fb      	adds	r3, r7, r3
 800c056:	881b      	ldrh	r3, [r3, #0]
 800c058:	059b      	lsls	r3, r3, #22
 800c05a:	0d9b      	lsrs	r3, r3, #22
 800c05c:	4a6e      	ldr	r2, [pc, #440]	; (800c218 <HAL_I2C_IsDeviceReady+0x230>)
 800c05e:	431a      	orrs	r2, r3
 800c060:	e007      	b.n	800c072 <HAL_I2C_IsDeviceReady+0x8a>
 800c062:	230a      	movs	r3, #10
 800c064:	18fb      	adds	r3, r7, r3
 800c066:	881b      	ldrh	r3, [r3, #0]
 800c068:	059b      	lsls	r3, r3, #22
 800c06a:	0d9b      	lsrs	r3, r3, #22
 800c06c:	22a0      	movs	r2, #160	; 0xa0
 800c06e:	0192      	lsls	r2, r2, #6
 800c070:	431a      	orrs	r2, r3
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800c078:	f7fd fc4c 	bl	8009914 <HAL_GetTick>
 800c07c:	0003      	movs	r3, r0
 800c07e:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	699b      	ldr	r3, [r3, #24]
 800c086:	2220      	movs	r2, #32
 800c088:	4013      	ands	r3, r2
 800c08a:	3b20      	subs	r3, #32
 800c08c:	425a      	negs	r2, r3
 800c08e:	4153      	adcs	r3, r2
 800c090:	b2da      	uxtb	r2, r3
 800c092:	231f      	movs	r3, #31
 800c094:	18fb      	adds	r3, r7, r3
 800c096:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	699b      	ldr	r3, [r3, #24]
 800c09e:	2210      	movs	r2, #16
 800c0a0:	4013      	ands	r3, r2
 800c0a2:	3b10      	subs	r3, #16
 800c0a4:	425a      	negs	r2, r3
 800c0a6:	4153      	adcs	r3, r2
 800c0a8:	b2da      	uxtb	r2, r3
 800c0aa:	231e      	movs	r3, #30
 800c0ac:	18fb      	adds	r3, r7, r3
 800c0ae:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800c0b0:	e035      	b.n	800c11e <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	3301      	adds	r3, #1
 800c0b6:	d01a      	beq.n	800c0ee <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c0b8:	f7fd fc2c 	bl	8009914 <HAL_GetTick>
 800c0bc:	0002      	movs	r2, r0
 800c0be:	69bb      	ldr	r3, [r7, #24]
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	683a      	ldr	r2, [r7, #0]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d302      	bcc.n	800c0ce <HAL_I2C_IsDeviceReady+0xe6>
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d10f      	bne.n	800c0ee <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	2241      	movs	r2, #65	; 0x41
 800c0d2:	2120      	movs	r1, #32
 800c0d4:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0da:	2220      	movs	r2, #32
 800c0dc:	431a      	orrs	r2, r3
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2240      	movs	r2, #64	; 0x40
 800c0e6:	2100      	movs	r1, #0
 800c0e8:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e08f      	b.n	800c20e <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	699b      	ldr	r3, [r3, #24]
 800c0f4:	2220      	movs	r2, #32
 800c0f6:	4013      	ands	r3, r2
 800c0f8:	3b20      	subs	r3, #32
 800c0fa:	425a      	negs	r2, r3
 800c0fc:	4153      	adcs	r3, r2
 800c0fe:	b2da      	uxtb	r2, r3
 800c100:	231f      	movs	r3, #31
 800c102:	18fb      	adds	r3, r7, r3
 800c104:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	699b      	ldr	r3, [r3, #24]
 800c10c:	2210      	movs	r2, #16
 800c10e:	4013      	ands	r3, r2
 800c110:	3b10      	subs	r3, #16
 800c112:	425a      	negs	r2, r3
 800c114:	4153      	adcs	r3, r2
 800c116:	b2da      	uxtb	r2, r3
 800c118:	231e      	movs	r3, #30
 800c11a:	18fb      	adds	r3, r7, r3
 800c11c:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800c11e:	231f      	movs	r3, #31
 800c120:	18fb      	adds	r3, r7, r3
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d104      	bne.n	800c132 <HAL_I2C_IsDeviceReady+0x14a>
 800c128:	231e      	movs	r3, #30
 800c12a:	18fb      	adds	r3, r7, r3
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d0bf      	beq.n	800c0b2 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	699b      	ldr	r3, [r3, #24]
 800c138:	2210      	movs	r2, #16
 800c13a:	4013      	ands	r3, r2
 800c13c:	2b10      	cmp	r3, #16
 800c13e:	d01a      	beq.n	800c176 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c140:	683a      	ldr	r2, [r7, #0]
 800c142:	68f8      	ldr	r0, [r7, #12]
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	9300      	str	r3, [sp, #0]
 800c148:	0013      	movs	r3, r2
 800c14a:	2200      	movs	r2, #0
 800c14c:	2120      	movs	r1, #32
 800c14e:	f000 f94d 	bl	800c3ec <I2C_WaitOnFlagUntilTimeout>
 800c152:	1e03      	subs	r3, r0, #0
 800c154:	d001      	beq.n	800c15a <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 800c156:	2301      	movs	r3, #1
 800c158:	e059      	b.n	800c20e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2220      	movs	r2, #32
 800c160:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2241      	movs	r2, #65	; 0x41
 800c166:	2120      	movs	r1, #32
 800c168:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2240      	movs	r2, #64	; 0x40
 800c16e:	2100      	movs	r1, #0
 800c170:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	e04b      	b.n	800c20e <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c176:	683a      	ldr	r2, [r7, #0]
 800c178:	68f8      	ldr	r0, [r7, #12]
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	9300      	str	r3, [sp, #0]
 800c17e:	0013      	movs	r3, r2
 800c180:	2200      	movs	r2, #0
 800c182:	2120      	movs	r1, #32
 800c184:	f000 f932 	bl	800c3ec <I2C_WaitOnFlagUntilTimeout>
 800c188:	1e03      	subs	r3, r0, #0
 800c18a:	d001      	beq.n	800c190 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 800c18c:	2301      	movs	r3, #1
 800c18e:	e03e      	b.n	800c20e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2210      	movs	r2, #16
 800c196:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	2220      	movs	r2, #32
 800c19e:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d119      	bne.n	800c1dc <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	685a      	ldr	r2, [r3, #4]
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	2180      	movs	r1, #128	; 0x80
 800c1b4:	01c9      	lsls	r1, r1, #7
 800c1b6:	430a      	orrs	r2, r1
 800c1b8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800c1ba:	683a      	ldr	r2, [r7, #0]
 800c1bc:	68f8      	ldr	r0, [r7, #12]
 800c1be:	69bb      	ldr	r3, [r7, #24]
 800c1c0:	9300      	str	r3, [sp, #0]
 800c1c2:	0013      	movs	r3, r2
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	2120      	movs	r1, #32
 800c1c8:	f000 f910 	bl	800c3ec <I2C_WaitOnFlagUntilTimeout>
 800c1cc:	1e03      	subs	r3, r0, #0
 800c1ce:	d001      	beq.n	800c1d4 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	e01c      	b.n	800c20e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2220      	movs	r2, #32
 800c1da:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d900      	bls.n	800c1ec <HAL_I2C_IsDeviceReady+0x204>
 800c1ea:	e72e      	b.n	800c04a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2241      	movs	r2, #65	; 0x41
 800c1f0:	2120      	movs	r1, #32
 800c1f2:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1f8:	2220      	movs	r2, #32
 800c1fa:	431a      	orrs	r2, r3
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	2240      	movs	r2, #64	; 0x40
 800c204:	2100      	movs	r1, #0
 800c206:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800c208:	2301      	movs	r3, #1
 800c20a:	e000      	b.n	800c20e <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 800c20c:	2302      	movs	r3, #2
  }
}
 800c20e:	0018      	movs	r0, r3
 800c210:	46bd      	mov	sp, r7
 800c212:	b008      	add	sp, #32
 800c214:	bd80      	pop	{r7, pc}
 800c216:	46c0      	nop			; (mov r8, r8)
 800c218:	02002000 	.word	0x02002000

0800c21c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c21c:	b5b0      	push	{r4, r5, r7, lr}
 800c21e:	b086      	sub	sp, #24
 800c220:	af02      	add	r7, sp, #8
 800c222:	60f8      	str	r0, [r7, #12]
 800c224:	000c      	movs	r4, r1
 800c226:	0010      	movs	r0, r2
 800c228:	0019      	movs	r1, r3
 800c22a:	250a      	movs	r5, #10
 800c22c:	197b      	adds	r3, r7, r5
 800c22e:	1c22      	adds	r2, r4, #0
 800c230:	801a      	strh	r2, [r3, #0]
 800c232:	2308      	movs	r3, #8
 800c234:	18fb      	adds	r3, r7, r3
 800c236:	1c02      	adds	r2, r0, #0
 800c238:	801a      	strh	r2, [r3, #0]
 800c23a:	1dbb      	adds	r3, r7, #6
 800c23c:	1c0a      	adds	r2, r1, #0
 800c23e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800c240:	1dbb      	adds	r3, r7, #6
 800c242:	881b      	ldrh	r3, [r3, #0]
 800c244:	b2da      	uxtb	r2, r3
 800c246:	2380      	movs	r3, #128	; 0x80
 800c248:	045c      	lsls	r4, r3, #17
 800c24a:	197b      	adds	r3, r7, r5
 800c24c:	8819      	ldrh	r1, [r3, #0]
 800c24e:	68f8      	ldr	r0, [r7, #12]
 800c250:	4b23      	ldr	r3, [pc, #140]	; (800c2e0 <I2C_RequestMemoryWrite+0xc4>)
 800c252:	9300      	str	r3, [sp, #0]
 800c254:	0023      	movs	r3, r4
 800c256:	f000 f9e9 	bl	800c62c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c25c:	6a39      	ldr	r1, [r7, #32]
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	0018      	movs	r0, r3
 800c262:	f000 f902 	bl	800c46a <I2C_WaitOnTXISFlagUntilTimeout>
 800c266:	1e03      	subs	r3, r0, #0
 800c268:	d001      	beq.n	800c26e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800c26a:	2301      	movs	r3, #1
 800c26c:	e033      	b.n	800c2d6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c26e:	1dbb      	adds	r3, r7, #6
 800c270:	881b      	ldrh	r3, [r3, #0]
 800c272:	2b01      	cmp	r3, #1
 800c274:	d107      	bne.n	800c286 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c276:	2308      	movs	r3, #8
 800c278:	18fb      	adds	r3, r7, r3
 800c27a:	881b      	ldrh	r3, [r3, #0]
 800c27c:	b2da      	uxtb	r2, r3
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	629a      	str	r2, [r3, #40]	; 0x28
 800c284:	e019      	b.n	800c2ba <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c286:	2308      	movs	r3, #8
 800c288:	18fb      	adds	r3, r7, r3
 800c28a:	881b      	ldrh	r3, [r3, #0]
 800c28c:	0a1b      	lsrs	r3, r3, #8
 800c28e:	b29b      	uxth	r3, r3
 800c290:	b2da      	uxtb	r2, r3
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c29a:	6a39      	ldr	r1, [r7, #32]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	0018      	movs	r0, r3
 800c2a0:	f000 f8e3 	bl	800c46a <I2C_WaitOnTXISFlagUntilTimeout>
 800c2a4:	1e03      	subs	r3, r0, #0
 800c2a6:	d001      	beq.n	800c2ac <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e014      	b.n	800c2d6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c2ac:	2308      	movs	r3, #8
 800c2ae:	18fb      	adds	r3, r7, r3
 800c2b0:	881b      	ldrh	r3, [r3, #0]
 800c2b2:	b2da      	uxtb	r2, r3
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800c2ba:	6a3a      	ldr	r2, [r7, #32]
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c0:	9300      	str	r3, [sp, #0]
 800c2c2:	0013      	movs	r3, r2
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	2180      	movs	r1, #128	; 0x80
 800c2c8:	f000 f890 	bl	800c3ec <I2C_WaitOnFlagUntilTimeout>
 800c2cc:	1e03      	subs	r3, r0, #0
 800c2ce:	d001      	beq.n	800c2d4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e000      	b.n	800c2d6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800c2d4:	2300      	movs	r3, #0
}
 800c2d6:	0018      	movs	r0, r3
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	b004      	add	sp, #16
 800c2dc:	bdb0      	pop	{r4, r5, r7, pc}
 800c2de:	46c0      	nop			; (mov r8, r8)
 800c2e0:	80002000 	.word	0x80002000

0800c2e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c2e4:	b5b0      	push	{r4, r5, r7, lr}
 800c2e6:	b086      	sub	sp, #24
 800c2e8:	af02      	add	r7, sp, #8
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	000c      	movs	r4, r1
 800c2ee:	0010      	movs	r0, r2
 800c2f0:	0019      	movs	r1, r3
 800c2f2:	250a      	movs	r5, #10
 800c2f4:	197b      	adds	r3, r7, r5
 800c2f6:	1c22      	adds	r2, r4, #0
 800c2f8:	801a      	strh	r2, [r3, #0]
 800c2fa:	2308      	movs	r3, #8
 800c2fc:	18fb      	adds	r3, r7, r3
 800c2fe:	1c02      	adds	r2, r0, #0
 800c300:	801a      	strh	r2, [r3, #0]
 800c302:	1dbb      	adds	r3, r7, #6
 800c304:	1c0a      	adds	r2, r1, #0
 800c306:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800c308:	1dbb      	adds	r3, r7, #6
 800c30a:	881b      	ldrh	r3, [r3, #0]
 800c30c:	b2da      	uxtb	r2, r3
 800c30e:	197b      	adds	r3, r7, r5
 800c310:	8819      	ldrh	r1, [r3, #0]
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	4b23      	ldr	r3, [pc, #140]	; (800c3a4 <I2C_RequestMemoryRead+0xc0>)
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	2300      	movs	r3, #0
 800c31a:	f000 f987 	bl	800c62c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c31e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c320:	6a39      	ldr	r1, [r7, #32]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	0018      	movs	r0, r3
 800c326:	f000 f8a0 	bl	800c46a <I2C_WaitOnTXISFlagUntilTimeout>
 800c32a:	1e03      	subs	r3, r0, #0
 800c32c:	d001      	beq.n	800c332 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800c32e:	2301      	movs	r3, #1
 800c330:	e033      	b.n	800c39a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800c332:	1dbb      	adds	r3, r7, #6
 800c334:	881b      	ldrh	r3, [r3, #0]
 800c336:	2b01      	cmp	r3, #1
 800c338:	d107      	bne.n	800c34a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c33a:	2308      	movs	r3, #8
 800c33c:	18fb      	adds	r3, r7, r3
 800c33e:	881b      	ldrh	r3, [r3, #0]
 800c340:	b2da      	uxtb	r2, r3
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	629a      	str	r2, [r3, #40]	; 0x28
 800c348:	e019      	b.n	800c37e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800c34a:	2308      	movs	r3, #8
 800c34c:	18fb      	adds	r3, r7, r3
 800c34e:	881b      	ldrh	r3, [r3, #0]
 800c350:	0a1b      	lsrs	r3, r3, #8
 800c352:	b29b      	uxth	r3, r3
 800c354:	b2da      	uxtb	r2, r3
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c35c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c35e:	6a39      	ldr	r1, [r7, #32]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	0018      	movs	r0, r3
 800c364:	f000 f881 	bl	800c46a <I2C_WaitOnTXISFlagUntilTimeout>
 800c368:	1e03      	subs	r3, r0, #0
 800c36a:	d001      	beq.n	800c370 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800c36c:	2301      	movs	r3, #1
 800c36e:	e014      	b.n	800c39a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800c370:	2308      	movs	r3, #8
 800c372:	18fb      	adds	r3, r7, r3
 800c374:	881b      	ldrh	r3, [r3, #0]
 800c376:	b2da      	uxtb	r2, r3
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800c37e:	6a3a      	ldr	r2, [r7, #32]
 800c380:	68f8      	ldr	r0, [r7, #12]
 800c382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	0013      	movs	r3, r2
 800c388:	2200      	movs	r2, #0
 800c38a:	2140      	movs	r1, #64	; 0x40
 800c38c:	f000 f82e 	bl	800c3ec <I2C_WaitOnFlagUntilTimeout>
 800c390:	1e03      	subs	r3, r0, #0
 800c392:	d001      	beq.n	800c398 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	e000      	b.n	800c39a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800c398:	2300      	movs	r3, #0
}
 800c39a:	0018      	movs	r0, r3
 800c39c:	46bd      	mov	sp, r7
 800c39e:	b004      	add	sp, #16
 800c3a0:	bdb0      	pop	{r4, r5, r7, pc}
 800c3a2:	46c0      	nop			; (mov r8, r8)
 800c3a4:	80002000 	.word	0x80002000

0800c3a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b082      	sub	sp, #8
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	2202      	movs	r2, #2
 800c3b8:	4013      	ands	r3, r2
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	d103      	bne.n	800c3c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	699b      	ldr	r3, [r3, #24]
 800c3cc:	2201      	movs	r2, #1
 800c3ce:	4013      	ands	r3, r2
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d007      	beq.n	800c3e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	699a      	ldr	r2, [r3, #24]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2101      	movs	r1, #1
 800c3e0:	430a      	orrs	r2, r1
 800c3e2:	619a      	str	r2, [r3, #24]
  }
}
 800c3e4:	46c0      	nop			; (mov r8, r8)
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	b002      	add	sp, #8
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	603b      	str	r3, [r7, #0]
 800c3f8:	1dfb      	adds	r3, r7, #7
 800c3fa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c3fc:	e021      	b.n	800c442 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	3301      	adds	r3, #1
 800c402:	d01e      	beq.n	800c442 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c404:	f7fd fa86 	bl	8009914 <HAL_GetTick>
 800c408:	0002      	movs	r2, r0
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	1ad3      	subs	r3, r2, r3
 800c40e:	683a      	ldr	r2, [r7, #0]
 800c410:	429a      	cmp	r2, r3
 800c412:	d302      	bcc.n	800c41a <I2C_WaitOnFlagUntilTimeout+0x2e>
 800c414:	683b      	ldr	r3, [r7, #0]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d113      	bne.n	800c442 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c41e:	2220      	movs	r2, #32
 800c420:	431a      	orrs	r2, r3
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	2241      	movs	r2, #65	; 0x41
 800c42a:	2120      	movs	r1, #32
 800c42c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2242      	movs	r2, #66	; 0x42
 800c432:	2100      	movs	r1, #0
 800c434:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2240      	movs	r2, #64	; 0x40
 800c43a:	2100      	movs	r1, #0
 800c43c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800c43e:	2301      	movs	r3, #1
 800c440:	e00f      	b.n	800c462 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	699b      	ldr	r3, [r3, #24]
 800c448:	68ba      	ldr	r2, [r7, #8]
 800c44a:	4013      	ands	r3, r2
 800c44c:	68ba      	ldr	r2, [r7, #8]
 800c44e:	1ad3      	subs	r3, r2, r3
 800c450:	425a      	negs	r2, r3
 800c452:	4153      	adcs	r3, r2
 800c454:	b2db      	uxtb	r3, r3
 800c456:	001a      	movs	r2, r3
 800c458:	1dfb      	adds	r3, r7, #7
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d0ce      	beq.n	800c3fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c460:	2300      	movs	r3, #0
}
 800c462:	0018      	movs	r0, r3
 800c464:	46bd      	mov	sp, r7
 800c466:	b004      	add	sp, #16
 800c468:	bd80      	pop	{r7, pc}

0800c46a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b084      	sub	sp, #16
 800c46e:	af00      	add	r7, sp, #0
 800c470:	60f8      	str	r0, [r7, #12]
 800c472:	60b9      	str	r1, [r7, #8]
 800c474:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c476:	e02b      	b.n	800c4d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	68b9      	ldr	r1, [r7, #8]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	0018      	movs	r0, r3
 800c480:	f000 f86e 	bl	800c560 <I2C_IsAcknowledgeFailed>
 800c484:	1e03      	subs	r3, r0, #0
 800c486:	d001      	beq.n	800c48c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c488:	2301      	movs	r3, #1
 800c48a:	e029      	b.n	800c4e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	3301      	adds	r3, #1
 800c490:	d01e      	beq.n	800c4d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c492:	f7fd fa3f 	bl	8009914 <HAL_GetTick>
 800c496:	0002      	movs	r2, r0
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	1ad3      	subs	r3, r2, r3
 800c49c:	68ba      	ldr	r2, [r7, #8]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d302      	bcc.n	800c4a8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d113      	bne.n	800c4d0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4ac:	2220      	movs	r2, #32
 800c4ae:	431a      	orrs	r2, r3
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2241      	movs	r2, #65	; 0x41
 800c4b8:	2120      	movs	r1, #32
 800c4ba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2242      	movs	r2, #66	; 0x42
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2240      	movs	r2, #64	; 0x40
 800c4c8:	2100      	movs	r1, #0
 800c4ca:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	e007      	b.n	800c4e0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	699b      	ldr	r3, [r3, #24]
 800c4d6:	2202      	movs	r2, #2
 800c4d8:	4013      	ands	r3, r2
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	d1cc      	bne.n	800c478 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	0018      	movs	r0, r3
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	b004      	add	sp, #16
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b084      	sub	sp, #16
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	60f8      	str	r0, [r7, #12]
 800c4f0:	60b9      	str	r1, [r7, #8]
 800c4f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c4f4:	e028      	b.n	800c548 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800c4f6:	687a      	ldr	r2, [r7, #4]
 800c4f8:	68b9      	ldr	r1, [r7, #8]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	0018      	movs	r0, r3
 800c4fe:	f000 f82f 	bl	800c560 <I2C_IsAcknowledgeFailed>
 800c502:	1e03      	subs	r3, r0, #0
 800c504:	d001      	beq.n	800c50a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800c506:	2301      	movs	r3, #1
 800c508:	e026      	b.n	800c558 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c50a:	f7fd fa03 	bl	8009914 <HAL_GetTick>
 800c50e:	0002      	movs	r2, r0
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	1ad3      	subs	r3, r2, r3
 800c514:	68ba      	ldr	r2, [r7, #8]
 800c516:	429a      	cmp	r2, r3
 800c518:	d302      	bcc.n	800c520 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d113      	bne.n	800c548 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c524:	2220      	movs	r2, #32
 800c526:	431a      	orrs	r2, r3
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2241      	movs	r2, #65	; 0x41
 800c530:	2120      	movs	r1, #32
 800c532:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2242      	movs	r2, #66	; 0x42
 800c538:	2100      	movs	r1, #0
 800c53a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	2240      	movs	r2, #64	; 0x40
 800c540:	2100      	movs	r1, #0
 800c542:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800c544:	2301      	movs	r3, #1
 800c546:	e007      	b.n	800c558 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	699b      	ldr	r3, [r3, #24]
 800c54e:	2220      	movs	r2, #32
 800c550:	4013      	ands	r3, r2
 800c552:	2b20      	cmp	r3, #32
 800c554:	d1cf      	bne.n	800c4f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800c556:	2300      	movs	r3, #0
}
 800c558:	0018      	movs	r0, r3
 800c55a:	46bd      	mov	sp, r7
 800c55c:	b004      	add	sp, #16
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	699b      	ldr	r3, [r3, #24]
 800c572:	2210      	movs	r2, #16
 800c574:	4013      	ands	r3, r2
 800c576:	2b10      	cmp	r3, #16
 800c578:	d151      	bne.n	800c61e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c57a:	e021      	b.n	800c5c0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	3301      	adds	r3, #1
 800c580:	d01e      	beq.n	800c5c0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c582:	f7fd f9c7 	bl	8009914 <HAL_GetTick>
 800c586:	0002      	movs	r2, r0
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	1ad3      	subs	r3, r2, r3
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	429a      	cmp	r2, r3
 800c590:	d302      	bcc.n	800c598 <I2C_IsAcknowledgeFailed+0x38>
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d113      	bne.n	800c5c0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c59c:	2220      	movs	r2, #32
 800c59e:	431a      	orrs	r2, r3
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	2241      	movs	r2, #65	; 0x41
 800c5a8:	2120      	movs	r1, #32
 800c5aa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	2242      	movs	r2, #66	; 0x42
 800c5b0:	2100      	movs	r1, #0
 800c5b2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2240      	movs	r2, #64	; 0x40
 800c5b8:	2100      	movs	r1, #0
 800c5ba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800c5bc:	2301      	movs	r3, #1
 800c5be:	e02f      	b.n	800c620 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	699b      	ldr	r3, [r3, #24]
 800c5c6:	2220      	movs	r2, #32
 800c5c8:	4013      	ands	r3, r2
 800c5ca:	2b20      	cmp	r3, #32
 800c5cc:	d1d6      	bne.n	800c57c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2210      	movs	r2, #16
 800c5d4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	2220      	movs	r2, #32
 800c5dc:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	0018      	movs	r0, r3
 800c5e2:	f7ff fee1 	bl	800c3a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	685a      	ldr	r2, [r3, #4]
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	490d      	ldr	r1, [pc, #52]	; (800c628 <I2C_IsAcknowledgeFailed+0xc8>)
 800c5f2:	400a      	ands	r2, r1
 800c5f4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5fa:	2204      	movs	r2, #4
 800c5fc:	431a      	orrs	r2, r3
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2241      	movs	r2, #65	; 0x41
 800c606:	2120      	movs	r1, #32
 800c608:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	2242      	movs	r2, #66	; 0x42
 800c60e:	2100      	movs	r1, #0
 800c610:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	2240      	movs	r2, #64	; 0x40
 800c616:	2100      	movs	r1, #0
 800c618:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800c61a:	2301      	movs	r3, #1
 800c61c:	e000      	b.n	800c620 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800c61e:	2300      	movs	r3, #0
}
 800c620:	0018      	movs	r0, r3
 800c622:	46bd      	mov	sp, r7
 800c624:	b004      	add	sp, #16
 800c626:	bd80      	pop	{r7, pc}
 800c628:	fe00e800 	.word	0xfe00e800

0800c62c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800c62c:	b590      	push	{r4, r7, lr}
 800c62e:	b085      	sub	sp, #20
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	0008      	movs	r0, r1
 800c636:	0011      	movs	r1, r2
 800c638:	607b      	str	r3, [r7, #4]
 800c63a:	240a      	movs	r4, #10
 800c63c:	193b      	adds	r3, r7, r4
 800c63e:	1c02      	adds	r2, r0, #0
 800c640:	801a      	strh	r2, [r3, #0]
 800c642:	2009      	movs	r0, #9
 800c644:	183b      	adds	r3, r7, r0
 800c646:	1c0a      	adds	r2, r1, #0
 800c648:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	685b      	ldr	r3, [r3, #4]
 800c650:	6a3a      	ldr	r2, [r7, #32]
 800c652:	0d51      	lsrs	r1, r2, #21
 800c654:	2280      	movs	r2, #128	; 0x80
 800c656:	00d2      	lsls	r2, r2, #3
 800c658:	400a      	ands	r2, r1
 800c65a:	490e      	ldr	r1, [pc, #56]	; (800c694 <I2C_TransferConfig+0x68>)
 800c65c:	430a      	orrs	r2, r1
 800c65e:	43d2      	mvns	r2, r2
 800c660:	401a      	ands	r2, r3
 800c662:	0011      	movs	r1, r2
 800c664:	193b      	adds	r3, r7, r4
 800c666:	881b      	ldrh	r3, [r3, #0]
 800c668:	059b      	lsls	r3, r3, #22
 800c66a:	0d9a      	lsrs	r2, r3, #22
 800c66c:	183b      	adds	r3, r7, r0
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	0418      	lsls	r0, r3, #16
 800c672:	23ff      	movs	r3, #255	; 0xff
 800c674:	041b      	lsls	r3, r3, #16
 800c676:	4003      	ands	r3, r0
 800c678:	431a      	orrs	r2, r3
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	431a      	orrs	r2, r3
 800c67e:	6a3b      	ldr	r3, [r7, #32]
 800c680:	431a      	orrs	r2, r3
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	430a      	orrs	r2, r1
 800c688:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800c68a:	46c0      	nop			; (mov r8, r8)
 800c68c:	46bd      	mov	sp, r7
 800c68e:	b005      	add	sp, #20
 800c690:	bd90      	pop	{r4, r7, pc}
 800c692:	46c0      	nop			; (mov r8, r8)
 800c694:	03ff63ff 	.word	0x03ff63ff

0800c698 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
 800c6a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2241      	movs	r2, #65	; 0x41
 800c6a6:	5c9b      	ldrb	r3, [r3, r2]
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b20      	cmp	r3, #32
 800c6ac:	d138      	bne.n	800c720 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	2240      	movs	r2, #64	; 0x40
 800c6b2:	5c9b      	ldrb	r3, [r3, r2]
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d101      	bne.n	800c6bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c6b8:	2302      	movs	r3, #2
 800c6ba:	e032      	b.n	800c722 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2240      	movs	r2, #64	; 0x40
 800c6c0:	2101      	movs	r1, #1
 800c6c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2241      	movs	r2, #65	; 0x41
 800c6c8:	2124      	movs	r1, #36	; 0x24
 800c6ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2101      	movs	r1, #1
 800c6d8:	438a      	bics	r2, r1
 800c6da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	681a      	ldr	r2, [r3, #0]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4911      	ldr	r1, [pc, #68]	; (800c72c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800c6e8:	400a      	ands	r2, r1
 800c6ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	6819      	ldr	r1, [r3, #0]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	683a      	ldr	r2, [r7, #0]
 800c6f8:	430a      	orrs	r2, r1
 800c6fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	681a      	ldr	r2, [r3, #0]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2101      	movs	r1, #1
 800c708:	430a      	orrs	r2, r1
 800c70a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2241      	movs	r2, #65	; 0x41
 800c710:	2120      	movs	r1, #32
 800c712:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2240      	movs	r2, #64	; 0x40
 800c718:	2100      	movs	r1, #0
 800c71a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c71c:	2300      	movs	r3, #0
 800c71e:	e000      	b.n	800c722 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c720:	2302      	movs	r3, #2
  }
}
 800c722:	0018      	movs	r0, r3
 800c724:	46bd      	mov	sp, r7
 800c726:	b002      	add	sp, #8
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	46c0      	nop			; (mov r8, r8)
 800c72c:	ffffefff 	.word	0xffffefff

0800c730 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b084      	sub	sp, #16
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2241      	movs	r2, #65	; 0x41
 800c73e:	5c9b      	ldrb	r3, [r3, r2]
 800c740:	b2db      	uxtb	r3, r3
 800c742:	2b20      	cmp	r3, #32
 800c744:	d139      	bne.n	800c7ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2240      	movs	r2, #64	; 0x40
 800c74a:	5c9b      	ldrb	r3, [r3, r2]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d101      	bne.n	800c754 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c750:	2302      	movs	r3, #2
 800c752:	e033      	b.n	800c7bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2240      	movs	r2, #64	; 0x40
 800c758:	2101      	movs	r1, #1
 800c75a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2241      	movs	r2, #65	; 0x41
 800c760:	2124      	movs	r1, #36	; 0x24
 800c762:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	2101      	movs	r1, #1
 800c770:	438a      	bics	r2, r1
 800c772:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	4a11      	ldr	r2, [pc, #68]	; (800c7c4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800c780:	4013      	ands	r3, r2
 800c782:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	021b      	lsls	r3, r3, #8
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	4313      	orrs	r3, r2
 800c78c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	681a      	ldr	r2, [r3, #0]
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2101      	movs	r1, #1
 800c7a2:	430a      	orrs	r2, r1
 800c7a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2241      	movs	r2, #65	; 0x41
 800c7aa:	2120      	movs	r1, #32
 800c7ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2240      	movs	r2, #64	; 0x40
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	e000      	b.n	800c7bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c7ba:	2302      	movs	r3, #2
  }
}
 800c7bc:	0018      	movs	r0, r3
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	b004      	add	sp, #16
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	fffff0ff 	.word	0xfffff0ff

0800c7c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800c7d0:	4b19      	ldr	r3, [pc, #100]	; (800c838 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	4a19      	ldr	r2, [pc, #100]	; (800c83c <HAL_PWREx_ControlVoltageScaling+0x74>)
 800c7d6:	4013      	ands	r3, r2
 800c7d8:	0019      	movs	r1, r3
 800c7da:	4b17      	ldr	r3, [pc, #92]	; (800c838 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	430a      	orrs	r2, r1
 800c7e0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	2380      	movs	r3, #128	; 0x80
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d11f      	bne.n	800c82c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800c7ec:	4b14      	ldr	r3, [pc, #80]	; (800c840 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	0013      	movs	r3, r2
 800c7f2:	005b      	lsls	r3, r3, #1
 800c7f4:	189b      	adds	r3, r3, r2
 800c7f6:	005b      	lsls	r3, r3, #1
 800c7f8:	4912      	ldr	r1, [pc, #72]	; (800c844 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800c7fa:	0018      	movs	r0, r3
 800c7fc:	f7f3 fca6 	bl	800014c <__udivsi3>
 800c800:	0003      	movs	r3, r0
 800c802:	3301      	adds	r3, #1
 800c804:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c806:	e008      	b.n	800c81a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d003      	beq.n	800c816 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	3b01      	subs	r3, #1
 800c812:	60fb      	str	r3, [r7, #12]
 800c814:	e001      	b.n	800c81a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800c816:	2303      	movs	r3, #3
 800c818:	e009      	b.n	800c82e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c81a:	4b07      	ldr	r3, [pc, #28]	; (800c838 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800c81c:	695a      	ldr	r2, [r3, #20]
 800c81e:	2380      	movs	r3, #128	; 0x80
 800c820:	00db      	lsls	r3, r3, #3
 800c822:	401a      	ands	r2, r3
 800c824:	2380      	movs	r3, #128	; 0x80
 800c826:	00db      	lsls	r3, r3, #3
 800c828:	429a      	cmp	r2, r3
 800c82a:	d0ed      	beq.n	800c808 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800c82c:	2300      	movs	r3, #0
}
 800c82e:	0018      	movs	r0, r3
 800c830:	46bd      	mov	sp, r7
 800c832:	b004      	add	sp, #16
 800c834:	bd80      	pop	{r7, pc}
 800c836:	46c0      	nop			; (mov r8, r8)
 800c838:	40007000 	.word	0x40007000
 800c83c:	fffff9ff 	.word	0xfffff9ff
 800c840:	2000014c 	.word	0x2000014c
 800c844:	000f4240 	.word	0x000f4240

0800c848 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800c84c:	4b03      	ldr	r3, [pc, #12]	; (800c85c <LL_RCC_GetAPB1Prescaler+0x14>)
 800c84e:	689a      	ldr	r2, [r3, #8]
 800c850:	23e0      	movs	r3, #224	; 0xe0
 800c852:	01db      	lsls	r3, r3, #7
 800c854:	4013      	ands	r3, r2
}
 800c856:	0018      	movs	r0, r3
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	40021000 	.word	0x40021000

0800c860 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b088      	sub	sp, #32
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d101      	bne.n	800c872 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c86e:	2301      	movs	r3, #1
 800c870:	e2f9      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	2201      	movs	r2, #1
 800c878:	4013      	ands	r3, r2
 800c87a:	d100      	bne.n	800c87e <HAL_RCC_OscConfig+0x1e>
 800c87c:	e07c      	b.n	800c978 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c87e:	4bc3      	ldr	r3, [pc, #780]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	2238      	movs	r2, #56	; 0x38
 800c884:	4013      	ands	r3, r2
 800c886:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c888:	4bc0      	ldr	r3, [pc, #768]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c88a:	68db      	ldr	r3, [r3, #12]
 800c88c:	2203      	movs	r2, #3
 800c88e:	4013      	ands	r3, r2
 800c890:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	2b10      	cmp	r3, #16
 800c896:	d102      	bne.n	800c89e <HAL_RCC_OscConfig+0x3e>
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	2b03      	cmp	r3, #3
 800c89c:	d002      	beq.n	800c8a4 <HAL_RCC_OscConfig+0x44>
 800c89e:	69bb      	ldr	r3, [r7, #24]
 800c8a0:	2b08      	cmp	r3, #8
 800c8a2:	d10b      	bne.n	800c8bc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c8a4:	4bb9      	ldr	r3, [pc, #740]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c8a6:	681a      	ldr	r2, [r3, #0]
 800c8a8:	2380      	movs	r3, #128	; 0x80
 800c8aa:	029b      	lsls	r3, r3, #10
 800c8ac:	4013      	ands	r3, r2
 800c8ae:	d062      	beq.n	800c976 <HAL_RCC_OscConfig+0x116>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d15e      	bne.n	800c976 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	e2d4      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	685a      	ldr	r2, [r3, #4]
 800c8c0:	2380      	movs	r3, #128	; 0x80
 800c8c2:	025b      	lsls	r3, r3, #9
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d107      	bne.n	800c8d8 <HAL_RCC_OscConfig+0x78>
 800c8c8:	4bb0      	ldr	r3, [pc, #704]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	4baf      	ldr	r3, [pc, #700]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c8ce:	2180      	movs	r1, #128	; 0x80
 800c8d0:	0249      	lsls	r1, r1, #9
 800c8d2:	430a      	orrs	r2, r1
 800c8d4:	601a      	str	r2, [r3, #0]
 800c8d6:	e020      	b.n	800c91a <HAL_RCC_OscConfig+0xba>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	685a      	ldr	r2, [r3, #4]
 800c8dc:	23a0      	movs	r3, #160	; 0xa0
 800c8de:	02db      	lsls	r3, r3, #11
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d10e      	bne.n	800c902 <HAL_RCC_OscConfig+0xa2>
 800c8e4:	4ba9      	ldr	r3, [pc, #676]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	4ba8      	ldr	r3, [pc, #672]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c8ea:	2180      	movs	r1, #128	; 0x80
 800c8ec:	02c9      	lsls	r1, r1, #11
 800c8ee:	430a      	orrs	r2, r1
 800c8f0:	601a      	str	r2, [r3, #0]
 800c8f2:	4ba6      	ldr	r3, [pc, #664]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	4ba5      	ldr	r3, [pc, #660]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c8f8:	2180      	movs	r1, #128	; 0x80
 800c8fa:	0249      	lsls	r1, r1, #9
 800c8fc:	430a      	orrs	r2, r1
 800c8fe:	601a      	str	r2, [r3, #0]
 800c900:	e00b      	b.n	800c91a <HAL_RCC_OscConfig+0xba>
 800c902:	4ba2      	ldr	r3, [pc, #648]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	4ba1      	ldr	r3, [pc, #644]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c908:	49a1      	ldr	r1, [pc, #644]	; (800cb90 <HAL_RCC_OscConfig+0x330>)
 800c90a:	400a      	ands	r2, r1
 800c90c:	601a      	str	r2, [r3, #0]
 800c90e:	4b9f      	ldr	r3, [pc, #636]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	4b9e      	ldr	r3, [pc, #632]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c914:	499f      	ldr	r1, [pc, #636]	; (800cb94 <HAL_RCC_OscConfig+0x334>)
 800c916:	400a      	ands	r2, r1
 800c918:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d014      	beq.n	800c94c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c922:	f7fc fff7 	bl	8009914 <HAL_GetTick>
 800c926:	0003      	movs	r3, r0
 800c928:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c92a:	e008      	b.n	800c93e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c92c:	f7fc fff2 	bl	8009914 <HAL_GetTick>
 800c930:	0002      	movs	r2, r0
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	1ad3      	subs	r3, r2, r3
 800c936:	2b64      	cmp	r3, #100	; 0x64
 800c938:	d901      	bls.n	800c93e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800c93a:	2303      	movs	r3, #3
 800c93c:	e293      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c93e:	4b93      	ldr	r3, [pc, #588]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	2380      	movs	r3, #128	; 0x80
 800c944:	029b      	lsls	r3, r3, #10
 800c946:	4013      	ands	r3, r2
 800c948:	d0f0      	beq.n	800c92c <HAL_RCC_OscConfig+0xcc>
 800c94a:	e015      	b.n	800c978 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c94c:	f7fc ffe2 	bl	8009914 <HAL_GetTick>
 800c950:	0003      	movs	r3, r0
 800c952:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c954:	e008      	b.n	800c968 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c956:	f7fc ffdd 	bl	8009914 <HAL_GetTick>
 800c95a:	0002      	movs	r2, r0
 800c95c:	693b      	ldr	r3, [r7, #16]
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	2b64      	cmp	r3, #100	; 0x64
 800c962:	d901      	bls.n	800c968 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800c964:	2303      	movs	r3, #3
 800c966:	e27e      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c968:	4b88      	ldr	r3, [pc, #544]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	2380      	movs	r3, #128	; 0x80
 800c96e:	029b      	lsls	r3, r3, #10
 800c970:	4013      	ands	r3, r2
 800c972:	d1f0      	bne.n	800c956 <HAL_RCC_OscConfig+0xf6>
 800c974:	e000      	b.n	800c978 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c976:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2202      	movs	r2, #2
 800c97e:	4013      	ands	r3, r2
 800c980:	d100      	bne.n	800c984 <HAL_RCC_OscConfig+0x124>
 800c982:	e099      	b.n	800cab8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c984:	4b81      	ldr	r3, [pc, #516]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c986:	689b      	ldr	r3, [r3, #8]
 800c988:	2238      	movs	r2, #56	; 0x38
 800c98a:	4013      	ands	r3, r2
 800c98c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c98e:	4b7f      	ldr	r3, [pc, #508]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c990:	68db      	ldr	r3, [r3, #12]
 800c992:	2203      	movs	r2, #3
 800c994:	4013      	ands	r3, r2
 800c996:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	2b10      	cmp	r3, #16
 800c99c:	d102      	bne.n	800c9a4 <HAL_RCC_OscConfig+0x144>
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	2b02      	cmp	r3, #2
 800c9a2:	d002      	beq.n	800c9aa <HAL_RCC_OscConfig+0x14a>
 800c9a4:	69bb      	ldr	r3, [r7, #24]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d135      	bne.n	800ca16 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c9aa:	4b78      	ldr	r3, [pc, #480]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c9ac:	681a      	ldr	r2, [r3, #0]
 800c9ae:	2380      	movs	r3, #128	; 0x80
 800c9b0:	00db      	lsls	r3, r3, #3
 800c9b2:	4013      	ands	r3, r2
 800c9b4:	d005      	beq.n	800c9c2 <HAL_RCC_OscConfig+0x162>
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	68db      	ldr	r3, [r3, #12]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d101      	bne.n	800c9c2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e251      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c9c2:	4b72      	ldr	r3, [pc, #456]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	4a74      	ldr	r2, [pc, #464]	; (800cb98 <HAL_RCC_OscConfig+0x338>)
 800c9c8:	4013      	ands	r3, r2
 800c9ca:	0019      	movs	r1, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	695b      	ldr	r3, [r3, #20]
 800c9d0:	021a      	lsls	r2, r3, #8
 800c9d2:	4b6e      	ldr	r3, [pc, #440]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c9d4:	430a      	orrs	r2, r1
 800c9d6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c9d8:	69bb      	ldr	r3, [r7, #24]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d112      	bne.n	800ca04 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800c9de:	4b6b      	ldr	r3, [pc, #428]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4a6e      	ldr	r2, [pc, #440]	; (800cb9c <HAL_RCC_OscConfig+0x33c>)
 800c9e4:	4013      	ands	r3, r2
 800c9e6:	0019      	movs	r1, r3
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	691a      	ldr	r2, [r3, #16]
 800c9ec:	4b67      	ldr	r3, [pc, #412]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c9ee:	430a      	orrs	r2, r1
 800c9f0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800c9f2:	4b66      	ldr	r3, [pc, #408]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	0adb      	lsrs	r3, r3, #11
 800c9f8:	2207      	movs	r2, #7
 800c9fa:	4013      	ands	r3, r2
 800c9fc:	4a68      	ldr	r2, [pc, #416]	; (800cba0 <HAL_RCC_OscConfig+0x340>)
 800c9fe:	40da      	lsrs	r2, r3
 800ca00:	4b68      	ldr	r3, [pc, #416]	; (800cba4 <HAL_RCC_OscConfig+0x344>)
 800ca02:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800ca04:	4b68      	ldr	r3, [pc, #416]	; (800cba8 <HAL_RCC_OscConfig+0x348>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	0018      	movs	r0, r3
 800ca0a:	f7fc ff27 	bl	800985c <HAL_InitTick>
 800ca0e:	1e03      	subs	r3, r0, #0
 800ca10:	d051      	beq.n	800cab6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800ca12:	2301      	movs	r3, #1
 800ca14:	e227      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d030      	beq.n	800ca80 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800ca1e:	4b5b      	ldr	r3, [pc, #364]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a5e      	ldr	r2, [pc, #376]	; (800cb9c <HAL_RCC_OscConfig+0x33c>)
 800ca24:	4013      	ands	r3, r2
 800ca26:	0019      	movs	r1, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	691a      	ldr	r2, [r3, #16]
 800ca2c:	4b57      	ldr	r3, [pc, #348]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800ca2e:	430a      	orrs	r2, r1
 800ca30:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800ca32:	4b56      	ldr	r3, [pc, #344]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	4b55      	ldr	r3, [pc, #340]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800ca38:	2180      	movs	r1, #128	; 0x80
 800ca3a:	0049      	lsls	r1, r1, #1
 800ca3c:	430a      	orrs	r2, r1
 800ca3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca40:	f7fc ff68 	bl	8009914 <HAL_GetTick>
 800ca44:	0003      	movs	r3, r0
 800ca46:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ca48:	e008      	b.n	800ca5c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ca4a:	f7fc ff63 	bl	8009914 <HAL_GetTick>
 800ca4e:	0002      	movs	r2, r0
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	1ad3      	subs	r3, r2, r3
 800ca54:	2b02      	cmp	r3, #2
 800ca56:	d901      	bls.n	800ca5c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800ca58:	2303      	movs	r3, #3
 800ca5a:	e204      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ca5c:	4b4b      	ldr	r3, [pc, #300]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	2380      	movs	r3, #128	; 0x80
 800ca62:	00db      	lsls	r3, r3, #3
 800ca64:	4013      	ands	r3, r2
 800ca66:	d0f0      	beq.n	800ca4a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca68:	4b48      	ldr	r3, [pc, #288]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800ca6a:	685b      	ldr	r3, [r3, #4]
 800ca6c:	4a4a      	ldr	r2, [pc, #296]	; (800cb98 <HAL_RCC_OscConfig+0x338>)
 800ca6e:	4013      	ands	r3, r2
 800ca70:	0019      	movs	r1, r3
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	695b      	ldr	r3, [r3, #20]
 800ca76:	021a      	lsls	r2, r3, #8
 800ca78:	4b44      	ldr	r3, [pc, #272]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800ca7a:	430a      	orrs	r2, r1
 800ca7c:	605a      	str	r2, [r3, #4]
 800ca7e:	e01b      	b.n	800cab8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800ca80:	4b42      	ldr	r3, [pc, #264]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	4b41      	ldr	r3, [pc, #260]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800ca86:	4949      	ldr	r1, [pc, #292]	; (800cbac <HAL_RCC_OscConfig+0x34c>)
 800ca88:	400a      	ands	r2, r1
 800ca8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca8c:	f7fc ff42 	bl	8009914 <HAL_GetTick>
 800ca90:	0003      	movs	r3, r0
 800ca92:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ca94:	e008      	b.n	800caa8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ca96:	f7fc ff3d 	bl	8009914 <HAL_GetTick>
 800ca9a:	0002      	movs	r2, r0
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	1ad3      	subs	r3, r2, r3
 800caa0:	2b02      	cmp	r3, #2
 800caa2:	d901      	bls.n	800caa8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800caa4:	2303      	movs	r3, #3
 800caa6:	e1de      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800caa8:	4b38      	ldr	r3, [pc, #224]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	2380      	movs	r3, #128	; 0x80
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	4013      	ands	r3, r2
 800cab2:	d1f0      	bne.n	800ca96 <HAL_RCC_OscConfig+0x236>
 800cab4:	e000      	b.n	800cab8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800cab6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	2208      	movs	r2, #8
 800cabe:	4013      	ands	r3, r2
 800cac0:	d047      	beq.n	800cb52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800cac2:	4b32      	ldr	r3, [pc, #200]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	2238      	movs	r2, #56	; 0x38
 800cac8:	4013      	ands	r3, r2
 800caca:	2b18      	cmp	r3, #24
 800cacc:	d10a      	bne.n	800cae4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800cace:	4b2f      	ldr	r3, [pc, #188]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800cad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cad2:	2202      	movs	r2, #2
 800cad4:	4013      	ands	r3, r2
 800cad6:	d03c      	beq.n	800cb52 <HAL_RCC_OscConfig+0x2f2>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	699b      	ldr	r3, [r3, #24]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d138      	bne.n	800cb52 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	e1c0      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	699b      	ldr	r3, [r3, #24]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d019      	beq.n	800cb20 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800caec:	4b27      	ldr	r3, [pc, #156]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800caee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800caf0:	4b26      	ldr	r3, [pc, #152]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800caf2:	2101      	movs	r1, #1
 800caf4:	430a      	orrs	r2, r1
 800caf6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800caf8:	f7fc ff0c 	bl	8009914 <HAL_GetTick>
 800cafc:	0003      	movs	r3, r0
 800cafe:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cb00:	e008      	b.n	800cb14 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb02:	f7fc ff07 	bl	8009914 <HAL_GetTick>
 800cb06:	0002      	movs	r2, r0
 800cb08:	693b      	ldr	r3, [r7, #16]
 800cb0a:	1ad3      	subs	r3, r2, r3
 800cb0c:	2b02      	cmp	r3, #2
 800cb0e:	d901      	bls.n	800cb14 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800cb10:	2303      	movs	r3, #3
 800cb12:	e1a8      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cb14:	4b1d      	ldr	r3, [pc, #116]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800cb16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb18:	2202      	movs	r2, #2
 800cb1a:	4013      	ands	r3, r2
 800cb1c:	d0f1      	beq.n	800cb02 <HAL_RCC_OscConfig+0x2a2>
 800cb1e:	e018      	b.n	800cb52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800cb20:	4b1a      	ldr	r3, [pc, #104]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800cb22:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800cb24:	4b19      	ldr	r3, [pc, #100]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800cb26:	2101      	movs	r1, #1
 800cb28:	438a      	bics	r2, r1
 800cb2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb2c:	f7fc fef2 	bl	8009914 <HAL_GetTick>
 800cb30:	0003      	movs	r3, r0
 800cb32:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cb34:	e008      	b.n	800cb48 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb36:	f7fc feed 	bl	8009914 <HAL_GetTick>
 800cb3a:	0002      	movs	r2, r0
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	1ad3      	subs	r3, r2, r3
 800cb40:	2b02      	cmp	r3, #2
 800cb42:	d901      	bls.n	800cb48 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800cb44:	2303      	movs	r3, #3
 800cb46:	e18e      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800cb48:	4b10      	ldr	r3, [pc, #64]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800cb4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb4c:	2202      	movs	r2, #2
 800cb4e:	4013      	ands	r3, r2
 800cb50:	d1f1      	bne.n	800cb36 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2204      	movs	r2, #4
 800cb58:	4013      	ands	r3, r2
 800cb5a:	d100      	bne.n	800cb5e <HAL_RCC_OscConfig+0x2fe>
 800cb5c:	e0c6      	b.n	800ccec <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cb5e:	231f      	movs	r3, #31
 800cb60:	18fb      	adds	r3, r7, r3
 800cb62:	2200      	movs	r2, #0
 800cb64:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800cb66:	4b09      	ldr	r3, [pc, #36]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800cb68:	689b      	ldr	r3, [r3, #8]
 800cb6a:	2238      	movs	r2, #56	; 0x38
 800cb6c:	4013      	ands	r3, r2
 800cb6e:	2b20      	cmp	r3, #32
 800cb70:	d11e      	bne.n	800cbb0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800cb72:	4b06      	ldr	r3, [pc, #24]	; (800cb8c <HAL_RCC_OscConfig+0x32c>)
 800cb74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb76:	2202      	movs	r2, #2
 800cb78:	4013      	ands	r3, r2
 800cb7a:	d100      	bne.n	800cb7e <HAL_RCC_OscConfig+0x31e>
 800cb7c:	e0b6      	b.n	800ccec <HAL_RCC_OscConfig+0x48c>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	689b      	ldr	r3, [r3, #8]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d000      	beq.n	800cb88 <HAL_RCC_OscConfig+0x328>
 800cb86:	e0b1      	b.n	800ccec <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e16c      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
 800cb8c:	40021000 	.word	0x40021000
 800cb90:	fffeffff 	.word	0xfffeffff
 800cb94:	fffbffff 	.word	0xfffbffff
 800cb98:	ffff80ff 	.word	0xffff80ff
 800cb9c:	ffffc7ff 	.word	0xffffc7ff
 800cba0:	00f42400 	.word	0x00f42400
 800cba4:	2000014c 	.word	0x2000014c
 800cba8:	20000178 	.word	0x20000178
 800cbac:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800cbb0:	4baf      	ldr	r3, [pc, #700]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cbb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbb4:	2380      	movs	r3, #128	; 0x80
 800cbb6:	055b      	lsls	r3, r3, #21
 800cbb8:	4013      	ands	r3, r2
 800cbba:	d101      	bne.n	800cbc0 <HAL_RCC_OscConfig+0x360>
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e000      	b.n	800cbc2 <HAL_RCC_OscConfig+0x362>
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d011      	beq.n	800cbea <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800cbc6:	4baa      	ldr	r3, [pc, #680]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cbc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbca:	4ba9      	ldr	r3, [pc, #676]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cbcc:	2180      	movs	r1, #128	; 0x80
 800cbce:	0549      	lsls	r1, r1, #21
 800cbd0:	430a      	orrs	r2, r1
 800cbd2:	63da      	str	r2, [r3, #60]	; 0x3c
 800cbd4:	4ba6      	ldr	r3, [pc, #664]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cbd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbd8:	2380      	movs	r3, #128	; 0x80
 800cbda:	055b      	lsls	r3, r3, #21
 800cbdc:	4013      	ands	r3, r2
 800cbde:	60fb      	str	r3, [r7, #12]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800cbe2:	231f      	movs	r3, #31
 800cbe4:	18fb      	adds	r3, r7, r3
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cbea:	4ba2      	ldr	r3, [pc, #648]	; (800ce74 <HAL_RCC_OscConfig+0x614>)
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	2380      	movs	r3, #128	; 0x80
 800cbf0:	005b      	lsls	r3, r3, #1
 800cbf2:	4013      	ands	r3, r2
 800cbf4:	d11a      	bne.n	800cc2c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cbf6:	4b9f      	ldr	r3, [pc, #636]	; (800ce74 <HAL_RCC_OscConfig+0x614>)
 800cbf8:	681a      	ldr	r2, [r3, #0]
 800cbfa:	4b9e      	ldr	r3, [pc, #632]	; (800ce74 <HAL_RCC_OscConfig+0x614>)
 800cbfc:	2180      	movs	r1, #128	; 0x80
 800cbfe:	0049      	lsls	r1, r1, #1
 800cc00:	430a      	orrs	r2, r1
 800cc02:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800cc04:	f7fc fe86 	bl	8009914 <HAL_GetTick>
 800cc08:	0003      	movs	r3, r0
 800cc0a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cc0c:	e008      	b.n	800cc20 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cc0e:	f7fc fe81 	bl	8009914 <HAL_GetTick>
 800cc12:	0002      	movs	r2, r0
 800cc14:	693b      	ldr	r3, [r7, #16]
 800cc16:	1ad3      	subs	r3, r2, r3
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	d901      	bls.n	800cc20 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800cc1c:	2303      	movs	r3, #3
 800cc1e:	e122      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800cc20:	4b94      	ldr	r3, [pc, #592]	; (800ce74 <HAL_RCC_OscConfig+0x614>)
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	2380      	movs	r3, #128	; 0x80
 800cc26:	005b      	lsls	r3, r3, #1
 800cc28:	4013      	ands	r3, r2
 800cc2a:	d0f0      	beq.n	800cc0e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	689b      	ldr	r3, [r3, #8]
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	d106      	bne.n	800cc42 <HAL_RCC_OscConfig+0x3e2>
 800cc34:	4b8e      	ldr	r3, [pc, #568]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cc36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc38:	4b8d      	ldr	r3, [pc, #564]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cc3a:	2101      	movs	r1, #1
 800cc3c:	430a      	orrs	r2, r1
 800cc3e:	65da      	str	r2, [r3, #92]	; 0x5c
 800cc40:	e01c      	b.n	800cc7c <HAL_RCC_OscConfig+0x41c>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	689b      	ldr	r3, [r3, #8]
 800cc46:	2b05      	cmp	r3, #5
 800cc48:	d10c      	bne.n	800cc64 <HAL_RCC_OscConfig+0x404>
 800cc4a:	4b89      	ldr	r3, [pc, #548]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cc4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc4e:	4b88      	ldr	r3, [pc, #544]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cc50:	2104      	movs	r1, #4
 800cc52:	430a      	orrs	r2, r1
 800cc54:	65da      	str	r2, [r3, #92]	; 0x5c
 800cc56:	4b86      	ldr	r3, [pc, #536]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cc58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc5a:	4b85      	ldr	r3, [pc, #532]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cc5c:	2101      	movs	r1, #1
 800cc5e:	430a      	orrs	r2, r1
 800cc60:	65da      	str	r2, [r3, #92]	; 0x5c
 800cc62:	e00b      	b.n	800cc7c <HAL_RCC_OscConfig+0x41c>
 800cc64:	4b82      	ldr	r3, [pc, #520]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cc66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc68:	4b81      	ldr	r3, [pc, #516]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cc6a:	2101      	movs	r1, #1
 800cc6c:	438a      	bics	r2, r1
 800cc6e:	65da      	str	r2, [r3, #92]	; 0x5c
 800cc70:	4b7f      	ldr	r3, [pc, #508]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cc72:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cc74:	4b7e      	ldr	r3, [pc, #504]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cc76:	2104      	movs	r1, #4
 800cc78:	438a      	bics	r2, r1
 800cc7a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d014      	beq.n	800ccae <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cc84:	f7fc fe46 	bl	8009914 <HAL_GetTick>
 800cc88:	0003      	movs	r3, r0
 800cc8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cc8c:	e009      	b.n	800cca2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc8e:	f7fc fe41 	bl	8009914 <HAL_GetTick>
 800cc92:	0002      	movs	r2, r0
 800cc94:	693b      	ldr	r3, [r7, #16]
 800cc96:	1ad3      	subs	r3, r2, r3
 800cc98:	4a77      	ldr	r2, [pc, #476]	; (800ce78 <HAL_RCC_OscConfig+0x618>)
 800cc9a:	4293      	cmp	r3, r2
 800cc9c:	d901      	bls.n	800cca2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800cc9e:	2303      	movs	r3, #3
 800cca0:	e0e1      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cca2:	4b73      	ldr	r3, [pc, #460]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cca6:	2202      	movs	r2, #2
 800cca8:	4013      	ands	r3, r2
 800ccaa:	d0f0      	beq.n	800cc8e <HAL_RCC_OscConfig+0x42e>
 800ccac:	e013      	b.n	800ccd6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ccae:	f7fc fe31 	bl	8009914 <HAL_GetTick>
 800ccb2:	0003      	movs	r3, r0
 800ccb4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ccb6:	e009      	b.n	800cccc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ccb8:	f7fc fe2c 	bl	8009914 <HAL_GetTick>
 800ccbc:	0002      	movs	r2, r0
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	1ad3      	subs	r3, r2, r3
 800ccc2:	4a6d      	ldr	r2, [pc, #436]	; (800ce78 <HAL_RCC_OscConfig+0x618>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d901      	bls.n	800cccc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800ccc8:	2303      	movs	r3, #3
 800ccca:	e0cc      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800cccc:	4b68      	ldr	r3, [pc, #416]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800ccce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ccd0:	2202      	movs	r2, #2
 800ccd2:	4013      	ands	r3, r2
 800ccd4:	d1f0      	bne.n	800ccb8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800ccd6:	231f      	movs	r3, #31
 800ccd8:	18fb      	adds	r3, r7, r3
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d105      	bne.n	800ccec <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800cce0:	4b63      	ldr	r3, [pc, #396]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cce4:	4b62      	ldr	r3, [pc, #392]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cce6:	4965      	ldr	r1, [pc, #404]	; (800ce7c <HAL_RCC_OscConfig+0x61c>)
 800cce8:	400a      	ands	r2, r1
 800ccea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	69db      	ldr	r3, [r3, #28]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d100      	bne.n	800ccf6 <HAL_RCC_OscConfig+0x496>
 800ccf4:	e0b6      	b.n	800ce64 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ccf6:	4b5e      	ldr	r3, [pc, #376]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	2238      	movs	r2, #56	; 0x38
 800ccfc:	4013      	ands	r3, r2
 800ccfe:	2b10      	cmp	r3, #16
 800cd00:	d100      	bne.n	800cd04 <HAL_RCC_OscConfig+0x4a4>
 800cd02:	e07e      	b.n	800ce02 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	69db      	ldr	r3, [r3, #28]
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	d153      	bne.n	800cdb4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd0c:	4b58      	ldr	r3, [pc, #352]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	4b57      	ldr	r3, [pc, #348]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cd12:	495b      	ldr	r1, [pc, #364]	; (800ce80 <HAL_RCC_OscConfig+0x620>)
 800cd14:	400a      	ands	r2, r1
 800cd16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd18:	f7fc fdfc 	bl	8009914 <HAL_GetTick>
 800cd1c:	0003      	movs	r3, r0
 800cd1e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cd20:	e008      	b.n	800cd34 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd22:	f7fc fdf7 	bl	8009914 <HAL_GetTick>
 800cd26:	0002      	movs	r2, r0
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	1ad3      	subs	r3, r2, r3
 800cd2c:	2b02      	cmp	r3, #2
 800cd2e:	d901      	bls.n	800cd34 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800cd30:	2303      	movs	r3, #3
 800cd32:	e098      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cd34:	4b4e      	ldr	r3, [pc, #312]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	2380      	movs	r3, #128	; 0x80
 800cd3a:	049b      	lsls	r3, r3, #18
 800cd3c:	4013      	ands	r3, r2
 800cd3e:	d1f0      	bne.n	800cd22 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800cd40:	4b4b      	ldr	r3, [pc, #300]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	4a4f      	ldr	r2, [pc, #316]	; (800ce84 <HAL_RCC_OscConfig+0x624>)
 800cd46:	4013      	ands	r3, r2
 800cd48:	0019      	movs	r1, r3
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6a1a      	ldr	r2, [r3, #32]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd52:	431a      	orrs	r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd58:	021b      	lsls	r3, r3, #8
 800cd5a:	431a      	orrs	r2, r3
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd60:	431a      	orrs	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd66:	431a      	orrs	r2, r3
 800cd68:	4b41      	ldr	r3, [pc, #260]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cd6a:	430a      	orrs	r2, r1
 800cd6c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cd6e:	4b40      	ldr	r3, [pc, #256]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	4b3f      	ldr	r3, [pc, #252]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cd74:	2180      	movs	r1, #128	; 0x80
 800cd76:	0449      	lsls	r1, r1, #17
 800cd78:	430a      	orrs	r2, r1
 800cd7a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800cd7c:	4b3c      	ldr	r3, [pc, #240]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cd7e:	68da      	ldr	r2, [r3, #12]
 800cd80:	4b3b      	ldr	r3, [pc, #236]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cd82:	2180      	movs	r1, #128	; 0x80
 800cd84:	0549      	lsls	r1, r1, #21
 800cd86:	430a      	orrs	r2, r1
 800cd88:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cd8a:	f7fc fdc3 	bl	8009914 <HAL_GetTick>
 800cd8e:	0003      	movs	r3, r0
 800cd90:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cd92:	e008      	b.n	800cda6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd94:	f7fc fdbe 	bl	8009914 <HAL_GetTick>
 800cd98:	0002      	movs	r2, r0
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	1ad3      	subs	r3, r2, r3
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	d901      	bls.n	800cda6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800cda2:	2303      	movs	r3, #3
 800cda4:	e05f      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cda6:	4b32      	ldr	r3, [pc, #200]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cda8:	681a      	ldr	r2, [r3, #0]
 800cdaa:	2380      	movs	r3, #128	; 0x80
 800cdac:	049b      	lsls	r3, r3, #18
 800cdae:	4013      	ands	r3, r2
 800cdb0:	d0f0      	beq.n	800cd94 <HAL_RCC_OscConfig+0x534>
 800cdb2:	e057      	b.n	800ce64 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cdb4:	4b2e      	ldr	r3, [pc, #184]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cdb6:	681a      	ldr	r2, [r3, #0]
 800cdb8:	4b2d      	ldr	r3, [pc, #180]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cdba:	4931      	ldr	r1, [pc, #196]	; (800ce80 <HAL_RCC_OscConfig+0x620>)
 800cdbc:	400a      	ands	r2, r1
 800cdbe:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800cdc0:	4b2b      	ldr	r3, [pc, #172]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cdc2:	68da      	ldr	r2, [r3, #12]
 800cdc4:	4b2a      	ldr	r3, [pc, #168]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cdc6:	2103      	movs	r1, #3
 800cdc8:	438a      	bics	r2, r1
 800cdca:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800cdcc:	4b28      	ldr	r3, [pc, #160]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cdce:	68da      	ldr	r2, [r3, #12]
 800cdd0:	4b27      	ldr	r3, [pc, #156]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cdd2:	492d      	ldr	r1, [pc, #180]	; (800ce88 <HAL_RCC_OscConfig+0x628>)
 800cdd4:	400a      	ands	r2, r1
 800cdd6:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdd8:	f7fc fd9c 	bl	8009914 <HAL_GetTick>
 800cddc:	0003      	movs	r3, r0
 800cdde:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cde0:	e008      	b.n	800cdf4 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cde2:	f7fc fd97 	bl	8009914 <HAL_GetTick>
 800cde6:	0002      	movs	r2, r0
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	1ad3      	subs	r3, r2, r3
 800cdec:	2b02      	cmp	r3, #2
 800cdee:	d901      	bls.n	800cdf4 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 800cdf0:	2303      	movs	r3, #3
 800cdf2:	e038      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cdf4:	4b1e      	ldr	r3, [pc, #120]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800cdf6:	681a      	ldr	r2, [r3, #0]
 800cdf8:	2380      	movs	r3, #128	; 0x80
 800cdfa:	049b      	lsls	r3, r3, #18
 800cdfc:	4013      	ands	r3, r2
 800cdfe:	d1f0      	bne.n	800cde2 <HAL_RCC_OscConfig+0x582>
 800ce00:	e030      	b.n	800ce64 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	69db      	ldr	r3, [r3, #28]
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d101      	bne.n	800ce0e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800ce0a:	2301      	movs	r3, #1
 800ce0c:	e02b      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800ce0e:	4b18      	ldr	r3, [pc, #96]	; (800ce70 <HAL_RCC_OscConfig+0x610>)
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	2203      	movs	r2, #3
 800ce18:	401a      	ands	r2, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6a1b      	ldr	r3, [r3, #32]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d11e      	bne.n	800ce60 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ce22:	697b      	ldr	r3, [r7, #20]
 800ce24:	2270      	movs	r2, #112	; 0x70
 800ce26:	401a      	ands	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	d117      	bne.n	800ce60 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ce30:	697a      	ldr	r2, [r7, #20]
 800ce32:	23fe      	movs	r3, #254	; 0xfe
 800ce34:	01db      	lsls	r3, r3, #7
 800ce36:	401a      	ands	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce3c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d10e      	bne.n	800ce60 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ce42:	697a      	ldr	r2, [r7, #20]
 800ce44:	23f8      	movs	r3, #248	; 0xf8
 800ce46:	039b      	lsls	r3, r3, #14
 800ce48:	401a      	ands	r2, r3
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d106      	bne.n	800ce60 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800ce52:	697b      	ldr	r3, [r7, #20]
 800ce54:	0f5b      	lsrs	r3, r3, #29
 800ce56:	075a      	lsls	r2, r3, #29
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d001      	beq.n	800ce64 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 800ce60:	2301      	movs	r3, #1
 800ce62:	e000      	b.n	800ce66 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	0018      	movs	r0, r3
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	b008      	add	sp, #32
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	46c0      	nop			; (mov r8, r8)
 800ce70:	40021000 	.word	0x40021000
 800ce74:	40007000 	.word	0x40007000
 800ce78:	00001388 	.word	0x00001388
 800ce7c:	efffffff 	.word	0xefffffff
 800ce80:	feffffff 	.word	0xfeffffff
 800ce84:	1fc1808c 	.word	0x1fc1808c
 800ce88:	effeffff 	.word	0xeffeffff

0800ce8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b084      	sub	sp, #16
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
 800ce94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d101      	bne.n	800cea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e0e9      	b.n	800d074 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cea0:	4b76      	ldr	r3, [pc, #472]	; (800d07c <HAL_RCC_ClockConfig+0x1f0>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2207      	movs	r2, #7
 800cea6:	4013      	ands	r3, r2
 800cea8:	683a      	ldr	r2, [r7, #0]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d91e      	bls.n	800ceec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ceae:	4b73      	ldr	r3, [pc, #460]	; (800d07c <HAL_RCC_ClockConfig+0x1f0>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	2207      	movs	r2, #7
 800ceb4:	4393      	bics	r3, r2
 800ceb6:	0019      	movs	r1, r3
 800ceb8:	4b70      	ldr	r3, [pc, #448]	; (800d07c <HAL_RCC_ClockConfig+0x1f0>)
 800ceba:	683a      	ldr	r2, [r7, #0]
 800cebc:	430a      	orrs	r2, r1
 800cebe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cec0:	f7fc fd28 	bl	8009914 <HAL_GetTick>
 800cec4:	0003      	movs	r3, r0
 800cec6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800cec8:	e009      	b.n	800cede <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ceca:	f7fc fd23 	bl	8009914 <HAL_GetTick>
 800cece:	0002      	movs	r2, r0
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	1ad3      	subs	r3, r2, r3
 800ced4:	4a6a      	ldr	r2, [pc, #424]	; (800d080 <HAL_RCC_ClockConfig+0x1f4>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d901      	bls.n	800cede <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800ceda:	2303      	movs	r3, #3
 800cedc:	e0ca      	b.n	800d074 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800cede:	4b67      	ldr	r3, [pc, #412]	; (800d07c <HAL_RCC_ClockConfig+0x1f0>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	2207      	movs	r2, #7
 800cee4:	4013      	ands	r3, r2
 800cee6:	683a      	ldr	r2, [r7, #0]
 800cee8:	429a      	cmp	r2, r3
 800ceea:	d1ee      	bne.n	800ceca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2202      	movs	r2, #2
 800cef2:	4013      	ands	r3, r2
 800cef4:	d015      	beq.n	800cf22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	2204      	movs	r2, #4
 800cefc:	4013      	ands	r3, r2
 800cefe:	d006      	beq.n	800cf0e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800cf00:	4b60      	ldr	r3, [pc, #384]	; (800d084 <HAL_RCC_ClockConfig+0x1f8>)
 800cf02:	689a      	ldr	r2, [r3, #8]
 800cf04:	4b5f      	ldr	r3, [pc, #380]	; (800d084 <HAL_RCC_ClockConfig+0x1f8>)
 800cf06:	21e0      	movs	r1, #224	; 0xe0
 800cf08:	01c9      	lsls	r1, r1, #7
 800cf0a:	430a      	orrs	r2, r1
 800cf0c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cf0e:	4b5d      	ldr	r3, [pc, #372]	; (800d084 <HAL_RCC_ClockConfig+0x1f8>)
 800cf10:	689b      	ldr	r3, [r3, #8]
 800cf12:	4a5d      	ldr	r2, [pc, #372]	; (800d088 <HAL_RCC_ClockConfig+0x1fc>)
 800cf14:	4013      	ands	r3, r2
 800cf16:	0019      	movs	r1, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	689a      	ldr	r2, [r3, #8]
 800cf1c:	4b59      	ldr	r3, [pc, #356]	; (800d084 <HAL_RCC_ClockConfig+0x1f8>)
 800cf1e:	430a      	orrs	r2, r1
 800cf20:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	2201      	movs	r2, #1
 800cf28:	4013      	ands	r3, r2
 800cf2a:	d057      	beq.n	800cfdc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	685b      	ldr	r3, [r3, #4]
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d107      	bne.n	800cf44 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cf34:	4b53      	ldr	r3, [pc, #332]	; (800d084 <HAL_RCC_ClockConfig+0x1f8>)
 800cf36:	681a      	ldr	r2, [r3, #0]
 800cf38:	2380      	movs	r3, #128	; 0x80
 800cf3a:	029b      	lsls	r3, r3, #10
 800cf3c:	4013      	ands	r3, r2
 800cf3e:	d12b      	bne.n	800cf98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800cf40:	2301      	movs	r3, #1
 800cf42:	e097      	b.n	800d074 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	2b02      	cmp	r3, #2
 800cf4a:	d107      	bne.n	800cf5c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cf4c:	4b4d      	ldr	r3, [pc, #308]	; (800d084 <HAL_RCC_ClockConfig+0x1f8>)
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	2380      	movs	r3, #128	; 0x80
 800cf52:	049b      	lsls	r3, r3, #18
 800cf54:	4013      	ands	r3, r2
 800cf56:	d11f      	bne.n	800cf98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	e08b      	b.n	800d074 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d107      	bne.n	800cf74 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cf64:	4b47      	ldr	r3, [pc, #284]	; (800d084 <HAL_RCC_ClockConfig+0x1f8>)
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	2380      	movs	r3, #128	; 0x80
 800cf6a:	00db      	lsls	r3, r3, #3
 800cf6c:	4013      	ands	r3, r2
 800cf6e:	d113      	bne.n	800cf98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
 800cf72:	e07f      	b.n	800d074 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	685b      	ldr	r3, [r3, #4]
 800cf78:	2b03      	cmp	r3, #3
 800cf7a:	d106      	bne.n	800cf8a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800cf7c:	4b41      	ldr	r3, [pc, #260]	; (800d084 <HAL_RCC_ClockConfig+0x1f8>)
 800cf7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf80:	2202      	movs	r2, #2
 800cf82:	4013      	ands	r3, r2
 800cf84:	d108      	bne.n	800cf98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	e074      	b.n	800d074 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cf8a:	4b3e      	ldr	r3, [pc, #248]	; (800d084 <HAL_RCC_ClockConfig+0x1f8>)
 800cf8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf8e:	2202      	movs	r2, #2
 800cf90:	4013      	ands	r3, r2
 800cf92:	d101      	bne.n	800cf98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800cf94:	2301      	movs	r3, #1
 800cf96:	e06d      	b.n	800d074 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cf98:	4b3a      	ldr	r3, [pc, #232]	; (800d084 <HAL_RCC_ClockConfig+0x1f8>)
 800cf9a:	689b      	ldr	r3, [r3, #8]
 800cf9c:	2207      	movs	r2, #7
 800cf9e:	4393      	bics	r3, r2
 800cfa0:	0019      	movs	r1, r3
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	685a      	ldr	r2, [r3, #4]
 800cfa6:	4b37      	ldr	r3, [pc, #220]	; (800d084 <HAL_RCC_ClockConfig+0x1f8>)
 800cfa8:	430a      	orrs	r2, r1
 800cfaa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfac:	f7fc fcb2 	bl	8009914 <HAL_GetTick>
 800cfb0:	0003      	movs	r3, r0
 800cfb2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cfb4:	e009      	b.n	800cfca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cfb6:	f7fc fcad 	bl	8009914 <HAL_GetTick>
 800cfba:	0002      	movs	r2, r0
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	1ad3      	subs	r3, r2, r3
 800cfc0:	4a2f      	ldr	r2, [pc, #188]	; (800d080 <HAL_RCC_ClockConfig+0x1f4>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d901      	bls.n	800cfca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800cfc6:	2303      	movs	r3, #3
 800cfc8:	e054      	b.n	800d074 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cfca:	4b2e      	ldr	r3, [pc, #184]	; (800d084 <HAL_RCC_ClockConfig+0x1f8>)
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	2238      	movs	r2, #56	; 0x38
 800cfd0:	401a      	ands	r2, r3
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	685b      	ldr	r3, [r3, #4]
 800cfd6:	00db      	lsls	r3, r3, #3
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d1ec      	bne.n	800cfb6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cfdc:	4b27      	ldr	r3, [pc, #156]	; (800d07c <HAL_RCC_ClockConfig+0x1f0>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	2207      	movs	r2, #7
 800cfe2:	4013      	ands	r3, r2
 800cfe4:	683a      	ldr	r2, [r7, #0]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d21e      	bcs.n	800d028 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cfea:	4b24      	ldr	r3, [pc, #144]	; (800d07c <HAL_RCC_ClockConfig+0x1f0>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2207      	movs	r2, #7
 800cff0:	4393      	bics	r3, r2
 800cff2:	0019      	movs	r1, r3
 800cff4:	4b21      	ldr	r3, [pc, #132]	; (800d07c <HAL_RCC_ClockConfig+0x1f0>)
 800cff6:	683a      	ldr	r2, [r7, #0]
 800cff8:	430a      	orrs	r2, r1
 800cffa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cffc:	f7fc fc8a 	bl	8009914 <HAL_GetTick>
 800d000:	0003      	movs	r3, r0
 800d002:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800d004:	e009      	b.n	800d01a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d006:	f7fc fc85 	bl	8009914 <HAL_GetTick>
 800d00a:	0002      	movs	r2, r0
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	1ad3      	subs	r3, r2, r3
 800d010:	4a1b      	ldr	r2, [pc, #108]	; (800d080 <HAL_RCC_ClockConfig+0x1f4>)
 800d012:	4293      	cmp	r3, r2
 800d014:	d901      	bls.n	800d01a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800d016:	2303      	movs	r3, #3
 800d018:	e02c      	b.n	800d074 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800d01a:	4b18      	ldr	r3, [pc, #96]	; (800d07c <HAL_RCC_ClockConfig+0x1f0>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	2207      	movs	r2, #7
 800d020:	4013      	ands	r3, r2
 800d022:	683a      	ldr	r2, [r7, #0]
 800d024:	429a      	cmp	r2, r3
 800d026:	d1ee      	bne.n	800d006 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	2204      	movs	r2, #4
 800d02e:	4013      	ands	r3, r2
 800d030:	d009      	beq.n	800d046 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800d032:	4b14      	ldr	r3, [pc, #80]	; (800d084 <HAL_RCC_ClockConfig+0x1f8>)
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	4a15      	ldr	r2, [pc, #84]	; (800d08c <HAL_RCC_ClockConfig+0x200>)
 800d038:	4013      	ands	r3, r2
 800d03a:	0019      	movs	r1, r3
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	68da      	ldr	r2, [r3, #12]
 800d040:	4b10      	ldr	r3, [pc, #64]	; (800d084 <HAL_RCC_ClockConfig+0x1f8>)
 800d042:	430a      	orrs	r2, r1
 800d044:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800d046:	f000 f829 	bl	800d09c <HAL_RCC_GetSysClockFreq>
 800d04a:	0001      	movs	r1, r0
 800d04c:	4b0d      	ldr	r3, [pc, #52]	; (800d084 <HAL_RCC_ClockConfig+0x1f8>)
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	0a1b      	lsrs	r3, r3, #8
 800d052:	220f      	movs	r2, #15
 800d054:	401a      	ands	r2, r3
 800d056:	4b0e      	ldr	r3, [pc, #56]	; (800d090 <HAL_RCC_ClockConfig+0x204>)
 800d058:	0092      	lsls	r2, r2, #2
 800d05a:	58d3      	ldr	r3, [r2, r3]
 800d05c:	221f      	movs	r2, #31
 800d05e:	4013      	ands	r3, r2
 800d060:	000a      	movs	r2, r1
 800d062:	40da      	lsrs	r2, r3
 800d064:	4b0b      	ldr	r3, [pc, #44]	; (800d094 <HAL_RCC_ClockConfig+0x208>)
 800d066:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800d068:	4b0b      	ldr	r3, [pc, #44]	; (800d098 <HAL_RCC_ClockConfig+0x20c>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	0018      	movs	r0, r3
 800d06e:	f7fc fbf5 	bl	800985c <HAL_InitTick>
 800d072:	0003      	movs	r3, r0
}
 800d074:	0018      	movs	r0, r3
 800d076:	46bd      	mov	sp, r7
 800d078:	b004      	add	sp, #16
 800d07a:	bd80      	pop	{r7, pc}
 800d07c:	40022000 	.word	0x40022000
 800d080:	00001388 	.word	0x00001388
 800d084:	40021000 	.word	0x40021000
 800d088:	fffff0ff 	.word	0xfffff0ff
 800d08c:	ffff8fff 	.word	0xffff8fff
 800d090:	08017704 	.word	0x08017704
 800d094:	2000014c 	.word	0x2000014c
 800d098:	20000178 	.word	0x20000178

0800d09c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b086      	sub	sp, #24
 800d0a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d0a2:	4b3c      	ldr	r3, [pc, #240]	; (800d194 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d0a4:	689b      	ldr	r3, [r3, #8]
 800d0a6:	2238      	movs	r2, #56	; 0x38
 800d0a8:	4013      	ands	r3, r2
 800d0aa:	d10f      	bne.n	800d0cc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800d0ac:	4b39      	ldr	r3, [pc, #228]	; (800d194 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	0adb      	lsrs	r3, r3, #11
 800d0b2:	2207      	movs	r2, #7
 800d0b4:	4013      	ands	r3, r2
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	409a      	lsls	r2, r3
 800d0ba:	0013      	movs	r3, r2
 800d0bc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800d0be:	6839      	ldr	r1, [r7, #0]
 800d0c0:	4835      	ldr	r0, [pc, #212]	; (800d198 <HAL_RCC_GetSysClockFreq+0xfc>)
 800d0c2:	f7f3 f843 	bl	800014c <__udivsi3>
 800d0c6:	0003      	movs	r3, r0
 800d0c8:	613b      	str	r3, [r7, #16]
 800d0ca:	e05d      	b.n	800d188 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d0cc:	4b31      	ldr	r3, [pc, #196]	; (800d194 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d0ce:	689b      	ldr	r3, [r3, #8]
 800d0d0:	2238      	movs	r2, #56	; 0x38
 800d0d2:	4013      	ands	r3, r2
 800d0d4:	2b08      	cmp	r3, #8
 800d0d6:	d102      	bne.n	800d0de <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800d0d8:	4b30      	ldr	r3, [pc, #192]	; (800d19c <HAL_RCC_GetSysClockFreq+0x100>)
 800d0da:	613b      	str	r3, [r7, #16]
 800d0dc:	e054      	b.n	800d188 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d0de:	4b2d      	ldr	r3, [pc, #180]	; (800d194 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	2238      	movs	r2, #56	; 0x38
 800d0e4:	4013      	ands	r3, r2
 800d0e6:	2b10      	cmp	r3, #16
 800d0e8:	d138      	bne.n	800d15c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800d0ea:	4b2a      	ldr	r3, [pc, #168]	; (800d194 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d0ec:	68db      	ldr	r3, [r3, #12]
 800d0ee:	2203      	movs	r2, #3
 800d0f0:	4013      	ands	r3, r2
 800d0f2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800d0f4:	4b27      	ldr	r3, [pc, #156]	; (800d194 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	091b      	lsrs	r3, r3, #4
 800d0fa:	2207      	movs	r2, #7
 800d0fc:	4013      	ands	r3, r2
 800d0fe:	3301      	adds	r3, #1
 800d100:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2b03      	cmp	r3, #3
 800d106:	d10d      	bne.n	800d124 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800d108:	68b9      	ldr	r1, [r7, #8]
 800d10a:	4824      	ldr	r0, [pc, #144]	; (800d19c <HAL_RCC_GetSysClockFreq+0x100>)
 800d10c:	f7f3 f81e 	bl	800014c <__udivsi3>
 800d110:	0003      	movs	r3, r0
 800d112:	0019      	movs	r1, r3
 800d114:	4b1f      	ldr	r3, [pc, #124]	; (800d194 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	0a1b      	lsrs	r3, r3, #8
 800d11a:	227f      	movs	r2, #127	; 0x7f
 800d11c:	4013      	ands	r3, r2
 800d11e:	434b      	muls	r3, r1
 800d120:	617b      	str	r3, [r7, #20]
        break;
 800d122:	e00d      	b.n	800d140 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800d124:	68b9      	ldr	r1, [r7, #8]
 800d126:	481c      	ldr	r0, [pc, #112]	; (800d198 <HAL_RCC_GetSysClockFreq+0xfc>)
 800d128:	f7f3 f810 	bl	800014c <__udivsi3>
 800d12c:	0003      	movs	r3, r0
 800d12e:	0019      	movs	r1, r3
 800d130:	4b18      	ldr	r3, [pc, #96]	; (800d194 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	0a1b      	lsrs	r3, r3, #8
 800d136:	227f      	movs	r2, #127	; 0x7f
 800d138:	4013      	ands	r3, r2
 800d13a:	434b      	muls	r3, r1
 800d13c:	617b      	str	r3, [r7, #20]
        break;
 800d13e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800d140:	4b14      	ldr	r3, [pc, #80]	; (800d194 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	0f5b      	lsrs	r3, r3, #29
 800d146:	2207      	movs	r2, #7
 800d148:	4013      	ands	r3, r2
 800d14a:	3301      	adds	r3, #1
 800d14c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800d14e:	6879      	ldr	r1, [r7, #4]
 800d150:	6978      	ldr	r0, [r7, #20]
 800d152:	f7f2 fffb 	bl	800014c <__udivsi3>
 800d156:	0003      	movs	r3, r0
 800d158:	613b      	str	r3, [r7, #16]
 800d15a:	e015      	b.n	800d188 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800d15c:	4b0d      	ldr	r3, [pc, #52]	; (800d194 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d15e:	689b      	ldr	r3, [r3, #8]
 800d160:	2238      	movs	r2, #56	; 0x38
 800d162:	4013      	ands	r3, r2
 800d164:	2b20      	cmp	r3, #32
 800d166:	d103      	bne.n	800d170 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800d168:	2380      	movs	r3, #128	; 0x80
 800d16a:	021b      	lsls	r3, r3, #8
 800d16c:	613b      	str	r3, [r7, #16]
 800d16e:	e00b      	b.n	800d188 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800d170:	4b08      	ldr	r3, [pc, #32]	; (800d194 <HAL_RCC_GetSysClockFreq+0xf8>)
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	2238      	movs	r2, #56	; 0x38
 800d176:	4013      	ands	r3, r2
 800d178:	2b18      	cmp	r3, #24
 800d17a:	d103      	bne.n	800d184 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800d17c:	23fa      	movs	r3, #250	; 0xfa
 800d17e:	01db      	lsls	r3, r3, #7
 800d180:	613b      	str	r3, [r7, #16]
 800d182:	e001      	b.n	800d188 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800d184:	2300      	movs	r3, #0
 800d186:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800d188:	693b      	ldr	r3, [r7, #16]
}
 800d18a:	0018      	movs	r0, r3
 800d18c:	46bd      	mov	sp, r7
 800d18e:	b006      	add	sp, #24
 800d190:	bd80      	pop	{r7, pc}
 800d192:	46c0      	nop			; (mov r8, r8)
 800d194:	40021000 	.word	0x40021000
 800d198:	00f42400 	.word	0x00f42400
 800d19c:	007a1200 	.word	0x007a1200

0800d1a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d1a4:	4b02      	ldr	r3, [pc, #8]	; (800d1b0 <HAL_RCC_GetHCLKFreq+0x10>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
}
 800d1a8:	0018      	movs	r0, r3
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	46c0      	nop			; (mov r8, r8)
 800d1b0:	2000014c 	.word	0x2000014c

0800d1b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d1b4:	b5b0      	push	{r4, r5, r7, lr}
 800d1b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800d1b8:	f7ff fff2 	bl	800d1a0 <HAL_RCC_GetHCLKFreq>
 800d1bc:	0004      	movs	r4, r0
 800d1be:	f7ff fb43 	bl	800c848 <LL_RCC_GetAPB1Prescaler>
 800d1c2:	0003      	movs	r3, r0
 800d1c4:	0b1a      	lsrs	r2, r3, #12
 800d1c6:	4b05      	ldr	r3, [pc, #20]	; (800d1dc <HAL_RCC_GetPCLK1Freq+0x28>)
 800d1c8:	0092      	lsls	r2, r2, #2
 800d1ca:	58d3      	ldr	r3, [r2, r3]
 800d1cc:	221f      	movs	r2, #31
 800d1ce:	4013      	ands	r3, r2
 800d1d0:	40dc      	lsrs	r4, r3
 800d1d2:	0023      	movs	r3, r4
}
 800d1d4:	0018      	movs	r0, r3
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bdb0      	pop	{r4, r5, r7, pc}
 800d1da:	46c0      	nop			; (mov r8, r8)
 800d1dc:	08017744 	.word	0x08017744

0800d1e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b086      	sub	sp, #24
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800d1e8:	2313      	movs	r3, #19
 800d1ea:	18fb      	adds	r3, r7, r3
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d1f0:	2312      	movs	r3, #18
 800d1f2:	18fb      	adds	r3, r7, r3
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	2380      	movs	r3, #128	; 0x80
 800d1fe:	029b      	lsls	r3, r3, #10
 800d200:	4013      	ands	r3, r2
 800d202:	d100      	bne.n	800d206 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800d204:	e0a3      	b.n	800d34e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d206:	2011      	movs	r0, #17
 800d208:	183b      	adds	r3, r7, r0
 800d20a:	2200      	movs	r2, #0
 800d20c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d20e:	4b86      	ldr	r3, [pc, #536]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d212:	2380      	movs	r3, #128	; 0x80
 800d214:	055b      	lsls	r3, r3, #21
 800d216:	4013      	ands	r3, r2
 800d218:	d110      	bne.n	800d23c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d21a:	4b83      	ldr	r3, [pc, #524]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d21c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d21e:	4b82      	ldr	r3, [pc, #520]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d220:	2180      	movs	r1, #128	; 0x80
 800d222:	0549      	lsls	r1, r1, #21
 800d224:	430a      	orrs	r2, r1
 800d226:	63da      	str	r2, [r3, #60]	; 0x3c
 800d228:	4b7f      	ldr	r3, [pc, #508]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d22a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d22c:	2380      	movs	r3, #128	; 0x80
 800d22e:	055b      	lsls	r3, r3, #21
 800d230:	4013      	ands	r3, r2
 800d232:	60bb      	str	r3, [r7, #8]
 800d234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d236:	183b      	adds	r3, r7, r0
 800d238:	2201      	movs	r2, #1
 800d23a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d23c:	4b7b      	ldr	r3, [pc, #492]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800d23e:	681a      	ldr	r2, [r3, #0]
 800d240:	4b7a      	ldr	r3, [pc, #488]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800d242:	2180      	movs	r1, #128	; 0x80
 800d244:	0049      	lsls	r1, r1, #1
 800d246:	430a      	orrs	r2, r1
 800d248:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d24a:	f7fc fb63 	bl	8009914 <HAL_GetTick>
 800d24e:	0003      	movs	r3, r0
 800d250:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d252:	e00b      	b.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d254:	f7fc fb5e 	bl	8009914 <HAL_GetTick>
 800d258:	0002      	movs	r2, r0
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	1ad3      	subs	r3, r2, r3
 800d25e:	2b02      	cmp	r3, #2
 800d260:	d904      	bls.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800d262:	2313      	movs	r3, #19
 800d264:	18fb      	adds	r3, r7, r3
 800d266:	2203      	movs	r2, #3
 800d268:	701a      	strb	r2, [r3, #0]
        break;
 800d26a:	e005      	b.n	800d278 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d26c:	4b6f      	ldr	r3, [pc, #444]	; (800d42c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800d26e:	681a      	ldr	r2, [r3, #0]
 800d270:	2380      	movs	r3, #128	; 0x80
 800d272:	005b      	lsls	r3, r3, #1
 800d274:	4013      	ands	r3, r2
 800d276:	d0ed      	beq.n	800d254 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800d278:	2313      	movs	r3, #19
 800d27a:	18fb      	adds	r3, r7, r3
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d154      	bne.n	800d32c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d282:	4b69      	ldr	r3, [pc, #420]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d284:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d286:	23c0      	movs	r3, #192	; 0xc0
 800d288:	009b      	lsls	r3, r3, #2
 800d28a:	4013      	ands	r3, r2
 800d28c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d28e:	697b      	ldr	r3, [r7, #20]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d019      	beq.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	699b      	ldr	r3, [r3, #24]
 800d298:	697a      	ldr	r2, [r7, #20]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d014      	beq.n	800d2c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d29e:	4b62      	ldr	r3, [pc, #392]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d2a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2a2:	4a63      	ldr	r2, [pc, #396]	; (800d430 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800d2a4:	4013      	ands	r3, r2
 800d2a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d2a8:	4b5f      	ldr	r3, [pc, #380]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d2aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d2ac:	4b5e      	ldr	r3, [pc, #376]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d2ae:	2180      	movs	r1, #128	; 0x80
 800d2b0:	0249      	lsls	r1, r1, #9
 800d2b2:	430a      	orrs	r2, r1
 800d2b4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d2b6:	4b5c      	ldr	r3, [pc, #368]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d2b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d2ba:	4b5b      	ldr	r3, [pc, #364]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d2bc:	495d      	ldr	r1, [pc, #372]	; (800d434 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800d2be:	400a      	ands	r2, r1
 800d2c0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d2c2:	4b59      	ldr	r3, [pc, #356]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d2c4:	697a      	ldr	r2, [r7, #20]
 800d2c6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	4013      	ands	r3, r2
 800d2ce:	d016      	beq.n	800d2fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d2d0:	f7fc fb20 	bl	8009914 <HAL_GetTick>
 800d2d4:	0003      	movs	r3, r0
 800d2d6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d2d8:	e00c      	b.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d2da:	f7fc fb1b 	bl	8009914 <HAL_GetTick>
 800d2de:	0002      	movs	r2, r0
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	1ad3      	subs	r3, r2, r3
 800d2e4:	4a54      	ldr	r2, [pc, #336]	; (800d438 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d904      	bls.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800d2ea:	2313      	movs	r3, #19
 800d2ec:	18fb      	adds	r3, r7, r3
 800d2ee:	2203      	movs	r2, #3
 800d2f0:	701a      	strb	r2, [r3, #0]
            break;
 800d2f2:	e004      	b.n	800d2fe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d2f4:	4b4c      	ldr	r3, [pc, #304]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d2f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2f8:	2202      	movs	r2, #2
 800d2fa:	4013      	ands	r3, r2
 800d2fc:	d0ed      	beq.n	800d2da <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800d2fe:	2313      	movs	r3, #19
 800d300:	18fb      	adds	r3, r7, r3
 800d302:	781b      	ldrb	r3, [r3, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d10a      	bne.n	800d31e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d308:	4b47      	ldr	r3, [pc, #284]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d30a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d30c:	4a48      	ldr	r2, [pc, #288]	; (800d430 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800d30e:	4013      	ands	r3, r2
 800d310:	0019      	movs	r1, r3
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	699a      	ldr	r2, [r3, #24]
 800d316:	4b44      	ldr	r3, [pc, #272]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d318:	430a      	orrs	r2, r1
 800d31a:	65da      	str	r2, [r3, #92]	; 0x5c
 800d31c:	e00c      	b.n	800d338 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d31e:	2312      	movs	r3, #18
 800d320:	18fb      	adds	r3, r7, r3
 800d322:	2213      	movs	r2, #19
 800d324:	18ba      	adds	r2, r7, r2
 800d326:	7812      	ldrb	r2, [r2, #0]
 800d328:	701a      	strb	r2, [r3, #0]
 800d32a:	e005      	b.n	800d338 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d32c:	2312      	movs	r3, #18
 800d32e:	18fb      	adds	r3, r7, r3
 800d330:	2213      	movs	r2, #19
 800d332:	18ba      	adds	r2, r7, r2
 800d334:	7812      	ldrb	r2, [r2, #0]
 800d336:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d338:	2311      	movs	r3, #17
 800d33a:	18fb      	adds	r3, r7, r3
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d105      	bne.n	800d34e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d342:	4b39      	ldr	r3, [pc, #228]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d344:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d346:	4b38      	ldr	r3, [pc, #224]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d348:	493c      	ldr	r1, [pc, #240]	; (800d43c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800d34a:	400a      	ands	r2, r1
 800d34c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	2201      	movs	r2, #1
 800d354:	4013      	ands	r3, r2
 800d356:	d009      	beq.n	800d36c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d358:	4b33      	ldr	r3, [pc, #204]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d35a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d35c:	2203      	movs	r2, #3
 800d35e:	4393      	bics	r3, r2
 800d360:	0019      	movs	r1, r3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	685a      	ldr	r2, [r3, #4]
 800d366:	4b30      	ldr	r3, [pc, #192]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d368:	430a      	orrs	r2, r1
 800d36a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2202      	movs	r2, #2
 800d372:	4013      	ands	r3, r2
 800d374:	d009      	beq.n	800d38a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d376:	4b2c      	ldr	r3, [pc, #176]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d37a:	220c      	movs	r2, #12
 800d37c:	4393      	bics	r3, r2
 800d37e:	0019      	movs	r1, r3
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	689a      	ldr	r2, [r3, #8]
 800d384:	4b28      	ldr	r3, [pc, #160]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d386:	430a      	orrs	r2, r1
 800d388:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2220      	movs	r2, #32
 800d390:	4013      	ands	r3, r2
 800d392:	d009      	beq.n	800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d394:	4b24      	ldr	r3, [pc, #144]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d398:	4a29      	ldr	r2, [pc, #164]	; (800d440 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800d39a:	4013      	ands	r3, r2
 800d39c:	0019      	movs	r1, r3
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	68da      	ldr	r2, [r3, #12]
 800d3a2:	4b21      	ldr	r3, [pc, #132]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d3a4:	430a      	orrs	r2, r1
 800d3a6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681a      	ldr	r2, [r3, #0]
 800d3ac:	2380      	movs	r3, #128	; 0x80
 800d3ae:	01db      	lsls	r3, r3, #7
 800d3b0:	4013      	ands	r3, r2
 800d3b2:	d015      	beq.n	800d3e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d3b4:	4b1c      	ldr	r3, [pc, #112]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d3b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	0899      	lsrs	r1, r3, #2
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	695a      	ldr	r2, [r3, #20]
 800d3c0:	4b19      	ldr	r3, [pc, #100]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d3c2:	430a      	orrs	r2, r1
 800d3c4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	695a      	ldr	r2, [r3, #20]
 800d3ca:	2380      	movs	r3, #128	; 0x80
 800d3cc:	05db      	lsls	r3, r3, #23
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d106      	bne.n	800d3e0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800d3d2:	4b15      	ldr	r3, [pc, #84]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d3d4:	68da      	ldr	r2, [r3, #12]
 800d3d6:	4b14      	ldr	r3, [pc, #80]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d3d8:	2180      	movs	r1, #128	; 0x80
 800d3da:	0249      	lsls	r1, r1, #9
 800d3dc:	430a      	orrs	r2, r1
 800d3de:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681a      	ldr	r2, [r3, #0]
 800d3e4:	2380      	movs	r3, #128	; 0x80
 800d3e6:	011b      	lsls	r3, r3, #4
 800d3e8:	4013      	ands	r3, r2
 800d3ea:	d016      	beq.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800d3ec:	4b0e      	ldr	r3, [pc, #56]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d3ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3f0:	4a14      	ldr	r2, [pc, #80]	; (800d444 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800d3f2:	4013      	ands	r3, r2
 800d3f4:	0019      	movs	r1, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	691a      	ldr	r2, [r3, #16]
 800d3fa:	4b0b      	ldr	r3, [pc, #44]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d3fc:	430a      	orrs	r2, r1
 800d3fe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	691a      	ldr	r2, [r3, #16]
 800d404:	2380      	movs	r3, #128	; 0x80
 800d406:	01db      	lsls	r3, r3, #7
 800d408:	429a      	cmp	r2, r3
 800d40a:	d106      	bne.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800d40c:	4b06      	ldr	r3, [pc, #24]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d40e:	68da      	ldr	r2, [r3, #12]
 800d410:	4b05      	ldr	r3, [pc, #20]	; (800d428 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800d412:	2180      	movs	r1, #128	; 0x80
 800d414:	0249      	lsls	r1, r1, #9
 800d416:	430a      	orrs	r2, r1
 800d418:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800d41a:	2312      	movs	r3, #18
 800d41c:	18fb      	adds	r3, r7, r3
 800d41e:	781b      	ldrb	r3, [r3, #0]
}
 800d420:	0018      	movs	r0, r3
 800d422:	46bd      	mov	sp, r7
 800d424:	b006      	add	sp, #24
 800d426:	bd80      	pop	{r7, pc}
 800d428:	40021000 	.word	0x40021000
 800d42c:	40007000 	.word	0x40007000
 800d430:	fffffcff 	.word	0xfffffcff
 800d434:	fffeffff 	.word	0xfffeffff
 800d438:	00001388 	.word	0x00001388
 800d43c:	efffffff 	.word	0xefffffff
 800d440:	ffffcfff 	.word	0xffffcfff
 800d444:	ffff3fff 	.word	0xffff3fff

0800d448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d101      	bne.n	800d45a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d456:	2301      	movs	r3, #1
 800d458:	e0a8      	b.n	800d5ac <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d109      	bne.n	800d476 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	685a      	ldr	r2, [r3, #4]
 800d466:	2382      	movs	r3, #130	; 0x82
 800d468:	005b      	lsls	r3, r3, #1
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d009      	beq.n	800d482 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2200      	movs	r2, #0
 800d472:	61da      	str	r2, [r3, #28]
 800d474:	e005      	b.n	800d482 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2200      	movs	r2, #0
 800d47a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	225d      	movs	r2, #93	; 0x5d
 800d48c:	5c9b      	ldrb	r3, [r3, r2]
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	2b00      	cmp	r3, #0
 800d492:	d107      	bne.n	800d4a4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	225c      	movs	r2, #92	; 0x5c
 800d498:	2100      	movs	r1, #0
 800d49a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	0018      	movs	r0, r3
 800d4a0:	f7fb f918 	bl	80086d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	225d      	movs	r2, #93	; 0x5d
 800d4a8:	2102      	movs	r1, #2
 800d4aa:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	2140      	movs	r1, #64	; 0x40
 800d4b8:	438a      	bics	r2, r1
 800d4ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	68da      	ldr	r2, [r3, #12]
 800d4c0:	23e0      	movs	r3, #224	; 0xe0
 800d4c2:	00db      	lsls	r3, r3, #3
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d902      	bls.n	800d4ce <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	60fb      	str	r3, [r7, #12]
 800d4cc:	e002      	b.n	800d4d4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d4ce:	2380      	movs	r3, #128	; 0x80
 800d4d0:	015b      	lsls	r3, r3, #5
 800d4d2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	68da      	ldr	r2, [r3, #12]
 800d4d8:	23f0      	movs	r3, #240	; 0xf0
 800d4da:	011b      	lsls	r3, r3, #4
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d008      	beq.n	800d4f2 <HAL_SPI_Init+0xaa>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	68da      	ldr	r2, [r3, #12]
 800d4e4:	23e0      	movs	r3, #224	; 0xe0
 800d4e6:	00db      	lsls	r3, r3, #3
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d002      	beq.n	800d4f2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	685a      	ldr	r2, [r3, #4]
 800d4f6:	2382      	movs	r3, #130	; 0x82
 800d4f8:	005b      	lsls	r3, r3, #1
 800d4fa:	401a      	ands	r2, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6899      	ldr	r1, [r3, #8]
 800d500:	2384      	movs	r3, #132	; 0x84
 800d502:	021b      	lsls	r3, r3, #8
 800d504:	400b      	ands	r3, r1
 800d506:	431a      	orrs	r2, r3
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	691b      	ldr	r3, [r3, #16]
 800d50c:	2102      	movs	r1, #2
 800d50e:	400b      	ands	r3, r1
 800d510:	431a      	orrs	r2, r3
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	695b      	ldr	r3, [r3, #20]
 800d516:	2101      	movs	r1, #1
 800d518:	400b      	ands	r3, r1
 800d51a:	431a      	orrs	r2, r3
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6999      	ldr	r1, [r3, #24]
 800d520:	2380      	movs	r3, #128	; 0x80
 800d522:	009b      	lsls	r3, r3, #2
 800d524:	400b      	ands	r3, r1
 800d526:	431a      	orrs	r2, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	69db      	ldr	r3, [r3, #28]
 800d52c:	2138      	movs	r1, #56	; 0x38
 800d52e:	400b      	ands	r3, r1
 800d530:	431a      	orrs	r2, r3
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6a1b      	ldr	r3, [r3, #32]
 800d536:	2180      	movs	r1, #128	; 0x80
 800d538:	400b      	ands	r3, r1
 800d53a:	431a      	orrs	r2, r3
 800d53c:	0011      	movs	r1, r2
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d542:	2380      	movs	r3, #128	; 0x80
 800d544:	019b      	lsls	r3, r3, #6
 800d546:	401a      	ands	r2, r3
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	430a      	orrs	r2, r1
 800d54e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	699b      	ldr	r3, [r3, #24]
 800d554:	0c1b      	lsrs	r3, r3, #16
 800d556:	2204      	movs	r2, #4
 800d558:	401a      	ands	r2, r3
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d55e:	2110      	movs	r1, #16
 800d560:	400b      	ands	r3, r1
 800d562:	431a      	orrs	r2, r3
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d568:	2108      	movs	r1, #8
 800d56a:	400b      	ands	r3, r1
 800d56c:	431a      	orrs	r2, r3
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	68d9      	ldr	r1, [r3, #12]
 800d572:	23f0      	movs	r3, #240	; 0xf0
 800d574:	011b      	lsls	r3, r3, #4
 800d576:	400b      	ands	r3, r1
 800d578:	431a      	orrs	r2, r3
 800d57a:	0011      	movs	r1, r2
 800d57c:	68fa      	ldr	r2, [r7, #12]
 800d57e:	2380      	movs	r3, #128	; 0x80
 800d580:	015b      	lsls	r3, r3, #5
 800d582:	401a      	ands	r2, r3
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	430a      	orrs	r2, r1
 800d58a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	69da      	ldr	r2, [r3, #28]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4907      	ldr	r1, [pc, #28]	; (800d5b4 <HAL_SPI_Init+0x16c>)
 800d598:	400a      	ands	r2, r1
 800d59a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	2200      	movs	r2, #0
 800d5a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	225d      	movs	r2, #93	; 0x5d
 800d5a6:	2101      	movs	r1, #1
 800d5a8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d5aa:	2300      	movs	r3, #0
}
 800d5ac:	0018      	movs	r0, r3
 800d5ae:	46bd      	mov	sp, r7
 800d5b0:	b004      	add	sp, #16
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	fffff7ff 	.word	0xfffff7ff

0800d5b8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b088      	sub	sp, #32
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	60f8      	str	r0, [r7, #12]
 800d5c0:	60b9      	str	r1, [r7, #8]
 800d5c2:	603b      	str	r3, [r7, #0]
 800d5c4:	1dbb      	adds	r3, r7, #6
 800d5c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d5c8:	231f      	movs	r3, #31
 800d5ca:	18fb      	adds	r3, r7, r3
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	225c      	movs	r2, #92	; 0x5c
 800d5d4:	5c9b      	ldrb	r3, [r3, r2]
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d101      	bne.n	800d5de <HAL_SPI_Transmit+0x26>
 800d5da:	2302      	movs	r3, #2
 800d5dc:	e140      	b.n	800d860 <HAL_SPI_Transmit+0x2a8>
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	225c      	movs	r2, #92	; 0x5c
 800d5e2:	2101      	movs	r1, #1
 800d5e4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d5e6:	f7fc f995 	bl	8009914 <HAL_GetTick>
 800d5ea:	0003      	movs	r3, r0
 800d5ec:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d5ee:	2316      	movs	r3, #22
 800d5f0:	18fb      	adds	r3, r7, r3
 800d5f2:	1dba      	adds	r2, r7, #6
 800d5f4:	8812      	ldrh	r2, [r2, #0]
 800d5f6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	225d      	movs	r2, #93	; 0x5d
 800d5fc:	5c9b      	ldrb	r3, [r3, r2]
 800d5fe:	b2db      	uxtb	r3, r3
 800d600:	2b01      	cmp	r3, #1
 800d602:	d004      	beq.n	800d60e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800d604:	231f      	movs	r3, #31
 800d606:	18fb      	adds	r3, r7, r3
 800d608:	2202      	movs	r2, #2
 800d60a:	701a      	strb	r2, [r3, #0]
    goto error;
 800d60c:	e11d      	b.n	800d84a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d003      	beq.n	800d61c <HAL_SPI_Transmit+0x64>
 800d614:	1dbb      	adds	r3, r7, #6
 800d616:	881b      	ldrh	r3, [r3, #0]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d104      	bne.n	800d626 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800d61c:	231f      	movs	r3, #31
 800d61e:	18fb      	adds	r3, r7, r3
 800d620:	2201      	movs	r2, #1
 800d622:	701a      	strb	r2, [r3, #0]
    goto error;
 800d624:	e111      	b.n	800d84a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	225d      	movs	r2, #93	; 0x5d
 800d62a:	2103      	movs	r1, #3
 800d62c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2200      	movs	r2, #0
 800d632:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	68ba      	ldr	r2, [r7, #8]
 800d638:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	1dba      	adds	r2, r7, #6
 800d63e:	8812      	ldrh	r2, [r2, #0]
 800d640:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	1dba      	adds	r2, r7, #6
 800d646:	8812      	ldrh	r2, [r2, #0]
 800d648:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2200      	movs	r2, #0
 800d64e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	2244      	movs	r2, #68	; 0x44
 800d654:	2100      	movs	r1, #0
 800d656:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	2246      	movs	r2, #70	; 0x46
 800d65c:	2100      	movs	r1, #0
 800d65e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2200      	movs	r2, #0
 800d664:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2200      	movs	r2, #0
 800d66a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	689a      	ldr	r2, [r3, #8]
 800d670:	2380      	movs	r3, #128	; 0x80
 800d672:	021b      	lsls	r3, r3, #8
 800d674:	429a      	cmp	r2, r3
 800d676:	d110      	bne.n	800d69a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	2140      	movs	r1, #64	; 0x40
 800d684:	438a      	bics	r2, r1
 800d686:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	681a      	ldr	r2, [r3, #0]
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	2180      	movs	r1, #128	; 0x80
 800d694:	01c9      	lsls	r1, r1, #7
 800d696:	430a      	orrs	r2, r1
 800d698:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	2240      	movs	r2, #64	; 0x40
 800d6a2:	4013      	ands	r3, r2
 800d6a4:	2b40      	cmp	r3, #64	; 0x40
 800d6a6:	d007      	beq.n	800d6b8 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2140      	movs	r1, #64	; 0x40
 800d6b4:	430a      	orrs	r2, r1
 800d6b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	68da      	ldr	r2, [r3, #12]
 800d6bc:	23e0      	movs	r3, #224	; 0xe0
 800d6be:	00db      	lsls	r3, r3, #3
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d94e      	bls.n	800d762 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d004      	beq.n	800d6d6 <HAL_SPI_Transmit+0x11e>
 800d6cc:	2316      	movs	r3, #22
 800d6ce:	18fb      	adds	r3, r7, r3
 800d6d0:	881b      	ldrh	r3, [r3, #0]
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d13f      	bne.n	800d756 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6da:	881a      	ldrh	r2, [r3, #0]
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6e6:	1c9a      	adds	r2, r3, #2
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	b29a      	uxth	r2, r3
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d6fa:	e02c      	b.n	800d756 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	689b      	ldr	r3, [r3, #8]
 800d702:	2202      	movs	r2, #2
 800d704:	4013      	ands	r3, r2
 800d706:	2b02      	cmp	r3, #2
 800d708:	d112      	bne.n	800d730 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d70e:	881a      	ldrh	r2, [r3, #0]
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d71a:	1c9a      	adds	r2, r3, #2
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d724:	b29b      	uxth	r3, r3
 800d726:	3b01      	subs	r3, #1
 800d728:	b29a      	uxth	r2, r3
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d72e:	e012      	b.n	800d756 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d730:	f7fc f8f0 	bl	8009914 <HAL_GetTick>
 800d734:	0002      	movs	r2, r0
 800d736:	69bb      	ldr	r3, [r7, #24]
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	683a      	ldr	r2, [r7, #0]
 800d73c:	429a      	cmp	r2, r3
 800d73e:	d802      	bhi.n	800d746 <HAL_SPI_Transmit+0x18e>
 800d740:	683b      	ldr	r3, [r7, #0]
 800d742:	3301      	adds	r3, #1
 800d744:	d102      	bne.n	800d74c <HAL_SPI_Transmit+0x194>
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d104      	bne.n	800d756 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800d74c:	231f      	movs	r3, #31
 800d74e:	18fb      	adds	r3, r7, r3
 800d750:	2203      	movs	r2, #3
 800d752:	701a      	strb	r2, [r3, #0]
          goto error;
 800d754:	e079      	b.n	800d84a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d75a:	b29b      	uxth	r3, r3
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d1cd      	bne.n	800d6fc <HAL_SPI_Transmit+0x144>
 800d760:	e04f      	b.n	800d802 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	685b      	ldr	r3, [r3, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d004      	beq.n	800d774 <HAL_SPI_Transmit+0x1bc>
 800d76a:	2316      	movs	r3, #22
 800d76c:	18fb      	adds	r3, r7, r3
 800d76e:	881b      	ldrh	r3, [r3, #0]
 800d770:	2b01      	cmp	r3, #1
 800d772:	d141      	bne.n	800d7f8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	330c      	adds	r3, #12
 800d77e:	7812      	ldrb	r2, [r2, #0]
 800d780:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d786:	1c5a      	adds	r2, r3, #1
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d790:	b29b      	uxth	r3, r3
 800d792:	3b01      	subs	r3, #1
 800d794:	b29a      	uxth	r2, r3
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800d79a:	e02d      	b.n	800d7f8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	689b      	ldr	r3, [r3, #8]
 800d7a2:	2202      	movs	r2, #2
 800d7a4:	4013      	ands	r3, r2
 800d7a6:	2b02      	cmp	r3, #2
 800d7a8:	d113      	bne.n	800d7d2 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	330c      	adds	r3, #12
 800d7b4:	7812      	ldrb	r2, [r2, #0]
 800d7b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7bc:	1c5a      	adds	r2, r3, #1
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	3b01      	subs	r3, #1
 800d7ca:	b29a      	uxth	r2, r3
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d7d0:	e012      	b.n	800d7f8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7d2:	f7fc f89f 	bl	8009914 <HAL_GetTick>
 800d7d6:	0002      	movs	r2, r0
 800d7d8:	69bb      	ldr	r3, [r7, #24]
 800d7da:	1ad3      	subs	r3, r2, r3
 800d7dc:	683a      	ldr	r2, [r7, #0]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	d802      	bhi.n	800d7e8 <HAL_SPI_Transmit+0x230>
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	d102      	bne.n	800d7ee <HAL_SPI_Transmit+0x236>
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d104      	bne.n	800d7f8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800d7ee:	231f      	movs	r3, #31
 800d7f0:	18fb      	adds	r3, r7, r3
 800d7f2:	2203      	movs	r2, #3
 800d7f4:	701a      	strb	r2, [r3, #0]
          goto error;
 800d7f6:	e028      	b.n	800d84a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d7fc:	b29b      	uxth	r3, r3
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d1cc      	bne.n	800d79c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d802:	69ba      	ldr	r2, [r7, #24]
 800d804:	6839      	ldr	r1, [r7, #0]
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	0018      	movs	r0, r3
 800d80a:	f000 fccd 	bl	800e1a8 <SPI_EndRxTxTransaction>
 800d80e:	1e03      	subs	r3, r0, #0
 800d810:	d002      	beq.n	800d818 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2220      	movs	r2, #32
 800d816:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	689b      	ldr	r3, [r3, #8]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d10a      	bne.n	800d836 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d820:	2300      	movs	r3, #0
 800d822:	613b      	str	r3, [r7, #16]
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	68db      	ldr	r3, [r3, #12]
 800d82a:	613b      	str	r3, [r7, #16]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	689b      	ldr	r3, [r3, #8]
 800d832:	613b      	str	r3, [r7, #16]
 800d834:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d004      	beq.n	800d848 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 800d83e:	231f      	movs	r3, #31
 800d840:	18fb      	adds	r3, r7, r3
 800d842:	2201      	movs	r2, #1
 800d844:	701a      	strb	r2, [r3, #0]
 800d846:	e000      	b.n	800d84a <HAL_SPI_Transmit+0x292>
  }

error:
 800d848:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	225d      	movs	r2, #93	; 0x5d
 800d84e:	2101      	movs	r1, #1
 800d850:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	225c      	movs	r2, #92	; 0x5c
 800d856:	2100      	movs	r1, #0
 800d858:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800d85a:	231f      	movs	r3, #31
 800d85c:	18fb      	adds	r3, r7, r3
 800d85e:	781b      	ldrb	r3, [r3, #0]
}
 800d860:	0018      	movs	r0, r3
 800d862:	46bd      	mov	sp, r7
 800d864:	b008      	add	sp, #32
 800d866:	bd80      	pop	{r7, pc}

0800d868 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d868:	b590      	push	{r4, r7, lr}
 800d86a:	b089      	sub	sp, #36	; 0x24
 800d86c:	af02      	add	r7, sp, #8
 800d86e:	60f8      	str	r0, [r7, #12]
 800d870:	60b9      	str	r1, [r7, #8]
 800d872:	603b      	str	r3, [r7, #0]
 800d874:	1dbb      	adds	r3, r7, #6
 800d876:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d878:	2317      	movs	r3, #23
 800d87a:	18fb      	adds	r3, r7, r3
 800d87c:	2200      	movs	r2, #0
 800d87e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	685a      	ldr	r2, [r3, #4]
 800d884:	2382      	movs	r3, #130	; 0x82
 800d886:	005b      	lsls	r3, r3, #1
 800d888:	429a      	cmp	r2, r3
 800d88a:	d113      	bne.n	800d8b4 <HAL_SPI_Receive+0x4c>
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	689b      	ldr	r3, [r3, #8]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10f      	bne.n	800d8b4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	225d      	movs	r2, #93	; 0x5d
 800d898:	2104      	movs	r1, #4
 800d89a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d89c:	1dbb      	adds	r3, r7, #6
 800d89e:	881c      	ldrh	r4, [r3, #0]
 800d8a0:	68ba      	ldr	r2, [r7, #8]
 800d8a2:	68b9      	ldr	r1, [r7, #8]
 800d8a4:	68f8      	ldr	r0, [r7, #12]
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	9300      	str	r3, [sp, #0]
 800d8aa:	0023      	movs	r3, r4
 800d8ac:	f000 f928 	bl	800db00 <HAL_SPI_TransmitReceive>
 800d8b0:	0003      	movs	r3, r0
 800d8b2:	e11c      	b.n	800daee <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	225c      	movs	r2, #92	; 0x5c
 800d8b8:	5c9b      	ldrb	r3, [r3, r2]
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	d101      	bne.n	800d8c2 <HAL_SPI_Receive+0x5a>
 800d8be:	2302      	movs	r3, #2
 800d8c0:	e115      	b.n	800daee <HAL_SPI_Receive+0x286>
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	225c      	movs	r2, #92	; 0x5c
 800d8c6:	2101      	movs	r1, #1
 800d8c8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d8ca:	f7fc f823 	bl	8009914 <HAL_GetTick>
 800d8ce:	0003      	movs	r3, r0
 800d8d0:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	225d      	movs	r2, #93	; 0x5d
 800d8d6:	5c9b      	ldrb	r3, [r3, r2]
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d004      	beq.n	800d8e8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800d8de:	2317      	movs	r3, #23
 800d8e0:	18fb      	adds	r3, r7, r3
 800d8e2:	2202      	movs	r2, #2
 800d8e4:	701a      	strb	r2, [r3, #0]
    goto error;
 800d8e6:	e0f7      	b.n	800dad8 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d003      	beq.n	800d8f6 <HAL_SPI_Receive+0x8e>
 800d8ee:	1dbb      	adds	r3, r7, #6
 800d8f0:	881b      	ldrh	r3, [r3, #0]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d104      	bne.n	800d900 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800d8f6:	2317      	movs	r3, #23
 800d8f8:	18fb      	adds	r3, r7, r3
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	701a      	strb	r2, [r3, #0]
    goto error;
 800d8fe:	e0eb      	b.n	800dad8 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	225d      	movs	r2, #93	; 0x5d
 800d904:	2104      	movs	r1, #4
 800d906:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2200      	movs	r2, #0
 800d90c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	68ba      	ldr	r2, [r7, #8]
 800d912:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	1dba      	adds	r2, r7, #6
 800d918:	2144      	movs	r1, #68	; 0x44
 800d91a:	8812      	ldrh	r2, [r2, #0]
 800d91c:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	1dba      	adds	r2, r7, #6
 800d922:	2146      	movs	r1, #70	; 0x46
 800d924:	8812      	ldrh	r2, [r2, #0]
 800d926:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2200      	movs	r2, #0
 800d92c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2200      	movs	r2, #0
 800d932:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2200      	movs	r2, #0
 800d938:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2200      	movs	r2, #0
 800d93e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2200      	movs	r2, #0
 800d944:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	68da      	ldr	r2, [r3, #12]
 800d94a:	23e0      	movs	r3, #224	; 0xe0
 800d94c:	00db      	lsls	r3, r3, #3
 800d94e:	429a      	cmp	r2, r3
 800d950:	d908      	bls.n	800d964 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	685a      	ldr	r2, [r3, #4]
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4966      	ldr	r1, [pc, #408]	; (800daf8 <HAL_SPI_Receive+0x290>)
 800d95e:	400a      	ands	r2, r1
 800d960:	605a      	str	r2, [r3, #4]
 800d962:	e008      	b.n	800d976 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	685a      	ldr	r2, [r3, #4]
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2180      	movs	r1, #128	; 0x80
 800d970:	0149      	lsls	r1, r1, #5
 800d972:	430a      	orrs	r2, r1
 800d974:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	689a      	ldr	r2, [r3, #8]
 800d97a:	2380      	movs	r3, #128	; 0x80
 800d97c:	021b      	lsls	r3, r3, #8
 800d97e:	429a      	cmp	r2, r3
 800d980:	d10f      	bne.n	800d9a2 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2140      	movs	r1, #64	; 0x40
 800d98e:	438a      	bics	r2, r1
 800d990:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	681a      	ldr	r2, [r3, #0]
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4957      	ldr	r1, [pc, #348]	; (800dafc <HAL_SPI_Receive+0x294>)
 800d99e:	400a      	ands	r2, r1
 800d9a0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	2240      	movs	r2, #64	; 0x40
 800d9aa:	4013      	ands	r3, r2
 800d9ac:	2b40      	cmp	r3, #64	; 0x40
 800d9ae:	d007      	beq.n	800d9c0 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	681a      	ldr	r2, [r3, #0]
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	2140      	movs	r1, #64	; 0x40
 800d9bc:	430a      	orrs	r2, r1
 800d9be:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	68da      	ldr	r2, [r3, #12]
 800d9c4:	23e0      	movs	r3, #224	; 0xe0
 800d9c6:	00db      	lsls	r3, r3, #3
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d900      	bls.n	800d9ce <HAL_SPI_Receive+0x166>
 800d9cc:	e069      	b.n	800daa2 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d9ce:	e031      	b.n	800da34 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	2201      	movs	r2, #1
 800d9d8:	4013      	ands	r3, r2
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d117      	bne.n	800da0e <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	330c      	adds	r3, #12
 800d9e4:	001a      	movs	r2, r3
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ea:	7812      	ldrb	r2, [r2, #0]
 800d9ec:	b2d2      	uxtb	r2, r2
 800d9ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9f4:	1c5a      	adds	r2, r3, #1
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2246      	movs	r2, #70	; 0x46
 800d9fe:	5a9b      	ldrh	r3, [r3, r2]
 800da00:	b29b      	uxth	r3, r3
 800da02:	3b01      	subs	r3, #1
 800da04:	b299      	uxth	r1, r3
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2246      	movs	r2, #70	; 0x46
 800da0a:	5299      	strh	r1, [r3, r2]
 800da0c:	e012      	b.n	800da34 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da0e:	f7fb ff81 	bl	8009914 <HAL_GetTick>
 800da12:	0002      	movs	r2, r0
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	1ad3      	subs	r3, r2, r3
 800da18:	683a      	ldr	r2, [r7, #0]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d802      	bhi.n	800da24 <HAL_SPI_Receive+0x1bc>
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	3301      	adds	r3, #1
 800da22:	d102      	bne.n	800da2a <HAL_SPI_Receive+0x1c2>
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d104      	bne.n	800da34 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800da2a:	2317      	movs	r3, #23
 800da2c:	18fb      	adds	r3, r7, r3
 800da2e:	2203      	movs	r2, #3
 800da30:	701a      	strb	r2, [r3, #0]
          goto error;
 800da32:	e051      	b.n	800dad8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2246      	movs	r2, #70	; 0x46
 800da38:	5a9b      	ldrh	r3, [r3, r2]
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d1c7      	bne.n	800d9d0 <HAL_SPI_Receive+0x168>
 800da40:	e035      	b.n	800daae <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	689b      	ldr	r3, [r3, #8]
 800da48:	2201      	movs	r2, #1
 800da4a:	4013      	ands	r3, r2
 800da4c:	2b01      	cmp	r3, #1
 800da4e:	d115      	bne.n	800da7c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	68da      	ldr	r2, [r3, #12]
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da5a:	b292      	uxth	r2, r2
 800da5c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da62:	1c9a      	adds	r2, r3, #2
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	2246      	movs	r2, #70	; 0x46
 800da6c:	5a9b      	ldrh	r3, [r3, r2]
 800da6e:	b29b      	uxth	r3, r3
 800da70:	3b01      	subs	r3, #1
 800da72:	b299      	uxth	r1, r3
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	2246      	movs	r2, #70	; 0x46
 800da78:	5299      	strh	r1, [r3, r2]
 800da7a:	e012      	b.n	800daa2 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da7c:	f7fb ff4a 	bl	8009914 <HAL_GetTick>
 800da80:	0002      	movs	r2, r0
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	1ad3      	subs	r3, r2, r3
 800da86:	683a      	ldr	r2, [r7, #0]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d802      	bhi.n	800da92 <HAL_SPI_Receive+0x22a>
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	3301      	adds	r3, #1
 800da90:	d102      	bne.n	800da98 <HAL_SPI_Receive+0x230>
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d104      	bne.n	800daa2 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 800da98:	2317      	movs	r3, #23
 800da9a:	18fb      	adds	r3, r7, r3
 800da9c:	2203      	movs	r2, #3
 800da9e:	701a      	strb	r2, [r3, #0]
          goto error;
 800daa0:	e01a      	b.n	800dad8 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2246      	movs	r2, #70	; 0x46
 800daa6:	5a9b      	ldrh	r3, [r3, r2]
 800daa8:	b29b      	uxth	r3, r3
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d1c9      	bne.n	800da42 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800daae:	693a      	ldr	r2, [r7, #16]
 800dab0:	6839      	ldr	r1, [r7, #0]
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	0018      	movs	r0, r3
 800dab6:	f000 fb19 	bl	800e0ec <SPI_EndRxTransaction>
 800daba:	1e03      	subs	r3, r0, #0
 800dabc:	d002      	beq.n	800dac4 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2220      	movs	r2, #32
 800dac2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d004      	beq.n	800dad6 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800dacc:	2317      	movs	r3, #23
 800dace:	18fb      	adds	r3, r7, r3
 800dad0:	2201      	movs	r2, #1
 800dad2:	701a      	strb	r2, [r3, #0]
 800dad4:	e000      	b.n	800dad8 <HAL_SPI_Receive+0x270>
  }

error :
 800dad6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	225d      	movs	r2, #93	; 0x5d
 800dadc:	2101      	movs	r1, #1
 800dade:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	225c      	movs	r2, #92	; 0x5c
 800dae4:	2100      	movs	r1, #0
 800dae6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800dae8:	2317      	movs	r3, #23
 800daea:	18fb      	adds	r3, r7, r3
 800daec:	781b      	ldrb	r3, [r3, #0]
}
 800daee:	0018      	movs	r0, r3
 800daf0:	46bd      	mov	sp, r7
 800daf2:	b007      	add	sp, #28
 800daf4:	bd90      	pop	{r4, r7, pc}
 800daf6:	46c0      	nop			; (mov r8, r8)
 800daf8:	ffffefff 	.word	0xffffefff
 800dafc:	ffffbfff 	.word	0xffffbfff

0800db00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b08a      	sub	sp, #40	; 0x28
 800db04:	af00      	add	r7, sp, #0
 800db06:	60f8      	str	r0, [r7, #12]
 800db08:	60b9      	str	r1, [r7, #8]
 800db0a:	607a      	str	r2, [r7, #4]
 800db0c:	001a      	movs	r2, r3
 800db0e:	1cbb      	adds	r3, r7, #2
 800db10:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800db12:	2301      	movs	r3, #1
 800db14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800db16:	2323      	movs	r3, #35	; 0x23
 800db18:	18fb      	adds	r3, r7, r3
 800db1a:	2200      	movs	r2, #0
 800db1c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	225c      	movs	r2, #92	; 0x5c
 800db22:	5c9b      	ldrb	r3, [r3, r2]
 800db24:	2b01      	cmp	r3, #1
 800db26:	d101      	bne.n	800db2c <HAL_SPI_TransmitReceive+0x2c>
 800db28:	2302      	movs	r3, #2
 800db2a:	e1b5      	b.n	800de98 <HAL_SPI_TransmitReceive+0x398>
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	225c      	movs	r2, #92	; 0x5c
 800db30:	2101      	movs	r1, #1
 800db32:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db34:	f7fb feee 	bl	8009914 <HAL_GetTick>
 800db38:	0003      	movs	r3, r0
 800db3a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800db3c:	201b      	movs	r0, #27
 800db3e:	183b      	adds	r3, r7, r0
 800db40:	68fa      	ldr	r2, [r7, #12]
 800db42:	215d      	movs	r1, #93	; 0x5d
 800db44:	5c52      	ldrb	r2, [r2, r1]
 800db46:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800db4e:	2312      	movs	r3, #18
 800db50:	18fb      	adds	r3, r7, r3
 800db52:	1cba      	adds	r2, r7, #2
 800db54:	8812      	ldrh	r2, [r2, #0]
 800db56:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800db58:	183b      	adds	r3, r7, r0
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	d011      	beq.n	800db84 <HAL_SPI_TransmitReceive+0x84>
 800db60:	697a      	ldr	r2, [r7, #20]
 800db62:	2382      	movs	r3, #130	; 0x82
 800db64:	005b      	lsls	r3, r3, #1
 800db66:	429a      	cmp	r2, r3
 800db68:	d107      	bne.n	800db7a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d103      	bne.n	800db7a <HAL_SPI_TransmitReceive+0x7a>
 800db72:	183b      	adds	r3, r7, r0
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	2b04      	cmp	r3, #4
 800db78:	d004      	beq.n	800db84 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800db7a:	2323      	movs	r3, #35	; 0x23
 800db7c:	18fb      	adds	r3, r7, r3
 800db7e:	2202      	movs	r2, #2
 800db80:	701a      	strb	r2, [r3, #0]
    goto error;
 800db82:	e17e      	b.n	800de82 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d006      	beq.n	800db98 <HAL_SPI_TransmitReceive+0x98>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d003      	beq.n	800db98 <HAL_SPI_TransmitReceive+0x98>
 800db90:	1cbb      	adds	r3, r7, #2
 800db92:	881b      	ldrh	r3, [r3, #0]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d104      	bne.n	800dba2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800db98:	2323      	movs	r3, #35	; 0x23
 800db9a:	18fb      	adds	r3, r7, r3
 800db9c:	2201      	movs	r2, #1
 800db9e:	701a      	strb	r2, [r3, #0]
    goto error;
 800dba0:	e16f      	b.n	800de82 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	225d      	movs	r2, #93	; 0x5d
 800dba6:	5c9b      	ldrb	r3, [r3, r2]
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	2b04      	cmp	r3, #4
 800dbac:	d003      	beq.n	800dbb6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	225d      	movs	r2, #93	; 0x5d
 800dbb2:	2105      	movs	r1, #5
 800dbb4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	687a      	ldr	r2, [r7, #4]
 800dbc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	1cba      	adds	r2, r7, #2
 800dbc6:	2146      	movs	r1, #70	; 0x46
 800dbc8:	8812      	ldrh	r2, [r2, #0]
 800dbca:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	1cba      	adds	r2, r7, #2
 800dbd0:	2144      	movs	r1, #68	; 0x44
 800dbd2:	8812      	ldrh	r2, [r2, #0]
 800dbd4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	68ba      	ldr	r2, [r7, #8]
 800dbda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	1cba      	adds	r2, r7, #2
 800dbe0:	8812      	ldrh	r2, [r2, #0]
 800dbe2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	1cba      	adds	r2, r7, #2
 800dbe8:	8812      	ldrh	r2, [r2, #0]
 800dbea:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	68da      	ldr	r2, [r3, #12]
 800dbfc:	23e0      	movs	r3, #224	; 0xe0
 800dbfe:	00db      	lsls	r3, r3, #3
 800dc00:	429a      	cmp	r2, r3
 800dc02:	d908      	bls.n	800dc16 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	685a      	ldr	r2, [r3, #4]
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	49a4      	ldr	r1, [pc, #656]	; (800dea0 <HAL_SPI_TransmitReceive+0x3a0>)
 800dc10:	400a      	ands	r2, r1
 800dc12:	605a      	str	r2, [r3, #4]
 800dc14:	e008      	b.n	800dc28 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	685a      	ldr	r2, [r3, #4]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	2180      	movs	r1, #128	; 0x80
 800dc22:	0149      	lsls	r1, r1, #5
 800dc24:	430a      	orrs	r2, r1
 800dc26:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2240      	movs	r2, #64	; 0x40
 800dc30:	4013      	ands	r3, r2
 800dc32:	2b40      	cmp	r3, #64	; 0x40
 800dc34:	d007      	beq.n	800dc46 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	681a      	ldr	r2, [r3, #0]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	2140      	movs	r1, #64	; 0x40
 800dc42:	430a      	orrs	r2, r1
 800dc44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	68da      	ldr	r2, [r3, #12]
 800dc4a:	23e0      	movs	r3, #224	; 0xe0
 800dc4c:	00db      	lsls	r3, r3, #3
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d800      	bhi.n	800dc54 <HAL_SPI_TransmitReceive+0x154>
 800dc52:	e07f      	b.n	800dd54 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	685b      	ldr	r3, [r3, #4]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d005      	beq.n	800dc68 <HAL_SPI_TransmitReceive+0x168>
 800dc5c:	2312      	movs	r3, #18
 800dc5e:	18fb      	adds	r3, r7, r3
 800dc60:	881b      	ldrh	r3, [r3, #0]
 800dc62:	2b01      	cmp	r3, #1
 800dc64:	d000      	beq.n	800dc68 <HAL_SPI_TransmitReceive+0x168>
 800dc66:	e069      	b.n	800dd3c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc6c:	881a      	ldrh	r2, [r3, #0]
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc78:	1c9a      	adds	r2, r3, #2
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dc82:	b29b      	uxth	r3, r3
 800dc84:	3b01      	subs	r3, #1
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dc8c:	e056      	b.n	800dd3c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	689b      	ldr	r3, [r3, #8]
 800dc94:	2202      	movs	r2, #2
 800dc96:	4013      	ands	r3, r2
 800dc98:	2b02      	cmp	r3, #2
 800dc9a:	d11b      	bne.n	800dcd4 <HAL_SPI_TransmitReceive+0x1d4>
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d016      	beq.n	800dcd4 <HAL_SPI_TransmitReceive+0x1d4>
 800dca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d113      	bne.n	800dcd4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcb0:	881a      	ldrh	r2, [r3, #0]
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcbc:	1c9a      	adds	r2, r3, #2
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dcc6:	b29b      	uxth	r3, r3
 800dcc8:	3b01      	subs	r3, #1
 800dcca:	b29a      	uxth	r2, r3
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	689b      	ldr	r3, [r3, #8]
 800dcda:	2201      	movs	r2, #1
 800dcdc:	4013      	ands	r3, r2
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d11c      	bne.n	800dd1c <HAL_SPI_TransmitReceive+0x21c>
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2246      	movs	r2, #70	; 0x46
 800dce6:	5a9b      	ldrh	r3, [r3, r2]
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d016      	beq.n	800dd1c <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	68da      	ldr	r2, [r3, #12]
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcf8:	b292      	uxth	r2, r2
 800dcfa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd00:	1c9a      	adds	r2, r3, #2
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	2246      	movs	r2, #70	; 0x46
 800dd0a:	5a9b      	ldrh	r3, [r3, r2]
 800dd0c:	b29b      	uxth	r3, r3
 800dd0e:	3b01      	subs	r3, #1
 800dd10:	b299      	uxth	r1, r3
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2246      	movs	r2, #70	; 0x46
 800dd16:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800dd18:	2301      	movs	r3, #1
 800dd1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800dd1c:	f7fb fdfa 	bl	8009914 <HAL_GetTick>
 800dd20:	0002      	movs	r2, r0
 800dd22:	69fb      	ldr	r3, [r7, #28]
 800dd24:	1ad3      	subs	r3, r2, r3
 800dd26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d807      	bhi.n	800dd3c <HAL_SPI_TransmitReceive+0x23c>
 800dd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2e:	3301      	adds	r3, #1
 800dd30:	d004      	beq.n	800dd3c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800dd32:	2323      	movs	r3, #35	; 0x23
 800dd34:	18fb      	adds	r3, r7, r3
 800dd36:	2203      	movs	r2, #3
 800dd38:	701a      	strb	r2, [r3, #0]
        goto error;
 800dd3a:	e0a2      	b.n	800de82 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d1a3      	bne.n	800dc8e <HAL_SPI_TransmitReceive+0x18e>
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	2246      	movs	r2, #70	; 0x46
 800dd4a:	5a9b      	ldrh	r3, [r3, r2]
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d19d      	bne.n	800dc8e <HAL_SPI_TransmitReceive+0x18e>
 800dd52:	e085      	b.n	800de60 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d005      	beq.n	800dd68 <HAL_SPI_TransmitReceive+0x268>
 800dd5c:	2312      	movs	r3, #18
 800dd5e:	18fb      	adds	r3, r7, r3
 800dd60:	881b      	ldrh	r3, [r3, #0]
 800dd62:	2b01      	cmp	r3, #1
 800dd64:	d000      	beq.n	800dd68 <HAL_SPI_TransmitReceive+0x268>
 800dd66:	e070      	b.n	800de4a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	330c      	adds	r3, #12
 800dd72:	7812      	ldrb	r2, [r2, #0]
 800dd74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd7a:	1c5a      	adds	r2, r3, #1
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dd84:	b29b      	uxth	r3, r3
 800dd86:	3b01      	subs	r3, #1
 800dd88:	b29a      	uxth	r2, r3
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd8e:	e05c      	b.n	800de4a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	689b      	ldr	r3, [r3, #8]
 800dd96:	2202      	movs	r2, #2
 800dd98:	4013      	ands	r3, r2
 800dd9a:	2b02      	cmp	r3, #2
 800dd9c:	d11c      	bne.n	800ddd8 <HAL_SPI_TransmitReceive+0x2d8>
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d017      	beq.n	800ddd8 <HAL_SPI_TransmitReceive+0x2d8>
 800dda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d114      	bne.n	800ddd8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	330c      	adds	r3, #12
 800ddb8:	7812      	ldrb	r2, [r2, #0]
 800ddba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddc0:	1c5a      	adds	r2, r3, #1
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ddca:	b29b      	uxth	r3, r3
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	b29a      	uxth	r2, r3
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	689b      	ldr	r3, [r3, #8]
 800ddde:	2201      	movs	r2, #1
 800dde0:	4013      	ands	r3, r2
 800dde2:	2b01      	cmp	r3, #1
 800dde4:	d11e      	bne.n	800de24 <HAL_SPI_TransmitReceive+0x324>
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2246      	movs	r2, #70	; 0x46
 800ddea:	5a9b      	ldrh	r3, [r3, r2]
 800ddec:	b29b      	uxth	r3, r3
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d018      	beq.n	800de24 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	330c      	adds	r3, #12
 800ddf8:	001a      	movs	r2, r3
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddfe:	7812      	ldrb	r2, [r2, #0]
 800de00:	b2d2      	uxtb	r2, r2
 800de02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de08:	1c5a      	adds	r2, r3, #1
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2246      	movs	r2, #70	; 0x46
 800de12:	5a9b      	ldrh	r3, [r3, r2]
 800de14:	b29b      	uxth	r3, r3
 800de16:	3b01      	subs	r3, #1
 800de18:	b299      	uxth	r1, r3
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2246      	movs	r2, #70	; 0x46
 800de1e:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800de20:	2301      	movs	r3, #1
 800de22:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800de24:	f7fb fd76 	bl	8009914 <HAL_GetTick>
 800de28:	0002      	movs	r2, r0
 800de2a:	69fb      	ldr	r3, [r7, #28]
 800de2c:	1ad3      	subs	r3, r2, r3
 800de2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de30:	429a      	cmp	r2, r3
 800de32:	d802      	bhi.n	800de3a <HAL_SPI_TransmitReceive+0x33a>
 800de34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de36:	3301      	adds	r3, #1
 800de38:	d102      	bne.n	800de40 <HAL_SPI_TransmitReceive+0x340>
 800de3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d104      	bne.n	800de4a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800de40:	2323      	movs	r3, #35	; 0x23
 800de42:	18fb      	adds	r3, r7, r3
 800de44:	2203      	movs	r2, #3
 800de46:	701a      	strb	r2, [r3, #0]
        goto error;
 800de48:	e01b      	b.n	800de82 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800de4e:	b29b      	uxth	r3, r3
 800de50:	2b00      	cmp	r3, #0
 800de52:	d19d      	bne.n	800dd90 <HAL_SPI_TransmitReceive+0x290>
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	2246      	movs	r2, #70	; 0x46
 800de58:	5a9b      	ldrh	r3, [r3, r2]
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d197      	bne.n	800dd90 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800de60:	69fa      	ldr	r2, [r7, #28]
 800de62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	0018      	movs	r0, r3
 800de68:	f000 f99e 	bl	800e1a8 <SPI_EndRxTxTransaction>
 800de6c:	1e03      	subs	r3, r0, #0
 800de6e:	d007      	beq.n	800de80 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800de70:	2323      	movs	r3, #35	; 0x23
 800de72:	18fb      	adds	r3, r7, r3
 800de74:	2201      	movs	r2, #1
 800de76:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	2220      	movs	r2, #32
 800de7c:	661a      	str	r2, [r3, #96]	; 0x60
 800de7e:	e000      	b.n	800de82 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800de80:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	225d      	movs	r2, #93	; 0x5d
 800de86:	2101      	movs	r1, #1
 800de88:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	225c      	movs	r2, #92	; 0x5c
 800de8e:	2100      	movs	r1, #0
 800de90:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800de92:	2323      	movs	r3, #35	; 0x23
 800de94:	18fb      	adds	r3, r7, r3
 800de96:	781b      	ldrb	r3, [r3, #0]
}
 800de98:	0018      	movs	r0, r3
 800de9a:	46bd      	mov	sp, r7
 800de9c:	b00a      	add	sp, #40	; 0x28
 800de9e:	bd80      	pop	{r7, pc}
 800dea0:	ffffefff 	.word	0xffffefff

0800dea4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b088      	sub	sp, #32
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	60f8      	str	r0, [r7, #12]
 800deac:	60b9      	str	r1, [r7, #8]
 800deae:	603b      	str	r3, [r7, #0]
 800deb0:	1dfb      	adds	r3, r7, #7
 800deb2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800deb4:	f7fb fd2e 	bl	8009914 <HAL_GetTick>
 800deb8:	0002      	movs	r2, r0
 800deba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800debc:	1a9b      	subs	r3, r3, r2
 800debe:	683a      	ldr	r2, [r7, #0]
 800dec0:	18d3      	adds	r3, r2, r3
 800dec2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800dec4:	f7fb fd26 	bl	8009914 <HAL_GetTick>
 800dec8:	0003      	movs	r3, r0
 800deca:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800decc:	4b3a      	ldr	r3, [pc, #232]	; (800dfb8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	015b      	lsls	r3, r3, #5
 800ded2:	0d1b      	lsrs	r3, r3, #20
 800ded4:	69fa      	ldr	r2, [r7, #28]
 800ded6:	4353      	muls	r3, r2
 800ded8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800deda:	e058      	b.n	800df8e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	3301      	adds	r3, #1
 800dee0:	d055      	beq.n	800df8e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dee2:	f7fb fd17 	bl	8009914 <HAL_GetTick>
 800dee6:	0002      	movs	r2, r0
 800dee8:	69bb      	ldr	r3, [r7, #24]
 800deea:	1ad3      	subs	r3, r2, r3
 800deec:	69fa      	ldr	r2, [r7, #28]
 800deee:	429a      	cmp	r2, r3
 800def0:	d902      	bls.n	800def8 <SPI_WaitFlagStateUntilTimeout+0x54>
 800def2:	69fb      	ldr	r3, [r7, #28]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d142      	bne.n	800df7e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	685a      	ldr	r2, [r3, #4]
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	21e0      	movs	r1, #224	; 0xe0
 800df04:	438a      	bics	r2, r1
 800df06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	685a      	ldr	r2, [r3, #4]
 800df0c:	2382      	movs	r3, #130	; 0x82
 800df0e:	005b      	lsls	r3, r3, #1
 800df10:	429a      	cmp	r2, r3
 800df12:	d113      	bne.n	800df3c <SPI_WaitFlagStateUntilTimeout+0x98>
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	689a      	ldr	r2, [r3, #8]
 800df18:	2380      	movs	r3, #128	; 0x80
 800df1a:	021b      	lsls	r3, r3, #8
 800df1c:	429a      	cmp	r2, r3
 800df1e:	d005      	beq.n	800df2c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	689a      	ldr	r2, [r3, #8]
 800df24:	2380      	movs	r3, #128	; 0x80
 800df26:	00db      	lsls	r3, r3, #3
 800df28:	429a      	cmp	r2, r3
 800df2a:	d107      	bne.n	800df3c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	681a      	ldr	r2, [r3, #0]
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	2140      	movs	r1, #64	; 0x40
 800df38:	438a      	bics	r2, r1
 800df3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800df40:	2380      	movs	r3, #128	; 0x80
 800df42:	019b      	lsls	r3, r3, #6
 800df44:	429a      	cmp	r2, r3
 800df46:	d110      	bne.n	800df6a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	491a      	ldr	r1, [pc, #104]	; (800dfbc <SPI_WaitFlagStateUntilTimeout+0x118>)
 800df54:	400a      	ands	r2, r1
 800df56:	601a      	str	r2, [r3, #0]
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	681a      	ldr	r2, [r3, #0]
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	2180      	movs	r1, #128	; 0x80
 800df64:	0189      	lsls	r1, r1, #6
 800df66:	430a      	orrs	r2, r1
 800df68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	225d      	movs	r2, #93	; 0x5d
 800df6e:	2101      	movs	r1, #1
 800df70:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	225c      	movs	r2, #92	; 0x5c
 800df76:	2100      	movs	r1, #0
 800df78:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800df7a:	2303      	movs	r3, #3
 800df7c:	e017      	b.n	800dfae <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d101      	bne.n	800df88 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800df84:	2300      	movs	r3, #0
 800df86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	3b01      	subs	r3, #1
 800df8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	689b      	ldr	r3, [r3, #8]
 800df94:	68ba      	ldr	r2, [r7, #8]
 800df96:	4013      	ands	r3, r2
 800df98:	68ba      	ldr	r2, [r7, #8]
 800df9a:	1ad3      	subs	r3, r2, r3
 800df9c:	425a      	negs	r2, r3
 800df9e:	4153      	adcs	r3, r2
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	001a      	movs	r2, r3
 800dfa4:	1dfb      	adds	r3, r7, #7
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	d197      	bne.n	800dedc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	0018      	movs	r0, r3
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	b008      	add	sp, #32
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	46c0      	nop			; (mov r8, r8)
 800dfb8:	2000014c 	.word	0x2000014c
 800dfbc:	ffffdfff 	.word	0xffffdfff

0800dfc0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b088      	sub	sp, #32
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	607a      	str	r2, [r7, #4]
 800dfcc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800dfce:	f7fb fca1 	bl	8009914 <HAL_GetTick>
 800dfd2:	0002      	movs	r2, r0
 800dfd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd6:	1a9b      	subs	r3, r3, r2
 800dfd8:	683a      	ldr	r2, [r7, #0]
 800dfda:	18d3      	adds	r3, r2, r3
 800dfdc:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800dfde:	f7fb fc99 	bl	8009914 <HAL_GetTick>
 800dfe2:	0003      	movs	r3, r0
 800dfe4:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800dfe6:	4b3f      	ldr	r3, [pc, #252]	; (800e0e4 <SPI_WaitFifoStateUntilTimeout+0x124>)
 800dfe8:	681a      	ldr	r2, [r3, #0]
 800dfea:	0013      	movs	r3, r2
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	189b      	adds	r3, r3, r2
 800dff0:	00da      	lsls	r2, r3, #3
 800dff2:	1ad3      	subs	r3, r2, r3
 800dff4:	0d1b      	lsrs	r3, r3, #20
 800dff6:	69fa      	ldr	r2, [r7, #28]
 800dff8:	4353      	muls	r3, r2
 800dffa:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800dffc:	e064      	b.n	800e0c8 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800dffe:	68ba      	ldr	r2, [r7, #8]
 800e000:	23c0      	movs	r3, #192	; 0xc0
 800e002:	00db      	lsls	r3, r3, #3
 800e004:	429a      	cmp	r2, r3
 800e006:	d106      	bne.n	800e016 <SPI_WaitFifoStateUntilTimeout+0x56>
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d103      	bne.n	800e016 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	330c      	adds	r3, #12
 800e014:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	3301      	adds	r3, #1
 800e01a:	d055      	beq.n	800e0c8 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e01c:	f7fb fc7a 	bl	8009914 <HAL_GetTick>
 800e020:	0002      	movs	r2, r0
 800e022:	69bb      	ldr	r3, [r7, #24]
 800e024:	1ad3      	subs	r3, r2, r3
 800e026:	69fa      	ldr	r2, [r7, #28]
 800e028:	429a      	cmp	r2, r3
 800e02a:	d902      	bls.n	800e032 <SPI_WaitFifoStateUntilTimeout+0x72>
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d142      	bne.n	800e0b8 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	685a      	ldr	r2, [r3, #4]
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	21e0      	movs	r1, #224	; 0xe0
 800e03e:	438a      	bics	r2, r1
 800e040:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	685a      	ldr	r2, [r3, #4]
 800e046:	2382      	movs	r3, #130	; 0x82
 800e048:	005b      	lsls	r3, r3, #1
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d113      	bne.n	800e076 <SPI_WaitFifoStateUntilTimeout+0xb6>
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	689a      	ldr	r2, [r3, #8]
 800e052:	2380      	movs	r3, #128	; 0x80
 800e054:	021b      	lsls	r3, r3, #8
 800e056:	429a      	cmp	r2, r3
 800e058:	d005      	beq.n	800e066 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	689a      	ldr	r2, [r3, #8]
 800e05e:	2380      	movs	r3, #128	; 0x80
 800e060:	00db      	lsls	r3, r3, #3
 800e062:	429a      	cmp	r2, r3
 800e064:	d107      	bne.n	800e076 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	2140      	movs	r1, #64	; 0x40
 800e072:	438a      	bics	r2, r1
 800e074:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e07a:	2380      	movs	r3, #128	; 0x80
 800e07c:	019b      	lsls	r3, r3, #6
 800e07e:	429a      	cmp	r2, r3
 800e080:	d110      	bne.n	800e0a4 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	681a      	ldr	r2, [r3, #0]
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4916      	ldr	r1, [pc, #88]	; (800e0e8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800e08e:	400a      	ands	r2, r1
 800e090:	601a      	str	r2, [r3, #0]
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	681a      	ldr	r2, [r3, #0]
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2180      	movs	r1, #128	; 0x80
 800e09e:	0189      	lsls	r1, r1, #6
 800e0a0:	430a      	orrs	r2, r1
 800e0a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	225d      	movs	r2, #93	; 0x5d
 800e0a8:	2101      	movs	r1, #1
 800e0aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	225c      	movs	r2, #92	; 0x5c
 800e0b0:	2100      	movs	r1, #0
 800e0b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800e0b4:	2303      	movs	r3, #3
 800e0b6:	e010      	b.n	800e0da <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d101      	bne.n	800e0c2 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	3b01      	subs	r3, #1
 800e0c6:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	689b      	ldr	r3, [r3, #8]
 800e0ce:	68ba      	ldr	r2, [r7, #8]
 800e0d0:	4013      	ands	r3, r2
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d192      	bne.n	800dffe <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800e0d8:	2300      	movs	r3, #0
}
 800e0da:	0018      	movs	r0, r3
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	b008      	add	sp, #32
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	46c0      	nop			; (mov r8, r8)
 800e0e4:	2000014c 	.word	0x2000014c
 800e0e8:	ffffdfff 	.word	0xffffdfff

0800e0ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b086      	sub	sp, #24
 800e0f0:	af02      	add	r7, sp, #8
 800e0f2:	60f8      	str	r0, [r7, #12]
 800e0f4:	60b9      	str	r1, [r7, #8]
 800e0f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	685a      	ldr	r2, [r3, #4]
 800e0fc:	2382      	movs	r3, #130	; 0x82
 800e0fe:	005b      	lsls	r3, r3, #1
 800e100:	429a      	cmp	r2, r3
 800e102:	d113      	bne.n	800e12c <SPI_EndRxTransaction+0x40>
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	689a      	ldr	r2, [r3, #8]
 800e108:	2380      	movs	r3, #128	; 0x80
 800e10a:	021b      	lsls	r3, r3, #8
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d005      	beq.n	800e11c <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	689a      	ldr	r2, [r3, #8]
 800e114:	2380      	movs	r3, #128	; 0x80
 800e116:	00db      	lsls	r3, r3, #3
 800e118:	429a      	cmp	r2, r3
 800e11a:	d107      	bne.n	800e12c <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	681a      	ldr	r2, [r3, #0]
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	2140      	movs	r1, #64	; 0x40
 800e128:	438a      	bics	r2, r1
 800e12a:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e12c:	68ba      	ldr	r2, [r7, #8]
 800e12e:	68f8      	ldr	r0, [r7, #12]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	9300      	str	r3, [sp, #0]
 800e134:	0013      	movs	r3, r2
 800e136:	2200      	movs	r2, #0
 800e138:	2180      	movs	r1, #128	; 0x80
 800e13a:	f7ff feb3 	bl	800dea4 <SPI_WaitFlagStateUntilTimeout>
 800e13e:	1e03      	subs	r3, r0, #0
 800e140:	d007      	beq.n	800e152 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e146:	2220      	movs	r2, #32
 800e148:	431a      	orrs	r2, r3
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e14e:	2303      	movs	r3, #3
 800e150:	e026      	b.n	800e1a0 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	685a      	ldr	r2, [r3, #4]
 800e156:	2382      	movs	r3, #130	; 0x82
 800e158:	005b      	lsls	r3, r3, #1
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d11f      	bne.n	800e19e <SPI_EndRxTransaction+0xb2>
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	689a      	ldr	r2, [r3, #8]
 800e162:	2380      	movs	r3, #128	; 0x80
 800e164:	021b      	lsls	r3, r3, #8
 800e166:	429a      	cmp	r2, r3
 800e168:	d005      	beq.n	800e176 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	689a      	ldr	r2, [r3, #8]
 800e16e:	2380      	movs	r3, #128	; 0x80
 800e170:	00db      	lsls	r3, r3, #3
 800e172:	429a      	cmp	r2, r3
 800e174:	d113      	bne.n	800e19e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e176:	68ba      	ldr	r2, [r7, #8]
 800e178:	23c0      	movs	r3, #192	; 0xc0
 800e17a:	00d9      	lsls	r1, r3, #3
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	9300      	str	r3, [sp, #0]
 800e182:	0013      	movs	r3, r2
 800e184:	2200      	movs	r2, #0
 800e186:	f7ff ff1b 	bl	800dfc0 <SPI_WaitFifoStateUntilTimeout>
 800e18a:	1e03      	subs	r3, r0, #0
 800e18c:	d007      	beq.n	800e19e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e192:	2220      	movs	r2, #32
 800e194:	431a      	orrs	r2, r3
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800e19a:	2303      	movs	r3, #3
 800e19c:	e000      	b.n	800e1a0 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800e19e:	2300      	movs	r3, #0
}
 800e1a0:	0018      	movs	r0, r3
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	b004      	add	sp, #16
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af02      	add	r7, sp, #8
 800e1ae:	60f8      	str	r0, [r7, #12]
 800e1b0:	60b9      	str	r1, [r7, #8]
 800e1b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e1b4:	68ba      	ldr	r2, [r7, #8]
 800e1b6:	23c0      	movs	r3, #192	; 0xc0
 800e1b8:	0159      	lsls	r1, r3, #5
 800e1ba:	68f8      	ldr	r0, [r7, #12]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	9300      	str	r3, [sp, #0]
 800e1c0:	0013      	movs	r3, r2
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f7ff fefc 	bl	800dfc0 <SPI_WaitFifoStateUntilTimeout>
 800e1c8:	1e03      	subs	r3, r0, #0
 800e1ca:	d007      	beq.n	800e1dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1d0:	2220      	movs	r2, #32
 800e1d2:	431a      	orrs	r2, r3
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e1d8:	2303      	movs	r3, #3
 800e1da:	e027      	b.n	800e22c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e1dc:	68ba      	ldr	r2, [r7, #8]
 800e1de:	68f8      	ldr	r0, [r7, #12]
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	9300      	str	r3, [sp, #0]
 800e1e4:	0013      	movs	r3, r2
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	2180      	movs	r1, #128	; 0x80
 800e1ea:	f7ff fe5b 	bl	800dea4 <SPI_WaitFlagStateUntilTimeout>
 800e1ee:	1e03      	subs	r3, r0, #0
 800e1f0:	d007      	beq.n	800e202 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1f6:	2220      	movs	r2, #32
 800e1f8:	431a      	orrs	r2, r3
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e1fe:	2303      	movs	r3, #3
 800e200:	e014      	b.n	800e22c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e202:	68ba      	ldr	r2, [r7, #8]
 800e204:	23c0      	movs	r3, #192	; 0xc0
 800e206:	00d9      	lsls	r1, r3, #3
 800e208:	68f8      	ldr	r0, [r7, #12]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	9300      	str	r3, [sp, #0]
 800e20e:	0013      	movs	r3, r2
 800e210:	2200      	movs	r2, #0
 800e212:	f7ff fed5 	bl	800dfc0 <SPI_WaitFifoStateUntilTimeout>
 800e216:	1e03      	subs	r3, r0, #0
 800e218:	d007      	beq.n	800e22a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e21e:	2220      	movs	r2, #32
 800e220:	431a      	orrs	r2, r3
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800e226:	2303      	movs	r3, #3
 800e228:	e000      	b.n	800e22c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800e22a:	2300      	movs	r3, #0
}
 800e22c:	0018      	movs	r0, r3
 800e22e:	46bd      	mov	sp, r7
 800e230:	b004      	add	sp, #16
 800e232:	bd80      	pop	{r7, pc}

0800e234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d101      	bne.n	800e246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e242:	2301      	movs	r3, #1
 800e244:	e04a      	b.n	800e2dc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	223d      	movs	r2, #61	; 0x3d
 800e24a:	5c9b      	ldrb	r3, [r3, r2]
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d107      	bne.n	800e262 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	223c      	movs	r2, #60	; 0x3c
 800e256:	2100      	movs	r1, #0
 800e258:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	0018      	movs	r0, r3
 800e25e:	f7fa fa83 	bl	8008768 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	223d      	movs	r2, #61	; 0x3d
 800e266:	2102      	movs	r1, #2
 800e268:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	3304      	adds	r3, #4
 800e272:	0019      	movs	r1, r3
 800e274:	0010      	movs	r0, r2
 800e276:	f000 fceb 	bl	800ec50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2248      	movs	r2, #72	; 0x48
 800e27e:	2101      	movs	r1, #1
 800e280:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	223e      	movs	r2, #62	; 0x3e
 800e286:	2101      	movs	r1, #1
 800e288:	5499      	strb	r1, [r3, r2]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	223f      	movs	r2, #63	; 0x3f
 800e28e:	2101      	movs	r1, #1
 800e290:	5499      	strb	r1, [r3, r2]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	2240      	movs	r2, #64	; 0x40
 800e296:	2101      	movs	r1, #1
 800e298:	5499      	strb	r1, [r3, r2]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2241      	movs	r2, #65	; 0x41
 800e29e:	2101      	movs	r1, #1
 800e2a0:	5499      	strb	r1, [r3, r2]
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2242      	movs	r2, #66	; 0x42
 800e2a6:	2101      	movs	r1, #1
 800e2a8:	5499      	strb	r1, [r3, r2]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2243      	movs	r2, #67	; 0x43
 800e2ae:	2101      	movs	r1, #1
 800e2b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2244      	movs	r2, #68	; 0x44
 800e2b6:	2101      	movs	r1, #1
 800e2b8:	5499      	strb	r1, [r3, r2]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2245      	movs	r2, #69	; 0x45
 800e2be:	2101      	movs	r1, #1
 800e2c0:	5499      	strb	r1, [r3, r2]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2246      	movs	r2, #70	; 0x46
 800e2c6:	2101      	movs	r1, #1
 800e2c8:	5499      	strb	r1, [r3, r2]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2247      	movs	r2, #71	; 0x47
 800e2ce:	2101      	movs	r1, #1
 800e2d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	223d      	movs	r2, #61	; 0x3d
 800e2d6:	2101      	movs	r1, #1
 800e2d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e2da:	2300      	movs	r3, #0
}
 800e2dc:	0018      	movs	r0, r3
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	b002      	add	sp, #8
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b084      	sub	sp, #16
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	223d      	movs	r2, #61	; 0x3d
 800e2f0:	5c9b      	ldrb	r3, [r3, r2]
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d001      	beq.n	800e2fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	e03c      	b.n	800e376 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	223d      	movs	r2, #61	; 0x3d
 800e300:	2102      	movs	r1, #2
 800e302:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	68da      	ldr	r2, [r3, #12]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	2101      	movs	r1, #1
 800e310:	430a      	orrs	r2, r1
 800e312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	4a19      	ldr	r2, [pc, #100]	; (800e380 <HAL_TIM_Base_Start_IT+0x9c>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d009      	beq.n	800e332 <HAL_TIM_Base_Start_IT+0x4e>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	4a18      	ldr	r2, [pc, #96]	; (800e384 <HAL_TIM_Base_Start_IT+0xa0>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d004      	beq.n	800e332 <HAL_TIM_Base_Start_IT+0x4e>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a16      	ldr	r2, [pc, #88]	; (800e388 <HAL_TIM_Base_Start_IT+0xa4>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d116      	bne.n	800e360 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	689b      	ldr	r3, [r3, #8]
 800e338:	4a14      	ldr	r2, [pc, #80]	; (800e38c <HAL_TIM_Base_Start_IT+0xa8>)
 800e33a:	4013      	ands	r3, r2
 800e33c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2b06      	cmp	r3, #6
 800e342:	d016      	beq.n	800e372 <HAL_TIM_Base_Start_IT+0x8e>
 800e344:	68fa      	ldr	r2, [r7, #12]
 800e346:	2380      	movs	r3, #128	; 0x80
 800e348:	025b      	lsls	r3, r3, #9
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d011      	beq.n	800e372 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	681a      	ldr	r2, [r3, #0]
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	2101      	movs	r1, #1
 800e35a:	430a      	orrs	r2, r1
 800e35c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e35e:	e008      	b.n	800e372 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	2101      	movs	r1, #1
 800e36c:	430a      	orrs	r2, r1
 800e36e:	601a      	str	r2, [r3, #0]
 800e370:	e000      	b.n	800e374 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e372:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800e374:	2300      	movs	r3, #0
}
 800e376:	0018      	movs	r0, r3
 800e378:	46bd      	mov	sp, r7
 800e37a:	b004      	add	sp, #16
 800e37c:	bd80      	pop	{r7, pc}
 800e37e:	46c0      	nop			; (mov r8, r8)
 800e380:	40012c00 	.word	0x40012c00
 800e384:	40000400 	.word	0x40000400
 800e388:	40014000 	.word	0x40014000
 800e38c:	00010007 	.word	0x00010007

0800e390 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b082      	sub	sp, #8
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d101      	bne.n	800e3a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	e04a      	b.n	800e438 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	223d      	movs	r2, #61	; 0x3d
 800e3a6:	5c9b      	ldrb	r3, [r3, r2]
 800e3a8:	b2db      	uxtb	r3, r3
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d107      	bne.n	800e3be <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	223c      	movs	r2, #60	; 0x3c
 800e3b2:	2100      	movs	r1, #0
 800e3b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	0018      	movs	r0, r3
 800e3ba:	f000 f841 	bl	800e440 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	223d      	movs	r2, #61	; 0x3d
 800e3c2:	2102      	movs	r1, #2
 800e3c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	3304      	adds	r3, #4
 800e3ce:	0019      	movs	r1, r3
 800e3d0:	0010      	movs	r0, r2
 800e3d2:	f000 fc3d 	bl	800ec50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2248      	movs	r2, #72	; 0x48
 800e3da:	2101      	movs	r1, #1
 800e3dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	223e      	movs	r2, #62	; 0x3e
 800e3e2:	2101      	movs	r1, #1
 800e3e4:	5499      	strb	r1, [r3, r2]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	223f      	movs	r2, #63	; 0x3f
 800e3ea:	2101      	movs	r1, #1
 800e3ec:	5499      	strb	r1, [r3, r2]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2240      	movs	r2, #64	; 0x40
 800e3f2:	2101      	movs	r1, #1
 800e3f4:	5499      	strb	r1, [r3, r2]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2241      	movs	r2, #65	; 0x41
 800e3fa:	2101      	movs	r1, #1
 800e3fc:	5499      	strb	r1, [r3, r2]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2242      	movs	r2, #66	; 0x42
 800e402:	2101      	movs	r1, #1
 800e404:	5499      	strb	r1, [r3, r2]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2243      	movs	r2, #67	; 0x43
 800e40a:	2101      	movs	r1, #1
 800e40c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2244      	movs	r2, #68	; 0x44
 800e412:	2101      	movs	r1, #1
 800e414:	5499      	strb	r1, [r3, r2]
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	2245      	movs	r2, #69	; 0x45
 800e41a:	2101      	movs	r1, #1
 800e41c:	5499      	strb	r1, [r3, r2]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2246      	movs	r2, #70	; 0x46
 800e422:	2101      	movs	r1, #1
 800e424:	5499      	strb	r1, [r3, r2]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2247      	movs	r2, #71	; 0x47
 800e42a:	2101      	movs	r1, #1
 800e42c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	223d      	movs	r2, #61	; 0x3d
 800e432:	2101      	movs	r1, #1
 800e434:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e436:	2300      	movs	r3, #0
}
 800e438:	0018      	movs	r0, r3
 800e43a:	46bd      	mov	sp, r7
 800e43c:	b002      	add	sp, #8
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e448:	46c0      	nop			; (mov r8, r8)
 800e44a:	46bd      	mov	sp, r7
 800e44c:	b002      	add	sp, #8
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e45a:	683b      	ldr	r3, [r7, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d108      	bne.n	800e472 <HAL_TIM_PWM_Start+0x22>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	223e      	movs	r2, #62	; 0x3e
 800e464:	5c9b      	ldrb	r3, [r3, r2]
 800e466:	b2db      	uxtb	r3, r3
 800e468:	3b01      	subs	r3, #1
 800e46a:	1e5a      	subs	r2, r3, #1
 800e46c:	4193      	sbcs	r3, r2
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	e037      	b.n	800e4e2 <HAL_TIM_PWM_Start+0x92>
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	2b04      	cmp	r3, #4
 800e476:	d108      	bne.n	800e48a <HAL_TIM_PWM_Start+0x3a>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	223f      	movs	r2, #63	; 0x3f
 800e47c:	5c9b      	ldrb	r3, [r3, r2]
 800e47e:	b2db      	uxtb	r3, r3
 800e480:	3b01      	subs	r3, #1
 800e482:	1e5a      	subs	r2, r3, #1
 800e484:	4193      	sbcs	r3, r2
 800e486:	b2db      	uxtb	r3, r3
 800e488:	e02b      	b.n	800e4e2 <HAL_TIM_PWM_Start+0x92>
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	2b08      	cmp	r3, #8
 800e48e:	d108      	bne.n	800e4a2 <HAL_TIM_PWM_Start+0x52>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	2240      	movs	r2, #64	; 0x40
 800e494:	5c9b      	ldrb	r3, [r3, r2]
 800e496:	b2db      	uxtb	r3, r3
 800e498:	3b01      	subs	r3, #1
 800e49a:	1e5a      	subs	r2, r3, #1
 800e49c:	4193      	sbcs	r3, r2
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	e01f      	b.n	800e4e2 <HAL_TIM_PWM_Start+0x92>
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	2b0c      	cmp	r3, #12
 800e4a6:	d108      	bne.n	800e4ba <HAL_TIM_PWM_Start+0x6a>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	2241      	movs	r2, #65	; 0x41
 800e4ac:	5c9b      	ldrb	r3, [r3, r2]
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	3b01      	subs	r3, #1
 800e4b2:	1e5a      	subs	r2, r3, #1
 800e4b4:	4193      	sbcs	r3, r2
 800e4b6:	b2db      	uxtb	r3, r3
 800e4b8:	e013      	b.n	800e4e2 <HAL_TIM_PWM_Start+0x92>
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	2b10      	cmp	r3, #16
 800e4be:	d108      	bne.n	800e4d2 <HAL_TIM_PWM_Start+0x82>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2242      	movs	r2, #66	; 0x42
 800e4c4:	5c9b      	ldrb	r3, [r3, r2]
 800e4c6:	b2db      	uxtb	r3, r3
 800e4c8:	3b01      	subs	r3, #1
 800e4ca:	1e5a      	subs	r2, r3, #1
 800e4cc:	4193      	sbcs	r3, r2
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	e007      	b.n	800e4e2 <HAL_TIM_PWM_Start+0x92>
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2243      	movs	r2, #67	; 0x43
 800e4d6:	5c9b      	ldrb	r3, [r3, r2]
 800e4d8:	b2db      	uxtb	r3, r3
 800e4da:	3b01      	subs	r3, #1
 800e4dc:	1e5a      	subs	r2, r3, #1
 800e4de:	4193      	sbcs	r3, r2
 800e4e0:	b2db      	uxtb	r3, r3
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d001      	beq.n	800e4ea <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	e085      	b.n	800e5f6 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d104      	bne.n	800e4fa <HAL_TIM_PWM_Start+0xaa>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	223e      	movs	r2, #62	; 0x3e
 800e4f4:	2102      	movs	r1, #2
 800e4f6:	5499      	strb	r1, [r3, r2]
 800e4f8:	e023      	b.n	800e542 <HAL_TIM_PWM_Start+0xf2>
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	2b04      	cmp	r3, #4
 800e4fe:	d104      	bne.n	800e50a <HAL_TIM_PWM_Start+0xba>
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	223f      	movs	r2, #63	; 0x3f
 800e504:	2102      	movs	r1, #2
 800e506:	5499      	strb	r1, [r3, r2]
 800e508:	e01b      	b.n	800e542 <HAL_TIM_PWM_Start+0xf2>
 800e50a:	683b      	ldr	r3, [r7, #0]
 800e50c:	2b08      	cmp	r3, #8
 800e50e:	d104      	bne.n	800e51a <HAL_TIM_PWM_Start+0xca>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	2240      	movs	r2, #64	; 0x40
 800e514:	2102      	movs	r1, #2
 800e516:	5499      	strb	r1, [r3, r2]
 800e518:	e013      	b.n	800e542 <HAL_TIM_PWM_Start+0xf2>
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	2b0c      	cmp	r3, #12
 800e51e:	d104      	bne.n	800e52a <HAL_TIM_PWM_Start+0xda>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	2241      	movs	r2, #65	; 0x41
 800e524:	2102      	movs	r1, #2
 800e526:	5499      	strb	r1, [r3, r2]
 800e528:	e00b      	b.n	800e542 <HAL_TIM_PWM_Start+0xf2>
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	2b10      	cmp	r3, #16
 800e52e:	d104      	bne.n	800e53a <HAL_TIM_PWM_Start+0xea>
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2242      	movs	r2, #66	; 0x42
 800e534:	2102      	movs	r1, #2
 800e536:	5499      	strb	r1, [r3, r2]
 800e538:	e003      	b.n	800e542 <HAL_TIM_PWM_Start+0xf2>
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2243      	movs	r2, #67	; 0x43
 800e53e:	2102      	movs	r1, #2
 800e540:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	6839      	ldr	r1, [r7, #0]
 800e548:	2201      	movs	r2, #1
 800e54a:	0018      	movs	r0, r3
 800e54c:	f000 ff56 	bl	800f3fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4a2a      	ldr	r2, [pc, #168]	; (800e600 <HAL_TIM_PWM_Start+0x1b0>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d00e      	beq.n	800e578 <HAL_TIM_PWM_Start+0x128>
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	4a29      	ldr	r2, [pc, #164]	; (800e604 <HAL_TIM_PWM_Start+0x1b4>)
 800e560:	4293      	cmp	r3, r2
 800e562:	d009      	beq.n	800e578 <HAL_TIM_PWM_Start+0x128>
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4a27      	ldr	r2, [pc, #156]	; (800e608 <HAL_TIM_PWM_Start+0x1b8>)
 800e56a:	4293      	cmp	r3, r2
 800e56c:	d004      	beq.n	800e578 <HAL_TIM_PWM_Start+0x128>
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	4a26      	ldr	r2, [pc, #152]	; (800e60c <HAL_TIM_PWM_Start+0x1bc>)
 800e574:	4293      	cmp	r3, r2
 800e576:	d101      	bne.n	800e57c <HAL_TIM_PWM_Start+0x12c>
 800e578:	2301      	movs	r3, #1
 800e57a:	e000      	b.n	800e57e <HAL_TIM_PWM_Start+0x12e>
 800e57c:	2300      	movs	r3, #0
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d008      	beq.n	800e594 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	2180      	movs	r1, #128	; 0x80
 800e58e:	0209      	lsls	r1, r1, #8
 800e590:	430a      	orrs	r2, r1
 800e592:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4a19      	ldr	r2, [pc, #100]	; (800e600 <HAL_TIM_PWM_Start+0x1b0>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d009      	beq.n	800e5b2 <HAL_TIM_PWM_Start+0x162>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	4a1b      	ldr	r2, [pc, #108]	; (800e610 <HAL_TIM_PWM_Start+0x1c0>)
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	d004      	beq.n	800e5b2 <HAL_TIM_PWM_Start+0x162>
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4a15      	ldr	r2, [pc, #84]	; (800e604 <HAL_TIM_PWM_Start+0x1b4>)
 800e5ae:	4293      	cmp	r3, r2
 800e5b0:	d116      	bne.n	800e5e0 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	689b      	ldr	r3, [r3, #8]
 800e5b8:	4a16      	ldr	r2, [pc, #88]	; (800e614 <HAL_TIM_PWM_Start+0x1c4>)
 800e5ba:	4013      	ands	r3, r2
 800e5bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	2b06      	cmp	r3, #6
 800e5c2:	d016      	beq.n	800e5f2 <HAL_TIM_PWM_Start+0x1a2>
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	2380      	movs	r3, #128	; 0x80
 800e5c8:	025b      	lsls	r3, r3, #9
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d011      	beq.n	800e5f2 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2101      	movs	r1, #1
 800e5da:	430a      	orrs	r2, r1
 800e5dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5de:	e008      	b.n	800e5f2 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	681a      	ldr	r2, [r3, #0]
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2101      	movs	r1, #1
 800e5ec:	430a      	orrs	r2, r1
 800e5ee:	601a      	str	r2, [r3, #0]
 800e5f0:	e000      	b.n	800e5f4 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5f2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800e5f4:	2300      	movs	r3, #0
}
 800e5f6:	0018      	movs	r0, r3
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	b004      	add	sp, #16
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	46c0      	nop			; (mov r8, r8)
 800e600:	40012c00 	.word	0x40012c00
 800e604:	40014000 	.word	0x40014000
 800e608:	40014400 	.word	0x40014400
 800e60c:	40014800 	.word	0x40014800
 800e610:	40000400 	.word	0x40000400
 800e614:	00010007 	.word	0x00010007

0800e618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	691b      	ldr	r3, [r3, #16]
 800e626:	2202      	movs	r2, #2
 800e628:	4013      	ands	r3, r2
 800e62a:	2b02      	cmp	r3, #2
 800e62c:	d124      	bne.n	800e678 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	68db      	ldr	r3, [r3, #12]
 800e634:	2202      	movs	r2, #2
 800e636:	4013      	ands	r3, r2
 800e638:	2b02      	cmp	r3, #2
 800e63a:	d11d      	bne.n	800e678 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	2203      	movs	r2, #3
 800e642:	4252      	negs	r2, r2
 800e644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	2201      	movs	r2, #1
 800e64a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	699b      	ldr	r3, [r3, #24]
 800e652:	2203      	movs	r2, #3
 800e654:	4013      	ands	r3, r2
 800e656:	d004      	beq.n	800e662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	0018      	movs	r0, r3
 800e65c:	f000 fae0 	bl	800ec20 <HAL_TIM_IC_CaptureCallback>
 800e660:	e007      	b.n	800e672 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	0018      	movs	r0, r3
 800e666:	f000 fad3 	bl	800ec10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	0018      	movs	r0, r3
 800e66e:	f000 fadf 	bl	800ec30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2200      	movs	r2, #0
 800e676:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	691b      	ldr	r3, [r3, #16]
 800e67e:	2204      	movs	r2, #4
 800e680:	4013      	ands	r3, r2
 800e682:	2b04      	cmp	r3, #4
 800e684:	d125      	bne.n	800e6d2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	2204      	movs	r2, #4
 800e68e:	4013      	ands	r3, r2
 800e690:	2b04      	cmp	r3, #4
 800e692:	d11e      	bne.n	800e6d2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2205      	movs	r2, #5
 800e69a:	4252      	negs	r2, r2
 800e69c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2202      	movs	r2, #2
 800e6a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	699a      	ldr	r2, [r3, #24]
 800e6aa:	23c0      	movs	r3, #192	; 0xc0
 800e6ac:	009b      	lsls	r3, r3, #2
 800e6ae:	4013      	ands	r3, r2
 800e6b0:	d004      	beq.n	800e6bc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	0018      	movs	r0, r3
 800e6b6:	f000 fab3 	bl	800ec20 <HAL_TIM_IC_CaptureCallback>
 800e6ba:	e007      	b.n	800e6cc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	0018      	movs	r0, r3
 800e6c0:	f000 faa6 	bl	800ec10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	0018      	movs	r0, r3
 800e6c8:	f000 fab2 	bl	800ec30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	691b      	ldr	r3, [r3, #16]
 800e6d8:	2208      	movs	r2, #8
 800e6da:	4013      	ands	r3, r2
 800e6dc:	2b08      	cmp	r3, #8
 800e6de:	d124      	bne.n	800e72a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	68db      	ldr	r3, [r3, #12]
 800e6e6:	2208      	movs	r2, #8
 800e6e8:	4013      	ands	r3, r2
 800e6ea:	2b08      	cmp	r3, #8
 800e6ec:	d11d      	bne.n	800e72a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2209      	movs	r2, #9
 800e6f4:	4252      	negs	r2, r2
 800e6f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	2204      	movs	r2, #4
 800e6fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	69db      	ldr	r3, [r3, #28]
 800e704:	2203      	movs	r2, #3
 800e706:	4013      	ands	r3, r2
 800e708:	d004      	beq.n	800e714 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	0018      	movs	r0, r3
 800e70e:	f000 fa87 	bl	800ec20 <HAL_TIM_IC_CaptureCallback>
 800e712:	e007      	b.n	800e724 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	0018      	movs	r0, r3
 800e718:	f000 fa7a 	bl	800ec10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	0018      	movs	r0, r3
 800e720:	f000 fa86 	bl	800ec30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2200      	movs	r2, #0
 800e728:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	691b      	ldr	r3, [r3, #16]
 800e730:	2210      	movs	r2, #16
 800e732:	4013      	ands	r3, r2
 800e734:	2b10      	cmp	r3, #16
 800e736:	d125      	bne.n	800e784 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	68db      	ldr	r3, [r3, #12]
 800e73e:	2210      	movs	r2, #16
 800e740:	4013      	ands	r3, r2
 800e742:	2b10      	cmp	r3, #16
 800e744:	d11e      	bne.n	800e784 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	2211      	movs	r2, #17
 800e74c:	4252      	negs	r2, r2
 800e74e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2208      	movs	r2, #8
 800e754:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	69da      	ldr	r2, [r3, #28]
 800e75c:	23c0      	movs	r3, #192	; 0xc0
 800e75e:	009b      	lsls	r3, r3, #2
 800e760:	4013      	ands	r3, r2
 800e762:	d004      	beq.n	800e76e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	0018      	movs	r0, r3
 800e768:	f000 fa5a 	bl	800ec20 <HAL_TIM_IC_CaptureCallback>
 800e76c:	e007      	b.n	800e77e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	0018      	movs	r0, r3
 800e772:	f000 fa4d 	bl	800ec10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	0018      	movs	r0, r3
 800e77a:	f000 fa59 	bl	800ec30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	2200      	movs	r2, #0
 800e782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	691b      	ldr	r3, [r3, #16]
 800e78a:	2201      	movs	r2, #1
 800e78c:	4013      	ands	r3, r2
 800e78e:	2b01      	cmp	r3, #1
 800e790:	d10f      	bne.n	800e7b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	68db      	ldr	r3, [r3, #12]
 800e798:	2201      	movs	r2, #1
 800e79a:	4013      	ands	r3, r2
 800e79c:	2b01      	cmp	r3, #1
 800e79e:	d108      	bne.n	800e7b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	2202      	movs	r2, #2
 800e7a6:	4252      	negs	r2, r2
 800e7a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	0018      	movs	r0, r3
 800e7ae:	f000 fa27 	bl	800ec00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	691b      	ldr	r3, [r3, #16]
 800e7b8:	2280      	movs	r2, #128	; 0x80
 800e7ba:	4013      	ands	r3, r2
 800e7bc:	2b80      	cmp	r3, #128	; 0x80
 800e7be:	d10f      	bne.n	800e7e0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	68db      	ldr	r3, [r3, #12]
 800e7c6:	2280      	movs	r2, #128	; 0x80
 800e7c8:	4013      	ands	r3, r2
 800e7ca:	2b80      	cmp	r3, #128	; 0x80
 800e7cc:	d108      	bne.n	800e7e0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	2281      	movs	r2, #129	; 0x81
 800e7d4:	4252      	negs	r2, r2
 800e7d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	0018      	movs	r0, r3
 800e7dc:	f000 fea2 	bl	800f524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	691a      	ldr	r2, [r3, #16]
 800e7e6:	2380      	movs	r3, #128	; 0x80
 800e7e8:	005b      	lsls	r3, r3, #1
 800e7ea:	401a      	ands	r2, r3
 800e7ec:	2380      	movs	r3, #128	; 0x80
 800e7ee:	005b      	lsls	r3, r3, #1
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	d10e      	bne.n	800e812 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	68db      	ldr	r3, [r3, #12]
 800e7fa:	2280      	movs	r2, #128	; 0x80
 800e7fc:	4013      	ands	r3, r2
 800e7fe:	2b80      	cmp	r3, #128	; 0x80
 800e800:	d107      	bne.n	800e812 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	4a1c      	ldr	r2, [pc, #112]	; (800e878 <HAL_TIM_IRQHandler+0x260>)
 800e808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	0018      	movs	r0, r3
 800e80e:	f000 fe91 	bl	800f534 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	691b      	ldr	r3, [r3, #16]
 800e818:	2240      	movs	r2, #64	; 0x40
 800e81a:	4013      	ands	r3, r2
 800e81c:	2b40      	cmp	r3, #64	; 0x40
 800e81e:	d10f      	bne.n	800e840 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	68db      	ldr	r3, [r3, #12]
 800e826:	2240      	movs	r2, #64	; 0x40
 800e828:	4013      	ands	r3, r2
 800e82a:	2b40      	cmp	r3, #64	; 0x40
 800e82c:	d108      	bne.n	800e840 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	2241      	movs	r2, #65	; 0x41
 800e834:	4252      	negs	r2, r2
 800e836:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	0018      	movs	r0, r3
 800e83c:	f000 fa00 	bl	800ec40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	691b      	ldr	r3, [r3, #16]
 800e846:	2220      	movs	r2, #32
 800e848:	4013      	ands	r3, r2
 800e84a:	2b20      	cmp	r3, #32
 800e84c:	d10f      	bne.n	800e86e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	2220      	movs	r2, #32
 800e856:	4013      	ands	r3, r2
 800e858:	2b20      	cmp	r3, #32
 800e85a:	d108      	bne.n	800e86e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	2221      	movs	r2, #33	; 0x21
 800e862:	4252      	negs	r2, r2
 800e864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	0018      	movs	r0, r3
 800e86a:	f000 fe53 	bl	800f514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e86e:	46c0      	nop			; (mov r8, r8)
 800e870:	46bd      	mov	sp, r7
 800e872:	b002      	add	sp, #8
 800e874:	bd80      	pop	{r7, pc}
 800e876:	46c0      	nop			; (mov r8, r8)
 800e878:	fffffeff 	.word	0xfffffeff

0800e87c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b084      	sub	sp, #16
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	223c      	movs	r2, #60	; 0x3c
 800e88c:	5c9b      	ldrb	r3, [r3, r2]
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d101      	bne.n	800e896 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e892:	2302      	movs	r3, #2
 800e894:	e0df      	b.n	800ea56 <HAL_TIM_PWM_ConfigChannel+0x1da>
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	223c      	movs	r2, #60	; 0x3c
 800e89a:	2101      	movs	r1, #1
 800e89c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2b14      	cmp	r3, #20
 800e8a2:	d900      	bls.n	800e8a6 <HAL_TIM_PWM_ConfigChannel+0x2a>
 800e8a4:	e0d1      	b.n	800ea4a <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	009a      	lsls	r2, r3, #2
 800e8aa:	4b6d      	ldr	r3, [pc, #436]	; (800ea60 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 800e8ac:	18d3      	adds	r3, r2, r3
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	68ba      	ldr	r2, [r7, #8]
 800e8b8:	0011      	movs	r1, r2
 800e8ba:	0018      	movs	r0, r3
 800e8bc:	f000 fa3e 	bl	800ed3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	699a      	ldr	r2, [r3, #24]
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	2108      	movs	r1, #8
 800e8cc:	430a      	orrs	r2, r1
 800e8ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	699a      	ldr	r2, [r3, #24]
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	2104      	movs	r1, #4
 800e8dc:	438a      	bics	r2, r1
 800e8de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	6999      	ldr	r1, [r3, #24]
 800e8e6:	68bb      	ldr	r3, [r7, #8]
 800e8e8:	691a      	ldr	r2, [r3, #16]
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	430a      	orrs	r2, r1
 800e8f0:	619a      	str	r2, [r3, #24]
      break;
 800e8f2:	e0ab      	b.n	800ea4c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	68ba      	ldr	r2, [r7, #8]
 800e8fa:	0011      	movs	r1, r2
 800e8fc:	0018      	movs	r0, r3
 800e8fe:	f000 faa7 	bl	800ee50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	699a      	ldr	r2, [r3, #24]
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2180      	movs	r1, #128	; 0x80
 800e90e:	0109      	lsls	r1, r1, #4
 800e910:	430a      	orrs	r2, r1
 800e912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	699a      	ldr	r2, [r3, #24]
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	4951      	ldr	r1, [pc, #324]	; (800ea64 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800e920:	400a      	ands	r2, r1
 800e922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	6999      	ldr	r1, [r3, #24]
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	691b      	ldr	r3, [r3, #16]
 800e92e:	021a      	lsls	r2, r3, #8
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	430a      	orrs	r2, r1
 800e936:	619a      	str	r2, [r3, #24]
      break;
 800e938:	e088      	b.n	800ea4c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	68ba      	ldr	r2, [r7, #8]
 800e940:	0011      	movs	r1, r2
 800e942:	0018      	movs	r0, r3
 800e944:	f000 fb08 	bl	800ef58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	69da      	ldr	r2, [r3, #28]
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2108      	movs	r1, #8
 800e954:	430a      	orrs	r2, r1
 800e956:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	69da      	ldr	r2, [r3, #28]
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	2104      	movs	r1, #4
 800e964:	438a      	bics	r2, r1
 800e966:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	69d9      	ldr	r1, [r3, #28]
 800e96e:	68bb      	ldr	r3, [r7, #8]
 800e970:	691a      	ldr	r2, [r3, #16]
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	430a      	orrs	r2, r1
 800e978:	61da      	str	r2, [r3, #28]
      break;
 800e97a:	e067      	b.n	800ea4c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	68ba      	ldr	r2, [r7, #8]
 800e982:	0011      	movs	r1, r2
 800e984:	0018      	movs	r0, r3
 800e986:	f000 fb6f 	bl	800f068 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	69da      	ldr	r2, [r3, #28]
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	2180      	movs	r1, #128	; 0x80
 800e996:	0109      	lsls	r1, r1, #4
 800e998:	430a      	orrs	r2, r1
 800e99a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	69da      	ldr	r2, [r3, #28]
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	492f      	ldr	r1, [pc, #188]	; (800ea64 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800e9a8:	400a      	ands	r2, r1
 800e9aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	69d9      	ldr	r1, [r3, #28]
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	691b      	ldr	r3, [r3, #16]
 800e9b6:	021a      	lsls	r2, r3, #8
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	430a      	orrs	r2, r1
 800e9be:	61da      	str	r2, [r3, #28]
      break;
 800e9c0:	e044      	b.n	800ea4c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	68ba      	ldr	r2, [r7, #8]
 800e9c8:	0011      	movs	r1, r2
 800e9ca:	0018      	movs	r0, r3
 800e9cc:	f000 fbb6 	bl	800f13c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	2108      	movs	r1, #8
 800e9dc:	430a      	orrs	r2, r1
 800e9de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	2104      	movs	r1, #4
 800e9ec:	438a      	bics	r2, r1
 800e9ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	691a      	ldr	r2, [r3, #16]
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	430a      	orrs	r2, r1
 800ea00:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ea02:	e023      	b.n	800ea4c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	68ba      	ldr	r2, [r7, #8]
 800ea0a:	0011      	movs	r1, r2
 800ea0c:	0018      	movs	r0, r3
 800ea0e:	f000 fbf5 	bl	800f1fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	2180      	movs	r1, #128	; 0x80
 800ea1e:	0109      	lsls	r1, r1, #4
 800ea20:	430a      	orrs	r2, r1
 800ea22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	490d      	ldr	r1, [pc, #52]	; (800ea64 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800ea30:	400a      	ands	r2, r1
 800ea32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	691b      	ldr	r3, [r3, #16]
 800ea3e:	021a      	lsls	r2, r3, #8
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	430a      	orrs	r2, r1
 800ea46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ea48:	e000      	b.n	800ea4c <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 800ea4a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	223c      	movs	r2, #60	; 0x3c
 800ea50:	2100      	movs	r1, #0
 800ea52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ea54:	2300      	movs	r3, #0
}
 800ea56:	0018      	movs	r0, r3
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	b004      	add	sp, #16
 800ea5c:	bd80      	pop	{r7, pc}
 800ea5e:	46c0      	nop			; (mov r8, r8)
 800ea60:	08017764 	.word	0x08017764
 800ea64:	fffffbff 	.word	0xfffffbff

0800ea68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	223c      	movs	r2, #60	; 0x3c
 800ea76:	5c9b      	ldrb	r3, [r3, r2]
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d101      	bne.n	800ea80 <HAL_TIM_ConfigClockSource+0x18>
 800ea7c:	2302      	movs	r3, #2
 800ea7e:	e0b7      	b.n	800ebf0 <HAL_TIM_ConfigClockSource+0x188>
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	223c      	movs	r2, #60	; 0x3c
 800ea84:	2101      	movs	r1, #1
 800ea86:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	223d      	movs	r2, #61	; 0x3d
 800ea8c:	2102      	movs	r1, #2
 800ea8e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	689b      	ldr	r3, [r3, #8]
 800ea96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	4a57      	ldr	r2, [pc, #348]	; (800ebf8 <HAL_TIM_ConfigClockSource+0x190>)
 800ea9c:	4013      	ands	r3, r2
 800ea9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	4a56      	ldr	r2, [pc, #344]	; (800ebfc <HAL_TIM_ConfigClockSource+0x194>)
 800eaa4:	4013      	ands	r3, r2
 800eaa6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	2280      	movs	r2, #128	; 0x80
 800eab6:	0192      	lsls	r2, r2, #6
 800eab8:	4293      	cmp	r3, r2
 800eaba:	d040      	beq.n	800eb3e <HAL_TIM_ConfigClockSource+0xd6>
 800eabc:	2280      	movs	r2, #128	; 0x80
 800eabe:	0192      	lsls	r2, r2, #6
 800eac0:	4293      	cmp	r3, r2
 800eac2:	d900      	bls.n	800eac6 <HAL_TIM_ConfigClockSource+0x5e>
 800eac4:	e088      	b.n	800ebd8 <HAL_TIM_ConfigClockSource+0x170>
 800eac6:	2280      	movs	r2, #128	; 0x80
 800eac8:	0152      	lsls	r2, r2, #5
 800eaca:	4293      	cmp	r3, r2
 800eacc:	d100      	bne.n	800ead0 <HAL_TIM_ConfigClockSource+0x68>
 800eace:	e085      	b.n	800ebdc <HAL_TIM_ConfigClockSource+0x174>
 800ead0:	2280      	movs	r2, #128	; 0x80
 800ead2:	0152      	lsls	r2, r2, #5
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d900      	bls.n	800eada <HAL_TIM_ConfigClockSource+0x72>
 800ead8:	e07e      	b.n	800ebd8 <HAL_TIM_ConfigClockSource+0x170>
 800eada:	2b70      	cmp	r3, #112	; 0x70
 800eadc:	d018      	beq.n	800eb10 <HAL_TIM_ConfigClockSource+0xa8>
 800eade:	d900      	bls.n	800eae2 <HAL_TIM_ConfigClockSource+0x7a>
 800eae0:	e07a      	b.n	800ebd8 <HAL_TIM_ConfigClockSource+0x170>
 800eae2:	2b60      	cmp	r3, #96	; 0x60
 800eae4:	d04f      	beq.n	800eb86 <HAL_TIM_ConfigClockSource+0x11e>
 800eae6:	d900      	bls.n	800eaea <HAL_TIM_ConfigClockSource+0x82>
 800eae8:	e076      	b.n	800ebd8 <HAL_TIM_ConfigClockSource+0x170>
 800eaea:	2b50      	cmp	r3, #80	; 0x50
 800eaec:	d03b      	beq.n	800eb66 <HAL_TIM_ConfigClockSource+0xfe>
 800eaee:	d900      	bls.n	800eaf2 <HAL_TIM_ConfigClockSource+0x8a>
 800eaf0:	e072      	b.n	800ebd8 <HAL_TIM_ConfigClockSource+0x170>
 800eaf2:	2b40      	cmp	r3, #64	; 0x40
 800eaf4:	d057      	beq.n	800eba6 <HAL_TIM_ConfigClockSource+0x13e>
 800eaf6:	d900      	bls.n	800eafa <HAL_TIM_ConfigClockSource+0x92>
 800eaf8:	e06e      	b.n	800ebd8 <HAL_TIM_ConfigClockSource+0x170>
 800eafa:	2b30      	cmp	r3, #48	; 0x30
 800eafc:	d063      	beq.n	800ebc6 <HAL_TIM_ConfigClockSource+0x15e>
 800eafe:	d86b      	bhi.n	800ebd8 <HAL_TIM_ConfigClockSource+0x170>
 800eb00:	2b20      	cmp	r3, #32
 800eb02:	d060      	beq.n	800ebc6 <HAL_TIM_ConfigClockSource+0x15e>
 800eb04:	d868      	bhi.n	800ebd8 <HAL_TIM_ConfigClockSource+0x170>
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d05d      	beq.n	800ebc6 <HAL_TIM_ConfigClockSource+0x15e>
 800eb0a:	2b10      	cmp	r3, #16
 800eb0c:	d05b      	beq.n	800ebc6 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800eb0e:	e063      	b.n	800ebd8 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6818      	ldr	r0, [r3, #0]
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	6899      	ldr	r1, [r3, #8]
 800eb18:	683b      	ldr	r3, [r7, #0]
 800eb1a:	685a      	ldr	r2, [r3, #4]
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	68db      	ldr	r3, [r3, #12]
 800eb20:	f000 fc4c 	bl	800f3bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	689b      	ldr	r3, [r3, #8]
 800eb2a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2277      	movs	r2, #119	; 0x77
 800eb30:	4313      	orrs	r3, r2
 800eb32:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	68fa      	ldr	r2, [r7, #12]
 800eb3a:	609a      	str	r2, [r3, #8]
      break;
 800eb3c:	e04f      	b.n	800ebde <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	6818      	ldr	r0, [r3, #0]
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	6899      	ldr	r1, [r3, #8]
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	685a      	ldr	r2, [r3, #4]
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	68db      	ldr	r3, [r3, #12]
 800eb4e:	f000 fc35 	bl	800f3bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	689a      	ldr	r2, [r3, #8]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	2180      	movs	r1, #128	; 0x80
 800eb5e:	01c9      	lsls	r1, r1, #7
 800eb60:	430a      	orrs	r2, r1
 800eb62:	609a      	str	r2, [r3, #8]
      break;
 800eb64:	e03b      	b.n	800ebde <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6818      	ldr	r0, [r3, #0]
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	6859      	ldr	r1, [r3, #4]
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	68db      	ldr	r3, [r3, #12]
 800eb72:	001a      	movs	r2, r3
 800eb74:	f000 fba6 	bl	800f2c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	2150      	movs	r1, #80	; 0x50
 800eb7e:	0018      	movs	r0, r3
 800eb80:	f000 fc00 	bl	800f384 <TIM_ITRx_SetConfig>
      break;
 800eb84:	e02b      	b.n	800ebde <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6818      	ldr	r0, [r3, #0]
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	6859      	ldr	r1, [r3, #4]
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	001a      	movs	r2, r3
 800eb94:	f000 fbc4 	bl	800f320 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	2160      	movs	r1, #96	; 0x60
 800eb9e:	0018      	movs	r0, r3
 800eba0:	f000 fbf0 	bl	800f384 <TIM_ITRx_SetConfig>
      break;
 800eba4:	e01b      	b.n	800ebde <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6818      	ldr	r0, [r3, #0]
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	6859      	ldr	r1, [r3, #4]
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	68db      	ldr	r3, [r3, #12]
 800ebb2:	001a      	movs	r2, r3
 800ebb4:	f000 fb86 	bl	800f2c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	2140      	movs	r1, #64	; 0x40
 800ebbe:	0018      	movs	r0, r3
 800ebc0:	f000 fbe0 	bl	800f384 <TIM_ITRx_SetConfig>
      break;
 800ebc4:	e00b      	b.n	800ebde <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681a      	ldr	r2, [r3, #0]
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	0019      	movs	r1, r3
 800ebd0:	0010      	movs	r0, r2
 800ebd2:	f000 fbd7 	bl	800f384 <TIM_ITRx_SetConfig>
        break;
 800ebd6:	e002      	b.n	800ebde <HAL_TIM_ConfigClockSource+0x176>
      break;
 800ebd8:	46c0      	nop			; (mov r8, r8)
 800ebda:	e000      	b.n	800ebde <HAL_TIM_ConfigClockSource+0x176>
      break;
 800ebdc:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	223d      	movs	r2, #61	; 0x3d
 800ebe2:	2101      	movs	r1, #1
 800ebe4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	223c      	movs	r2, #60	; 0x3c
 800ebea:	2100      	movs	r1, #0
 800ebec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ebee:	2300      	movs	r3, #0
}
 800ebf0:	0018      	movs	r0, r3
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	b004      	add	sp, #16
 800ebf6:	bd80      	pop	{r7, pc}
 800ebf8:	ffceff88 	.word	0xffceff88
 800ebfc:	ffff00ff 	.word	0xffff00ff

0800ec00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ec00:	b580      	push	{r7, lr}
 800ec02:	b082      	sub	sp, #8
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ec08:	46c0      	nop			; (mov r8, r8)
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	b002      	add	sp, #8
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ec18:	46c0      	nop			; (mov r8, r8)
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	b002      	add	sp, #8
 800ec1e:	bd80      	pop	{r7, pc}

0800ec20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ec28:	46c0      	nop			; (mov r8, r8)
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	b002      	add	sp, #8
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b082      	sub	sp, #8
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ec38:	46c0      	nop			; (mov r8, r8)
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	b002      	add	sp, #8
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b082      	sub	sp, #8
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ec48:	46c0      	nop			; (mov r8, r8)
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	b002      	add	sp, #8
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
 800ec58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	4a2f      	ldr	r2, [pc, #188]	; (800ed20 <TIM_Base_SetConfig+0xd0>)
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d003      	beq.n	800ec70 <TIM_Base_SetConfig+0x20>
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	4a2e      	ldr	r2, [pc, #184]	; (800ed24 <TIM_Base_SetConfig+0xd4>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d108      	bne.n	800ec82 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	2270      	movs	r2, #112	; 0x70
 800ec74:	4393      	bics	r3, r2
 800ec76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	685b      	ldr	r3, [r3, #4]
 800ec7c:	68fa      	ldr	r2, [r7, #12]
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	4a26      	ldr	r2, [pc, #152]	; (800ed20 <TIM_Base_SetConfig+0xd0>)
 800ec86:	4293      	cmp	r3, r2
 800ec88:	d013      	beq.n	800ecb2 <TIM_Base_SetConfig+0x62>
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	4a25      	ldr	r2, [pc, #148]	; (800ed24 <TIM_Base_SetConfig+0xd4>)
 800ec8e:	4293      	cmp	r3, r2
 800ec90:	d00f      	beq.n	800ecb2 <TIM_Base_SetConfig+0x62>
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	4a24      	ldr	r2, [pc, #144]	; (800ed28 <TIM_Base_SetConfig+0xd8>)
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d00b      	beq.n	800ecb2 <TIM_Base_SetConfig+0x62>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	4a23      	ldr	r2, [pc, #140]	; (800ed2c <TIM_Base_SetConfig+0xdc>)
 800ec9e:	4293      	cmp	r3, r2
 800eca0:	d007      	beq.n	800ecb2 <TIM_Base_SetConfig+0x62>
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4a22      	ldr	r2, [pc, #136]	; (800ed30 <TIM_Base_SetConfig+0xe0>)
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d003      	beq.n	800ecb2 <TIM_Base_SetConfig+0x62>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	4a21      	ldr	r2, [pc, #132]	; (800ed34 <TIM_Base_SetConfig+0xe4>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d108      	bne.n	800ecc4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	4a20      	ldr	r2, [pc, #128]	; (800ed38 <TIM_Base_SetConfig+0xe8>)
 800ecb6:	4013      	ands	r3, r2
 800ecb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	68db      	ldr	r3, [r3, #12]
 800ecbe:	68fa      	ldr	r2, [r7, #12]
 800ecc0:	4313      	orrs	r3, r2
 800ecc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2280      	movs	r2, #128	; 0x80
 800ecc8:	4393      	bics	r3, r2
 800ecca:	001a      	movs	r2, r3
 800eccc:	683b      	ldr	r3, [r7, #0]
 800ecce:	695b      	ldr	r3, [r3, #20]
 800ecd0:	4313      	orrs	r3, r2
 800ecd2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	68fa      	ldr	r2, [r7, #12]
 800ecd8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	689a      	ldr	r2, [r3, #8]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	4a0c      	ldr	r2, [pc, #48]	; (800ed20 <TIM_Base_SetConfig+0xd0>)
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d00b      	beq.n	800ed0a <TIM_Base_SetConfig+0xba>
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	4a0d      	ldr	r2, [pc, #52]	; (800ed2c <TIM_Base_SetConfig+0xdc>)
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d007      	beq.n	800ed0a <TIM_Base_SetConfig+0xba>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	4a0c      	ldr	r2, [pc, #48]	; (800ed30 <TIM_Base_SetConfig+0xe0>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d003      	beq.n	800ed0a <TIM_Base_SetConfig+0xba>
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	4a0b      	ldr	r2, [pc, #44]	; (800ed34 <TIM_Base_SetConfig+0xe4>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d103      	bne.n	800ed12 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	691a      	ldr	r2, [r3, #16]
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	2201      	movs	r2, #1
 800ed16:	615a      	str	r2, [r3, #20]
}
 800ed18:	46c0      	nop			; (mov r8, r8)
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	b004      	add	sp, #16
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	40012c00 	.word	0x40012c00
 800ed24:	40000400 	.word	0x40000400
 800ed28:	40002000 	.word	0x40002000
 800ed2c:	40014000 	.word	0x40014000
 800ed30:	40014400 	.word	0x40014400
 800ed34:	40014800 	.word	0x40014800
 800ed38:	fffffcff 	.word	0xfffffcff

0800ed3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b086      	sub	sp, #24
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
 800ed44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6a1b      	ldr	r3, [r3, #32]
 800ed4a:	2201      	movs	r2, #1
 800ed4c:	4393      	bics	r3, r2
 800ed4e:	001a      	movs	r2, r3
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6a1b      	ldr	r3, [r3, #32]
 800ed58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	699b      	ldr	r3, [r3, #24]
 800ed64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	4a32      	ldr	r2, [pc, #200]	; (800ee34 <TIM_OC1_SetConfig+0xf8>)
 800ed6a:	4013      	ands	r3, r2
 800ed6c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	2203      	movs	r2, #3
 800ed72:	4393      	bics	r3, r2
 800ed74:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	68fa      	ldr	r2, [r7, #12]
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	2202      	movs	r2, #2
 800ed84:	4393      	bics	r3, r2
 800ed86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	689b      	ldr	r3, [r3, #8]
 800ed8c:	697a      	ldr	r2, [r7, #20]
 800ed8e:	4313      	orrs	r3, r2
 800ed90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4a28      	ldr	r2, [pc, #160]	; (800ee38 <TIM_OC1_SetConfig+0xfc>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d00b      	beq.n	800edb2 <TIM_OC1_SetConfig+0x76>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	4a27      	ldr	r2, [pc, #156]	; (800ee3c <TIM_OC1_SetConfig+0x100>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d007      	beq.n	800edb2 <TIM_OC1_SetConfig+0x76>
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	4a26      	ldr	r2, [pc, #152]	; (800ee40 <TIM_OC1_SetConfig+0x104>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d003      	beq.n	800edb2 <TIM_OC1_SetConfig+0x76>
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	4a25      	ldr	r2, [pc, #148]	; (800ee44 <TIM_OC1_SetConfig+0x108>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d10c      	bne.n	800edcc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	2208      	movs	r2, #8
 800edb6:	4393      	bics	r3, r2
 800edb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	68db      	ldr	r3, [r3, #12]
 800edbe:	697a      	ldr	r2, [r7, #20]
 800edc0:	4313      	orrs	r3, r2
 800edc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	2204      	movs	r2, #4
 800edc8:	4393      	bics	r3, r2
 800edca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	4a1a      	ldr	r2, [pc, #104]	; (800ee38 <TIM_OC1_SetConfig+0xfc>)
 800edd0:	4293      	cmp	r3, r2
 800edd2:	d00b      	beq.n	800edec <TIM_OC1_SetConfig+0xb0>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	4a19      	ldr	r2, [pc, #100]	; (800ee3c <TIM_OC1_SetConfig+0x100>)
 800edd8:	4293      	cmp	r3, r2
 800edda:	d007      	beq.n	800edec <TIM_OC1_SetConfig+0xb0>
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	4a18      	ldr	r2, [pc, #96]	; (800ee40 <TIM_OC1_SetConfig+0x104>)
 800ede0:	4293      	cmp	r3, r2
 800ede2:	d003      	beq.n	800edec <TIM_OC1_SetConfig+0xb0>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	4a17      	ldr	r2, [pc, #92]	; (800ee44 <TIM_OC1_SetConfig+0x108>)
 800ede8:	4293      	cmp	r3, r2
 800edea:	d111      	bne.n	800ee10 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800edec:	693b      	ldr	r3, [r7, #16]
 800edee:	4a16      	ldr	r2, [pc, #88]	; (800ee48 <TIM_OC1_SetConfig+0x10c>)
 800edf0:	4013      	ands	r3, r2
 800edf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	4a15      	ldr	r2, [pc, #84]	; (800ee4c <TIM_OC1_SetConfig+0x110>)
 800edf8:	4013      	ands	r3, r2
 800edfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	695b      	ldr	r3, [r3, #20]
 800ee00:	693a      	ldr	r2, [r7, #16]
 800ee02:	4313      	orrs	r3, r2
 800ee04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	699b      	ldr	r3, [r3, #24]
 800ee0a:	693a      	ldr	r2, [r7, #16]
 800ee0c:	4313      	orrs	r3, r2
 800ee0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	693a      	ldr	r2, [r7, #16]
 800ee14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ee1c:	683b      	ldr	r3, [r7, #0]
 800ee1e:	685a      	ldr	r2, [r3, #4]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	697a      	ldr	r2, [r7, #20]
 800ee28:	621a      	str	r2, [r3, #32]
}
 800ee2a:	46c0      	nop			; (mov r8, r8)
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	b006      	add	sp, #24
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	46c0      	nop			; (mov r8, r8)
 800ee34:	fffeff8f 	.word	0xfffeff8f
 800ee38:	40012c00 	.word	0x40012c00
 800ee3c:	40014000 	.word	0x40014000
 800ee40:	40014400 	.word	0x40014400
 800ee44:	40014800 	.word	0x40014800
 800ee48:	fffffeff 	.word	0xfffffeff
 800ee4c:	fffffdff 	.word	0xfffffdff

0800ee50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b086      	sub	sp, #24
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6a1b      	ldr	r3, [r3, #32]
 800ee5e:	2210      	movs	r2, #16
 800ee60:	4393      	bics	r3, r2
 800ee62:	001a      	movs	r2, r3
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6a1b      	ldr	r3, [r3, #32]
 800ee6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	699b      	ldr	r3, [r3, #24]
 800ee78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	4a2e      	ldr	r2, [pc, #184]	; (800ef38 <TIM_OC2_SetConfig+0xe8>)
 800ee7e:	4013      	ands	r3, r2
 800ee80:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	4a2d      	ldr	r2, [pc, #180]	; (800ef3c <TIM_OC2_SetConfig+0xec>)
 800ee86:	4013      	ands	r3, r2
 800ee88:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	021b      	lsls	r3, r3, #8
 800ee90:	68fa      	ldr	r2, [r7, #12]
 800ee92:	4313      	orrs	r3, r2
 800ee94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ee96:	697b      	ldr	r3, [r7, #20]
 800ee98:	2220      	movs	r2, #32
 800ee9a:	4393      	bics	r3, r2
 800ee9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	689b      	ldr	r3, [r3, #8]
 800eea2:	011b      	lsls	r3, r3, #4
 800eea4:	697a      	ldr	r2, [r7, #20]
 800eea6:	4313      	orrs	r3, r2
 800eea8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	4a24      	ldr	r2, [pc, #144]	; (800ef40 <TIM_OC2_SetConfig+0xf0>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d10d      	bne.n	800eece <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	2280      	movs	r2, #128	; 0x80
 800eeb6:	4393      	bics	r3, r2
 800eeb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	68db      	ldr	r3, [r3, #12]
 800eebe:	011b      	lsls	r3, r3, #4
 800eec0:	697a      	ldr	r2, [r7, #20]
 800eec2:	4313      	orrs	r3, r2
 800eec4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	2240      	movs	r2, #64	; 0x40
 800eeca:	4393      	bics	r3, r2
 800eecc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	4a1b      	ldr	r2, [pc, #108]	; (800ef40 <TIM_OC2_SetConfig+0xf0>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d00b      	beq.n	800eeee <TIM_OC2_SetConfig+0x9e>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	4a1a      	ldr	r2, [pc, #104]	; (800ef44 <TIM_OC2_SetConfig+0xf4>)
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d007      	beq.n	800eeee <TIM_OC2_SetConfig+0x9e>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	4a19      	ldr	r2, [pc, #100]	; (800ef48 <TIM_OC2_SetConfig+0xf8>)
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d003      	beq.n	800eeee <TIM_OC2_SetConfig+0x9e>
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	4a18      	ldr	r2, [pc, #96]	; (800ef4c <TIM_OC2_SetConfig+0xfc>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d113      	bne.n	800ef16 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	4a17      	ldr	r2, [pc, #92]	; (800ef50 <TIM_OC2_SetConfig+0x100>)
 800eef2:	4013      	ands	r3, r2
 800eef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	4a16      	ldr	r2, [pc, #88]	; (800ef54 <TIM_OC2_SetConfig+0x104>)
 800eefa:	4013      	ands	r3, r2
 800eefc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	695b      	ldr	r3, [r3, #20]
 800ef02:	009b      	lsls	r3, r3, #2
 800ef04:	693a      	ldr	r2, [r7, #16]
 800ef06:	4313      	orrs	r3, r2
 800ef08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	699b      	ldr	r3, [r3, #24]
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	693a      	ldr	r2, [r7, #16]
 800ef12:	4313      	orrs	r3, r2
 800ef14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	693a      	ldr	r2, [r7, #16]
 800ef1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	68fa      	ldr	r2, [r7, #12]
 800ef20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	685a      	ldr	r2, [r3, #4]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	697a      	ldr	r2, [r7, #20]
 800ef2e:	621a      	str	r2, [r3, #32]
}
 800ef30:	46c0      	nop			; (mov r8, r8)
 800ef32:	46bd      	mov	sp, r7
 800ef34:	b006      	add	sp, #24
 800ef36:	bd80      	pop	{r7, pc}
 800ef38:	feff8fff 	.word	0xfeff8fff
 800ef3c:	fffffcff 	.word	0xfffffcff
 800ef40:	40012c00 	.word	0x40012c00
 800ef44:	40014000 	.word	0x40014000
 800ef48:	40014400 	.word	0x40014400
 800ef4c:	40014800 	.word	0x40014800
 800ef50:	fffffbff 	.word	0xfffffbff
 800ef54:	fffff7ff 	.word	0xfffff7ff

0800ef58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b086      	sub	sp, #24
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6a1b      	ldr	r3, [r3, #32]
 800ef66:	4a35      	ldr	r2, [pc, #212]	; (800f03c <TIM_OC3_SetConfig+0xe4>)
 800ef68:	401a      	ands	r2, r3
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	6a1b      	ldr	r3, [r3, #32]
 800ef72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	685b      	ldr	r3, [r3, #4]
 800ef78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	69db      	ldr	r3, [r3, #28]
 800ef7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	4a2f      	ldr	r2, [pc, #188]	; (800f040 <TIM_OC3_SetConfig+0xe8>)
 800ef84:	4013      	ands	r3, r2
 800ef86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	2203      	movs	r2, #3
 800ef8c:	4393      	bics	r3, r2
 800ef8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	68fa      	ldr	r2, [r7, #12]
 800ef96:	4313      	orrs	r3, r2
 800ef98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	4a29      	ldr	r2, [pc, #164]	; (800f044 <TIM_OC3_SetConfig+0xec>)
 800ef9e:	4013      	ands	r3, r2
 800efa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	689b      	ldr	r3, [r3, #8]
 800efa6:	021b      	lsls	r3, r3, #8
 800efa8:	697a      	ldr	r2, [r7, #20]
 800efaa:	4313      	orrs	r3, r2
 800efac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	4a25      	ldr	r2, [pc, #148]	; (800f048 <TIM_OC3_SetConfig+0xf0>)
 800efb2:	4293      	cmp	r3, r2
 800efb4:	d10d      	bne.n	800efd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800efb6:	697b      	ldr	r3, [r7, #20]
 800efb8:	4a24      	ldr	r2, [pc, #144]	; (800f04c <TIM_OC3_SetConfig+0xf4>)
 800efba:	4013      	ands	r3, r2
 800efbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	68db      	ldr	r3, [r3, #12]
 800efc2:	021b      	lsls	r3, r3, #8
 800efc4:	697a      	ldr	r2, [r7, #20]
 800efc6:	4313      	orrs	r3, r2
 800efc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	4a20      	ldr	r2, [pc, #128]	; (800f050 <TIM_OC3_SetConfig+0xf8>)
 800efce:	4013      	ands	r3, r2
 800efd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	4a1c      	ldr	r2, [pc, #112]	; (800f048 <TIM_OC3_SetConfig+0xf0>)
 800efd6:	4293      	cmp	r3, r2
 800efd8:	d00b      	beq.n	800eff2 <TIM_OC3_SetConfig+0x9a>
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	4a1d      	ldr	r2, [pc, #116]	; (800f054 <TIM_OC3_SetConfig+0xfc>)
 800efde:	4293      	cmp	r3, r2
 800efe0:	d007      	beq.n	800eff2 <TIM_OC3_SetConfig+0x9a>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	4a1c      	ldr	r2, [pc, #112]	; (800f058 <TIM_OC3_SetConfig+0x100>)
 800efe6:	4293      	cmp	r3, r2
 800efe8:	d003      	beq.n	800eff2 <TIM_OC3_SetConfig+0x9a>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	4a1b      	ldr	r2, [pc, #108]	; (800f05c <TIM_OC3_SetConfig+0x104>)
 800efee:	4293      	cmp	r3, r2
 800eff0:	d113      	bne.n	800f01a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	4a1a      	ldr	r2, [pc, #104]	; (800f060 <TIM_OC3_SetConfig+0x108>)
 800eff6:	4013      	ands	r3, r2
 800eff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800effa:	693b      	ldr	r3, [r7, #16]
 800effc:	4a19      	ldr	r2, [pc, #100]	; (800f064 <TIM_OC3_SetConfig+0x10c>)
 800effe:	4013      	ands	r3, r2
 800f000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	695b      	ldr	r3, [r3, #20]
 800f006:	011b      	lsls	r3, r3, #4
 800f008:	693a      	ldr	r2, [r7, #16]
 800f00a:	4313      	orrs	r3, r2
 800f00c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	699b      	ldr	r3, [r3, #24]
 800f012:	011b      	lsls	r3, r3, #4
 800f014:	693a      	ldr	r2, [r7, #16]
 800f016:	4313      	orrs	r3, r2
 800f018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	693a      	ldr	r2, [r7, #16]
 800f01e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	68fa      	ldr	r2, [r7, #12]
 800f024:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	685a      	ldr	r2, [r3, #4]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	697a      	ldr	r2, [r7, #20]
 800f032:	621a      	str	r2, [r3, #32]
}
 800f034:	46c0      	nop			; (mov r8, r8)
 800f036:	46bd      	mov	sp, r7
 800f038:	b006      	add	sp, #24
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	fffffeff 	.word	0xfffffeff
 800f040:	fffeff8f 	.word	0xfffeff8f
 800f044:	fffffdff 	.word	0xfffffdff
 800f048:	40012c00 	.word	0x40012c00
 800f04c:	fffff7ff 	.word	0xfffff7ff
 800f050:	fffffbff 	.word	0xfffffbff
 800f054:	40014000 	.word	0x40014000
 800f058:	40014400 	.word	0x40014400
 800f05c:	40014800 	.word	0x40014800
 800f060:	ffffefff 	.word	0xffffefff
 800f064:	ffffdfff 	.word	0xffffdfff

0800f068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b086      	sub	sp, #24
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
 800f070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6a1b      	ldr	r3, [r3, #32]
 800f076:	4a28      	ldr	r2, [pc, #160]	; (800f118 <TIM_OC4_SetConfig+0xb0>)
 800f078:	401a      	ands	r2, r3
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6a1b      	ldr	r3, [r3, #32]
 800f082:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	69db      	ldr	r3, [r3, #28]
 800f08e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	4a22      	ldr	r2, [pc, #136]	; (800f11c <TIM_OC4_SetConfig+0xb4>)
 800f094:	4013      	ands	r3, r2
 800f096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	4a21      	ldr	r2, [pc, #132]	; (800f120 <TIM_OC4_SetConfig+0xb8>)
 800f09c:	4013      	ands	r3, r2
 800f09e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	021b      	lsls	r3, r3, #8
 800f0a6:	68fa      	ldr	r2, [r7, #12]
 800f0a8:	4313      	orrs	r3, r2
 800f0aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	4a1d      	ldr	r2, [pc, #116]	; (800f124 <TIM_OC4_SetConfig+0xbc>)
 800f0b0:	4013      	ands	r3, r2
 800f0b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	689b      	ldr	r3, [r3, #8]
 800f0b8:	031b      	lsls	r3, r3, #12
 800f0ba:	693a      	ldr	r2, [r7, #16]
 800f0bc:	4313      	orrs	r3, r2
 800f0be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	4a19      	ldr	r2, [pc, #100]	; (800f128 <TIM_OC4_SetConfig+0xc0>)
 800f0c4:	4293      	cmp	r3, r2
 800f0c6:	d00b      	beq.n	800f0e0 <TIM_OC4_SetConfig+0x78>
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	4a18      	ldr	r2, [pc, #96]	; (800f12c <TIM_OC4_SetConfig+0xc4>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d007      	beq.n	800f0e0 <TIM_OC4_SetConfig+0x78>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	4a17      	ldr	r2, [pc, #92]	; (800f130 <TIM_OC4_SetConfig+0xc8>)
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d003      	beq.n	800f0e0 <TIM_OC4_SetConfig+0x78>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	4a16      	ldr	r2, [pc, #88]	; (800f134 <TIM_OC4_SetConfig+0xcc>)
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d109      	bne.n	800f0f4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	4a15      	ldr	r2, [pc, #84]	; (800f138 <TIM_OC4_SetConfig+0xd0>)
 800f0e4:	4013      	ands	r3, r2
 800f0e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	695b      	ldr	r3, [r3, #20]
 800f0ec:	019b      	lsls	r3, r3, #6
 800f0ee:	697a      	ldr	r2, [r7, #20]
 800f0f0:	4313      	orrs	r3, r2
 800f0f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	697a      	ldr	r2, [r7, #20]
 800f0f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	68fa      	ldr	r2, [r7, #12]
 800f0fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	685a      	ldr	r2, [r3, #4]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	693a      	ldr	r2, [r7, #16]
 800f10c:	621a      	str	r2, [r3, #32]
}
 800f10e:	46c0      	nop			; (mov r8, r8)
 800f110:	46bd      	mov	sp, r7
 800f112:	b006      	add	sp, #24
 800f114:	bd80      	pop	{r7, pc}
 800f116:	46c0      	nop			; (mov r8, r8)
 800f118:	ffffefff 	.word	0xffffefff
 800f11c:	feff8fff 	.word	0xfeff8fff
 800f120:	fffffcff 	.word	0xfffffcff
 800f124:	ffffdfff 	.word	0xffffdfff
 800f128:	40012c00 	.word	0x40012c00
 800f12c:	40014000 	.word	0x40014000
 800f130:	40014400 	.word	0x40014400
 800f134:	40014800 	.word	0x40014800
 800f138:	ffffbfff 	.word	0xffffbfff

0800f13c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b086      	sub	sp, #24
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6a1b      	ldr	r3, [r3, #32]
 800f14a:	4a25      	ldr	r2, [pc, #148]	; (800f1e0 <TIM_OC5_SetConfig+0xa4>)
 800f14c:	401a      	ands	r2, r3
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6a1b      	ldr	r3, [r3, #32]
 800f156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	4a1f      	ldr	r2, [pc, #124]	; (800f1e4 <TIM_OC5_SetConfig+0xa8>)
 800f168:	4013      	ands	r3, r2
 800f16a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	68fa      	ldr	r2, [r7, #12]
 800f172:	4313      	orrs	r3, r2
 800f174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	4a1b      	ldr	r2, [pc, #108]	; (800f1e8 <TIM_OC5_SetConfig+0xac>)
 800f17a:	4013      	ands	r3, r2
 800f17c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	689b      	ldr	r3, [r3, #8]
 800f182:	041b      	lsls	r3, r3, #16
 800f184:	693a      	ldr	r2, [r7, #16]
 800f186:	4313      	orrs	r3, r2
 800f188:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	4a17      	ldr	r2, [pc, #92]	; (800f1ec <TIM_OC5_SetConfig+0xb0>)
 800f18e:	4293      	cmp	r3, r2
 800f190:	d00b      	beq.n	800f1aa <TIM_OC5_SetConfig+0x6e>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	4a16      	ldr	r2, [pc, #88]	; (800f1f0 <TIM_OC5_SetConfig+0xb4>)
 800f196:	4293      	cmp	r3, r2
 800f198:	d007      	beq.n	800f1aa <TIM_OC5_SetConfig+0x6e>
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	4a15      	ldr	r2, [pc, #84]	; (800f1f4 <TIM_OC5_SetConfig+0xb8>)
 800f19e:	4293      	cmp	r3, r2
 800f1a0:	d003      	beq.n	800f1aa <TIM_OC5_SetConfig+0x6e>
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	4a14      	ldr	r2, [pc, #80]	; (800f1f8 <TIM_OC5_SetConfig+0xbc>)
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d109      	bne.n	800f1be <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f1aa:	697b      	ldr	r3, [r7, #20]
 800f1ac:	4a0c      	ldr	r2, [pc, #48]	; (800f1e0 <TIM_OC5_SetConfig+0xa4>)
 800f1ae:	4013      	ands	r3, r2
 800f1b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f1b2:	683b      	ldr	r3, [r7, #0]
 800f1b4:	695b      	ldr	r3, [r3, #20]
 800f1b6:	021b      	lsls	r3, r3, #8
 800f1b8:	697a      	ldr	r2, [r7, #20]
 800f1ba:	4313      	orrs	r3, r2
 800f1bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	697a      	ldr	r2, [r7, #20]
 800f1c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	68fa      	ldr	r2, [r7, #12]
 800f1c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f1ca:	683b      	ldr	r3, [r7, #0]
 800f1cc:	685a      	ldr	r2, [r3, #4]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	693a      	ldr	r2, [r7, #16]
 800f1d6:	621a      	str	r2, [r3, #32]
}
 800f1d8:	46c0      	nop			; (mov r8, r8)
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	b006      	add	sp, #24
 800f1de:	bd80      	pop	{r7, pc}
 800f1e0:	fffeffff 	.word	0xfffeffff
 800f1e4:	fffeff8f 	.word	0xfffeff8f
 800f1e8:	fffdffff 	.word	0xfffdffff
 800f1ec:	40012c00 	.word	0x40012c00
 800f1f0:	40014000 	.word	0x40014000
 800f1f4:	40014400 	.word	0x40014400
 800f1f8:	40014800 	.word	0x40014800

0800f1fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b086      	sub	sp, #24
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6a1b      	ldr	r3, [r3, #32]
 800f20a:	4a26      	ldr	r2, [pc, #152]	; (800f2a4 <TIM_OC6_SetConfig+0xa8>)
 800f20c:	401a      	ands	r2, r3
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	6a1b      	ldr	r3, [r3, #32]
 800f216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	685b      	ldr	r3, [r3, #4]
 800f21c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	4a20      	ldr	r2, [pc, #128]	; (800f2a8 <TIM_OC6_SetConfig+0xac>)
 800f228:	4013      	ands	r3, r2
 800f22a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	021b      	lsls	r3, r3, #8
 800f232:	68fa      	ldr	r2, [r7, #12]
 800f234:	4313      	orrs	r3, r2
 800f236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f238:	693b      	ldr	r3, [r7, #16]
 800f23a:	4a1c      	ldr	r2, [pc, #112]	; (800f2ac <TIM_OC6_SetConfig+0xb0>)
 800f23c:	4013      	ands	r3, r2
 800f23e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f240:	683b      	ldr	r3, [r7, #0]
 800f242:	689b      	ldr	r3, [r3, #8]
 800f244:	051b      	lsls	r3, r3, #20
 800f246:	693a      	ldr	r2, [r7, #16]
 800f248:	4313      	orrs	r3, r2
 800f24a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	4a18      	ldr	r2, [pc, #96]	; (800f2b0 <TIM_OC6_SetConfig+0xb4>)
 800f250:	4293      	cmp	r3, r2
 800f252:	d00b      	beq.n	800f26c <TIM_OC6_SetConfig+0x70>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	4a17      	ldr	r2, [pc, #92]	; (800f2b4 <TIM_OC6_SetConfig+0xb8>)
 800f258:	4293      	cmp	r3, r2
 800f25a:	d007      	beq.n	800f26c <TIM_OC6_SetConfig+0x70>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	4a16      	ldr	r2, [pc, #88]	; (800f2b8 <TIM_OC6_SetConfig+0xbc>)
 800f260:	4293      	cmp	r3, r2
 800f262:	d003      	beq.n	800f26c <TIM_OC6_SetConfig+0x70>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	4a15      	ldr	r2, [pc, #84]	; (800f2bc <TIM_OC6_SetConfig+0xc0>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d109      	bne.n	800f280 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f26c:	697b      	ldr	r3, [r7, #20]
 800f26e:	4a14      	ldr	r2, [pc, #80]	; (800f2c0 <TIM_OC6_SetConfig+0xc4>)
 800f270:	4013      	ands	r3, r2
 800f272:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	695b      	ldr	r3, [r3, #20]
 800f278:	029b      	lsls	r3, r3, #10
 800f27a:	697a      	ldr	r2, [r7, #20]
 800f27c:	4313      	orrs	r3, r2
 800f27e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	697a      	ldr	r2, [r7, #20]
 800f284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	68fa      	ldr	r2, [r7, #12]
 800f28a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	685a      	ldr	r2, [r3, #4]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	693a      	ldr	r2, [r7, #16]
 800f298:	621a      	str	r2, [r3, #32]
}
 800f29a:	46c0      	nop			; (mov r8, r8)
 800f29c:	46bd      	mov	sp, r7
 800f29e:	b006      	add	sp, #24
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	46c0      	nop			; (mov r8, r8)
 800f2a4:	ffefffff 	.word	0xffefffff
 800f2a8:	feff8fff 	.word	0xfeff8fff
 800f2ac:	ffdfffff 	.word	0xffdfffff
 800f2b0:	40012c00 	.word	0x40012c00
 800f2b4:	40014000 	.word	0x40014000
 800f2b8:	40014400 	.word	0x40014400
 800f2bc:	40014800 	.word	0x40014800
 800f2c0:	fffbffff 	.word	0xfffbffff

0800f2c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b086      	sub	sp, #24
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	60f8      	str	r0, [r7, #12]
 800f2cc:	60b9      	str	r1, [r7, #8]
 800f2ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	6a1b      	ldr	r3, [r3, #32]
 800f2d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	6a1b      	ldr	r3, [r3, #32]
 800f2da:	2201      	movs	r2, #1
 800f2dc:	4393      	bics	r3, r2
 800f2de:	001a      	movs	r2, r3
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	699b      	ldr	r3, [r3, #24]
 800f2e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	22f0      	movs	r2, #240	; 0xf0
 800f2ee:	4393      	bics	r3, r2
 800f2f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	011b      	lsls	r3, r3, #4
 800f2f6:	693a      	ldr	r2, [r7, #16]
 800f2f8:	4313      	orrs	r3, r2
 800f2fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	220a      	movs	r2, #10
 800f300:	4393      	bics	r3, r2
 800f302:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f304:	697a      	ldr	r2, [r7, #20]
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	4313      	orrs	r3, r2
 800f30a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	693a      	ldr	r2, [r7, #16]
 800f310:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	697a      	ldr	r2, [r7, #20]
 800f316:	621a      	str	r2, [r3, #32]
}
 800f318:	46c0      	nop			; (mov r8, r8)
 800f31a:	46bd      	mov	sp, r7
 800f31c:	b006      	add	sp, #24
 800f31e:	bd80      	pop	{r7, pc}

0800f320 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b086      	sub	sp, #24
 800f324:	af00      	add	r7, sp, #0
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	60b9      	str	r1, [r7, #8]
 800f32a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	6a1b      	ldr	r3, [r3, #32]
 800f330:	2210      	movs	r2, #16
 800f332:	4393      	bics	r3, r2
 800f334:	001a      	movs	r2, r3
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	699b      	ldr	r3, [r3, #24]
 800f33e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	6a1b      	ldr	r3, [r3, #32]
 800f344:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f346:	697b      	ldr	r3, [r7, #20]
 800f348:	4a0d      	ldr	r2, [pc, #52]	; (800f380 <TIM_TI2_ConfigInputStage+0x60>)
 800f34a:	4013      	ands	r3, r2
 800f34c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	031b      	lsls	r3, r3, #12
 800f352:	697a      	ldr	r2, [r7, #20]
 800f354:	4313      	orrs	r3, r2
 800f356:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	22a0      	movs	r2, #160	; 0xa0
 800f35c:	4393      	bics	r3, r2
 800f35e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	011b      	lsls	r3, r3, #4
 800f364:	693a      	ldr	r2, [r7, #16]
 800f366:	4313      	orrs	r3, r2
 800f368:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	697a      	ldr	r2, [r7, #20]
 800f36e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	693a      	ldr	r2, [r7, #16]
 800f374:	621a      	str	r2, [r3, #32]
}
 800f376:	46c0      	nop			; (mov r8, r8)
 800f378:	46bd      	mov	sp, r7
 800f37a:	b006      	add	sp, #24
 800f37c:	bd80      	pop	{r7, pc}
 800f37e:	46c0      	nop			; (mov r8, r8)
 800f380:	ffff0fff 	.word	0xffff0fff

0800f384 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	689b      	ldr	r3, [r3, #8]
 800f392:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	4a08      	ldr	r2, [pc, #32]	; (800f3b8 <TIM_ITRx_SetConfig+0x34>)
 800f398:	4013      	ands	r3, r2
 800f39a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f39c:	683a      	ldr	r2, [r7, #0]
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	4313      	orrs	r3, r2
 800f3a2:	2207      	movs	r2, #7
 800f3a4:	4313      	orrs	r3, r2
 800f3a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	68fa      	ldr	r2, [r7, #12]
 800f3ac:	609a      	str	r2, [r3, #8]
}
 800f3ae:	46c0      	nop			; (mov r8, r8)
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	b004      	add	sp, #16
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	46c0      	nop			; (mov r8, r8)
 800f3b8:	ffcfff8f 	.word	0xffcfff8f

0800f3bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b086      	sub	sp, #24
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	60f8      	str	r0, [r7, #12]
 800f3c4:	60b9      	str	r1, [r7, #8]
 800f3c6:	607a      	str	r2, [r7, #4]
 800f3c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	689b      	ldr	r3, [r3, #8]
 800f3ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f3d0:	697b      	ldr	r3, [r7, #20]
 800f3d2:	4a09      	ldr	r2, [pc, #36]	; (800f3f8 <TIM_ETR_SetConfig+0x3c>)
 800f3d4:	4013      	ands	r3, r2
 800f3d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	021a      	lsls	r2, r3, #8
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	431a      	orrs	r2, r3
 800f3e0:	68bb      	ldr	r3, [r7, #8]
 800f3e2:	4313      	orrs	r3, r2
 800f3e4:	697a      	ldr	r2, [r7, #20]
 800f3e6:	4313      	orrs	r3, r2
 800f3e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	697a      	ldr	r2, [r7, #20]
 800f3ee:	609a      	str	r2, [r3, #8]
}
 800f3f0:	46c0      	nop			; (mov r8, r8)
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	b006      	add	sp, #24
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	ffff00ff 	.word	0xffff00ff

0800f3fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b086      	sub	sp, #24
 800f400:	af00      	add	r7, sp, #0
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	221f      	movs	r2, #31
 800f40c:	4013      	ands	r3, r2
 800f40e:	2201      	movs	r2, #1
 800f410:	409a      	lsls	r2, r3
 800f412:	0013      	movs	r3, r2
 800f414:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	6a1b      	ldr	r3, [r3, #32]
 800f41a:	697a      	ldr	r2, [r7, #20]
 800f41c:	43d2      	mvns	r2, r2
 800f41e:	401a      	ands	r2, r3
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	6a1a      	ldr	r2, [r3, #32]
 800f428:	68bb      	ldr	r3, [r7, #8]
 800f42a:	211f      	movs	r1, #31
 800f42c:	400b      	ands	r3, r1
 800f42e:	6879      	ldr	r1, [r7, #4]
 800f430:	4099      	lsls	r1, r3
 800f432:	000b      	movs	r3, r1
 800f434:	431a      	orrs	r2, r3
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	621a      	str	r2, [r3, #32]
}
 800f43a:	46c0      	nop			; (mov r8, r8)
 800f43c:	46bd      	mov	sp, r7
 800f43e:	b006      	add	sp, #24
 800f440:	bd80      	pop	{r7, pc}
	...

0800f444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b084      	sub	sp, #16
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	223c      	movs	r2, #60	; 0x3c
 800f452:	5c9b      	ldrb	r3, [r3, r2]
 800f454:	2b01      	cmp	r3, #1
 800f456:	d101      	bne.n	800f45c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f458:	2302      	movs	r3, #2
 800f45a:	e04f      	b.n	800f4fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	223c      	movs	r2, #60	; 0x3c
 800f460:	2101      	movs	r1, #1
 800f462:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	223d      	movs	r2, #61	; 0x3d
 800f468:	2102      	movs	r1, #2
 800f46a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	689b      	ldr	r3, [r3, #8]
 800f47a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	4a20      	ldr	r2, [pc, #128]	; (800f504 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800f482:	4293      	cmp	r3, r2
 800f484:	d108      	bne.n	800f498 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	4a1f      	ldr	r2, [pc, #124]	; (800f508 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800f48a:	4013      	ands	r3, r2
 800f48c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	685b      	ldr	r3, [r3, #4]
 800f492:	68fa      	ldr	r2, [r7, #12]
 800f494:	4313      	orrs	r3, r2
 800f496:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	2270      	movs	r2, #112	; 0x70
 800f49c:	4393      	bics	r3, r2
 800f49e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	68fa      	ldr	r2, [r7, #12]
 800f4a6:	4313      	orrs	r3, r2
 800f4a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	68fa      	ldr	r2, [r7, #12]
 800f4b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	4a13      	ldr	r2, [pc, #76]	; (800f504 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d009      	beq.n	800f4d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	4a12      	ldr	r2, [pc, #72]	; (800f50c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d004      	beq.n	800f4d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	4a11      	ldr	r2, [pc, #68]	; (800f510 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800f4cc:	4293      	cmp	r3, r2
 800f4ce:	d10c      	bne.n	800f4ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	2280      	movs	r2, #128	; 0x80
 800f4d4:	4393      	bics	r3, r2
 800f4d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	689b      	ldr	r3, [r3, #8]
 800f4dc:	68ba      	ldr	r2, [r7, #8]
 800f4de:	4313      	orrs	r3, r2
 800f4e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	68ba      	ldr	r2, [r7, #8]
 800f4e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	223d      	movs	r2, #61	; 0x3d
 800f4ee:	2101      	movs	r1, #1
 800f4f0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	223c      	movs	r2, #60	; 0x3c
 800f4f6:	2100      	movs	r1, #0
 800f4f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f4fa:	2300      	movs	r3, #0
}
 800f4fc:	0018      	movs	r0, r3
 800f4fe:	46bd      	mov	sp, r7
 800f500:	b004      	add	sp, #16
 800f502:	bd80      	pop	{r7, pc}
 800f504:	40012c00 	.word	0x40012c00
 800f508:	ff0fffff 	.word	0xff0fffff
 800f50c:	40000400 	.word	0x40000400
 800f510:	40014000 	.word	0x40014000

0800f514 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f51c:	46c0      	nop			; (mov r8, r8)
 800f51e:	46bd      	mov	sp, r7
 800f520:	b002      	add	sp, #8
 800f522:	bd80      	pop	{r7, pc}

0800f524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f524:	b580      	push	{r7, lr}
 800f526:	b082      	sub	sp, #8
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f52c:	46c0      	nop			; (mov r8, r8)
 800f52e:	46bd      	mov	sp, r7
 800f530:	b002      	add	sp, #8
 800f532:	bd80      	pop	{r7, pc}

0800f534 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f53c:	46c0      	nop			; (mov r8, r8)
 800f53e:	46bd      	mov	sp, r7
 800f540:	b002      	add	sp, #8
 800f542:	bd80      	pop	{r7, pc}

0800f544 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b082      	sub	sp, #8
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d101      	bne.n	800f556 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f552:	2301      	movs	r3, #1
 800f554:	e046      	b.n	800f5e4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2284      	movs	r2, #132	; 0x84
 800f55a:	589b      	ldr	r3, [r3, r2]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d107      	bne.n	800f570 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2280      	movs	r2, #128	; 0x80
 800f564:	2100      	movs	r1, #0
 800f566:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	0018      	movs	r0, r3
 800f56c:	f7f9 f9d0 	bl	8008910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2284      	movs	r2, #132	; 0x84
 800f574:	2124      	movs	r1, #36	; 0x24
 800f576:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	681a      	ldr	r2, [r3, #0]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	2101      	movs	r1, #1
 800f584:	438a      	bics	r2, r1
 800f586:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	0018      	movs	r0, r3
 800f58c:	f000 fb78 	bl	800fc80 <UART_SetConfig>
 800f590:	0003      	movs	r3, r0
 800f592:	2b01      	cmp	r3, #1
 800f594:	d101      	bne.n	800f59a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800f596:	2301      	movs	r3, #1
 800f598:	e024      	b.n	800f5e4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d003      	beq.n	800f5aa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	0018      	movs	r0, r3
 800f5a6:	f000 fd15 	bl	800ffd4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	681b      	ldr	r3, [r3, #0]
 800f5ae:	685a      	ldr	r2, [r3, #4]
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	490d      	ldr	r1, [pc, #52]	; (800f5ec <HAL_UART_Init+0xa8>)
 800f5b6:	400a      	ands	r2, r1
 800f5b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	689a      	ldr	r2, [r3, #8]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	212a      	movs	r1, #42	; 0x2a
 800f5c6:	438a      	bics	r2, r1
 800f5c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	681a      	ldr	r2, [r3, #0]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	2101      	movs	r1, #1
 800f5d6:	430a      	orrs	r2, r1
 800f5d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	0018      	movs	r0, r3
 800f5de:	f000 fdad 	bl	801013c <UART_CheckIdleState>
 800f5e2:	0003      	movs	r3, r0
}
 800f5e4:	0018      	movs	r0, r3
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	b002      	add	sp, #8
 800f5ea:	bd80      	pop	{r7, pc}
 800f5ec:	ffffb7ff 	.word	0xffffb7ff

0800f5f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b08a      	sub	sp, #40	; 0x28
 800f5f4:	af02      	add	r7, sp, #8
 800f5f6:	60f8      	str	r0, [r7, #12]
 800f5f8:	60b9      	str	r1, [r7, #8]
 800f5fa:	603b      	str	r3, [r7, #0]
 800f5fc:	1dbb      	adds	r3, r7, #6
 800f5fe:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2284      	movs	r2, #132	; 0x84
 800f604:	589b      	ldr	r3, [r3, r2]
 800f606:	2b20      	cmp	r3, #32
 800f608:	d000      	beq.n	800f60c <HAL_UART_Transmit+0x1c>
 800f60a:	e097      	b.n	800f73c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f60c:	68bb      	ldr	r3, [r7, #8]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d003      	beq.n	800f61a <HAL_UART_Transmit+0x2a>
 800f612:	1dbb      	adds	r3, r7, #6
 800f614:	881b      	ldrh	r3, [r3, #0]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d101      	bne.n	800f61e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800f61a:	2301      	movs	r3, #1
 800f61c:	e08f      	b.n	800f73e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	689a      	ldr	r2, [r3, #8]
 800f622:	2380      	movs	r3, #128	; 0x80
 800f624:	015b      	lsls	r3, r3, #5
 800f626:	429a      	cmp	r2, r3
 800f628:	d109      	bne.n	800f63e <HAL_UART_Transmit+0x4e>
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	691b      	ldr	r3, [r3, #16]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d105      	bne.n	800f63e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	2201      	movs	r2, #1
 800f636:	4013      	ands	r3, r2
 800f638:	d001      	beq.n	800f63e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800f63a:	2301      	movs	r3, #1
 800f63c:	e07f      	b.n	800f73e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	2280      	movs	r2, #128	; 0x80
 800f642:	5c9b      	ldrb	r3, [r3, r2]
 800f644:	2b01      	cmp	r3, #1
 800f646:	d101      	bne.n	800f64c <HAL_UART_Transmit+0x5c>
 800f648:	2302      	movs	r3, #2
 800f64a:	e078      	b.n	800f73e <HAL_UART_Transmit+0x14e>
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	2280      	movs	r2, #128	; 0x80
 800f650:	2101      	movs	r1, #1
 800f652:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	228c      	movs	r2, #140	; 0x8c
 800f658:	2100      	movs	r1, #0
 800f65a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2284      	movs	r2, #132	; 0x84
 800f660:	2121      	movs	r1, #33	; 0x21
 800f662:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f664:	f7fa f956 	bl	8009914 <HAL_GetTick>
 800f668:	0003      	movs	r3, r0
 800f66a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	1dba      	adds	r2, r7, #6
 800f670:	2154      	movs	r1, #84	; 0x54
 800f672:	8812      	ldrh	r2, [r2, #0]
 800f674:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	1dba      	adds	r2, r7, #6
 800f67a:	2156      	movs	r1, #86	; 0x56
 800f67c:	8812      	ldrh	r2, [r2, #0]
 800f67e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	689a      	ldr	r2, [r3, #8]
 800f684:	2380      	movs	r3, #128	; 0x80
 800f686:	015b      	lsls	r3, r3, #5
 800f688:	429a      	cmp	r2, r3
 800f68a:	d108      	bne.n	800f69e <HAL_UART_Transmit+0xae>
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	691b      	ldr	r3, [r3, #16]
 800f690:	2b00      	cmp	r3, #0
 800f692:	d104      	bne.n	800f69e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 800f694:	2300      	movs	r3, #0
 800f696:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f698:	68bb      	ldr	r3, [r7, #8]
 800f69a:	61bb      	str	r3, [r7, #24]
 800f69c:	e003      	b.n	800f6a6 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800f69e:	68bb      	ldr	r3, [r7, #8]
 800f6a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2280      	movs	r2, #128	; 0x80
 800f6aa:	2100      	movs	r1, #0
 800f6ac:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800f6ae:	e02c      	b.n	800f70a <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f6b0:	697a      	ldr	r2, [r7, #20]
 800f6b2:	68f8      	ldr	r0, [r7, #12]
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	9300      	str	r3, [sp, #0]
 800f6b8:	0013      	movs	r3, r2
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	2180      	movs	r1, #128	; 0x80
 800f6be:	f000 fd87 	bl	80101d0 <UART_WaitOnFlagUntilTimeout>
 800f6c2:	1e03      	subs	r3, r0, #0
 800f6c4:	d001      	beq.n	800f6ca <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800f6c6:	2303      	movs	r3, #3
 800f6c8:	e039      	b.n	800f73e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800f6ca:	69fb      	ldr	r3, [r7, #28]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d10b      	bne.n	800f6e8 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f6d0:	69bb      	ldr	r3, [r7, #24]
 800f6d2:	881b      	ldrh	r3, [r3, #0]
 800f6d4:	001a      	movs	r2, r3
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	05d2      	lsls	r2, r2, #23
 800f6dc:	0dd2      	lsrs	r2, r2, #23
 800f6de:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f6e0:	69bb      	ldr	r3, [r7, #24]
 800f6e2:	3302      	adds	r3, #2
 800f6e4:	61bb      	str	r3, [r7, #24]
 800f6e6:	e007      	b.n	800f6f8 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	781a      	ldrb	r2, [r3, #0]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f6f2:	69fb      	ldr	r3, [r7, #28]
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	2256      	movs	r2, #86	; 0x56
 800f6fc:	5a9b      	ldrh	r3, [r3, r2]
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	3b01      	subs	r3, #1
 800f702:	b299      	uxth	r1, r3
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	2256      	movs	r2, #86	; 0x56
 800f708:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	2256      	movs	r2, #86	; 0x56
 800f70e:	5a9b      	ldrh	r3, [r3, r2]
 800f710:	b29b      	uxth	r3, r3
 800f712:	2b00      	cmp	r3, #0
 800f714:	d1cc      	bne.n	800f6b0 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f716:	697a      	ldr	r2, [r7, #20]
 800f718:	68f8      	ldr	r0, [r7, #12]
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	9300      	str	r3, [sp, #0]
 800f71e:	0013      	movs	r3, r2
 800f720:	2200      	movs	r2, #0
 800f722:	2140      	movs	r1, #64	; 0x40
 800f724:	f000 fd54 	bl	80101d0 <UART_WaitOnFlagUntilTimeout>
 800f728:	1e03      	subs	r3, r0, #0
 800f72a:	d001      	beq.n	800f730 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 800f72c:	2303      	movs	r3, #3
 800f72e:	e006      	b.n	800f73e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	2284      	movs	r2, #132	; 0x84
 800f734:	2120      	movs	r1, #32
 800f736:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800f738:	2300      	movs	r3, #0
 800f73a:	e000      	b.n	800f73e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800f73c:	2302      	movs	r3, #2
  }
}
 800f73e:	0018      	movs	r0, r3
 800f740:	46bd      	mov	sp, r7
 800f742:	b008      	add	sp, #32
 800f744:	bd80      	pop	{r7, pc}

0800f746 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f746:	b580      	push	{r7, lr}
 800f748:	b084      	sub	sp, #16
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	60f8      	str	r0, [r7, #12]
 800f74e:	60b9      	str	r1, [r7, #8]
 800f750:	1dbb      	adds	r3, r7, #6
 800f752:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	2288      	movs	r2, #136	; 0x88
 800f758:	589b      	ldr	r3, [r3, r2]
 800f75a:	2b20      	cmp	r3, #32
 800f75c:	d12f      	bne.n	800f7be <HAL_UART_Receive_IT+0x78>
  {
    if ((pData == NULL) || (Size == 0U))
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d003      	beq.n	800f76c <HAL_UART_Receive_IT+0x26>
 800f764:	1dbb      	adds	r3, r7, #6
 800f766:	881b      	ldrh	r3, [r3, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d101      	bne.n	800f770 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800f76c:	2301      	movs	r3, #1
 800f76e:	e027      	b.n	800f7c0 <HAL_UART_Receive_IT+0x7a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	689a      	ldr	r2, [r3, #8]
 800f774:	2380      	movs	r3, #128	; 0x80
 800f776:	015b      	lsls	r3, r3, #5
 800f778:	429a      	cmp	r2, r3
 800f77a:	d109      	bne.n	800f790 <HAL_UART_Receive_IT+0x4a>
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	691b      	ldr	r3, [r3, #16]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d105      	bne.n	800f790 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800f784:	68bb      	ldr	r3, [r7, #8]
 800f786:	2201      	movs	r2, #1
 800f788:	4013      	ands	r3, r2
 800f78a:	d001      	beq.n	800f790 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800f78c:	2301      	movs	r3, #1
 800f78e:	e017      	b.n	800f7c0 <HAL_UART_Receive_IT+0x7a>
      }
    }

    __HAL_LOCK(huart);
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	2280      	movs	r2, #128	; 0x80
 800f794:	5c9b      	ldrb	r3, [r3, r2]
 800f796:	2b01      	cmp	r3, #1
 800f798:	d101      	bne.n	800f79e <HAL_UART_Receive_IT+0x58>
 800f79a:	2302      	movs	r3, #2
 800f79c:	e010      	b.n	800f7c0 <HAL_UART_Receive_IT+0x7a>
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	2280      	movs	r2, #128	; 0x80
 800f7a2:	2101      	movs	r1, #1
 800f7a4:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	66da      	str	r2, [r3, #108]	; 0x6c

    return(UART_Start_Receive_IT(huart, pData, Size));
 800f7ac:	1dbb      	adds	r3, r7, #6
 800f7ae:	881a      	ldrh	r2, [r3, #0]
 800f7b0:	68b9      	ldr	r1, [r7, #8]
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	0018      	movs	r0, r3
 800f7b6:	f000 fd8d 	bl	80102d4 <UART_Start_Receive_IT>
 800f7ba:	0003      	movs	r3, r0
 800f7bc:	e000      	b.n	800f7c0 <HAL_UART_Receive_IT+0x7a>
  }
  else
  {
    return HAL_BUSY;
 800f7be:	2302      	movs	r3, #2
  }
}
 800f7c0:	0018      	movs	r0, r3
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	b004      	add	sp, #16
 800f7c6:	bd80      	pop	{r7, pc}

0800f7c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b088      	sub	sp, #32
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	69db      	ldr	r3, [r3, #28]
 800f7d6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	689b      	ldr	r3, [r3, #8]
 800f7e6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f7e8:	69fb      	ldr	r3, [r7, #28]
 800f7ea:	4abb      	ldr	r2, [pc, #748]	; (800fad8 <HAL_UART_IRQHandler+0x310>)
 800f7ec:	4013      	ands	r3, r2
 800f7ee:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d117      	bne.n	800f826 <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f7f6:	69fb      	ldr	r3, [r7, #28]
 800f7f8:	2220      	movs	r2, #32
 800f7fa:	4013      	ands	r3, r2
 800f7fc:	d013      	beq.n	800f826 <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f7fe:	69bb      	ldr	r3, [r7, #24]
 800f800:	2220      	movs	r2, #32
 800f802:	4013      	ands	r3, r2
 800f804:	d104      	bne.n	800f810 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f806:	697a      	ldr	r2, [r7, #20]
 800f808:	2380      	movs	r3, #128	; 0x80
 800f80a:	055b      	lsls	r3, r3, #21
 800f80c:	4013      	ands	r3, r2
 800f80e:	d00a      	beq.n	800f826 <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f814:	2b00      	cmp	r3, #0
 800f816:	d100      	bne.n	800f81a <HAL_UART_IRQHandler+0x52>
 800f818:	e1fd      	b.n	800fc16 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f81e:	687a      	ldr	r2, [r7, #4]
 800f820:	0010      	movs	r0, r2
 800f822:	4798      	blx	r3
      }
      return;
 800f824:	e1f7      	b.n	800fc16 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d100      	bne.n	800f82e <HAL_UART_IRQHandler+0x66>
 800f82c:	e0de      	b.n	800f9ec <HAL_UART_IRQHandler+0x224>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	4aaa      	ldr	r2, [pc, #680]	; (800fadc <HAL_UART_IRQHandler+0x314>)
 800f832:	4013      	ands	r3, r2
 800f834:	d104      	bne.n	800f840 <HAL_UART_IRQHandler+0x78>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f836:	69bb      	ldr	r3, [r7, #24]
 800f838:	4aa9      	ldr	r2, [pc, #676]	; (800fae0 <HAL_UART_IRQHandler+0x318>)
 800f83a:	4013      	ands	r3, r2
 800f83c:	d100      	bne.n	800f840 <HAL_UART_IRQHandler+0x78>
 800f83e:	e0d5      	b.n	800f9ec <HAL_UART_IRQHandler+0x224>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f840:	69fb      	ldr	r3, [r7, #28]
 800f842:	2201      	movs	r2, #1
 800f844:	4013      	ands	r3, r2
 800f846:	d010      	beq.n	800f86a <HAL_UART_IRQHandler+0xa2>
 800f848:	69ba      	ldr	r2, [r7, #24]
 800f84a:	2380      	movs	r3, #128	; 0x80
 800f84c:	005b      	lsls	r3, r3, #1
 800f84e:	4013      	ands	r3, r2
 800f850:	d00b      	beq.n	800f86a <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	2201      	movs	r2, #1
 800f858:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	228c      	movs	r2, #140	; 0x8c
 800f85e:	589b      	ldr	r3, [r3, r2]
 800f860:	2201      	movs	r2, #1
 800f862:	431a      	orrs	r2, r3
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	218c      	movs	r1, #140	; 0x8c
 800f868:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f86a:	69fb      	ldr	r3, [r7, #28]
 800f86c:	2202      	movs	r2, #2
 800f86e:	4013      	ands	r3, r2
 800f870:	d00f      	beq.n	800f892 <HAL_UART_IRQHandler+0xca>
 800f872:	697b      	ldr	r3, [r7, #20]
 800f874:	2201      	movs	r2, #1
 800f876:	4013      	ands	r3, r2
 800f878:	d00b      	beq.n	800f892 <HAL_UART_IRQHandler+0xca>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	2202      	movs	r2, #2
 800f880:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	228c      	movs	r2, #140	; 0x8c
 800f886:	589b      	ldr	r3, [r3, r2]
 800f888:	2204      	movs	r2, #4
 800f88a:	431a      	orrs	r2, r3
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	218c      	movs	r1, #140	; 0x8c
 800f890:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f892:	69fb      	ldr	r3, [r7, #28]
 800f894:	2204      	movs	r2, #4
 800f896:	4013      	ands	r3, r2
 800f898:	d00f      	beq.n	800f8ba <HAL_UART_IRQHandler+0xf2>
 800f89a:	697b      	ldr	r3, [r7, #20]
 800f89c:	2201      	movs	r2, #1
 800f89e:	4013      	ands	r3, r2
 800f8a0:	d00b      	beq.n	800f8ba <HAL_UART_IRQHandler+0xf2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	2204      	movs	r2, #4
 800f8a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	228c      	movs	r2, #140	; 0x8c
 800f8ae:	589b      	ldr	r3, [r3, r2]
 800f8b0:	2202      	movs	r2, #2
 800f8b2:	431a      	orrs	r2, r3
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	218c      	movs	r1, #140	; 0x8c
 800f8b8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	2208      	movs	r2, #8
 800f8be:	4013      	ands	r3, r2
 800f8c0:	d013      	beq.n	800f8ea <HAL_UART_IRQHandler+0x122>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f8c2:	69bb      	ldr	r3, [r7, #24]
 800f8c4:	2220      	movs	r2, #32
 800f8c6:	4013      	ands	r3, r2
 800f8c8:	d103      	bne.n	800f8d2 <HAL_UART_IRQHandler+0x10a>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	4a83      	ldr	r2, [pc, #524]	; (800fadc <HAL_UART_IRQHandler+0x314>)
 800f8ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f8d0:	d00b      	beq.n	800f8ea <HAL_UART_IRQHandler+0x122>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	2208      	movs	r2, #8
 800f8d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	228c      	movs	r2, #140	; 0x8c
 800f8de:	589b      	ldr	r3, [r3, r2]
 800f8e0:	2208      	movs	r2, #8
 800f8e2:	431a      	orrs	r2, r3
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	218c      	movs	r1, #140	; 0x8c
 800f8e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f8ea:	69fa      	ldr	r2, [r7, #28]
 800f8ec:	2380      	movs	r3, #128	; 0x80
 800f8ee:	011b      	lsls	r3, r3, #4
 800f8f0:	4013      	ands	r3, r2
 800f8f2:	d011      	beq.n	800f918 <HAL_UART_IRQHandler+0x150>
 800f8f4:	69ba      	ldr	r2, [r7, #24]
 800f8f6:	2380      	movs	r3, #128	; 0x80
 800f8f8:	04db      	lsls	r3, r3, #19
 800f8fa:	4013      	ands	r3, r2
 800f8fc:	d00c      	beq.n	800f918 <HAL_UART_IRQHandler+0x150>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	2280      	movs	r2, #128	; 0x80
 800f904:	0112      	lsls	r2, r2, #4
 800f906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	228c      	movs	r2, #140	; 0x8c
 800f90c:	589b      	ldr	r3, [r3, r2]
 800f90e:	2220      	movs	r2, #32
 800f910:	431a      	orrs	r2, r3
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	218c      	movs	r1, #140	; 0x8c
 800f916:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	228c      	movs	r2, #140	; 0x8c
 800f91c:	589b      	ldr	r3, [r3, r2]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d100      	bne.n	800f924 <HAL_UART_IRQHandler+0x15c>
 800f922:	e17a      	b.n	800fc1a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	2220      	movs	r2, #32
 800f928:	4013      	ands	r3, r2
 800f92a:	d011      	beq.n	800f950 <HAL_UART_IRQHandler+0x188>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f92c:	69bb      	ldr	r3, [r7, #24]
 800f92e:	2220      	movs	r2, #32
 800f930:	4013      	ands	r3, r2
 800f932:	d104      	bne.n	800f93e <HAL_UART_IRQHandler+0x176>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f934:	697a      	ldr	r2, [r7, #20]
 800f936:	2380      	movs	r3, #128	; 0x80
 800f938:	055b      	lsls	r3, r3, #21
 800f93a:	4013      	ands	r3, r2
 800f93c:	d008      	beq.n	800f950 <HAL_UART_IRQHandler+0x188>
      {
        if (huart->RxISR != NULL)
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f942:	2b00      	cmp	r3, #0
 800f944:	d004      	beq.n	800f950 <HAL_UART_IRQHandler+0x188>
        {
          huart->RxISR(huart);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f94a:	687a      	ldr	r2, [r7, #4]
 800f94c:	0010      	movs	r0, r2
 800f94e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	228c      	movs	r2, #140	; 0x8c
 800f954:	589b      	ldr	r3, [r3, r2]
 800f956:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	689b      	ldr	r3, [r3, #8]
 800f95e:	2240      	movs	r2, #64	; 0x40
 800f960:	4013      	ands	r3, r2
 800f962:	2b40      	cmp	r3, #64	; 0x40
 800f964:	d003      	beq.n	800f96e <HAL_UART_IRQHandler+0x1a6>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2228      	movs	r2, #40	; 0x28
 800f96a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f96c:	d033      	beq.n	800f9d6 <HAL_UART_IRQHandler+0x20e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	0018      	movs	r0, r3
 800f972:	f000 fd77 	bl	8010464 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	689b      	ldr	r3, [r3, #8]
 800f97c:	2240      	movs	r2, #64	; 0x40
 800f97e:	4013      	ands	r3, r2
 800f980:	2b40      	cmp	r3, #64	; 0x40
 800f982:	d123      	bne.n	800f9cc <HAL_UART_IRQHandler+0x204>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	689a      	ldr	r2, [r3, #8]
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2140      	movs	r1, #64	; 0x40
 800f990:	438a      	bics	r2, r1
 800f992:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d012      	beq.n	800f9c2 <HAL_UART_IRQHandler+0x1fa>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9a0:	4a50      	ldr	r2, [pc, #320]	; (800fae4 <HAL_UART_IRQHandler+0x31c>)
 800f9a2:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9a8:	0018      	movs	r0, r3
 800f9aa:	f7fb fbd3 	bl	800b154 <HAL_DMA_Abort_IT>
 800f9ae:	1e03      	subs	r3, r0, #0
 800f9b0:	d01a      	beq.n	800f9e8 <HAL_UART_IRQHandler+0x220>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f9bc:	0018      	movs	r0, r3
 800f9be:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9c0:	e012      	b.n	800f9e8 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	0018      	movs	r0, r3
 800f9c6:	f000 f947 	bl	800fc58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9ca:	e00d      	b.n	800f9e8 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	0018      	movs	r0, r3
 800f9d0:	f000 f942 	bl	800fc58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9d4:	e008      	b.n	800f9e8 <HAL_UART_IRQHandler+0x220>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	0018      	movs	r0, r3
 800f9da:	f000 f93d 	bl	800fc58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	228c      	movs	r2, #140	; 0x8c
 800f9e2:	2100      	movs	r1, #0
 800f9e4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800f9e6:	e118      	b.n	800fc1a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9e8:	46c0      	nop			; (mov r8, r8)
    return;
 800f9ea:	e116      	b.n	800fc1a <HAL_UART_IRQHandler+0x452>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	d000      	beq.n	800f9f6 <HAL_UART_IRQHandler+0x22e>
 800f9f4:	e0bb      	b.n	800fb6e <HAL_UART_IRQHandler+0x3a6>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800f9f6:	69fb      	ldr	r3, [r7, #28]
 800f9f8:	2210      	movs	r2, #16
 800f9fa:	4013      	ands	r3, r2
 800f9fc:	d100      	bne.n	800fa00 <HAL_UART_IRQHandler+0x238>
 800f9fe:	e0b6      	b.n	800fb6e <HAL_UART_IRQHandler+0x3a6>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800fa00:	69bb      	ldr	r3, [r7, #24]
 800fa02:	2210      	movs	r2, #16
 800fa04:	4013      	ands	r3, r2
 800fa06:	d100      	bne.n	800fa0a <HAL_UART_IRQHandler+0x242>
 800fa08:	e0b1      	b.n	800fb6e <HAL_UART_IRQHandler+0x3a6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	2210      	movs	r2, #16
 800fa10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	689b      	ldr	r3, [r3, #8]
 800fa18:	2240      	movs	r2, #64	; 0x40
 800fa1a:	4013      	ands	r3, r2
 800fa1c:	2b40      	cmp	r3, #64	; 0x40
 800fa1e:	d165      	bne.n	800faec <HAL_UART_IRQHandler+0x324>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	685a      	ldr	r2, [r3, #4]
 800fa28:	2108      	movs	r1, #8
 800fa2a:	187b      	adds	r3, r7, r1
 800fa2c:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 800fa2e:	187b      	adds	r3, r7, r1
 800fa30:	881b      	ldrh	r3, [r3, #0]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d100      	bne.n	800fa38 <HAL_UART_IRQHandler+0x270>
 800fa36:	e0f2      	b.n	800fc1e <HAL_UART_IRQHandler+0x456>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	225c      	movs	r2, #92	; 0x5c
 800fa3c:	5a9b      	ldrh	r3, [r3, r2]
 800fa3e:	187a      	adds	r2, r7, r1
 800fa40:	8812      	ldrh	r2, [r2, #0]
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d300      	bcc.n	800fa48 <HAL_UART_IRQHandler+0x280>
 800fa46:	e0ea      	b.n	800fc1e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	187a      	adds	r2, r7, r1
 800fa4c:	215e      	movs	r1, #94	; 0x5e
 800fa4e:	8812      	ldrh	r2, [r2, #0]
 800fa50:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2220      	movs	r2, #32
 800fa5c:	4013      	ands	r3, r2
 800fa5e:	d12b      	bne.n	800fab8 <HAL_UART_IRQHandler+0x2f0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	681a      	ldr	r2, [r3, #0]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	491f      	ldr	r1, [pc, #124]	; (800fae8 <HAL_UART_IRQHandler+0x320>)
 800fa6c:	400a      	ands	r2, r1
 800fa6e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	689a      	ldr	r2, [r3, #8]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	2101      	movs	r1, #1
 800fa7c:	438a      	bics	r2, r1
 800fa7e:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	689a      	ldr	r2, [r3, #8]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	2140      	movs	r1, #64	; 0x40
 800fa8c:	438a      	bics	r2, r1
 800fa8e:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2288      	movs	r2, #136	; 0x88
 800fa94:	2120      	movs	r1, #32
 800fa96:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2200      	movs	r2, #0
 800fa9c:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	2110      	movs	r1, #16
 800faaa:	438a      	bics	r2, r1
 800faac:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fab2:	0018      	movs	r0, r3
 800fab4:	f7fb faec 	bl	800b090 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	225c      	movs	r2, #92	; 0x5c
 800fabc:	5a9a      	ldrh	r2, [r3, r2]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	215e      	movs	r1, #94	; 0x5e
 800fac2:	5a5b      	ldrh	r3, [r3, r1]
 800fac4:	b29b      	uxth	r3, r3
 800fac6:	1ad3      	subs	r3, r2, r3
 800fac8:	b29a      	uxth	r2, r3
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	0011      	movs	r1, r2
 800face:	0018      	movs	r0, r3
 800fad0:	f000 f8ca 	bl	800fc68 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800fad4:	e0a3      	b.n	800fc1e <HAL_UART_IRQHandler+0x456>
 800fad6:	46c0      	nop			; (mov r8, r8)
 800fad8:	0000080f 	.word	0x0000080f
 800fadc:	10000001 	.word	0x10000001
 800fae0:	04000120 	.word	0x04000120
 800fae4:	080104c9 	.word	0x080104c9
 800fae8:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	225c      	movs	r2, #92	; 0x5c
 800faf0:	5a99      	ldrh	r1, [r3, r2]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	225e      	movs	r2, #94	; 0x5e
 800faf6:	5a9b      	ldrh	r3, [r3, r2]
 800faf8:	b29a      	uxth	r2, r3
 800fafa:	200a      	movs	r0, #10
 800fafc:	183b      	adds	r3, r7, r0
 800fafe:	1a8a      	subs	r2, r1, r2
 800fb00:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	225e      	movs	r2, #94	; 0x5e
 800fb06:	5a9b      	ldrh	r3, [r3, r2]
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d100      	bne.n	800fb10 <HAL_UART_IRQHandler+0x348>
 800fb0e:	e088      	b.n	800fc22 <HAL_UART_IRQHandler+0x45a>
          &&(nb_rx_data > 0U) )
 800fb10:	183b      	adds	r3, r7, r0
 800fb12:	881b      	ldrh	r3, [r3, #0]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d100      	bne.n	800fb1a <HAL_UART_IRQHandler+0x352>
 800fb18:	e083      	b.n	800fc22 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	681a      	ldr	r2, [r3, #0]
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	4942      	ldr	r1, [pc, #264]	; (800fc30 <HAL_UART_IRQHandler+0x468>)
 800fb26:	400a      	ands	r2, r1
 800fb28:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	681b      	ldr	r3, [r3, #0]
 800fb2e:	689a      	ldr	r2, [r3, #8]
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	493f      	ldr	r1, [pc, #252]	; (800fc34 <HAL_UART_IRQHandler+0x46c>)
 800fb36:	400a      	ands	r2, r1
 800fb38:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2288      	movs	r2, #136	; 0x88
 800fb3e:	2120      	movs	r1, #32
 800fb40:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2200      	movs	r2, #0
 800fb46:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	681a      	ldr	r2, [r3, #0]
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	2110      	movs	r1, #16
 800fb5a:	438a      	bics	r2, r1
 800fb5c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fb5e:	183b      	adds	r3, r7, r0
 800fb60:	881a      	ldrh	r2, [r3, #0]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	0011      	movs	r1, r2
 800fb66:	0018      	movs	r0, r3
 800fb68:	f000 f87e 	bl	800fc68 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800fb6c:	e059      	b.n	800fc22 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fb6e:	69fa      	ldr	r2, [r7, #28]
 800fb70:	2380      	movs	r3, #128	; 0x80
 800fb72:	035b      	lsls	r3, r3, #13
 800fb74:	4013      	ands	r3, r2
 800fb76:	d00e      	beq.n	800fb96 <HAL_UART_IRQHandler+0x3ce>
 800fb78:	697a      	ldr	r2, [r7, #20]
 800fb7a:	2380      	movs	r3, #128	; 0x80
 800fb7c:	03db      	lsls	r3, r3, #15
 800fb7e:	4013      	ands	r3, r2
 800fb80:	d009      	beq.n	800fb96 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	2280      	movs	r2, #128	; 0x80
 800fb88:	0352      	lsls	r2, r2, #13
 800fb8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	0018      	movs	r0, r3
 800fb90:	f000 ffdc 	bl	8010b4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fb94:	e048      	b.n	800fc28 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fb96:	69fb      	ldr	r3, [r7, #28]
 800fb98:	2280      	movs	r2, #128	; 0x80
 800fb9a:	4013      	ands	r3, r2
 800fb9c:	d012      	beq.n	800fbc4 <HAL_UART_IRQHandler+0x3fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fb9e:	69bb      	ldr	r3, [r7, #24]
 800fba0:	2280      	movs	r2, #128	; 0x80
 800fba2:	4013      	ands	r3, r2
 800fba4:	d104      	bne.n	800fbb0 <HAL_UART_IRQHandler+0x3e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fba6:	697a      	ldr	r2, [r7, #20]
 800fba8:	2380      	movs	r3, #128	; 0x80
 800fbaa:	041b      	lsls	r3, r3, #16
 800fbac:	4013      	ands	r3, r2
 800fbae:	d009      	beq.n	800fbc4 <HAL_UART_IRQHandler+0x3fc>
  {
    if (huart->TxISR != NULL)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d036      	beq.n	800fc26 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	0010      	movs	r0, r2
 800fbc0:	4798      	blx	r3
    }
    return;
 800fbc2:	e030      	b.n	800fc26 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fbc4:	69fb      	ldr	r3, [r7, #28]
 800fbc6:	2240      	movs	r2, #64	; 0x40
 800fbc8:	4013      	ands	r3, r2
 800fbca:	d008      	beq.n	800fbde <HAL_UART_IRQHandler+0x416>
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	2240      	movs	r2, #64	; 0x40
 800fbd0:	4013      	ands	r3, r2
 800fbd2:	d004      	beq.n	800fbde <HAL_UART_IRQHandler+0x416>
  {
    UART_EndTransmit_IT(huart);
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	0018      	movs	r0, r3
 800fbd8:	f000 fc8d 	bl	80104f6 <UART_EndTransmit_IT>
    return;
 800fbdc:	e024      	b.n	800fc28 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fbde:	69fa      	ldr	r2, [r7, #28]
 800fbe0:	2380      	movs	r3, #128	; 0x80
 800fbe2:	041b      	lsls	r3, r3, #16
 800fbe4:	4013      	ands	r3, r2
 800fbe6:	d009      	beq.n	800fbfc <HAL_UART_IRQHandler+0x434>
 800fbe8:	69ba      	ldr	r2, [r7, #24]
 800fbea:	2380      	movs	r3, #128	; 0x80
 800fbec:	05db      	lsls	r3, r3, #23
 800fbee:	4013      	ands	r3, r2
 800fbf0:	d004      	beq.n	800fbfc <HAL_UART_IRQHandler+0x434>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	0018      	movs	r0, r3
 800fbf6:	f000 ffb9 	bl	8010b6c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fbfa:	e015      	b.n	800fc28 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fbfc:	69fa      	ldr	r2, [r7, #28]
 800fbfe:	2380      	movs	r3, #128	; 0x80
 800fc00:	045b      	lsls	r3, r3, #17
 800fc02:	4013      	ands	r3, r2
 800fc04:	d010      	beq.n	800fc28 <HAL_UART_IRQHandler+0x460>
 800fc06:	69bb      	ldr	r3, [r7, #24]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	da0d      	bge.n	800fc28 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	0018      	movs	r0, r3
 800fc10:	f000 ffa4 	bl	8010b5c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fc14:	e008      	b.n	800fc28 <HAL_UART_IRQHandler+0x460>
      return;
 800fc16:	46c0      	nop			; (mov r8, r8)
 800fc18:	e006      	b.n	800fc28 <HAL_UART_IRQHandler+0x460>
    return;
 800fc1a:	46c0      	nop			; (mov r8, r8)
 800fc1c:	e004      	b.n	800fc28 <HAL_UART_IRQHandler+0x460>
      return;
 800fc1e:	46c0      	nop			; (mov r8, r8)
 800fc20:	e002      	b.n	800fc28 <HAL_UART_IRQHandler+0x460>
      return;
 800fc22:	46c0      	nop			; (mov r8, r8)
 800fc24:	e000      	b.n	800fc28 <HAL_UART_IRQHandler+0x460>
    return;
 800fc26:	46c0      	nop			; (mov r8, r8)
  }
}
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	b008      	add	sp, #32
 800fc2c:	bd80      	pop	{r7, pc}
 800fc2e:	46c0      	nop			; (mov r8, r8)
 800fc30:	fffffedf 	.word	0xfffffedf
 800fc34:	effffffe 	.word	0xeffffffe

0800fc38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b082      	sub	sp, #8
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fc40:	46c0      	nop			; (mov r8, r8)
 800fc42:	46bd      	mov	sp, r7
 800fc44:	b002      	add	sp, #8
 800fc46:	bd80      	pop	{r7, pc}

0800fc48 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b082      	sub	sp, #8
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fc50:	46c0      	nop			; (mov r8, r8)
 800fc52:	46bd      	mov	sp, r7
 800fc54:	b002      	add	sp, #8
 800fc56:	bd80      	pop	{r7, pc}

0800fc58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b082      	sub	sp, #8
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fc60:	46c0      	nop			; (mov r8, r8)
 800fc62:	46bd      	mov	sp, r7
 800fc64:	b002      	add	sp, #8
 800fc66:	bd80      	pop	{r7, pc}

0800fc68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b082      	sub	sp, #8
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	000a      	movs	r2, r1
 800fc72:	1cbb      	adds	r3, r7, #2
 800fc74:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fc76:	46c0      	nop			; (mov r8, r8)
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	b002      	add	sp, #8
 800fc7c:	bd80      	pop	{r7, pc}
	...

0800fc80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b088      	sub	sp, #32
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fc88:	231a      	movs	r3, #26
 800fc8a:	18fb      	adds	r3, r7, r3
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	689a      	ldr	r2, [r3, #8]
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	691b      	ldr	r3, [r3, #16]
 800fc98:	431a      	orrs	r2, r3
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	695b      	ldr	r3, [r3, #20]
 800fc9e:	431a      	orrs	r2, r3
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	69db      	ldr	r3, [r3, #28]
 800fca4:	4313      	orrs	r3, r2
 800fca6:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fcac:	69fa      	ldr	r2, [r7, #28]
 800fcae:	4313      	orrs	r3, r2
 800fcb0:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	681b      	ldr	r3, [r3, #0]
 800fcb8:	4abc      	ldr	r2, [pc, #752]	; (800ffac <UART_SetConfig+0x32c>)
 800fcba:	4013      	ands	r3, r2
 800fcbc:	0019      	movs	r1, r3
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	69fa      	ldr	r2, [r7, #28]
 800fcc4:	430a      	orrs	r2, r1
 800fcc6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	681b      	ldr	r3, [r3, #0]
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	4ab8      	ldr	r2, [pc, #736]	; (800ffb0 <UART_SetConfig+0x330>)
 800fcd0:	4013      	ands	r3, r2
 800fcd2:	0019      	movs	r1, r3
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	68da      	ldr	r2, [r3, #12]
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	430a      	orrs	r2, r1
 800fcde:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	699b      	ldr	r3, [r3, #24]
 800fce4:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6a1b      	ldr	r3, [r3, #32]
 800fcea:	69fa      	ldr	r2, [r7, #28]
 800fcec:	4313      	orrs	r3, r2
 800fcee:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	689b      	ldr	r3, [r3, #8]
 800fcf6:	4aaf      	ldr	r2, [pc, #700]	; (800ffb4 <UART_SetConfig+0x334>)
 800fcf8:	4013      	ands	r3, r2
 800fcfa:	0019      	movs	r1, r3
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	69fa      	ldr	r2, [r7, #28]
 800fd02:	430a      	orrs	r2, r1
 800fd04:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd0c:	220f      	movs	r2, #15
 800fd0e:	4393      	bics	r3, r2
 800fd10:	0019      	movs	r1, r3
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	430a      	orrs	r2, r1
 800fd1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	4aa5      	ldr	r2, [pc, #660]	; (800ffb8 <UART_SetConfig+0x338>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d127      	bne.n	800fd78 <UART_SetConfig+0xf8>
 800fd28:	4ba4      	ldr	r3, [pc, #656]	; (800ffbc <UART_SetConfig+0x33c>)
 800fd2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd2c:	2203      	movs	r2, #3
 800fd2e:	4013      	ands	r3, r2
 800fd30:	2b03      	cmp	r3, #3
 800fd32:	d017      	beq.n	800fd64 <UART_SetConfig+0xe4>
 800fd34:	d81b      	bhi.n	800fd6e <UART_SetConfig+0xee>
 800fd36:	2b02      	cmp	r3, #2
 800fd38:	d00a      	beq.n	800fd50 <UART_SetConfig+0xd0>
 800fd3a:	d818      	bhi.n	800fd6e <UART_SetConfig+0xee>
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d002      	beq.n	800fd46 <UART_SetConfig+0xc6>
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d00a      	beq.n	800fd5a <UART_SetConfig+0xda>
 800fd44:	e013      	b.n	800fd6e <UART_SetConfig+0xee>
 800fd46:	231b      	movs	r3, #27
 800fd48:	18fb      	adds	r3, r7, r3
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	701a      	strb	r2, [r3, #0]
 800fd4e:	e058      	b.n	800fe02 <UART_SetConfig+0x182>
 800fd50:	231b      	movs	r3, #27
 800fd52:	18fb      	adds	r3, r7, r3
 800fd54:	2202      	movs	r2, #2
 800fd56:	701a      	strb	r2, [r3, #0]
 800fd58:	e053      	b.n	800fe02 <UART_SetConfig+0x182>
 800fd5a:	231b      	movs	r3, #27
 800fd5c:	18fb      	adds	r3, r7, r3
 800fd5e:	2204      	movs	r2, #4
 800fd60:	701a      	strb	r2, [r3, #0]
 800fd62:	e04e      	b.n	800fe02 <UART_SetConfig+0x182>
 800fd64:	231b      	movs	r3, #27
 800fd66:	18fb      	adds	r3, r7, r3
 800fd68:	2208      	movs	r2, #8
 800fd6a:	701a      	strb	r2, [r3, #0]
 800fd6c:	e049      	b.n	800fe02 <UART_SetConfig+0x182>
 800fd6e:	231b      	movs	r3, #27
 800fd70:	18fb      	adds	r3, r7, r3
 800fd72:	2210      	movs	r2, #16
 800fd74:	701a      	strb	r2, [r3, #0]
 800fd76:	e044      	b.n	800fe02 <UART_SetConfig+0x182>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	4a90      	ldr	r2, [pc, #576]	; (800ffc0 <UART_SetConfig+0x340>)
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d127      	bne.n	800fdd2 <UART_SetConfig+0x152>
 800fd82:	4b8e      	ldr	r3, [pc, #568]	; (800ffbc <UART_SetConfig+0x33c>)
 800fd84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd86:	220c      	movs	r2, #12
 800fd88:	4013      	ands	r3, r2
 800fd8a:	2b0c      	cmp	r3, #12
 800fd8c:	d017      	beq.n	800fdbe <UART_SetConfig+0x13e>
 800fd8e:	d81b      	bhi.n	800fdc8 <UART_SetConfig+0x148>
 800fd90:	2b08      	cmp	r3, #8
 800fd92:	d00a      	beq.n	800fdaa <UART_SetConfig+0x12a>
 800fd94:	d818      	bhi.n	800fdc8 <UART_SetConfig+0x148>
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d002      	beq.n	800fda0 <UART_SetConfig+0x120>
 800fd9a:	2b04      	cmp	r3, #4
 800fd9c:	d00a      	beq.n	800fdb4 <UART_SetConfig+0x134>
 800fd9e:	e013      	b.n	800fdc8 <UART_SetConfig+0x148>
 800fda0:	231b      	movs	r3, #27
 800fda2:	18fb      	adds	r3, r7, r3
 800fda4:	2200      	movs	r2, #0
 800fda6:	701a      	strb	r2, [r3, #0]
 800fda8:	e02b      	b.n	800fe02 <UART_SetConfig+0x182>
 800fdaa:	231b      	movs	r3, #27
 800fdac:	18fb      	adds	r3, r7, r3
 800fdae:	2202      	movs	r2, #2
 800fdb0:	701a      	strb	r2, [r3, #0]
 800fdb2:	e026      	b.n	800fe02 <UART_SetConfig+0x182>
 800fdb4:	231b      	movs	r3, #27
 800fdb6:	18fb      	adds	r3, r7, r3
 800fdb8:	2204      	movs	r2, #4
 800fdba:	701a      	strb	r2, [r3, #0]
 800fdbc:	e021      	b.n	800fe02 <UART_SetConfig+0x182>
 800fdbe:	231b      	movs	r3, #27
 800fdc0:	18fb      	adds	r3, r7, r3
 800fdc2:	2208      	movs	r2, #8
 800fdc4:	701a      	strb	r2, [r3, #0]
 800fdc6:	e01c      	b.n	800fe02 <UART_SetConfig+0x182>
 800fdc8:	231b      	movs	r3, #27
 800fdca:	18fb      	adds	r3, r7, r3
 800fdcc:	2210      	movs	r2, #16
 800fdce:	701a      	strb	r2, [r3, #0]
 800fdd0:	e017      	b.n	800fe02 <UART_SetConfig+0x182>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	4a7b      	ldr	r2, [pc, #492]	; (800ffc4 <UART_SetConfig+0x344>)
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	d104      	bne.n	800fde6 <UART_SetConfig+0x166>
 800fddc:	231b      	movs	r3, #27
 800fdde:	18fb      	adds	r3, r7, r3
 800fde0:	2200      	movs	r2, #0
 800fde2:	701a      	strb	r2, [r3, #0]
 800fde4:	e00d      	b.n	800fe02 <UART_SetConfig+0x182>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	4a77      	ldr	r2, [pc, #476]	; (800ffc8 <UART_SetConfig+0x348>)
 800fdec:	4293      	cmp	r3, r2
 800fdee:	d104      	bne.n	800fdfa <UART_SetConfig+0x17a>
 800fdf0:	231b      	movs	r3, #27
 800fdf2:	18fb      	adds	r3, r7, r3
 800fdf4:	2200      	movs	r2, #0
 800fdf6:	701a      	strb	r2, [r3, #0]
 800fdf8:	e003      	b.n	800fe02 <UART_SetConfig+0x182>
 800fdfa:	231b      	movs	r3, #27
 800fdfc:	18fb      	adds	r3, r7, r3
 800fdfe:	2210      	movs	r2, #16
 800fe00:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	69da      	ldr	r2, [r3, #28]
 800fe06:	2380      	movs	r3, #128	; 0x80
 800fe08:	021b      	lsls	r3, r3, #8
 800fe0a:	429a      	cmp	r2, r3
 800fe0c:	d000      	beq.n	800fe10 <UART_SetConfig+0x190>
 800fe0e:	e066      	b.n	800fede <UART_SetConfig+0x25e>
  {
    switch (clocksource)
 800fe10:	231b      	movs	r3, #27
 800fe12:	18fb      	adds	r3, r7, r3
 800fe14:	781b      	ldrb	r3, [r3, #0]
 800fe16:	2b08      	cmp	r3, #8
 800fe18:	d015      	beq.n	800fe46 <UART_SetConfig+0x1c6>
 800fe1a:	dc18      	bgt.n	800fe4e <UART_SetConfig+0x1ce>
 800fe1c:	2b04      	cmp	r3, #4
 800fe1e:	d00d      	beq.n	800fe3c <UART_SetConfig+0x1bc>
 800fe20:	dc15      	bgt.n	800fe4e <UART_SetConfig+0x1ce>
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d002      	beq.n	800fe2c <UART_SetConfig+0x1ac>
 800fe26:	2b02      	cmp	r3, #2
 800fe28:	d005      	beq.n	800fe36 <UART_SetConfig+0x1b6>
 800fe2a:	e010      	b.n	800fe4e <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fe2c:	f7fd f9c2 	bl	800d1b4 <HAL_RCC_GetPCLK1Freq>
 800fe30:	0003      	movs	r3, r0
 800fe32:	617b      	str	r3, [r7, #20]
        break;
 800fe34:	e012      	b.n	800fe5c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800fe36:	4b65      	ldr	r3, [pc, #404]	; (800ffcc <UART_SetConfig+0x34c>)
 800fe38:	617b      	str	r3, [r7, #20]
        break;
 800fe3a:	e00f      	b.n	800fe5c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800fe3c:	f7fd f92e 	bl	800d09c <HAL_RCC_GetSysClockFreq>
 800fe40:	0003      	movs	r3, r0
 800fe42:	617b      	str	r3, [r7, #20]
        break;
 800fe44:	e00a      	b.n	800fe5c <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fe46:	2380      	movs	r3, #128	; 0x80
 800fe48:	021b      	lsls	r3, r3, #8
 800fe4a:	617b      	str	r3, [r7, #20]
        break;
 800fe4c:	e006      	b.n	800fe5c <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800fe52:	231a      	movs	r3, #26
 800fe54:	18fb      	adds	r3, r7, r3
 800fe56:	2201      	movs	r2, #1
 800fe58:	701a      	strb	r2, [r3, #0]
        break;
 800fe5a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d100      	bne.n	800fe64 <UART_SetConfig+0x1e4>
 800fe62:	e08e      	b.n	800ff82 <UART_SetConfig+0x302>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe68:	4b59      	ldr	r3, [pc, #356]	; (800ffd0 <UART_SetConfig+0x350>)
 800fe6a:	0052      	lsls	r2, r2, #1
 800fe6c:	5ad3      	ldrh	r3, [r2, r3]
 800fe6e:	0019      	movs	r1, r3
 800fe70:	6978      	ldr	r0, [r7, #20]
 800fe72:	f7f0 f96b 	bl	800014c <__udivsi3>
 800fe76:	0003      	movs	r3, r0
 800fe78:	005a      	lsls	r2, r3, #1
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	685b      	ldr	r3, [r3, #4]
 800fe7e:	085b      	lsrs	r3, r3, #1
 800fe80:	18d2      	adds	r2, r2, r3
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	685b      	ldr	r3, [r3, #4]
 800fe86:	0019      	movs	r1, r3
 800fe88:	0010      	movs	r0, r2
 800fe8a:	f7f0 f95f 	bl	800014c <__udivsi3>
 800fe8e:	0003      	movs	r3, r0
 800fe90:	b29b      	uxth	r3, r3
 800fe92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fe94:	693b      	ldr	r3, [r7, #16]
 800fe96:	2b0f      	cmp	r3, #15
 800fe98:	d91c      	bls.n	800fed4 <UART_SetConfig+0x254>
 800fe9a:	693a      	ldr	r2, [r7, #16]
 800fe9c:	2380      	movs	r3, #128	; 0x80
 800fe9e:	025b      	lsls	r3, r3, #9
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d217      	bcs.n	800fed4 <UART_SetConfig+0x254>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	b29a      	uxth	r2, r3
 800fea8:	200e      	movs	r0, #14
 800feaa:	183b      	adds	r3, r7, r0
 800feac:	210f      	movs	r1, #15
 800feae:	438a      	bics	r2, r1
 800feb0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800feb2:	693b      	ldr	r3, [r7, #16]
 800feb4:	085b      	lsrs	r3, r3, #1
 800feb6:	b29b      	uxth	r3, r3
 800feb8:	2207      	movs	r2, #7
 800feba:	4013      	ands	r3, r2
 800febc:	b299      	uxth	r1, r3
 800febe:	183b      	adds	r3, r7, r0
 800fec0:	183a      	adds	r2, r7, r0
 800fec2:	8812      	ldrh	r2, [r2, #0]
 800fec4:	430a      	orrs	r2, r1
 800fec6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	183a      	adds	r2, r7, r0
 800fece:	8812      	ldrh	r2, [r2, #0]
 800fed0:	60da      	str	r2, [r3, #12]
 800fed2:	e056      	b.n	800ff82 <UART_SetConfig+0x302>
      }
      else
      {
        ret = HAL_ERROR;
 800fed4:	231a      	movs	r3, #26
 800fed6:	18fb      	adds	r3, r7, r3
 800fed8:	2201      	movs	r2, #1
 800feda:	701a      	strb	r2, [r3, #0]
 800fedc:	e051      	b.n	800ff82 <UART_SetConfig+0x302>
      }
    }
  }
  else
  {
    switch (clocksource)
 800fede:	231b      	movs	r3, #27
 800fee0:	18fb      	adds	r3, r7, r3
 800fee2:	781b      	ldrb	r3, [r3, #0]
 800fee4:	2b08      	cmp	r3, #8
 800fee6:	d015      	beq.n	800ff14 <UART_SetConfig+0x294>
 800fee8:	dc18      	bgt.n	800ff1c <UART_SetConfig+0x29c>
 800feea:	2b04      	cmp	r3, #4
 800feec:	d00d      	beq.n	800ff0a <UART_SetConfig+0x28a>
 800feee:	dc15      	bgt.n	800ff1c <UART_SetConfig+0x29c>
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d002      	beq.n	800fefa <UART_SetConfig+0x27a>
 800fef4:	2b02      	cmp	r3, #2
 800fef6:	d005      	beq.n	800ff04 <UART_SetConfig+0x284>
 800fef8:	e010      	b.n	800ff1c <UART_SetConfig+0x29c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fefa:	f7fd f95b 	bl	800d1b4 <HAL_RCC_GetPCLK1Freq>
 800fefe:	0003      	movs	r3, r0
 800ff00:	617b      	str	r3, [r7, #20]
        break;
 800ff02:	e012      	b.n	800ff2a <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ff04:	4b31      	ldr	r3, [pc, #196]	; (800ffcc <UART_SetConfig+0x34c>)
 800ff06:	617b      	str	r3, [r7, #20]
        break;
 800ff08:	e00f      	b.n	800ff2a <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ff0a:	f7fd f8c7 	bl	800d09c <HAL_RCC_GetSysClockFreq>
 800ff0e:	0003      	movs	r3, r0
 800ff10:	617b      	str	r3, [r7, #20]
        break;
 800ff12:	e00a      	b.n	800ff2a <UART_SetConfig+0x2aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff14:	2380      	movs	r3, #128	; 0x80
 800ff16:	021b      	lsls	r3, r3, #8
 800ff18:	617b      	str	r3, [r7, #20]
        break;
 800ff1a:	e006      	b.n	800ff2a <UART_SetConfig+0x2aa>
      default:
        pclk = 0U;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ff20:	231a      	movs	r3, #26
 800ff22:	18fb      	adds	r3, r7, r3
 800ff24:	2201      	movs	r2, #1
 800ff26:	701a      	strb	r2, [r3, #0]
        break;
 800ff28:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800ff2a:	697b      	ldr	r3, [r7, #20]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d028      	beq.n	800ff82 <UART_SetConfig+0x302>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff34:	4b26      	ldr	r3, [pc, #152]	; (800ffd0 <UART_SetConfig+0x350>)
 800ff36:	0052      	lsls	r2, r2, #1
 800ff38:	5ad3      	ldrh	r3, [r2, r3]
 800ff3a:	0019      	movs	r1, r3
 800ff3c:	6978      	ldr	r0, [r7, #20]
 800ff3e:	f7f0 f905 	bl	800014c <__udivsi3>
 800ff42:	0003      	movs	r3, r0
 800ff44:	001a      	movs	r2, r3
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	685b      	ldr	r3, [r3, #4]
 800ff4a:	085b      	lsrs	r3, r3, #1
 800ff4c:	18d2      	adds	r2, r2, r3
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	0019      	movs	r1, r3
 800ff54:	0010      	movs	r0, r2
 800ff56:	f7f0 f8f9 	bl	800014c <__udivsi3>
 800ff5a:	0003      	movs	r3, r0
 800ff5c:	b29b      	uxth	r3, r3
 800ff5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff60:	693b      	ldr	r3, [r7, #16]
 800ff62:	2b0f      	cmp	r3, #15
 800ff64:	d909      	bls.n	800ff7a <UART_SetConfig+0x2fa>
 800ff66:	693a      	ldr	r2, [r7, #16]
 800ff68:	2380      	movs	r3, #128	; 0x80
 800ff6a:	025b      	lsls	r3, r3, #9
 800ff6c:	429a      	cmp	r2, r3
 800ff6e:	d204      	bcs.n	800ff7a <UART_SetConfig+0x2fa>
      {
        huart->Instance->BRR = usartdiv;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	693a      	ldr	r2, [r7, #16]
 800ff76:	60da      	str	r2, [r3, #12]
 800ff78:	e003      	b.n	800ff82 <UART_SetConfig+0x302>
      }
      else
      {
        ret = HAL_ERROR;
 800ff7a:	231a      	movs	r3, #26
 800ff7c:	18fb      	adds	r3, r7, r3
 800ff7e:	2201      	movs	r2, #1
 800ff80:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	226a      	movs	r2, #106	; 0x6a
 800ff86:	2101      	movs	r1, #1
 800ff88:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	2268      	movs	r2, #104	; 0x68
 800ff8e:	2101      	movs	r1, #1
 800ff90:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2200      	movs	r2, #0
 800ff96:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ff9e:	231a      	movs	r3, #26
 800ffa0:	18fb      	adds	r3, r7, r3
 800ffa2:	781b      	ldrb	r3, [r3, #0]
}
 800ffa4:	0018      	movs	r0, r3
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	b008      	add	sp, #32
 800ffaa:	bd80      	pop	{r7, pc}
 800ffac:	cfff69f3 	.word	0xcfff69f3
 800ffb0:	ffffcfff 	.word	0xffffcfff
 800ffb4:	11fff4ff 	.word	0x11fff4ff
 800ffb8:	40013800 	.word	0x40013800
 800ffbc:	40021000 	.word	0x40021000
 800ffc0:	40004400 	.word	0x40004400
 800ffc4:	40004800 	.word	0x40004800
 800ffc8:	40004c00 	.word	0x40004c00
 800ffcc:	00f42400 	.word	0x00f42400
 800ffd0:	080177b8 	.word	0x080177b8

0800ffd4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	4013      	ands	r3, r2
 800ffe4:	d00b      	beq.n	800fffe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	685b      	ldr	r3, [r3, #4]
 800ffec:	4a4a      	ldr	r2, [pc, #296]	; (8010118 <UART_AdvFeatureConfig+0x144>)
 800ffee:	4013      	ands	r3, r2
 800fff0:	0019      	movs	r1, r3
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	430a      	orrs	r2, r1
 800fffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010002:	2202      	movs	r2, #2
 8010004:	4013      	ands	r3, r2
 8010006:	d00b      	beq.n	8010020 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	685b      	ldr	r3, [r3, #4]
 801000e:	4a43      	ldr	r2, [pc, #268]	; (801011c <UART_AdvFeatureConfig+0x148>)
 8010010:	4013      	ands	r3, r2
 8010012:	0019      	movs	r1, r3
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	430a      	orrs	r2, r1
 801001e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010024:	2204      	movs	r2, #4
 8010026:	4013      	ands	r3, r2
 8010028:	d00b      	beq.n	8010042 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	685b      	ldr	r3, [r3, #4]
 8010030:	4a3b      	ldr	r2, [pc, #236]	; (8010120 <UART_AdvFeatureConfig+0x14c>)
 8010032:	4013      	ands	r3, r2
 8010034:	0019      	movs	r1, r3
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	430a      	orrs	r2, r1
 8010040:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010046:	2208      	movs	r2, #8
 8010048:	4013      	ands	r3, r2
 801004a:	d00b      	beq.n	8010064 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	685b      	ldr	r3, [r3, #4]
 8010052:	4a34      	ldr	r2, [pc, #208]	; (8010124 <UART_AdvFeatureConfig+0x150>)
 8010054:	4013      	ands	r3, r2
 8010056:	0019      	movs	r1, r3
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	430a      	orrs	r2, r1
 8010062:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010068:	2210      	movs	r2, #16
 801006a:	4013      	ands	r3, r2
 801006c:	d00b      	beq.n	8010086 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	689b      	ldr	r3, [r3, #8]
 8010074:	4a2c      	ldr	r2, [pc, #176]	; (8010128 <UART_AdvFeatureConfig+0x154>)
 8010076:	4013      	ands	r3, r2
 8010078:	0019      	movs	r1, r3
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	430a      	orrs	r2, r1
 8010084:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801008a:	2220      	movs	r2, #32
 801008c:	4013      	ands	r3, r2
 801008e:	d00b      	beq.n	80100a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	689b      	ldr	r3, [r3, #8]
 8010096:	4a25      	ldr	r2, [pc, #148]	; (801012c <UART_AdvFeatureConfig+0x158>)
 8010098:	4013      	ands	r3, r2
 801009a:	0019      	movs	r1, r3
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	430a      	orrs	r2, r1
 80100a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ac:	2240      	movs	r2, #64	; 0x40
 80100ae:	4013      	ands	r3, r2
 80100b0:	d01d      	beq.n	80100ee <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	685b      	ldr	r3, [r3, #4]
 80100b8:	4a1d      	ldr	r2, [pc, #116]	; (8010130 <UART_AdvFeatureConfig+0x15c>)
 80100ba:	4013      	ands	r3, r2
 80100bc:	0019      	movs	r1, r3
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	430a      	orrs	r2, r1
 80100c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80100ce:	2380      	movs	r3, #128	; 0x80
 80100d0:	035b      	lsls	r3, r3, #13
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d10b      	bne.n	80100ee <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	685b      	ldr	r3, [r3, #4]
 80100dc:	4a15      	ldr	r2, [pc, #84]	; (8010134 <UART_AdvFeatureConfig+0x160>)
 80100de:	4013      	ands	r3, r2
 80100e0:	0019      	movs	r1, r3
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	430a      	orrs	r2, r1
 80100ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100f2:	2280      	movs	r2, #128	; 0x80
 80100f4:	4013      	ands	r3, r2
 80100f6:	d00b      	beq.n	8010110 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	681b      	ldr	r3, [r3, #0]
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	4a0e      	ldr	r2, [pc, #56]	; (8010138 <UART_AdvFeatureConfig+0x164>)
 8010100:	4013      	ands	r3, r2
 8010102:	0019      	movs	r1, r3
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	430a      	orrs	r2, r1
 801010e:	605a      	str	r2, [r3, #4]
  }
}
 8010110:	46c0      	nop			; (mov r8, r8)
 8010112:	46bd      	mov	sp, r7
 8010114:	b002      	add	sp, #8
 8010116:	bd80      	pop	{r7, pc}
 8010118:	fffdffff 	.word	0xfffdffff
 801011c:	fffeffff 	.word	0xfffeffff
 8010120:	fffbffff 	.word	0xfffbffff
 8010124:	ffff7fff 	.word	0xffff7fff
 8010128:	ffffefff 	.word	0xffffefff
 801012c:	ffffdfff 	.word	0xffffdfff
 8010130:	ffefffff 	.word	0xffefffff
 8010134:	ff9fffff 	.word	0xff9fffff
 8010138:	fff7ffff 	.word	0xfff7ffff

0801013c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b086      	sub	sp, #24
 8010140:	af02      	add	r7, sp, #8
 8010142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	228c      	movs	r2, #140	; 0x8c
 8010148:	2100      	movs	r1, #0
 801014a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801014c:	f7f9 fbe2 	bl	8009914 <HAL_GetTick>
 8010150:	0003      	movs	r3, r0
 8010152:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	2208      	movs	r2, #8
 801015c:	4013      	ands	r3, r2
 801015e:	2b08      	cmp	r3, #8
 8010160:	d10c      	bne.n	801017c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	2280      	movs	r2, #128	; 0x80
 8010166:	0391      	lsls	r1, r2, #14
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	4a18      	ldr	r2, [pc, #96]	; (80101cc <UART_CheckIdleState+0x90>)
 801016c:	9200      	str	r2, [sp, #0]
 801016e:	2200      	movs	r2, #0
 8010170:	f000 f82e 	bl	80101d0 <UART_WaitOnFlagUntilTimeout>
 8010174:	1e03      	subs	r3, r0, #0
 8010176:	d001      	beq.n	801017c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010178:	2303      	movs	r3, #3
 801017a:	e023      	b.n	80101c4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2204      	movs	r2, #4
 8010184:	4013      	ands	r3, r2
 8010186:	2b04      	cmp	r3, #4
 8010188:	d10c      	bne.n	80101a4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	2280      	movs	r2, #128	; 0x80
 801018e:	03d1      	lsls	r1, r2, #15
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	4a0e      	ldr	r2, [pc, #56]	; (80101cc <UART_CheckIdleState+0x90>)
 8010194:	9200      	str	r2, [sp, #0]
 8010196:	2200      	movs	r2, #0
 8010198:	f000 f81a 	bl	80101d0 <UART_WaitOnFlagUntilTimeout>
 801019c:	1e03      	subs	r3, r0, #0
 801019e:	d001      	beq.n	80101a4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80101a0:	2303      	movs	r3, #3
 80101a2:	e00f      	b.n	80101c4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2284      	movs	r2, #132	; 0x84
 80101a8:	2120      	movs	r1, #32
 80101aa:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2288      	movs	r2, #136	; 0x88
 80101b0:	2120      	movs	r1, #32
 80101b2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2200      	movs	r2, #0
 80101b8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	2280      	movs	r2, #128	; 0x80
 80101be:	2100      	movs	r1, #0
 80101c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80101c2:	2300      	movs	r3, #0
}
 80101c4:	0018      	movs	r0, r3
 80101c6:	46bd      	mov	sp, r7
 80101c8:	b004      	add	sp, #16
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	01ffffff 	.word	0x01ffffff

080101d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b084      	sub	sp, #16
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	60f8      	str	r0, [r7, #12]
 80101d8:	60b9      	str	r1, [r7, #8]
 80101da:	603b      	str	r3, [r7, #0]
 80101dc:	1dfb      	adds	r3, r7, #7
 80101de:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80101e0:	e062      	b.n	80102a8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80101e2:	69bb      	ldr	r3, [r7, #24]
 80101e4:	3301      	adds	r3, #1
 80101e6:	d05f      	beq.n	80102a8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80101e8:	f7f9 fb94 	bl	8009914 <HAL_GetTick>
 80101ec:	0002      	movs	r2, r0
 80101ee:	683b      	ldr	r3, [r7, #0]
 80101f0:	1ad3      	subs	r3, r2, r3
 80101f2:	69ba      	ldr	r2, [r7, #24]
 80101f4:	429a      	cmp	r2, r3
 80101f6:	d302      	bcc.n	80101fe <UART_WaitOnFlagUntilTimeout+0x2e>
 80101f8:	69bb      	ldr	r3, [r7, #24]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d11d      	bne.n	801023a <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	4931      	ldr	r1, [pc, #196]	; (80102d0 <UART_WaitOnFlagUntilTimeout+0x100>)
 801020a:	400a      	ands	r2, r1
 801020c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	689a      	ldr	r2, [r3, #8]
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	2101      	movs	r1, #1
 801021a:	438a      	bics	r2, r1
 801021c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	2284      	movs	r2, #132	; 0x84
 8010222:	2120      	movs	r1, #32
 8010224:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	2288      	movs	r2, #136	; 0x88
 801022a:	2120      	movs	r1, #32
 801022c:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	2280      	movs	r2, #128	; 0x80
 8010232:	2100      	movs	r1, #0
 8010234:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8010236:	2303      	movs	r3, #3
 8010238:	e046      	b.n	80102c8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	2204      	movs	r2, #4
 8010242:	4013      	ands	r3, r2
 8010244:	d030      	beq.n	80102a8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	69da      	ldr	r2, [r3, #28]
 801024c:	2380      	movs	r3, #128	; 0x80
 801024e:	011b      	lsls	r3, r3, #4
 8010250:	401a      	ands	r2, r3
 8010252:	2380      	movs	r3, #128	; 0x80
 8010254:	011b      	lsls	r3, r3, #4
 8010256:	429a      	cmp	r2, r3
 8010258:	d126      	bne.n	80102a8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	2280      	movs	r2, #128	; 0x80
 8010260:	0112      	lsls	r2, r2, #4
 8010262:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	4918      	ldr	r1, [pc, #96]	; (80102d0 <UART_WaitOnFlagUntilTimeout+0x100>)
 8010270:	400a      	ands	r2, r1
 8010272:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	689a      	ldr	r2, [r3, #8]
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	2101      	movs	r1, #1
 8010280:	438a      	bics	r2, r1
 8010282:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2284      	movs	r2, #132	; 0x84
 8010288:	2120      	movs	r1, #32
 801028a:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2288      	movs	r2, #136	; 0x88
 8010290:	2120      	movs	r1, #32
 8010292:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	228c      	movs	r2, #140	; 0x8c
 8010298:	2120      	movs	r1, #32
 801029a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	2280      	movs	r2, #128	; 0x80
 80102a0:	2100      	movs	r1, #0
 80102a2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80102a4:	2303      	movs	r3, #3
 80102a6:	e00f      	b.n	80102c8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	69db      	ldr	r3, [r3, #28]
 80102ae:	68ba      	ldr	r2, [r7, #8]
 80102b0:	4013      	ands	r3, r2
 80102b2:	68ba      	ldr	r2, [r7, #8]
 80102b4:	1ad3      	subs	r3, r2, r3
 80102b6:	425a      	negs	r2, r3
 80102b8:	4153      	adcs	r3, r2
 80102ba:	b2db      	uxtb	r3, r3
 80102bc:	001a      	movs	r2, r3
 80102be:	1dfb      	adds	r3, r7, #7
 80102c0:	781b      	ldrb	r3, [r3, #0]
 80102c2:	429a      	cmp	r2, r3
 80102c4:	d08d      	beq.n	80101e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80102c6:	2300      	movs	r3, #0
}
 80102c8:	0018      	movs	r0, r3
 80102ca:	46bd      	mov	sp, r7
 80102cc:	b004      	add	sp, #16
 80102ce:	bd80      	pop	{r7, pc}
 80102d0:	fffffe5f 	.word	0xfffffe5f

080102d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b084      	sub	sp, #16
 80102d8:	af00      	add	r7, sp, #0
 80102da:	60f8      	str	r0, [r7, #12]
 80102dc:	60b9      	str	r1, [r7, #8]
 80102de:	1dbb      	adds	r3, r7, #6
 80102e0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	68ba      	ldr	r2, [r7, #8]
 80102e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	1dba      	adds	r2, r7, #6
 80102ec:	215c      	movs	r1, #92	; 0x5c
 80102ee:	8812      	ldrh	r2, [r2, #0]
 80102f0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	1dba      	adds	r2, r7, #6
 80102f6:	215e      	movs	r1, #94	; 0x5e
 80102f8:	8812      	ldrh	r2, [r2, #0]
 80102fa:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	2200      	movs	r2, #0
 8010300:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	689a      	ldr	r2, [r3, #8]
 8010306:	2380      	movs	r3, #128	; 0x80
 8010308:	015b      	lsls	r3, r3, #5
 801030a:	429a      	cmp	r2, r3
 801030c:	d10d      	bne.n	801032a <UART_Start_Receive_IT+0x56>
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	691b      	ldr	r3, [r3, #16]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d104      	bne.n	8010320 <UART_Start_Receive_IT+0x4c>
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	2260      	movs	r2, #96	; 0x60
 801031a:	494d      	ldr	r1, [pc, #308]	; (8010450 <UART_Start_Receive_IT+0x17c>)
 801031c:	5299      	strh	r1, [r3, r2]
 801031e:	e02e      	b.n	801037e <UART_Start_Receive_IT+0xaa>
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	2260      	movs	r2, #96	; 0x60
 8010324:	21ff      	movs	r1, #255	; 0xff
 8010326:	5299      	strh	r1, [r3, r2]
 8010328:	e029      	b.n	801037e <UART_Start_Receive_IT+0xaa>
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	689b      	ldr	r3, [r3, #8]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d10d      	bne.n	801034e <UART_Start_Receive_IT+0x7a>
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	691b      	ldr	r3, [r3, #16]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d104      	bne.n	8010344 <UART_Start_Receive_IT+0x70>
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	2260      	movs	r2, #96	; 0x60
 801033e:	21ff      	movs	r1, #255	; 0xff
 8010340:	5299      	strh	r1, [r3, r2]
 8010342:	e01c      	b.n	801037e <UART_Start_Receive_IT+0xaa>
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2260      	movs	r2, #96	; 0x60
 8010348:	217f      	movs	r1, #127	; 0x7f
 801034a:	5299      	strh	r1, [r3, r2]
 801034c:	e017      	b.n	801037e <UART_Start_Receive_IT+0xaa>
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	689a      	ldr	r2, [r3, #8]
 8010352:	2380      	movs	r3, #128	; 0x80
 8010354:	055b      	lsls	r3, r3, #21
 8010356:	429a      	cmp	r2, r3
 8010358:	d10d      	bne.n	8010376 <UART_Start_Receive_IT+0xa2>
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	691b      	ldr	r3, [r3, #16]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d104      	bne.n	801036c <UART_Start_Receive_IT+0x98>
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	2260      	movs	r2, #96	; 0x60
 8010366:	217f      	movs	r1, #127	; 0x7f
 8010368:	5299      	strh	r1, [r3, r2]
 801036a:	e008      	b.n	801037e <UART_Start_Receive_IT+0xaa>
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	2260      	movs	r2, #96	; 0x60
 8010370:	213f      	movs	r1, #63	; 0x3f
 8010372:	5299      	strh	r1, [r3, r2]
 8010374:	e003      	b.n	801037e <UART_Start_Receive_IT+0xaa>
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	2260      	movs	r2, #96	; 0x60
 801037a:	2100      	movs	r1, #0
 801037c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	228c      	movs	r2, #140	; 0x8c
 8010382:	2100      	movs	r1, #0
 8010384:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	2288      	movs	r2, #136	; 0x88
 801038a:	2122      	movs	r1, #34	; 0x22
 801038c:	5099      	str	r1, [r3, r2]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	689a      	ldr	r2, [r3, #8]
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	2101      	movs	r1, #1
 801039a:	430a      	orrs	r2, r1
 801039c:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80103a2:	2380      	movs	r3, #128	; 0x80
 80103a4:	059b      	lsls	r3, r3, #22
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d12e      	bne.n	8010408 <UART_Start_Receive_IT+0x134>
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	2268      	movs	r2, #104	; 0x68
 80103ae:	5a9b      	ldrh	r3, [r3, r2]
 80103b0:	1dba      	adds	r2, r7, #6
 80103b2:	8812      	ldrh	r2, [r2, #0]
 80103b4:	429a      	cmp	r2, r3
 80103b6:	d327      	bcc.n	8010408 <UART_Start_Receive_IT+0x134>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	689a      	ldr	r2, [r3, #8]
 80103bc:	2380      	movs	r3, #128	; 0x80
 80103be:	015b      	lsls	r3, r3, #5
 80103c0:	429a      	cmp	r2, r3
 80103c2:	d107      	bne.n	80103d4 <UART_Start_Receive_IT+0x100>
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	691b      	ldr	r3, [r3, #16]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d103      	bne.n	80103d4 <UART_Start_Receive_IT+0x100>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	4a21      	ldr	r2, [pc, #132]	; (8010454 <UART_Start_Receive_IT+0x180>)
 80103d0:	671a      	str	r2, [r3, #112]	; 0x70
 80103d2:	e002      	b.n	80103da <UART_Start_Receive_IT+0x106>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	4a20      	ldr	r2, [pc, #128]	; (8010458 <UART_Start_Receive_IT+0x184>)
 80103d8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	2280      	movs	r2, #128	; 0x80
 80103de:	2100      	movs	r1, #0
 80103e0:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	681a      	ldr	r2, [r3, #0]
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	2180      	movs	r1, #128	; 0x80
 80103ee:	0049      	lsls	r1, r1, #1
 80103f0:	430a      	orrs	r2, r1
 80103f2:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	689a      	ldr	r2, [r3, #8]
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	2180      	movs	r1, #128	; 0x80
 8010400:	0549      	lsls	r1, r1, #21
 8010402:	430a      	orrs	r2, r1
 8010404:	609a      	str	r2, [r3, #8]
 8010406:	e01d      	b.n	8010444 <UART_Start_Receive_IT+0x170>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	689a      	ldr	r2, [r3, #8]
 801040c:	2380      	movs	r3, #128	; 0x80
 801040e:	015b      	lsls	r3, r3, #5
 8010410:	429a      	cmp	r2, r3
 8010412:	d107      	bne.n	8010424 <UART_Start_Receive_IT+0x150>
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	691b      	ldr	r3, [r3, #16]
 8010418:	2b00      	cmp	r3, #0
 801041a:	d103      	bne.n	8010424 <UART_Start_Receive_IT+0x150>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	4a0f      	ldr	r2, [pc, #60]	; (801045c <UART_Start_Receive_IT+0x188>)
 8010420:	671a      	str	r2, [r3, #112]	; 0x70
 8010422:	e002      	b.n	801042a <UART_Start_Receive_IT+0x156>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8010424:	68fb      	ldr	r3, [r7, #12]
 8010426:	4a0e      	ldr	r2, [pc, #56]	; (8010460 <UART_Start_Receive_IT+0x18c>)
 8010428:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	2280      	movs	r2, #128	; 0x80
 801042e:	2100      	movs	r1, #0
 8010430:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	681a      	ldr	r2, [r3, #0]
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	2190      	movs	r1, #144	; 0x90
 801043e:	0049      	lsls	r1, r1, #1
 8010440:	430a      	orrs	r2, r1
 8010442:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8010444:	2300      	movs	r3, #0
}
 8010446:	0018      	movs	r0, r3
 8010448:	46bd      	mov	sp, r7
 801044a:	b004      	add	sp, #16
 801044c:	bd80      	pop	{r7, pc}
 801044e:	46c0      	nop			; (mov r8, r8)
 8010450:	000001ff 	.word	0x000001ff
 8010454:	08010929 	.word	0x08010929
 8010458:	08010705 	.word	0x08010705
 801045c:	08010619 	.word	0x08010619
 8010460:	0801052d 	.word	0x0801052d

08010464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
 801046a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	681a      	ldr	r2, [r3, #0]
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	4912      	ldr	r1, [pc, #72]	; (80104c0 <UART_EndRxTransfer+0x5c>)
 8010478:	400a      	ands	r2, r1
 801047a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	689a      	ldr	r2, [r3, #8]
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	490f      	ldr	r1, [pc, #60]	; (80104c4 <UART_EndRxTransfer+0x60>)
 8010488:	400a      	ands	r2, r1
 801048a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010490:	2b01      	cmp	r3, #1
 8010492:	d107      	bne.n	80104a4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	681a      	ldr	r2, [r3, #0]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	2110      	movs	r1, #16
 80104a0:	438a      	bics	r2, r1
 80104a2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	2288      	movs	r2, #136	; 0x88
 80104a8:	2120      	movs	r1, #32
 80104aa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2200      	movs	r2, #0
 80104b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	2200      	movs	r2, #0
 80104b6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80104b8:	46c0      	nop			; (mov r8, r8)
 80104ba:	46bd      	mov	sp, r7
 80104bc:	b002      	add	sp, #8
 80104be:	bd80      	pop	{r7, pc}
 80104c0:	fffffedf 	.word	0xfffffedf
 80104c4:	effffffe 	.word	0xeffffffe

080104c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80104c8:	b580      	push	{r7, lr}
 80104ca:	b084      	sub	sp, #16
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	225e      	movs	r2, #94	; 0x5e
 80104da:	2100      	movs	r1, #0
 80104dc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	2256      	movs	r2, #86	; 0x56
 80104e2:	2100      	movs	r1, #0
 80104e4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	0018      	movs	r0, r3
 80104ea:	f7ff fbb5 	bl	800fc58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80104ee:	46c0      	nop			; (mov r8, r8)
 80104f0:	46bd      	mov	sp, r7
 80104f2:	b004      	add	sp, #16
 80104f4:	bd80      	pop	{r7, pc}

080104f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80104f6:	b580      	push	{r7, lr}
 80104f8:	b082      	sub	sp, #8
 80104fa:	af00      	add	r7, sp, #0
 80104fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	681a      	ldr	r2, [r3, #0]
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	2140      	movs	r1, #64	; 0x40
 801050a:	438a      	bics	r2, r1
 801050c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	2284      	movs	r2, #132	; 0x84
 8010512:	2120      	movs	r1, #32
 8010514:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2200      	movs	r2, #0
 801051a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	0018      	movs	r0, r3
 8010520:	f7ff fb8a 	bl	800fc38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010524:	46c0      	nop			; (mov r8, r8)
 8010526:	46bd      	mov	sp, r7
 8010528:	b002      	add	sp, #8
 801052a:	bd80      	pop	{r7, pc}

0801052c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b084      	sub	sp, #16
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010534:	200e      	movs	r0, #14
 8010536:	183b      	adds	r3, r7, r0
 8010538:	687a      	ldr	r2, [r7, #4]
 801053a:	2160      	movs	r1, #96	; 0x60
 801053c:	5a52      	ldrh	r2, [r2, r1]
 801053e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2288      	movs	r2, #136	; 0x88
 8010544:	589b      	ldr	r3, [r3, r2]
 8010546:	2b22      	cmp	r3, #34	; 0x22
 8010548:	d158      	bne.n	80105fc <UART_RxISR_8BIT+0xd0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010550:	210c      	movs	r1, #12
 8010552:	187b      	adds	r3, r7, r1
 8010554:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010556:	187b      	adds	r3, r7, r1
 8010558:	881b      	ldrh	r3, [r3, #0]
 801055a:	b2da      	uxtb	r2, r3
 801055c:	183b      	adds	r3, r7, r0
 801055e:	881b      	ldrh	r3, [r3, #0]
 8010560:	b2d9      	uxtb	r1, r3
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010566:	400a      	ands	r2, r1
 8010568:	b2d2      	uxtb	r2, r2
 801056a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010570:	1c5a      	adds	r2, r3, #1
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	225e      	movs	r2, #94	; 0x5e
 801057a:	5a9b      	ldrh	r3, [r3, r2]
 801057c:	b29b      	uxth	r3, r3
 801057e:	3b01      	subs	r3, #1
 8010580:	b299      	uxth	r1, r3
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	225e      	movs	r2, #94	; 0x5e
 8010586:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	225e      	movs	r2, #94	; 0x5e
 801058c:	5a9b      	ldrh	r3, [r3, r2]
 801058e:	b29b      	uxth	r3, r3
 8010590:	2b00      	cmp	r3, #0
 8010592:	d13b      	bne.n	801060c <UART_RxISR_8BIT+0xe0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	681a      	ldr	r2, [r3, #0]
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	491d      	ldr	r1, [pc, #116]	; (8010614 <UART_RxISR_8BIT+0xe8>)
 80105a0:	400a      	ands	r2, r1
 80105a2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	689a      	ldr	r2, [r3, #8]
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	2101      	movs	r1, #1
 80105b0:	438a      	bics	r2, r1
 80105b2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	2288      	movs	r2, #136	; 0x88
 80105b8:	2120      	movs	r1, #32
 80105ba:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	2200      	movs	r2, #0
 80105c0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105c6:	2b01      	cmp	r3, #1
 80105c8:	d110      	bne.n	80105ec <UART_RxISR_8BIT+0xc0>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	681a      	ldr	r2, [r3, #0]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	2110      	movs	r1, #16
 80105d6:	438a      	bics	r2, r1
 80105d8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	225c      	movs	r2, #92	; 0x5c
 80105de:	5a9a      	ldrh	r2, [r3, r2]
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	0011      	movs	r1, r2
 80105e4:	0018      	movs	r0, r3
 80105e6:	f7ff fb3f 	bl	800fc68 <HAL_UARTEx_RxEventCallback>
 80105ea:	e003      	b.n	80105f4 <UART_RxISR_8BIT+0xc8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	0018      	movs	r0, r3
 80105f0:	f7ff fb2a 	bl	800fc48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2200      	movs	r2, #0
 80105f8:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80105fa:	e007      	b.n	801060c <UART_RxISR_8BIT+0xe0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	699a      	ldr	r2, [r3, #24]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	2108      	movs	r1, #8
 8010608:	430a      	orrs	r2, r1
 801060a:	619a      	str	r2, [r3, #24]
}
 801060c:	46c0      	nop			; (mov r8, r8)
 801060e:	46bd      	mov	sp, r7
 8010610:	b004      	add	sp, #16
 8010612:	bd80      	pop	{r7, pc}
 8010614:	fffffedf 	.word	0xfffffedf

08010618 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b084      	sub	sp, #16
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010620:	200e      	movs	r0, #14
 8010622:	183b      	adds	r3, r7, r0
 8010624:	687a      	ldr	r2, [r7, #4]
 8010626:	2160      	movs	r1, #96	; 0x60
 8010628:	5a52      	ldrh	r2, [r2, r1]
 801062a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2288      	movs	r2, #136	; 0x88
 8010630:	589b      	ldr	r3, [r3, r2]
 8010632:	2b22      	cmp	r3, #34	; 0x22
 8010634:	d158      	bne.n	80106e8 <UART_RxISR_16BIT+0xd0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801063c:	210c      	movs	r1, #12
 801063e:	187b      	adds	r3, r7, r1
 8010640:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010646:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8010648:	187b      	adds	r3, r7, r1
 801064a:	183a      	adds	r2, r7, r0
 801064c:	881b      	ldrh	r3, [r3, #0]
 801064e:	8812      	ldrh	r2, [r2, #0]
 8010650:	4013      	ands	r3, r2
 8010652:	b29a      	uxth	r2, r3
 8010654:	68bb      	ldr	r3, [r7, #8]
 8010656:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801065c:	1c9a      	adds	r2, r3, #2
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	225e      	movs	r2, #94	; 0x5e
 8010666:	5a9b      	ldrh	r3, [r3, r2]
 8010668:	b29b      	uxth	r3, r3
 801066a:	3b01      	subs	r3, #1
 801066c:	b299      	uxth	r1, r3
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	225e      	movs	r2, #94	; 0x5e
 8010672:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	225e      	movs	r2, #94	; 0x5e
 8010678:	5a9b      	ldrh	r3, [r3, r2]
 801067a:	b29b      	uxth	r3, r3
 801067c:	2b00      	cmp	r3, #0
 801067e:	d13b      	bne.n	80106f8 <UART_RxISR_16BIT+0xe0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	681a      	ldr	r2, [r3, #0]
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	491d      	ldr	r1, [pc, #116]	; (8010700 <UART_RxISR_16BIT+0xe8>)
 801068c:	400a      	ands	r2, r1
 801068e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	689a      	ldr	r2, [r3, #8]
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	2101      	movs	r1, #1
 801069c:	438a      	bics	r2, r1
 801069e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	2288      	movs	r2, #136	; 0x88
 80106a4:	2120      	movs	r1, #32
 80106a6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2200      	movs	r2, #0
 80106ac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106b2:	2b01      	cmp	r3, #1
 80106b4:	d110      	bne.n	80106d8 <UART_RxISR_16BIT+0xc0>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	681a      	ldr	r2, [r3, #0]
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	2110      	movs	r1, #16
 80106c2:	438a      	bics	r2, r1
 80106c4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	225c      	movs	r2, #92	; 0x5c
 80106ca:	5a9a      	ldrh	r2, [r3, r2]
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	0011      	movs	r1, r2
 80106d0:	0018      	movs	r0, r3
 80106d2:	f7ff fac9 	bl	800fc68 <HAL_UARTEx_RxEventCallback>
 80106d6:	e003      	b.n	80106e0 <UART_RxISR_16BIT+0xc8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	0018      	movs	r0, r3
 80106dc:	f7ff fab4 	bl	800fc48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	2200      	movs	r2, #0
 80106e4:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80106e6:	e007      	b.n	80106f8 <UART_RxISR_16BIT+0xe0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	699a      	ldr	r2, [r3, #24]
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	2108      	movs	r1, #8
 80106f4:	430a      	orrs	r2, r1
 80106f6:	619a      	str	r2, [r3, #24]
}
 80106f8:	46c0      	nop			; (mov r8, r8)
 80106fa:	46bd      	mov	sp, r7
 80106fc:	b004      	add	sp, #16
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	fffffedf 	.word	0xfffffedf

08010704 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b088      	sub	sp, #32
 8010708:	af00      	add	r7, sp, #0
 801070a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801070c:	231a      	movs	r3, #26
 801070e:	18fb      	adds	r3, r7, r3
 8010710:	687a      	ldr	r2, [r7, #4]
 8010712:	2160      	movs	r1, #96	; 0x60
 8010714:	5a52      	ldrh	r2, [r2, r1]
 8010716:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	69db      	ldr	r3, [r3, #28]
 801071e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	689b      	ldr	r3, [r3, #8]
 801072e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2288      	movs	r2, #136	; 0x88
 8010734:	589b      	ldr	r3, [r3, r2]
 8010736:	2b22      	cmp	r3, #34	; 0x22
 8010738:	d000      	beq.n	801073c <UART_RxISR_8BIT_FIFOEN+0x38>
 801073a:	e0e1      	b.n	8010900 <UART_RxISR_8BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801073c:	230e      	movs	r3, #14
 801073e:	18fb      	adds	r3, r7, r3
 8010740:	687a      	ldr	r2, [r7, #4]
 8010742:	2168      	movs	r1, #104	; 0x68
 8010744:	5a52      	ldrh	r2, [r2, r1]
 8010746:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010748:	e0aa      	b.n	80108a0 <UART_RxISR_8BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010750:	210c      	movs	r1, #12
 8010752:	187b      	adds	r3, r7, r1
 8010754:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010756:	187b      	adds	r3, r7, r1
 8010758:	881b      	ldrh	r3, [r3, #0]
 801075a:	b2da      	uxtb	r2, r3
 801075c:	231a      	movs	r3, #26
 801075e:	18fb      	adds	r3, r7, r3
 8010760:	881b      	ldrh	r3, [r3, #0]
 8010762:	b2d9      	uxtb	r1, r3
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010768:	400a      	ands	r2, r1
 801076a:	b2d2      	uxtb	r2, r2
 801076c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010772:	1c5a      	adds	r2, r3, #1
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	225e      	movs	r2, #94	; 0x5e
 801077c:	5a9b      	ldrh	r3, [r3, r2]
 801077e:	b29b      	uxth	r3, r3
 8010780:	3b01      	subs	r3, #1
 8010782:	b299      	uxth	r1, r3
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	225e      	movs	r2, #94	; 0x5e
 8010788:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	69db      	ldr	r3, [r3, #28]
 8010790:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8010792:	69fb      	ldr	r3, [r7, #28]
 8010794:	2207      	movs	r2, #7
 8010796:	4013      	ands	r3, r2
 8010798:	d049      	beq.n	801082e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801079a:	69fb      	ldr	r3, [r7, #28]
 801079c:	2201      	movs	r2, #1
 801079e:	4013      	ands	r3, r2
 80107a0:	d010      	beq.n	80107c4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80107a2:	697a      	ldr	r2, [r7, #20]
 80107a4:	2380      	movs	r3, #128	; 0x80
 80107a6:	005b      	lsls	r3, r3, #1
 80107a8:	4013      	ands	r3, r2
 80107aa:	d00b      	beq.n	80107c4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	2201      	movs	r2, #1
 80107b2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	228c      	movs	r2, #140	; 0x8c
 80107b8:	589b      	ldr	r3, [r3, r2]
 80107ba:	2201      	movs	r2, #1
 80107bc:	431a      	orrs	r2, r3
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	218c      	movs	r1, #140	; 0x8c
 80107c2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80107c4:	69fb      	ldr	r3, [r7, #28]
 80107c6:	2202      	movs	r2, #2
 80107c8:	4013      	ands	r3, r2
 80107ca:	d00f      	beq.n	80107ec <UART_RxISR_8BIT_FIFOEN+0xe8>
 80107cc:	693b      	ldr	r3, [r7, #16]
 80107ce:	2201      	movs	r2, #1
 80107d0:	4013      	ands	r3, r2
 80107d2:	d00b      	beq.n	80107ec <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	2202      	movs	r2, #2
 80107da:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	228c      	movs	r2, #140	; 0x8c
 80107e0:	589b      	ldr	r3, [r3, r2]
 80107e2:	2204      	movs	r2, #4
 80107e4:	431a      	orrs	r2, r3
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	218c      	movs	r1, #140	; 0x8c
 80107ea:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80107ec:	69fb      	ldr	r3, [r7, #28]
 80107ee:	2204      	movs	r2, #4
 80107f0:	4013      	ands	r3, r2
 80107f2:	d00f      	beq.n	8010814 <UART_RxISR_8BIT_FIFOEN+0x110>
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	2201      	movs	r2, #1
 80107f8:	4013      	ands	r3, r2
 80107fa:	d00b      	beq.n	8010814 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	2204      	movs	r2, #4
 8010802:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	228c      	movs	r2, #140	; 0x8c
 8010808:	589b      	ldr	r3, [r3, r2]
 801080a:	2202      	movs	r2, #2
 801080c:	431a      	orrs	r2, r3
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	218c      	movs	r1, #140	; 0x8c
 8010812:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	228c      	movs	r2, #140	; 0x8c
 8010818:	589b      	ldr	r3, [r3, r2]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d007      	beq.n	801082e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	0018      	movs	r0, r3
 8010822:	f7ff fa19 	bl	800fc58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	228c      	movs	r2, #140	; 0x8c
 801082a:	2100      	movs	r1, #0
 801082c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	225e      	movs	r2, #94	; 0x5e
 8010832:	5a9b      	ldrh	r3, [r3, r2]
 8010834:	b29b      	uxth	r3, r3
 8010836:	2b00      	cmp	r3, #0
 8010838:	d132      	bne.n	80108a0 <UART_RxISR_8BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	681a      	ldr	r2, [r3, #0]
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	4934      	ldr	r1, [pc, #208]	; (8010918 <UART_RxISR_8BIT_FIFOEN+0x214>)
 8010846:	400a      	ands	r2, r1
 8010848:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	689a      	ldr	r2, [r3, #8]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	4931      	ldr	r1, [pc, #196]	; (801091c <UART_RxISR_8BIT_FIFOEN+0x218>)
 8010856:	400a      	ands	r2, r1
 8010858:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2288      	movs	r2, #136	; 0x88
 801085e:	2120      	movs	r1, #32
 8010860:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	2200      	movs	r2, #0
 8010866:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801086c:	2b01      	cmp	r3, #1
 801086e:	d110      	bne.n	8010892 <UART_RxISR_8BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	681a      	ldr	r2, [r3, #0]
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	2110      	movs	r1, #16
 801087c:	438a      	bics	r2, r1
 801087e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	225c      	movs	r2, #92	; 0x5c
 8010884:	5a9a      	ldrh	r2, [r3, r2]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	0011      	movs	r1, r2
 801088a:	0018      	movs	r0, r3
 801088c:	f7ff f9ec 	bl	800fc68 <HAL_UARTEx_RxEventCallback>
 8010890:	e003      	b.n	801089a <UART_RxISR_8BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	0018      	movs	r0, r3
 8010896:	f7ff f9d7 	bl	800fc48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2200      	movs	r2, #0
 801089e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80108a0:	230e      	movs	r3, #14
 80108a2:	18fb      	adds	r3, r7, r3
 80108a4:	881b      	ldrh	r3, [r3, #0]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d004      	beq.n	80108b4 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 80108aa:	69fb      	ldr	r3, [r7, #28]
 80108ac:	2220      	movs	r2, #32
 80108ae:	4013      	ands	r3, r2
 80108b0:	d000      	beq.n	80108b4 <UART_RxISR_8BIT_FIFOEN+0x1b0>
 80108b2:	e74a      	b.n	801074a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80108b4:	200a      	movs	r0, #10
 80108b6:	183b      	adds	r3, r7, r0
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	215e      	movs	r1, #94	; 0x5e
 80108bc:	5a52      	ldrh	r2, [r2, r1]
 80108be:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80108c0:	0001      	movs	r1, r0
 80108c2:	187b      	adds	r3, r7, r1
 80108c4:	881b      	ldrh	r3, [r3, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d022      	beq.n	8010910 <UART_RxISR_8BIT_FIFOEN+0x20c>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2268      	movs	r2, #104	; 0x68
 80108ce:	5a9b      	ldrh	r3, [r3, r2]
 80108d0:	187a      	adds	r2, r7, r1
 80108d2:	8812      	ldrh	r2, [r2, #0]
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d21b      	bcs.n	8010910 <UART_RxISR_8BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	689a      	ldr	r2, [r3, #8]
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	490f      	ldr	r1, [pc, #60]	; (8010920 <UART_RxISR_8BIT_FIFOEN+0x21c>)
 80108e4:	400a      	ands	r2, r1
 80108e6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	4a0e      	ldr	r2, [pc, #56]	; (8010924 <UART_RxISR_8BIT_FIFOEN+0x220>)
 80108ec:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	681a      	ldr	r2, [r3, #0]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	2120      	movs	r1, #32
 80108fa:	430a      	orrs	r2, r1
 80108fc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80108fe:	e007      	b.n	8010910 <UART_RxISR_8BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	699a      	ldr	r2, [r3, #24]
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	2108      	movs	r1, #8
 801090c:	430a      	orrs	r2, r1
 801090e:	619a      	str	r2, [r3, #24]
}
 8010910:	46c0      	nop			; (mov r8, r8)
 8010912:	46bd      	mov	sp, r7
 8010914:	b008      	add	sp, #32
 8010916:	bd80      	pop	{r7, pc}
 8010918:	fffffeff 	.word	0xfffffeff
 801091c:	effffffe 	.word	0xeffffffe
 8010920:	efffffff 	.word	0xefffffff
 8010924:	0801052d 	.word	0x0801052d

08010928 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b08a      	sub	sp, #40	; 0x28
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8010930:	2322      	movs	r3, #34	; 0x22
 8010932:	18fb      	adds	r3, r7, r3
 8010934:	687a      	ldr	r2, [r7, #4]
 8010936:	2160      	movs	r1, #96	; 0x60
 8010938:	5a52      	ldrh	r2, [r2, r1]
 801093a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	69db      	ldr	r3, [r3, #28]
 8010942:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	689b      	ldr	r3, [r3, #8]
 8010952:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2288      	movs	r2, #136	; 0x88
 8010958:	589b      	ldr	r3, [r3, r2]
 801095a:	2b22      	cmp	r3, #34	; 0x22
 801095c:	d000      	beq.n	8010960 <UART_RxISR_16BIT_FIFOEN+0x38>
 801095e:	e0e1      	b.n	8010b24 <UART_RxISR_16BIT_FIFOEN+0x1fc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8010960:	2316      	movs	r3, #22
 8010962:	18fb      	adds	r3, r7, r3
 8010964:	687a      	ldr	r2, [r7, #4]
 8010966:	2168      	movs	r1, #104	; 0x68
 8010968:	5a52      	ldrh	r2, [r2, r1]
 801096a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801096c:	e0aa      	b.n	8010ac4 <UART_RxISR_16BIT_FIFOEN+0x19c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010974:	2114      	movs	r1, #20
 8010976:	187b      	adds	r3, r7, r1
 8010978:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801097e:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8010980:	187b      	adds	r3, r7, r1
 8010982:	2222      	movs	r2, #34	; 0x22
 8010984:	18ba      	adds	r2, r7, r2
 8010986:	881b      	ldrh	r3, [r3, #0]
 8010988:	8812      	ldrh	r2, [r2, #0]
 801098a:	4013      	ands	r3, r2
 801098c:	b29a      	uxth	r2, r3
 801098e:	693b      	ldr	r3, [r7, #16]
 8010990:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010996:	1c9a      	adds	r2, r3, #2
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	225e      	movs	r2, #94	; 0x5e
 80109a0:	5a9b      	ldrh	r3, [r3, r2]
 80109a2:	b29b      	uxth	r3, r3
 80109a4:	3b01      	subs	r3, #1
 80109a6:	b299      	uxth	r1, r3
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	225e      	movs	r2, #94	; 0x5e
 80109ac:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	69db      	ldr	r3, [r3, #28]
 80109b4:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80109b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b8:	2207      	movs	r2, #7
 80109ba:	4013      	ands	r3, r2
 80109bc:	d049      	beq.n	8010a52 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80109be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c0:	2201      	movs	r2, #1
 80109c2:	4013      	ands	r3, r2
 80109c4:	d010      	beq.n	80109e8 <UART_RxISR_16BIT_FIFOEN+0xc0>
 80109c6:	69fa      	ldr	r2, [r7, #28]
 80109c8:	2380      	movs	r3, #128	; 0x80
 80109ca:	005b      	lsls	r3, r3, #1
 80109cc:	4013      	ands	r3, r2
 80109ce:	d00b      	beq.n	80109e8 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	2201      	movs	r2, #1
 80109d6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	228c      	movs	r2, #140	; 0x8c
 80109dc:	589b      	ldr	r3, [r3, r2]
 80109de:	2201      	movs	r2, #1
 80109e0:	431a      	orrs	r2, r3
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	218c      	movs	r1, #140	; 0x8c
 80109e6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80109e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ea:	2202      	movs	r2, #2
 80109ec:	4013      	ands	r3, r2
 80109ee:	d00f      	beq.n	8010a10 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80109f0:	69bb      	ldr	r3, [r7, #24]
 80109f2:	2201      	movs	r2, #1
 80109f4:	4013      	ands	r3, r2
 80109f6:	d00b      	beq.n	8010a10 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	2202      	movs	r2, #2
 80109fe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	228c      	movs	r2, #140	; 0x8c
 8010a04:	589b      	ldr	r3, [r3, r2]
 8010a06:	2204      	movs	r2, #4
 8010a08:	431a      	orrs	r2, r3
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	218c      	movs	r1, #140	; 0x8c
 8010a0e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a12:	2204      	movs	r2, #4
 8010a14:	4013      	ands	r3, r2
 8010a16:	d00f      	beq.n	8010a38 <UART_RxISR_16BIT_FIFOEN+0x110>
 8010a18:	69bb      	ldr	r3, [r7, #24]
 8010a1a:	2201      	movs	r2, #1
 8010a1c:	4013      	ands	r3, r2
 8010a1e:	d00b      	beq.n	8010a38 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	2204      	movs	r2, #4
 8010a26:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	228c      	movs	r2, #140	; 0x8c
 8010a2c:	589b      	ldr	r3, [r3, r2]
 8010a2e:	2202      	movs	r2, #2
 8010a30:	431a      	orrs	r2, r3
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	218c      	movs	r1, #140	; 0x8c
 8010a36:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	228c      	movs	r2, #140	; 0x8c
 8010a3c:	589b      	ldr	r3, [r3, r2]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d007      	beq.n	8010a52 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	0018      	movs	r0, r3
 8010a46:	f7ff f907 	bl	800fc58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	228c      	movs	r2, #140	; 0x8c
 8010a4e:	2100      	movs	r1, #0
 8010a50:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	225e      	movs	r2, #94	; 0x5e
 8010a56:	5a9b      	ldrh	r3, [r3, r2]
 8010a58:	b29b      	uxth	r3, r3
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d132      	bne.n	8010ac4 <UART_RxISR_16BIT_FIFOEN+0x19c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	681a      	ldr	r2, [r3, #0]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	4934      	ldr	r1, [pc, #208]	; (8010b3c <UART_RxISR_16BIT_FIFOEN+0x214>)
 8010a6a:	400a      	ands	r2, r1
 8010a6c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	689a      	ldr	r2, [r3, #8]
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	4931      	ldr	r1, [pc, #196]	; (8010b40 <UART_RxISR_16BIT_FIFOEN+0x218>)
 8010a7a:	400a      	ands	r2, r1
 8010a7c:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	2288      	movs	r2, #136	; 0x88
 8010a82:	2120      	movs	r1, #32
 8010a84:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a90:	2b01      	cmp	r3, #1
 8010a92:	d110      	bne.n	8010ab6 <UART_RxISR_16BIT_FIFOEN+0x18e>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	681a      	ldr	r2, [r3, #0]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	2110      	movs	r1, #16
 8010aa0:	438a      	bics	r2, r1
 8010aa2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	225c      	movs	r2, #92	; 0x5c
 8010aa8:	5a9a      	ldrh	r2, [r3, r2]
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	0011      	movs	r1, r2
 8010aae:	0018      	movs	r0, r3
 8010ab0:	f7ff f8da 	bl	800fc68 <HAL_UARTEx_RxEventCallback>
 8010ab4:	e003      	b.n	8010abe <UART_RxISR_16BIT_FIFOEN+0x196>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	0018      	movs	r0, r3
 8010aba:	f7ff f8c5 	bl	800fc48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2200      	movs	r2, #0
 8010ac2:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8010ac4:	2316      	movs	r3, #22
 8010ac6:	18fb      	adds	r3, r7, r3
 8010ac8:	881b      	ldrh	r3, [r3, #0]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d004      	beq.n	8010ad8 <UART_RxISR_16BIT_FIFOEN+0x1b0>
 8010ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad0:	2220      	movs	r2, #32
 8010ad2:	4013      	ands	r3, r2
 8010ad4:	d000      	beq.n	8010ad8 <UART_RxISR_16BIT_FIFOEN+0x1b0>
 8010ad6:	e74a      	b.n	801096e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8010ad8:	200e      	movs	r0, #14
 8010ada:	183b      	adds	r3, r7, r0
 8010adc:	687a      	ldr	r2, [r7, #4]
 8010ade:	215e      	movs	r1, #94	; 0x5e
 8010ae0:	5a52      	ldrh	r2, [r2, r1]
 8010ae2:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8010ae4:	0001      	movs	r1, r0
 8010ae6:	187b      	adds	r3, r7, r1
 8010ae8:	881b      	ldrh	r3, [r3, #0]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d022      	beq.n	8010b34 <UART_RxISR_16BIT_FIFOEN+0x20c>
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2268      	movs	r2, #104	; 0x68
 8010af2:	5a9b      	ldrh	r3, [r3, r2]
 8010af4:	187a      	adds	r2, r7, r1
 8010af6:	8812      	ldrh	r2, [r2, #0]
 8010af8:	429a      	cmp	r2, r3
 8010afa:	d21b      	bcs.n	8010b34 <UART_RxISR_16BIT_FIFOEN+0x20c>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	689a      	ldr	r2, [r3, #8]
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	490f      	ldr	r1, [pc, #60]	; (8010b44 <UART_RxISR_16BIT_FIFOEN+0x21c>)
 8010b08:	400a      	ands	r2, r1
 8010b0a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	4a0e      	ldr	r2, [pc, #56]	; (8010b48 <UART_RxISR_16BIT_FIFOEN+0x220>)
 8010b10:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	681a      	ldr	r2, [r3, #0]
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	2120      	movs	r1, #32
 8010b1e:	430a      	orrs	r2, r1
 8010b20:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010b22:	e007      	b.n	8010b34 <UART_RxISR_16BIT_FIFOEN+0x20c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	699a      	ldr	r2, [r3, #24]
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	2108      	movs	r1, #8
 8010b30:	430a      	orrs	r2, r1
 8010b32:	619a      	str	r2, [r3, #24]
}
 8010b34:	46c0      	nop			; (mov r8, r8)
 8010b36:	46bd      	mov	sp, r7
 8010b38:	b00a      	add	sp, #40	; 0x28
 8010b3a:	bd80      	pop	{r7, pc}
 8010b3c:	fffffeff 	.word	0xfffffeff
 8010b40:	effffffe 	.word	0xeffffffe
 8010b44:	efffffff 	.word	0xefffffff
 8010b48:	08010619 	.word	0x08010619

08010b4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b082      	sub	sp, #8
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8010b54:	46c0      	nop			; (mov r8, r8)
 8010b56:	46bd      	mov	sp, r7
 8010b58:	b002      	add	sp, #8
 8010b5a:	bd80      	pop	{r7, pc}

08010b5c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b082      	sub	sp, #8
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010b64:	46c0      	nop			; (mov r8, r8)
 8010b66:	46bd      	mov	sp, r7
 8010b68:	b002      	add	sp, #8
 8010b6a:	bd80      	pop	{r7, pc}

08010b6c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b082      	sub	sp, #8
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010b74:	46c0      	nop			; (mov r8, r8)
 8010b76:	46bd      	mov	sp, r7
 8010b78:	b002      	add	sp, #8
 8010b7a:	bd80      	pop	{r7, pc}

08010b7c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b084      	sub	sp, #16
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2280      	movs	r2, #128	; 0x80
 8010b88:	5c9b      	ldrb	r3, [r3, r2]
 8010b8a:	2b01      	cmp	r3, #1
 8010b8c:	d101      	bne.n	8010b92 <HAL_UARTEx_DisableFifoMode+0x16>
 8010b8e:	2302      	movs	r3, #2
 8010b90:	e027      	b.n	8010be2 <HAL_UARTEx_DisableFifoMode+0x66>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2280      	movs	r2, #128	; 0x80
 8010b96:	2101      	movs	r1, #1
 8010b98:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2284      	movs	r2, #132	; 0x84
 8010b9e:	2124      	movs	r1, #36	; 0x24
 8010ba0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	681a      	ldr	r2, [r3, #0]
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	2101      	movs	r1, #1
 8010bb6:	438a      	bics	r2, r1
 8010bb8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	4a0b      	ldr	r2, [pc, #44]	; (8010bec <HAL_UARTEx_DisableFifoMode+0x70>)
 8010bbe:	4013      	ands	r3, r2
 8010bc0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	68fa      	ldr	r2, [r7, #12]
 8010bce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2284      	movs	r2, #132	; 0x84
 8010bd4:	2120      	movs	r1, #32
 8010bd6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	2280      	movs	r2, #128	; 0x80
 8010bdc:	2100      	movs	r1, #0
 8010bde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010be0:	2300      	movs	r3, #0
}
 8010be2:	0018      	movs	r0, r3
 8010be4:	46bd      	mov	sp, r7
 8010be6:	b004      	add	sp, #16
 8010be8:	bd80      	pop	{r7, pc}
 8010bea:	46c0      	nop			; (mov r8, r8)
 8010bec:	dfffffff 	.word	0xdfffffff

08010bf0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b084      	sub	sp, #16
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
 8010bf8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2280      	movs	r2, #128	; 0x80
 8010bfe:	5c9b      	ldrb	r3, [r3, r2]
 8010c00:	2b01      	cmp	r3, #1
 8010c02:	d101      	bne.n	8010c08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010c04:	2302      	movs	r3, #2
 8010c06:	e02e      	b.n	8010c66 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2280      	movs	r2, #128	; 0x80
 8010c0c:	2101      	movs	r1, #1
 8010c0e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2284      	movs	r2, #132	; 0x84
 8010c14:	2124      	movs	r1, #36	; 0x24
 8010c16:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	681a      	ldr	r2, [r3, #0]
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	2101      	movs	r1, #1
 8010c2c:	438a      	bics	r2, r1
 8010c2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	689b      	ldr	r3, [r3, #8]
 8010c36:	00db      	lsls	r3, r3, #3
 8010c38:	08d9      	lsrs	r1, r3, #3
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	683a      	ldr	r2, [r7, #0]
 8010c40:	430a      	orrs	r2, r1
 8010c42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	0018      	movs	r0, r3
 8010c48:	f000 f854 	bl	8010cf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	68fa      	ldr	r2, [r7, #12]
 8010c52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2284      	movs	r2, #132	; 0x84
 8010c58:	2120      	movs	r1, #32
 8010c5a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	2280      	movs	r2, #128	; 0x80
 8010c60:	2100      	movs	r1, #0
 8010c62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010c64:	2300      	movs	r3, #0
}
 8010c66:	0018      	movs	r0, r3
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	b004      	add	sp, #16
 8010c6c:	bd80      	pop	{r7, pc}
	...

08010c70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	2280      	movs	r2, #128	; 0x80
 8010c7e:	5c9b      	ldrb	r3, [r3, r2]
 8010c80:	2b01      	cmp	r3, #1
 8010c82:	d101      	bne.n	8010c88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010c84:	2302      	movs	r3, #2
 8010c86:	e02f      	b.n	8010ce8 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	2280      	movs	r2, #128	; 0x80
 8010c8c:	2101      	movs	r1, #1
 8010c8e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2284      	movs	r2, #132	; 0x84
 8010c94:	2124      	movs	r1, #36	; 0x24
 8010c96:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	681a      	ldr	r2, [r3, #0]
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	2101      	movs	r1, #1
 8010cac:	438a      	bics	r2, r1
 8010cae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	689b      	ldr	r3, [r3, #8]
 8010cb6:	4a0e      	ldr	r2, [pc, #56]	; (8010cf0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8010cb8:	4013      	ands	r3, r2
 8010cba:	0019      	movs	r1, r3
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	683a      	ldr	r2, [r7, #0]
 8010cc2:	430a      	orrs	r2, r1
 8010cc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	0018      	movs	r0, r3
 8010cca:	f000 f813 	bl	8010cf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	68fa      	ldr	r2, [r7, #12]
 8010cd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	2284      	movs	r2, #132	; 0x84
 8010cda:	2120      	movs	r1, #32
 8010cdc:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	2280      	movs	r2, #128	; 0x80
 8010ce2:	2100      	movs	r1, #0
 8010ce4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010ce6:	2300      	movs	r3, #0
}
 8010ce8:	0018      	movs	r0, r3
 8010cea:	46bd      	mov	sp, r7
 8010cec:	b004      	add	sp, #16
 8010cee:	bd80      	pop	{r7, pc}
 8010cf0:	f1ffffff 	.word	0xf1ffffff

08010cf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010cf6:	b089      	sub	sp, #36	; 0x24
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8010cfc:	2314      	movs	r3, #20
 8010cfe:	18fb      	adds	r3, r7, r3
 8010d00:	4a2f      	ldr	r2, [pc, #188]	; (8010dc0 <UARTEx_SetNbDataToProcess+0xcc>)
 8010d02:	ca03      	ldmia	r2!, {r0, r1}
 8010d04:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8010d06:	230c      	movs	r3, #12
 8010d08:	18fb      	adds	r3, r7, r3
 8010d0a:	4a2e      	ldr	r2, [pc, #184]	; (8010dc4 <UARTEx_SetNbDataToProcess+0xd0>)
 8010d0c:	ca03      	ldmia	r2!, {r0, r1}
 8010d0e:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d108      	bne.n	8010d2a <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	226a      	movs	r2, #106	; 0x6a
 8010d1c:	2101      	movs	r1, #1
 8010d1e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2268      	movs	r2, #104	; 0x68
 8010d24:	2101      	movs	r1, #1
 8010d26:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010d28:	e046      	b.n	8010db8 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010d2a:	261f      	movs	r6, #31
 8010d2c:	19bb      	adds	r3, r7, r6
 8010d2e:	2208      	movs	r2, #8
 8010d30:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010d32:	201e      	movs	r0, #30
 8010d34:	183b      	adds	r3, r7, r0
 8010d36:	2208      	movs	r2, #8
 8010d38:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	689b      	ldr	r3, [r3, #8]
 8010d40:	0e5b      	lsrs	r3, r3, #25
 8010d42:	b2da      	uxtb	r2, r3
 8010d44:	241d      	movs	r4, #29
 8010d46:	193b      	adds	r3, r7, r4
 8010d48:	2107      	movs	r1, #7
 8010d4a:	400a      	ands	r2, r1
 8010d4c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	689b      	ldr	r3, [r3, #8]
 8010d54:	0f5b      	lsrs	r3, r3, #29
 8010d56:	b2da      	uxtb	r2, r3
 8010d58:	251c      	movs	r5, #28
 8010d5a:	197b      	adds	r3, r7, r5
 8010d5c:	2107      	movs	r1, #7
 8010d5e:	400a      	ands	r2, r1
 8010d60:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d62:	183b      	adds	r3, r7, r0
 8010d64:	781b      	ldrb	r3, [r3, #0]
 8010d66:	197a      	adds	r2, r7, r5
 8010d68:	7812      	ldrb	r2, [r2, #0]
 8010d6a:	2114      	movs	r1, #20
 8010d6c:	1879      	adds	r1, r7, r1
 8010d6e:	5c8a      	ldrb	r2, [r1, r2]
 8010d70:	435a      	muls	r2, r3
 8010d72:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8010d74:	197b      	adds	r3, r7, r5
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	250c      	movs	r5, #12
 8010d7a:	197a      	adds	r2, r7, r5
 8010d7c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010d7e:	0019      	movs	r1, r3
 8010d80:	f7ef fa6e 	bl	8000260 <__divsi3>
 8010d84:	0003      	movs	r3, r0
 8010d86:	b299      	uxth	r1, r3
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	226a      	movs	r2, #106	; 0x6a
 8010d8c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010d8e:	19bb      	adds	r3, r7, r6
 8010d90:	781b      	ldrb	r3, [r3, #0]
 8010d92:	193a      	adds	r2, r7, r4
 8010d94:	7812      	ldrb	r2, [r2, #0]
 8010d96:	2114      	movs	r1, #20
 8010d98:	1879      	adds	r1, r7, r1
 8010d9a:	5c8a      	ldrb	r2, [r1, r2]
 8010d9c:	435a      	muls	r2, r3
 8010d9e:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8010da0:	193b      	adds	r3, r7, r4
 8010da2:	781b      	ldrb	r3, [r3, #0]
 8010da4:	197a      	adds	r2, r7, r5
 8010da6:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010da8:	0019      	movs	r1, r3
 8010daa:	f7ef fa59 	bl	8000260 <__divsi3>
 8010dae:	0003      	movs	r3, r0
 8010db0:	b299      	uxth	r1, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2268      	movs	r2, #104	; 0x68
 8010db6:	5299      	strh	r1, [r3, r2]
}
 8010db8:	46c0      	nop			; (mov r8, r8)
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	b009      	add	sp, #36	; 0x24
 8010dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010dc0:	08015d9c 	.word	0x08015d9c
 8010dc4:	08015da4 	.word	0x08015da4

08010dc8 <__errno>:
 8010dc8:	4b01      	ldr	r3, [pc, #4]	; (8010dd0 <__errno+0x8>)
 8010dca:	6818      	ldr	r0, [r3, #0]
 8010dcc:	4770      	bx	lr
 8010dce:	46c0      	nop			; (mov r8, r8)
 8010dd0:	20000180 	.word	0x20000180

08010dd4 <__libc_init_array>:
 8010dd4:	b570      	push	{r4, r5, r6, lr}
 8010dd6:	2600      	movs	r6, #0
 8010dd8:	4d0c      	ldr	r5, [pc, #48]	; (8010e0c <__libc_init_array+0x38>)
 8010dda:	4c0d      	ldr	r4, [pc, #52]	; (8010e10 <__libc_init_array+0x3c>)
 8010ddc:	1b64      	subs	r4, r4, r5
 8010dde:	10a4      	asrs	r4, r4, #2
 8010de0:	42a6      	cmp	r6, r4
 8010de2:	d109      	bne.n	8010df8 <__libc_init_array+0x24>
 8010de4:	2600      	movs	r6, #0
 8010de6:	f004 fe43 	bl	8015a70 <_init>
 8010dea:	4d0a      	ldr	r5, [pc, #40]	; (8010e14 <__libc_init_array+0x40>)
 8010dec:	4c0a      	ldr	r4, [pc, #40]	; (8010e18 <__libc_init_array+0x44>)
 8010dee:	1b64      	subs	r4, r4, r5
 8010df0:	10a4      	asrs	r4, r4, #2
 8010df2:	42a6      	cmp	r6, r4
 8010df4:	d105      	bne.n	8010e02 <__libc_init_array+0x2e>
 8010df6:	bd70      	pop	{r4, r5, r6, pc}
 8010df8:	00b3      	lsls	r3, r6, #2
 8010dfa:	58eb      	ldr	r3, [r5, r3]
 8010dfc:	4798      	blx	r3
 8010dfe:	3601      	adds	r6, #1
 8010e00:	e7ee      	b.n	8010de0 <__libc_init_array+0xc>
 8010e02:	00b3      	lsls	r3, r6, #2
 8010e04:	58eb      	ldr	r3, [r5, r3]
 8010e06:	4798      	blx	r3
 8010e08:	3601      	adds	r6, #1
 8010e0a:	e7f2      	b.n	8010df2 <__libc_init_array+0x1e>
 8010e0c:	08017c78 	.word	0x08017c78
 8010e10:	08017c78 	.word	0x08017c78
 8010e14:	08017c78 	.word	0x08017c78
 8010e18:	08017c7c 	.word	0x08017c7c

08010e1c <memcpy>:
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	b510      	push	{r4, lr}
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d100      	bne.n	8010e26 <memcpy+0xa>
 8010e24:	bd10      	pop	{r4, pc}
 8010e26:	5ccc      	ldrb	r4, [r1, r3]
 8010e28:	54c4      	strb	r4, [r0, r3]
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	e7f8      	b.n	8010e20 <memcpy+0x4>

08010e2e <memset>:
 8010e2e:	0003      	movs	r3, r0
 8010e30:	1882      	adds	r2, r0, r2
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d100      	bne.n	8010e38 <memset+0xa>
 8010e36:	4770      	bx	lr
 8010e38:	7019      	strb	r1, [r3, #0]
 8010e3a:	3301      	adds	r3, #1
 8010e3c:	e7f9      	b.n	8010e32 <memset+0x4>

08010e3e <__cvt>:
 8010e3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e40:	001e      	movs	r6, r3
 8010e42:	2300      	movs	r3, #0
 8010e44:	0014      	movs	r4, r2
 8010e46:	b08b      	sub	sp, #44	; 0x2c
 8010e48:	429e      	cmp	r6, r3
 8010e4a:	da04      	bge.n	8010e56 <__cvt+0x18>
 8010e4c:	2180      	movs	r1, #128	; 0x80
 8010e4e:	0609      	lsls	r1, r1, #24
 8010e50:	1873      	adds	r3, r6, r1
 8010e52:	001e      	movs	r6, r3
 8010e54:	232d      	movs	r3, #45	; 0x2d
 8010e56:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010e58:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8010e5a:	7013      	strb	r3, [r2, #0]
 8010e5c:	2320      	movs	r3, #32
 8010e5e:	2203      	movs	r2, #3
 8010e60:	439f      	bics	r7, r3
 8010e62:	2f46      	cmp	r7, #70	; 0x46
 8010e64:	d007      	beq.n	8010e76 <__cvt+0x38>
 8010e66:	003b      	movs	r3, r7
 8010e68:	3b45      	subs	r3, #69	; 0x45
 8010e6a:	4259      	negs	r1, r3
 8010e6c:	414b      	adcs	r3, r1
 8010e6e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8010e70:	3a01      	subs	r2, #1
 8010e72:	18cb      	adds	r3, r1, r3
 8010e74:	9310      	str	r3, [sp, #64]	; 0x40
 8010e76:	ab09      	add	r3, sp, #36	; 0x24
 8010e78:	9304      	str	r3, [sp, #16]
 8010e7a:	ab08      	add	r3, sp, #32
 8010e7c:	9303      	str	r3, [sp, #12]
 8010e7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010e80:	9200      	str	r2, [sp, #0]
 8010e82:	9302      	str	r3, [sp, #8]
 8010e84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010e86:	0022      	movs	r2, r4
 8010e88:	9301      	str	r3, [sp, #4]
 8010e8a:	0033      	movs	r3, r6
 8010e8c:	f001 ffa8 	bl	8012de0 <_dtoa_r>
 8010e90:	0005      	movs	r5, r0
 8010e92:	2f47      	cmp	r7, #71	; 0x47
 8010e94:	d102      	bne.n	8010e9c <__cvt+0x5e>
 8010e96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010e98:	07db      	lsls	r3, r3, #31
 8010e9a:	d528      	bpl.n	8010eee <__cvt+0xb0>
 8010e9c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010e9e:	18eb      	adds	r3, r5, r3
 8010ea0:	9307      	str	r3, [sp, #28]
 8010ea2:	2f46      	cmp	r7, #70	; 0x46
 8010ea4:	d114      	bne.n	8010ed0 <__cvt+0x92>
 8010ea6:	782b      	ldrb	r3, [r5, #0]
 8010ea8:	2b30      	cmp	r3, #48	; 0x30
 8010eaa:	d10c      	bne.n	8010ec6 <__cvt+0x88>
 8010eac:	2200      	movs	r2, #0
 8010eae:	2300      	movs	r3, #0
 8010eb0:	0020      	movs	r0, r4
 8010eb2:	0031      	movs	r1, r6
 8010eb4:	f7ef fad0 	bl	8000458 <__aeabi_dcmpeq>
 8010eb8:	2800      	cmp	r0, #0
 8010eba:	d104      	bne.n	8010ec6 <__cvt+0x88>
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010ec0:	1a9b      	subs	r3, r3, r2
 8010ec2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010ec4:	6013      	str	r3, [r2, #0]
 8010ec6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010ec8:	9a07      	ldr	r2, [sp, #28]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	18d3      	adds	r3, r2, r3
 8010ece:	9307      	str	r3, [sp, #28]
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	0020      	movs	r0, r4
 8010ed6:	0031      	movs	r1, r6
 8010ed8:	f7ef fabe 	bl	8000458 <__aeabi_dcmpeq>
 8010edc:	2800      	cmp	r0, #0
 8010ede:	d001      	beq.n	8010ee4 <__cvt+0xa6>
 8010ee0:	9b07      	ldr	r3, [sp, #28]
 8010ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8010ee4:	2230      	movs	r2, #48	; 0x30
 8010ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ee8:	9907      	ldr	r1, [sp, #28]
 8010eea:	428b      	cmp	r3, r1
 8010eec:	d306      	bcc.n	8010efc <__cvt+0xbe>
 8010eee:	0028      	movs	r0, r5
 8010ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ef2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8010ef4:	1b5b      	subs	r3, r3, r5
 8010ef6:	6013      	str	r3, [r2, #0]
 8010ef8:	b00b      	add	sp, #44	; 0x2c
 8010efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010efc:	1c59      	adds	r1, r3, #1
 8010efe:	9109      	str	r1, [sp, #36]	; 0x24
 8010f00:	701a      	strb	r2, [r3, #0]
 8010f02:	e7f0      	b.n	8010ee6 <__cvt+0xa8>

08010f04 <__exponent>:
 8010f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f06:	1c83      	adds	r3, r0, #2
 8010f08:	b087      	sub	sp, #28
 8010f0a:	9303      	str	r3, [sp, #12]
 8010f0c:	0005      	movs	r5, r0
 8010f0e:	000c      	movs	r4, r1
 8010f10:	232b      	movs	r3, #43	; 0x2b
 8010f12:	7002      	strb	r2, [r0, #0]
 8010f14:	2900      	cmp	r1, #0
 8010f16:	da01      	bge.n	8010f1c <__exponent+0x18>
 8010f18:	424c      	negs	r4, r1
 8010f1a:	3302      	adds	r3, #2
 8010f1c:	706b      	strb	r3, [r5, #1]
 8010f1e:	2c09      	cmp	r4, #9
 8010f20:	dd31      	ble.n	8010f86 <__exponent+0x82>
 8010f22:	270a      	movs	r7, #10
 8010f24:	ab04      	add	r3, sp, #16
 8010f26:	1dde      	adds	r6, r3, #7
 8010f28:	0020      	movs	r0, r4
 8010f2a:	0039      	movs	r1, r7
 8010f2c:	9601      	str	r6, [sp, #4]
 8010f2e:	f7ef fa7d 	bl	800042c <__aeabi_idivmod>
 8010f32:	3e01      	subs	r6, #1
 8010f34:	3130      	adds	r1, #48	; 0x30
 8010f36:	0020      	movs	r0, r4
 8010f38:	7031      	strb	r1, [r6, #0]
 8010f3a:	0039      	movs	r1, r7
 8010f3c:	9402      	str	r4, [sp, #8]
 8010f3e:	f7ef f98f 	bl	8000260 <__divsi3>
 8010f42:	9b02      	ldr	r3, [sp, #8]
 8010f44:	0004      	movs	r4, r0
 8010f46:	2b63      	cmp	r3, #99	; 0x63
 8010f48:	dcee      	bgt.n	8010f28 <__exponent+0x24>
 8010f4a:	9b01      	ldr	r3, [sp, #4]
 8010f4c:	3430      	adds	r4, #48	; 0x30
 8010f4e:	1e9a      	subs	r2, r3, #2
 8010f50:	0013      	movs	r3, r2
 8010f52:	9903      	ldr	r1, [sp, #12]
 8010f54:	7014      	strb	r4, [r2, #0]
 8010f56:	a804      	add	r0, sp, #16
 8010f58:	3007      	adds	r0, #7
 8010f5a:	4298      	cmp	r0, r3
 8010f5c:	d80e      	bhi.n	8010f7c <__exponent+0x78>
 8010f5e:	ab04      	add	r3, sp, #16
 8010f60:	3307      	adds	r3, #7
 8010f62:	2000      	movs	r0, #0
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d804      	bhi.n	8010f72 <__exponent+0x6e>
 8010f68:	ab04      	add	r3, sp, #16
 8010f6a:	3009      	adds	r0, #9
 8010f6c:	18c0      	adds	r0, r0, r3
 8010f6e:	9b01      	ldr	r3, [sp, #4]
 8010f70:	1ac0      	subs	r0, r0, r3
 8010f72:	9b03      	ldr	r3, [sp, #12]
 8010f74:	1818      	adds	r0, r3, r0
 8010f76:	1b40      	subs	r0, r0, r5
 8010f78:	b007      	add	sp, #28
 8010f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f7c:	7818      	ldrb	r0, [r3, #0]
 8010f7e:	3301      	adds	r3, #1
 8010f80:	7008      	strb	r0, [r1, #0]
 8010f82:	3101      	adds	r1, #1
 8010f84:	e7e7      	b.n	8010f56 <__exponent+0x52>
 8010f86:	2330      	movs	r3, #48	; 0x30
 8010f88:	18e4      	adds	r4, r4, r3
 8010f8a:	70ab      	strb	r3, [r5, #2]
 8010f8c:	1d28      	adds	r0, r5, #4
 8010f8e:	70ec      	strb	r4, [r5, #3]
 8010f90:	e7f1      	b.n	8010f76 <__exponent+0x72>
	...

08010f94 <_printf_float>:
 8010f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f96:	b095      	sub	sp, #84	; 0x54
 8010f98:	000c      	movs	r4, r1
 8010f9a:	9209      	str	r2, [sp, #36]	; 0x24
 8010f9c:	001e      	movs	r6, r3
 8010f9e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8010fa0:	0007      	movs	r7, r0
 8010fa2:	f003 fa89 	bl	80144b8 <_localeconv_r>
 8010fa6:	6803      	ldr	r3, [r0, #0]
 8010fa8:	0018      	movs	r0, r3
 8010faa:	930c      	str	r3, [sp, #48]	; 0x30
 8010fac:	f7ef f8b2 	bl	8000114 <strlen>
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	9312      	str	r3, [sp, #72]	; 0x48
 8010fb4:	7e23      	ldrb	r3, [r4, #24]
 8010fb6:	2207      	movs	r2, #7
 8010fb8:	930a      	str	r3, [sp, #40]	; 0x28
 8010fba:	6823      	ldr	r3, [r4, #0]
 8010fbc:	900e      	str	r0, [sp, #56]	; 0x38
 8010fbe:	930d      	str	r3, [sp, #52]	; 0x34
 8010fc0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8010fc2:	682b      	ldr	r3, [r5, #0]
 8010fc4:	05c9      	lsls	r1, r1, #23
 8010fc6:	d547      	bpl.n	8011058 <_printf_float+0xc4>
 8010fc8:	189b      	adds	r3, r3, r2
 8010fca:	4393      	bics	r3, r2
 8010fcc:	001a      	movs	r2, r3
 8010fce:	3208      	adds	r2, #8
 8010fd0:	602a      	str	r2, [r5, #0]
 8010fd2:	681a      	ldr	r2, [r3, #0]
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	64a2      	str	r2, [r4, #72]	; 0x48
 8010fd8:	64e3      	str	r3, [r4, #76]	; 0x4c
 8010fda:	2201      	movs	r2, #1
 8010fdc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8010fde:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8010fe0:	930b      	str	r3, [sp, #44]	; 0x2c
 8010fe2:	006b      	lsls	r3, r5, #1
 8010fe4:	085b      	lsrs	r3, r3, #1
 8010fe6:	930f      	str	r3, [sp, #60]	; 0x3c
 8010fe8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010fea:	4ba7      	ldr	r3, [pc, #668]	; (8011288 <_printf_float+0x2f4>)
 8010fec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8010fee:	4252      	negs	r2, r2
 8010ff0:	f7f1 fcc0 	bl	8002974 <__aeabi_dcmpun>
 8010ff4:	2800      	cmp	r0, #0
 8010ff6:	d131      	bne.n	801105c <_printf_float+0xc8>
 8010ff8:	2201      	movs	r2, #1
 8010ffa:	4ba3      	ldr	r3, [pc, #652]	; (8011288 <_printf_float+0x2f4>)
 8010ffc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010ffe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011000:	4252      	negs	r2, r2
 8011002:	f7ef fa39 	bl	8000478 <__aeabi_dcmple>
 8011006:	2800      	cmp	r0, #0
 8011008:	d128      	bne.n	801105c <_printf_float+0xc8>
 801100a:	2200      	movs	r2, #0
 801100c:	2300      	movs	r3, #0
 801100e:	0029      	movs	r1, r5
 8011010:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011012:	f7ef fa27 	bl	8000464 <__aeabi_dcmplt>
 8011016:	2800      	cmp	r0, #0
 8011018:	d003      	beq.n	8011022 <_printf_float+0x8e>
 801101a:	0023      	movs	r3, r4
 801101c:	222d      	movs	r2, #45	; 0x2d
 801101e:	3343      	adds	r3, #67	; 0x43
 8011020:	701a      	strb	r2, [r3, #0]
 8011022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011024:	4d99      	ldr	r5, [pc, #612]	; (801128c <_printf_float+0x2f8>)
 8011026:	2b47      	cmp	r3, #71	; 0x47
 8011028:	d900      	bls.n	801102c <_printf_float+0x98>
 801102a:	4d99      	ldr	r5, [pc, #612]	; (8011290 <_printf_float+0x2fc>)
 801102c:	2303      	movs	r3, #3
 801102e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011030:	6123      	str	r3, [r4, #16]
 8011032:	3301      	adds	r3, #1
 8011034:	439a      	bics	r2, r3
 8011036:	2300      	movs	r3, #0
 8011038:	6022      	str	r2, [r4, #0]
 801103a:	930b      	str	r3, [sp, #44]	; 0x2c
 801103c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801103e:	0021      	movs	r1, r4
 8011040:	0038      	movs	r0, r7
 8011042:	9600      	str	r6, [sp, #0]
 8011044:	aa13      	add	r2, sp, #76	; 0x4c
 8011046:	f000 f9e7 	bl	8011418 <_printf_common>
 801104a:	1c43      	adds	r3, r0, #1
 801104c:	d000      	beq.n	8011050 <_printf_float+0xbc>
 801104e:	e0a2      	b.n	8011196 <_printf_float+0x202>
 8011050:	2001      	movs	r0, #1
 8011052:	4240      	negs	r0, r0
 8011054:	b015      	add	sp, #84	; 0x54
 8011056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011058:	3307      	adds	r3, #7
 801105a:	e7b6      	b.n	8010fca <_printf_float+0x36>
 801105c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801105e:	002b      	movs	r3, r5
 8011060:	0010      	movs	r0, r2
 8011062:	0029      	movs	r1, r5
 8011064:	f7f1 fc86 	bl	8002974 <__aeabi_dcmpun>
 8011068:	2800      	cmp	r0, #0
 801106a:	d00b      	beq.n	8011084 <_printf_float+0xf0>
 801106c:	2d00      	cmp	r5, #0
 801106e:	da03      	bge.n	8011078 <_printf_float+0xe4>
 8011070:	0023      	movs	r3, r4
 8011072:	222d      	movs	r2, #45	; 0x2d
 8011074:	3343      	adds	r3, #67	; 0x43
 8011076:	701a      	strb	r2, [r3, #0]
 8011078:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801107a:	4d86      	ldr	r5, [pc, #536]	; (8011294 <_printf_float+0x300>)
 801107c:	2b47      	cmp	r3, #71	; 0x47
 801107e:	d9d5      	bls.n	801102c <_printf_float+0x98>
 8011080:	4d85      	ldr	r5, [pc, #532]	; (8011298 <_printf_float+0x304>)
 8011082:	e7d3      	b.n	801102c <_printf_float+0x98>
 8011084:	2220      	movs	r2, #32
 8011086:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011088:	6863      	ldr	r3, [r4, #4]
 801108a:	4391      	bics	r1, r2
 801108c:	910f      	str	r1, [sp, #60]	; 0x3c
 801108e:	1c5a      	adds	r2, r3, #1
 8011090:	d149      	bne.n	8011126 <_printf_float+0x192>
 8011092:	3307      	adds	r3, #7
 8011094:	6063      	str	r3, [r4, #4]
 8011096:	2380      	movs	r3, #128	; 0x80
 8011098:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801109a:	00db      	lsls	r3, r3, #3
 801109c:	4313      	orrs	r3, r2
 801109e:	2200      	movs	r2, #0
 80110a0:	9206      	str	r2, [sp, #24]
 80110a2:	aa12      	add	r2, sp, #72	; 0x48
 80110a4:	9205      	str	r2, [sp, #20]
 80110a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80110a8:	a908      	add	r1, sp, #32
 80110aa:	9204      	str	r2, [sp, #16]
 80110ac:	aa11      	add	r2, sp, #68	; 0x44
 80110ae:	9203      	str	r2, [sp, #12]
 80110b0:	2223      	movs	r2, #35	; 0x23
 80110b2:	6023      	str	r3, [r4, #0]
 80110b4:	9301      	str	r3, [sp, #4]
 80110b6:	6863      	ldr	r3, [r4, #4]
 80110b8:	1852      	adds	r2, r2, r1
 80110ba:	9202      	str	r2, [sp, #8]
 80110bc:	9300      	str	r3, [sp, #0]
 80110be:	0038      	movs	r0, r7
 80110c0:	002b      	movs	r3, r5
 80110c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80110c4:	f7ff febb 	bl	8010e3e <__cvt>
 80110c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80110ca:	0005      	movs	r5, r0
 80110cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80110ce:	2b47      	cmp	r3, #71	; 0x47
 80110d0:	d108      	bne.n	80110e4 <_printf_float+0x150>
 80110d2:	1ccb      	adds	r3, r1, #3
 80110d4:	db02      	blt.n	80110dc <_printf_float+0x148>
 80110d6:	6863      	ldr	r3, [r4, #4]
 80110d8:	4299      	cmp	r1, r3
 80110da:	dd48      	ble.n	801116e <_printf_float+0x1da>
 80110dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110de:	3b02      	subs	r3, #2
 80110e0:	b2db      	uxtb	r3, r3
 80110e2:	930a      	str	r3, [sp, #40]	; 0x28
 80110e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110e6:	2b65      	cmp	r3, #101	; 0x65
 80110e8:	d824      	bhi.n	8011134 <_printf_float+0x1a0>
 80110ea:	0020      	movs	r0, r4
 80110ec:	001a      	movs	r2, r3
 80110ee:	3901      	subs	r1, #1
 80110f0:	3050      	adds	r0, #80	; 0x50
 80110f2:	9111      	str	r1, [sp, #68]	; 0x44
 80110f4:	f7ff ff06 	bl	8010f04 <__exponent>
 80110f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80110fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80110fc:	1813      	adds	r3, r2, r0
 80110fe:	6123      	str	r3, [r4, #16]
 8011100:	2a01      	cmp	r2, #1
 8011102:	dc02      	bgt.n	801110a <_printf_float+0x176>
 8011104:	6822      	ldr	r2, [r4, #0]
 8011106:	07d2      	lsls	r2, r2, #31
 8011108:	d501      	bpl.n	801110e <_printf_float+0x17a>
 801110a:	3301      	adds	r3, #1
 801110c:	6123      	str	r3, [r4, #16]
 801110e:	2323      	movs	r3, #35	; 0x23
 8011110:	aa08      	add	r2, sp, #32
 8011112:	189b      	adds	r3, r3, r2
 8011114:	781b      	ldrb	r3, [r3, #0]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d100      	bne.n	801111c <_printf_float+0x188>
 801111a:	e78f      	b.n	801103c <_printf_float+0xa8>
 801111c:	0023      	movs	r3, r4
 801111e:	222d      	movs	r2, #45	; 0x2d
 8011120:	3343      	adds	r3, #67	; 0x43
 8011122:	701a      	strb	r2, [r3, #0]
 8011124:	e78a      	b.n	801103c <_printf_float+0xa8>
 8011126:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011128:	2a47      	cmp	r2, #71	; 0x47
 801112a:	d1b4      	bne.n	8011096 <_printf_float+0x102>
 801112c:	2b00      	cmp	r3, #0
 801112e:	d1b2      	bne.n	8011096 <_printf_float+0x102>
 8011130:	3301      	adds	r3, #1
 8011132:	e7af      	b.n	8011094 <_printf_float+0x100>
 8011134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011136:	2b66      	cmp	r3, #102	; 0x66
 8011138:	d11b      	bne.n	8011172 <_printf_float+0x1de>
 801113a:	6863      	ldr	r3, [r4, #4]
 801113c:	2900      	cmp	r1, #0
 801113e:	dd0d      	ble.n	801115c <_printf_float+0x1c8>
 8011140:	6121      	str	r1, [r4, #16]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d102      	bne.n	801114c <_printf_float+0x1b8>
 8011146:	6822      	ldr	r2, [r4, #0]
 8011148:	07d2      	lsls	r2, r2, #31
 801114a:	d502      	bpl.n	8011152 <_printf_float+0x1be>
 801114c:	3301      	adds	r3, #1
 801114e:	1859      	adds	r1, r3, r1
 8011150:	6121      	str	r1, [r4, #16]
 8011152:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011154:	65a3      	str	r3, [r4, #88]	; 0x58
 8011156:	2300      	movs	r3, #0
 8011158:	930b      	str	r3, [sp, #44]	; 0x2c
 801115a:	e7d8      	b.n	801110e <_printf_float+0x17a>
 801115c:	2b00      	cmp	r3, #0
 801115e:	d103      	bne.n	8011168 <_printf_float+0x1d4>
 8011160:	2201      	movs	r2, #1
 8011162:	6821      	ldr	r1, [r4, #0]
 8011164:	4211      	tst	r1, r2
 8011166:	d000      	beq.n	801116a <_printf_float+0x1d6>
 8011168:	1c9a      	adds	r2, r3, #2
 801116a:	6122      	str	r2, [r4, #16]
 801116c:	e7f1      	b.n	8011152 <_printf_float+0x1be>
 801116e:	2367      	movs	r3, #103	; 0x67
 8011170:	930a      	str	r3, [sp, #40]	; 0x28
 8011172:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011174:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011176:	4293      	cmp	r3, r2
 8011178:	db06      	blt.n	8011188 <_printf_float+0x1f4>
 801117a:	6822      	ldr	r2, [r4, #0]
 801117c:	6123      	str	r3, [r4, #16]
 801117e:	07d2      	lsls	r2, r2, #31
 8011180:	d5e7      	bpl.n	8011152 <_printf_float+0x1be>
 8011182:	3301      	adds	r3, #1
 8011184:	6123      	str	r3, [r4, #16]
 8011186:	e7e4      	b.n	8011152 <_printf_float+0x1be>
 8011188:	2101      	movs	r1, #1
 801118a:	2b00      	cmp	r3, #0
 801118c:	dc01      	bgt.n	8011192 <_printf_float+0x1fe>
 801118e:	1849      	adds	r1, r1, r1
 8011190:	1ac9      	subs	r1, r1, r3
 8011192:	1852      	adds	r2, r2, r1
 8011194:	e7e9      	b.n	801116a <_printf_float+0x1d6>
 8011196:	6822      	ldr	r2, [r4, #0]
 8011198:	0553      	lsls	r3, r2, #21
 801119a:	d407      	bmi.n	80111ac <_printf_float+0x218>
 801119c:	6923      	ldr	r3, [r4, #16]
 801119e:	002a      	movs	r2, r5
 80111a0:	0038      	movs	r0, r7
 80111a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80111a4:	47b0      	blx	r6
 80111a6:	1c43      	adds	r3, r0, #1
 80111a8:	d128      	bne.n	80111fc <_printf_float+0x268>
 80111aa:	e751      	b.n	8011050 <_printf_float+0xbc>
 80111ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111ae:	2b65      	cmp	r3, #101	; 0x65
 80111b0:	d800      	bhi.n	80111b4 <_printf_float+0x220>
 80111b2:	e0e1      	b.n	8011378 <_printf_float+0x3e4>
 80111b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80111b6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80111b8:	2200      	movs	r2, #0
 80111ba:	2300      	movs	r3, #0
 80111bc:	f7ef f94c 	bl	8000458 <__aeabi_dcmpeq>
 80111c0:	2800      	cmp	r0, #0
 80111c2:	d031      	beq.n	8011228 <_printf_float+0x294>
 80111c4:	2301      	movs	r3, #1
 80111c6:	0038      	movs	r0, r7
 80111c8:	4a34      	ldr	r2, [pc, #208]	; (801129c <_printf_float+0x308>)
 80111ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80111cc:	47b0      	blx	r6
 80111ce:	1c43      	adds	r3, r0, #1
 80111d0:	d100      	bne.n	80111d4 <_printf_float+0x240>
 80111d2:	e73d      	b.n	8011050 <_printf_float+0xbc>
 80111d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80111d6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80111d8:	4293      	cmp	r3, r2
 80111da:	db02      	blt.n	80111e2 <_printf_float+0x24e>
 80111dc:	6823      	ldr	r3, [r4, #0]
 80111de:	07db      	lsls	r3, r3, #31
 80111e0:	d50c      	bpl.n	80111fc <_printf_float+0x268>
 80111e2:	0038      	movs	r0, r7
 80111e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80111e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80111e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80111ea:	47b0      	blx	r6
 80111ec:	2500      	movs	r5, #0
 80111ee:	1c43      	adds	r3, r0, #1
 80111f0:	d100      	bne.n	80111f4 <_printf_float+0x260>
 80111f2:	e72d      	b.n	8011050 <_printf_float+0xbc>
 80111f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80111f6:	3b01      	subs	r3, #1
 80111f8:	42ab      	cmp	r3, r5
 80111fa:	dc0a      	bgt.n	8011212 <_printf_float+0x27e>
 80111fc:	6823      	ldr	r3, [r4, #0]
 80111fe:	079b      	lsls	r3, r3, #30
 8011200:	d500      	bpl.n	8011204 <_printf_float+0x270>
 8011202:	e106      	b.n	8011412 <_printf_float+0x47e>
 8011204:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011206:	68e0      	ldr	r0, [r4, #12]
 8011208:	4298      	cmp	r0, r3
 801120a:	db00      	blt.n	801120e <_printf_float+0x27a>
 801120c:	e722      	b.n	8011054 <_printf_float+0xc0>
 801120e:	0018      	movs	r0, r3
 8011210:	e720      	b.n	8011054 <_printf_float+0xc0>
 8011212:	0022      	movs	r2, r4
 8011214:	2301      	movs	r3, #1
 8011216:	0038      	movs	r0, r7
 8011218:	9909      	ldr	r1, [sp, #36]	; 0x24
 801121a:	321a      	adds	r2, #26
 801121c:	47b0      	blx	r6
 801121e:	1c43      	adds	r3, r0, #1
 8011220:	d100      	bne.n	8011224 <_printf_float+0x290>
 8011222:	e715      	b.n	8011050 <_printf_float+0xbc>
 8011224:	3501      	adds	r5, #1
 8011226:	e7e5      	b.n	80111f4 <_printf_float+0x260>
 8011228:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801122a:	2b00      	cmp	r3, #0
 801122c:	dc38      	bgt.n	80112a0 <_printf_float+0x30c>
 801122e:	2301      	movs	r3, #1
 8011230:	0038      	movs	r0, r7
 8011232:	4a1a      	ldr	r2, [pc, #104]	; (801129c <_printf_float+0x308>)
 8011234:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011236:	47b0      	blx	r6
 8011238:	1c43      	adds	r3, r0, #1
 801123a:	d100      	bne.n	801123e <_printf_float+0x2aa>
 801123c:	e708      	b.n	8011050 <_printf_float+0xbc>
 801123e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011240:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011242:	4313      	orrs	r3, r2
 8011244:	d102      	bne.n	801124c <_printf_float+0x2b8>
 8011246:	6823      	ldr	r3, [r4, #0]
 8011248:	07db      	lsls	r3, r3, #31
 801124a:	d5d7      	bpl.n	80111fc <_printf_float+0x268>
 801124c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801124e:	0038      	movs	r0, r7
 8011250:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011252:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011254:	47b0      	blx	r6
 8011256:	1c43      	adds	r3, r0, #1
 8011258:	d100      	bne.n	801125c <_printf_float+0x2c8>
 801125a:	e6f9      	b.n	8011050 <_printf_float+0xbc>
 801125c:	2300      	movs	r3, #0
 801125e:	930a      	str	r3, [sp, #40]	; 0x28
 8011260:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011262:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011264:	425b      	negs	r3, r3
 8011266:	4293      	cmp	r3, r2
 8011268:	dc01      	bgt.n	801126e <_printf_float+0x2da>
 801126a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801126c:	e797      	b.n	801119e <_printf_float+0x20a>
 801126e:	0022      	movs	r2, r4
 8011270:	2301      	movs	r3, #1
 8011272:	0038      	movs	r0, r7
 8011274:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011276:	321a      	adds	r2, #26
 8011278:	47b0      	blx	r6
 801127a:	1c43      	adds	r3, r0, #1
 801127c:	d100      	bne.n	8011280 <_printf_float+0x2ec>
 801127e:	e6e7      	b.n	8011050 <_printf_float+0xbc>
 8011280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011282:	3301      	adds	r3, #1
 8011284:	e7eb      	b.n	801125e <_printf_float+0x2ca>
 8011286:	46c0      	nop			; (mov r8, r8)
 8011288:	7fefffff 	.word	0x7fefffff
 801128c:	080177d4 	.word	0x080177d4
 8011290:	080177d8 	.word	0x080177d8
 8011294:	080177dc 	.word	0x080177dc
 8011298:	080177e0 	.word	0x080177e0
 801129c:	080177e4 	.word	0x080177e4
 80112a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80112a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80112a4:	920a      	str	r2, [sp, #40]	; 0x28
 80112a6:	429a      	cmp	r2, r3
 80112a8:	dd00      	ble.n	80112ac <_printf_float+0x318>
 80112aa:	930a      	str	r3, [sp, #40]	; 0x28
 80112ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	dc3c      	bgt.n	801132c <_printf_float+0x398>
 80112b2:	2300      	movs	r3, #0
 80112b4:	930d      	str	r3, [sp, #52]	; 0x34
 80112b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112b8:	43db      	mvns	r3, r3
 80112ba:	17db      	asrs	r3, r3, #31
 80112bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80112be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80112c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80112c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80112c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112c6:	4013      	ands	r3, r2
 80112c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80112ca:	1ad3      	subs	r3, r2, r3
 80112cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80112ce:	4293      	cmp	r3, r2
 80112d0:	dc34      	bgt.n	801133c <_printf_float+0x3a8>
 80112d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80112d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80112d6:	4293      	cmp	r3, r2
 80112d8:	db3d      	blt.n	8011356 <_printf_float+0x3c2>
 80112da:	6823      	ldr	r3, [r4, #0]
 80112dc:	07db      	lsls	r3, r3, #31
 80112de:	d43a      	bmi.n	8011356 <_printf_float+0x3c2>
 80112e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80112e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80112e4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80112e6:	1ad3      	subs	r3, r2, r3
 80112e8:	1a52      	subs	r2, r2, r1
 80112ea:	920a      	str	r2, [sp, #40]	; 0x28
 80112ec:	429a      	cmp	r2, r3
 80112ee:	dd00      	ble.n	80112f2 <_printf_float+0x35e>
 80112f0:	930a      	str	r3, [sp, #40]	; 0x28
 80112f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	dc36      	bgt.n	8011366 <_printf_float+0x3d2>
 80112f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112fa:	2500      	movs	r5, #0
 80112fc:	43db      	mvns	r3, r3
 80112fe:	17db      	asrs	r3, r3, #31
 8011300:	930b      	str	r3, [sp, #44]	; 0x2c
 8011302:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011304:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011306:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011308:	1a9b      	subs	r3, r3, r2
 801130a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801130c:	400a      	ands	r2, r1
 801130e:	1a9b      	subs	r3, r3, r2
 8011310:	42ab      	cmp	r3, r5
 8011312:	dc00      	bgt.n	8011316 <_printf_float+0x382>
 8011314:	e772      	b.n	80111fc <_printf_float+0x268>
 8011316:	0022      	movs	r2, r4
 8011318:	2301      	movs	r3, #1
 801131a:	0038      	movs	r0, r7
 801131c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801131e:	321a      	adds	r2, #26
 8011320:	47b0      	blx	r6
 8011322:	1c43      	adds	r3, r0, #1
 8011324:	d100      	bne.n	8011328 <_printf_float+0x394>
 8011326:	e693      	b.n	8011050 <_printf_float+0xbc>
 8011328:	3501      	adds	r5, #1
 801132a:	e7ea      	b.n	8011302 <_printf_float+0x36e>
 801132c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801132e:	002a      	movs	r2, r5
 8011330:	0038      	movs	r0, r7
 8011332:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011334:	47b0      	blx	r6
 8011336:	1c43      	adds	r3, r0, #1
 8011338:	d1bb      	bne.n	80112b2 <_printf_float+0x31e>
 801133a:	e689      	b.n	8011050 <_printf_float+0xbc>
 801133c:	0022      	movs	r2, r4
 801133e:	2301      	movs	r3, #1
 8011340:	0038      	movs	r0, r7
 8011342:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011344:	321a      	adds	r2, #26
 8011346:	47b0      	blx	r6
 8011348:	1c43      	adds	r3, r0, #1
 801134a:	d100      	bne.n	801134e <_printf_float+0x3ba>
 801134c:	e680      	b.n	8011050 <_printf_float+0xbc>
 801134e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011350:	3301      	adds	r3, #1
 8011352:	930d      	str	r3, [sp, #52]	; 0x34
 8011354:	e7b3      	b.n	80112be <_printf_float+0x32a>
 8011356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011358:	0038      	movs	r0, r7
 801135a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801135c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801135e:	47b0      	blx	r6
 8011360:	1c43      	adds	r3, r0, #1
 8011362:	d1bd      	bne.n	80112e0 <_printf_float+0x34c>
 8011364:	e674      	b.n	8011050 <_printf_float+0xbc>
 8011366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011368:	0038      	movs	r0, r7
 801136a:	18ea      	adds	r2, r5, r3
 801136c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801136e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011370:	47b0      	blx	r6
 8011372:	1c43      	adds	r3, r0, #1
 8011374:	d1c0      	bne.n	80112f8 <_printf_float+0x364>
 8011376:	e66b      	b.n	8011050 <_printf_float+0xbc>
 8011378:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801137a:	2b01      	cmp	r3, #1
 801137c:	dc02      	bgt.n	8011384 <_printf_float+0x3f0>
 801137e:	2301      	movs	r3, #1
 8011380:	421a      	tst	r2, r3
 8011382:	d034      	beq.n	80113ee <_printf_float+0x45a>
 8011384:	2301      	movs	r3, #1
 8011386:	002a      	movs	r2, r5
 8011388:	0038      	movs	r0, r7
 801138a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801138c:	47b0      	blx	r6
 801138e:	1c43      	adds	r3, r0, #1
 8011390:	d100      	bne.n	8011394 <_printf_float+0x400>
 8011392:	e65d      	b.n	8011050 <_printf_float+0xbc>
 8011394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011396:	0038      	movs	r0, r7
 8011398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801139a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801139c:	47b0      	blx	r6
 801139e:	1c43      	adds	r3, r0, #1
 80113a0:	d100      	bne.n	80113a4 <_printf_float+0x410>
 80113a2:	e655      	b.n	8011050 <_printf_float+0xbc>
 80113a4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80113a6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80113a8:	2200      	movs	r2, #0
 80113aa:	2300      	movs	r3, #0
 80113ac:	f7ef f854 	bl	8000458 <__aeabi_dcmpeq>
 80113b0:	2800      	cmp	r0, #0
 80113b2:	d11a      	bne.n	80113ea <_printf_float+0x456>
 80113b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80113b6:	1c6a      	adds	r2, r5, #1
 80113b8:	3b01      	subs	r3, #1
 80113ba:	0038      	movs	r0, r7
 80113bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80113be:	47b0      	blx	r6
 80113c0:	1c43      	adds	r3, r0, #1
 80113c2:	d10e      	bne.n	80113e2 <_printf_float+0x44e>
 80113c4:	e644      	b.n	8011050 <_printf_float+0xbc>
 80113c6:	0022      	movs	r2, r4
 80113c8:	2301      	movs	r3, #1
 80113ca:	0038      	movs	r0, r7
 80113cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80113ce:	321a      	adds	r2, #26
 80113d0:	47b0      	blx	r6
 80113d2:	1c43      	adds	r3, r0, #1
 80113d4:	d100      	bne.n	80113d8 <_printf_float+0x444>
 80113d6:	e63b      	b.n	8011050 <_printf_float+0xbc>
 80113d8:	3501      	adds	r5, #1
 80113da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80113dc:	3b01      	subs	r3, #1
 80113de:	42ab      	cmp	r3, r5
 80113e0:	dcf1      	bgt.n	80113c6 <_printf_float+0x432>
 80113e2:	0022      	movs	r2, r4
 80113e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113e6:	3250      	adds	r2, #80	; 0x50
 80113e8:	e6da      	b.n	80111a0 <_printf_float+0x20c>
 80113ea:	2500      	movs	r5, #0
 80113ec:	e7f5      	b.n	80113da <_printf_float+0x446>
 80113ee:	002a      	movs	r2, r5
 80113f0:	e7e3      	b.n	80113ba <_printf_float+0x426>
 80113f2:	0022      	movs	r2, r4
 80113f4:	2301      	movs	r3, #1
 80113f6:	0038      	movs	r0, r7
 80113f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80113fa:	3219      	adds	r2, #25
 80113fc:	47b0      	blx	r6
 80113fe:	1c43      	adds	r3, r0, #1
 8011400:	d100      	bne.n	8011404 <_printf_float+0x470>
 8011402:	e625      	b.n	8011050 <_printf_float+0xbc>
 8011404:	3501      	adds	r5, #1
 8011406:	68e3      	ldr	r3, [r4, #12]
 8011408:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801140a:	1a9b      	subs	r3, r3, r2
 801140c:	42ab      	cmp	r3, r5
 801140e:	dcf0      	bgt.n	80113f2 <_printf_float+0x45e>
 8011410:	e6f8      	b.n	8011204 <_printf_float+0x270>
 8011412:	2500      	movs	r5, #0
 8011414:	e7f7      	b.n	8011406 <_printf_float+0x472>
 8011416:	46c0      	nop			; (mov r8, r8)

08011418 <_printf_common>:
 8011418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801141a:	0015      	movs	r5, r2
 801141c:	9301      	str	r3, [sp, #4]
 801141e:	688a      	ldr	r2, [r1, #8]
 8011420:	690b      	ldr	r3, [r1, #16]
 8011422:	000c      	movs	r4, r1
 8011424:	9000      	str	r0, [sp, #0]
 8011426:	4293      	cmp	r3, r2
 8011428:	da00      	bge.n	801142c <_printf_common+0x14>
 801142a:	0013      	movs	r3, r2
 801142c:	0022      	movs	r2, r4
 801142e:	602b      	str	r3, [r5, #0]
 8011430:	3243      	adds	r2, #67	; 0x43
 8011432:	7812      	ldrb	r2, [r2, #0]
 8011434:	2a00      	cmp	r2, #0
 8011436:	d001      	beq.n	801143c <_printf_common+0x24>
 8011438:	3301      	adds	r3, #1
 801143a:	602b      	str	r3, [r5, #0]
 801143c:	6823      	ldr	r3, [r4, #0]
 801143e:	069b      	lsls	r3, r3, #26
 8011440:	d502      	bpl.n	8011448 <_printf_common+0x30>
 8011442:	682b      	ldr	r3, [r5, #0]
 8011444:	3302      	adds	r3, #2
 8011446:	602b      	str	r3, [r5, #0]
 8011448:	6822      	ldr	r2, [r4, #0]
 801144a:	2306      	movs	r3, #6
 801144c:	0017      	movs	r7, r2
 801144e:	401f      	ands	r7, r3
 8011450:	421a      	tst	r2, r3
 8011452:	d027      	beq.n	80114a4 <_printf_common+0x8c>
 8011454:	0023      	movs	r3, r4
 8011456:	3343      	adds	r3, #67	; 0x43
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	1e5a      	subs	r2, r3, #1
 801145c:	4193      	sbcs	r3, r2
 801145e:	6822      	ldr	r2, [r4, #0]
 8011460:	0692      	lsls	r2, r2, #26
 8011462:	d430      	bmi.n	80114c6 <_printf_common+0xae>
 8011464:	0022      	movs	r2, r4
 8011466:	9901      	ldr	r1, [sp, #4]
 8011468:	9800      	ldr	r0, [sp, #0]
 801146a:	9e08      	ldr	r6, [sp, #32]
 801146c:	3243      	adds	r2, #67	; 0x43
 801146e:	47b0      	blx	r6
 8011470:	1c43      	adds	r3, r0, #1
 8011472:	d025      	beq.n	80114c0 <_printf_common+0xa8>
 8011474:	2306      	movs	r3, #6
 8011476:	6820      	ldr	r0, [r4, #0]
 8011478:	682a      	ldr	r2, [r5, #0]
 801147a:	68e1      	ldr	r1, [r4, #12]
 801147c:	2500      	movs	r5, #0
 801147e:	4003      	ands	r3, r0
 8011480:	2b04      	cmp	r3, #4
 8011482:	d103      	bne.n	801148c <_printf_common+0x74>
 8011484:	1a8d      	subs	r5, r1, r2
 8011486:	43eb      	mvns	r3, r5
 8011488:	17db      	asrs	r3, r3, #31
 801148a:	401d      	ands	r5, r3
 801148c:	68a3      	ldr	r3, [r4, #8]
 801148e:	6922      	ldr	r2, [r4, #16]
 8011490:	4293      	cmp	r3, r2
 8011492:	dd01      	ble.n	8011498 <_printf_common+0x80>
 8011494:	1a9b      	subs	r3, r3, r2
 8011496:	18ed      	adds	r5, r5, r3
 8011498:	2700      	movs	r7, #0
 801149a:	42bd      	cmp	r5, r7
 801149c:	d120      	bne.n	80114e0 <_printf_common+0xc8>
 801149e:	2000      	movs	r0, #0
 80114a0:	e010      	b.n	80114c4 <_printf_common+0xac>
 80114a2:	3701      	adds	r7, #1
 80114a4:	68e3      	ldr	r3, [r4, #12]
 80114a6:	682a      	ldr	r2, [r5, #0]
 80114a8:	1a9b      	subs	r3, r3, r2
 80114aa:	42bb      	cmp	r3, r7
 80114ac:	ddd2      	ble.n	8011454 <_printf_common+0x3c>
 80114ae:	0022      	movs	r2, r4
 80114b0:	2301      	movs	r3, #1
 80114b2:	9901      	ldr	r1, [sp, #4]
 80114b4:	9800      	ldr	r0, [sp, #0]
 80114b6:	9e08      	ldr	r6, [sp, #32]
 80114b8:	3219      	adds	r2, #25
 80114ba:	47b0      	blx	r6
 80114bc:	1c43      	adds	r3, r0, #1
 80114be:	d1f0      	bne.n	80114a2 <_printf_common+0x8a>
 80114c0:	2001      	movs	r0, #1
 80114c2:	4240      	negs	r0, r0
 80114c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80114c6:	2030      	movs	r0, #48	; 0x30
 80114c8:	18e1      	adds	r1, r4, r3
 80114ca:	3143      	adds	r1, #67	; 0x43
 80114cc:	7008      	strb	r0, [r1, #0]
 80114ce:	0021      	movs	r1, r4
 80114d0:	1c5a      	adds	r2, r3, #1
 80114d2:	3145      	adds	r1, #69	; 0x45
 80114d4:	7809      	ldrb	r1, [r1, #0]
 80114d6:	18a2      	adds	r2, r4, r2
 80114d8:	3243      	adds	r2, #67	; 0x43
 80114da:	3302      	adds	r3, #2
 80114dc:	7011      	strb	r1, [r2, #0]
 80114de:	e7c1      	b.n	8011464 <_printf_common+0x4c>
 80114e0:	0022      	movs	r2, r4
 80114e2:	2301      	movs	r3, #1
 80114e4:	9901      	ldr	r1, [sp, #4]
 80114e6:	9800      	ldr	r0, [sp, #0]
 80114e8:	9e08      	ldr	r6, [sp, #32]
 80114ea:	321a      	adds	r2, #26
 80114ec:	47b0      	blx	r6
 80114ee:	1c43      	adds	r3, r0, #1
 80114f0:	d0e6      	beq.n	80114c0 <_printf_common+0xa8>
 80114f2:	3701      	adds	r7, #1
 80114f4:	e7d1      	b.n	801149a <_printf_common+0x82>
	...

080114f8 <_printf_i>:
 80114f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80114fa:	b08b      	sub	sp, #44	; 0x2c
 80114fc:	9206      	str	r2, [sp, #24]
 80114fe:	000a      	movs	r2, r1
 8011500:	3243      	adds	r2, #67	; 0x43
 8011502:	9307      	str	r3, [sp, #28]
 8011504:	9005      	str	r0, [sp, #20]
 8011506:	9204      	str	r2, [sp, #16]
 8011508:	7e0a      	ldrb	r2, [r1, #24]
 801150a:	000c      	movs	r4, r1
 801150c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801150e:	2a78      	cmp	r2, #120	; 0x78
 8011510:	d807      	bhi.n	8011522 <_printf_i+0x2a>
 8011512:	2a62      	cmp	r2, #98	; 0x62
 8011514:	d809      	bhi.n	801152a <_printf_i+0x32>
 8011516:	2a00      	cmp	r2, #0
 8011518:	d100      	bne.n	801151c <_printf_i+0x24>
 801151a:	e0c1      	b.n	80116a0 <_printf_i+0x1a8>
 801151c:	2a58      	cmp	r2, #88	; 0x58
 801151e:	d100      	bne.n	8011522 <_printf_i+0x2a>
 8011520:	e08c      	b.n	801163c <_printf_i+0x144>
 8011522:	0026      	movs	r6, r4
 8011524:	3642      	adds	r6, #66	; 0x42
 8011526:	7032      	strb	r2, [r6, #0]
 8011528:	e022      	b.n	8011570 <_printf_i+0x78>
 801152a:	0010      	movs	r0, r2
 801152c:	3863      	subs	r0, #99	; 0x63
 801152e:	2815      	cmp	r0, #21
 8011530:	d8f7      	bhi.n	8011522 <_printf_i+0x2a>
 8011532:	f7ee fe01 	bl	8000138 <__gnu_thumb1_case_shi>
 8011536:	0016      	.short	0x0016
 8011538:	fff6001f 	.word	0xfff6001f
 801153c:	fff6fff6 	.word	0xfff6fff6
 8011540:	001ffff6 	.word	0x001ffff6
 8011544:	fff6fff6 	.word	0xfff6fff6
 8011548:	fff6fff6 	.word	0xfff6fff6
 801154c:	003600a8 	.word	0x003600a8
 8011550:	fff6009a 	.word	0xfff6009a
 8011554:	00b9fff6 	.word	0x00b9fff6
 8011558:	0036fff6 	.word	0x0036fff6
 801155c:	fff6fff6 	.word	0xfff6fff6
 8011560:	009e      	.short	0x009e
 8011562:	0026      	movs	r6, r4
 8011564:	681a      	ldr	r2, [r3, #0]
 8011566:	3642      	adds	r6, #66	; 0x42
 8011568:	1d11      	adds	r1, r2, #4
 801156a:	6019      	str	r1, [r3, #0]
 801156c:	6813      	ldr	r3, [r2, #0]
 801156e:	7033      	strb	r3, [r6, #0]
 8011570:	2301      	movs	r3, #1
 8011572:	e0a7      	b.n	80116c4 <_printf_i+0x1cc>
 8011574:	6808      	ldr	r0, [r1, #0]
 8011576:	6819      	ldr	r1, [r3, #0]
 8011578:	1d0a      	adds	r2, r1, #4
 801157a:	0605      	lsls	r5, r0, #24
 801157c:	d50b      	bpl.n	8011596 <_printf_i+0x9e>
 801157e:	680d      	ldr	r5, [r1, #0]
 8011580:	601a      	str	r2, [r3, #0]
 8011582:	2d00      	cmp	r5, #0
 8011584:	da03      	bge.n	801158e <_printf_i+0x96>
 8011586:	232d      	movs	r3, #45	; 0x2d
 8011588:	9a04      	ldr	r2, [sp, #16]
 801158a:	426d      	negs	r5, r5
 801158c:	7013      	strb	r3, [r2, #0]
 801158e:	4b61      	ldr	r3, [pc, #388]	; (8011714 <_printf_i+0x21c>)
 8011590:	270a      	movs	r7, #10
 8011592:	9303      	str	r3, [sp, #12]
 8011594:	e01b      	b.n	80115ce <_printf_i+0xd6>
 8011596:	680d      	ldr	r5, [r1, #0]
 8011598:	601a      	str	r2, [r3, #0]
 801159a:	0641      	lsls	r1, r0, #25
 801159c:	d5f1      	bpl.n	8011582 <_printf_i+0x8a>
 801159e:	b22d      	sxth	r5, r5
 80115a0:	e7ef      	b.n	8011582 <_printf_i+0x8a>
 80115a2:	680d      	ldr	r5, [r1, #0]
 80115a4:	6819      	ldr	r1, [r3, #0]
 80115a6:	1d08      	adds	r0, r1, #4
 80115a8:	6018      	str	r0, [r3, #0]
 80115aa:	062e      	lsls	r6, r5, #24
 80115ac:	d501      	bpl.n	80115b2 <_printf_i+0xba>
 80115ae:	680d      	ldr	r5, [r1, #0]
 80115b0:	e003      	b.n	80115ba <_printf_i+0xc2>
 80115b2:	066d      	lsls	r5, r5, #25
 80115b4:	d5fb      	bpl.n	80115ae <_printf_i+0xb6>
 80115b6:	680d      	ldr	r5, [r1, #0]
 80115b8:	b2ad      	uxth	r5, r5
 80115ba:	4b56      	ldr	r3, [pc, #344]	; (8011714 <_printf_i+0x21c>)
 80115bc:	2708      	movs	r7, #8
 80115be:	9303      	str	r3, [sp, #12]
 80115c0:	2a6f      	cmp	r2, #111	; 0x6f
 80115c2:	d000      	beq.n	80115c6 <_printf_i+0xce>
 80115c4:	3702      	adds	r7, #2
 80115c6:	0023      	movs	r3, r4
 80115c8:	2200      	movs	r2, #0
 80115ca:	3343      	adds	r3, #67	; 0x43
 80115cc:	701a      	strb	r2, [r3, #0]
 80115ce:	6863      	ldr	r3, [r4, #4]
 80115d0:	60a3      	str	r3, [r4, #8]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	db03      	blt.n	80115de <_printf_i+0xe6>
 80115d6:	2204      	movs	r2, #4
 80115d8:	6821      	ldr	r1, [r4, #0]
 80115da:	4391      	bics	r1, r2
 80115dc:	6021      	str	r1, [r4, #0]
 80115de:	2d00      	cmp	r5, #0
 80115e0:	d102      	bne.n	80115e8 <_printf_i+0xf0>
 80115e2:	9e04      	ldr	r6, [sp, #16]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d00c      	beq.n	8011602 <_printf_i+0x10a>
 80115e8:	9e04      	ldr	r6, [sp, #16]
 80115ea:	0028      	movs	r0, r5
 80115ec:	0039      	movs	r1, r7
 80115ee:	f7ee fe33 	bl	8000258 <__aeabi_uidivmod>
 80115f2:	9b03      	ldr	r3, [sp, #12]
 80115f4:	3e01      	subs	r6, #1
 80115f6:	5c5b      	ldrb	r3, [r3, r1]
 80115f8:	7033      	strb	r3, [r6, #0]
 80115fa:	002b      	movs	r3, r5
 80115fc:	0005      	movs	r5, r0
 80115fe:	429f      	cmp	r7, r3
 8011600:	d9f3      	bls.n	80115ea <_printf_i+0xf2>
 8011602:	2f08      	cmp	r7, #8
 8011604:	d109      	bne.n	801161a <_printf_i+0x122>
 8011606:	6823      	ldr	r3, [r4, #0]
 8011608:	07db      	lsls	r3, r3, #31
 801160a:	d506      	bpl.n	801161a <_printf_i+0x122>
 801160c:	6863      	ldr	r3, [r4, #4]
 801160e:	6922      	ldr	r2, [r4, #16]
 8011610:	4293      	cmp	r3, r2
 8011612:	dc02      	bgt.n	801161a <_printf_i+0x122>
 8011614:	2330      	movs	r3, #48	; 0x30
 8011616:	3e01      	subs	r6, #1
 8011618:	7033      	strb	r3, [r6, #0]
 801161a:	9b04      	ldr	r3, [sp, #16]
 801161c:	1b9b      	subs	r3, r3, r6
 801161e:	6123      	str	r3, [r4, #16]
 8011620:	9b07      	ldr	r3, [sp, #28]
 8011622:	0021      	movs	r1, r4
 8011624:	9300      	str	r3, [sp, #0]
 8011626:	9805      	ldr	r0, [sp, #20]
 8011628:	9b06      	ldr	r3, [sp, #24]
 801162a:	aa09      	add	r2, sp, #36	; 0x24
 801162c:	f7ff fef4 	bl	8011418 <_printf_common>
 8011630:	1c43      	adds	r3, r0, #1
 8011632:	d14c      	bne.n	80116ce <_printf_i+0x1d6>
 8011634:	2001      	movs	r0, #1
 8011636:	4240      	negs	r0, r0
 8011638:	b00b      	add	sp, #44	; 0x2c
 801163a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801163c:	3145      	adds	r1, #69	; 0x45
 801163e:	700a      	strb	r2, [r1, #0]
 8011640:	4a34      	ldr	r2, [pc, #208]	; (8011714 <_printf_i+0x21c>)
 8011642:	9203      	str	r2, [sp, #12]
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	6821      	ldr	r1, [r4, #0]
 8011648:	ca20      	ldmia	r2!, {r5}
 801164a:	601a      	str	r2, [r3, #0]
 801164c:	0608      	lsls	r0, r1, #24
 801164e:	d516      	bpl.n	801167e <_printf_i+0x186>
 8011650:	07cb      	lsls	r3, r1, #31
 8011652:	d502      	bpl.n	801165a <_printf_i+0x162>
 8011654:	2320      	movs	r3, #32
 8011656:	4319      	orrs	r1, r3
 8011658:	6021      	str	r1, [r4, #0]
 801165a:	2710      	movs	r7, #16
 801165c:	2d00      	cmp	r5, #0
 801165e:	d1b2      	bne.n	80115c6 <_printf_i+0xce>
 8011660:	2320      	movs	r3, #32
 8011662:	6822      	ldr	r2, [r4, #0]
 8011664:	439a      	bics	r2, r3
 8011666:	6022      	str	r2, [r4, #0]
 8011668:	e7ad      	b.n	80115c6 <_printf_i+0xce>
 801166a:	2220      	movs	r2, #32
 801166c:	6809      	ldr	r1, [r1, #0]
 801166e:	430a      	orrs	r2, r1
 8011670:	6022      	str	r2, [r4, #0]
 8011672:	0022      	movs	r2, r4
 8011674:	2178      	movs	r1, #120	; 0x78
 8011676:	3245      	adds	r2, #69	; 0x45
 8011678:	7011      	strb	r1, [r2, #0]
 801167a:	4a27      	ldr	r2, [pc, #156]	; (8011718 <_printf_i+0x220>)
 801167c:	e7e1      	b.n	8011642 <_printf_i+0x14a>
 801167e:	0648      	lsls	r0, r1, #25
 8011680:	d5e6      	bpl.n	8011650 <_printf_i+0x158>
 8011682:	b2ad      	uxth	r5, r5
 8011684:	e7e4      	b.n	8011650 <_printf_i+0x158>
 8011686:	681a      	ldr	r2, [r3, #0]
 8011688:	680d      	ldr	r5, [r1, #0]
 801168a:	1d10      	adds	r0, r2, #4
 801168c:	6949      	ldr	r1, [r1, #20]
 801168e:	6018      	str	r0, [r3, #0]
 8011690:	6813      	ldr	r3, [r2, #0]
 8011692:	062e      	lsls	r6, r5, #24
 8011694:	d501      	bpl.n	801169a <_printf_i+0x1a2>
 8011696:	6019      	str	r1, [r3, #0]
 8011698:	e002      	b.n	80116a0 <_printf_i+0x1a8>
 801169a:	066d      	lsls	r5, r5, #25
 801169c:	d5fb      	bpl.n	8011696 <_printf_i+0x19e>
 801169e:	8019      	strh	r1, [r3, #0]
 80116a0:	2300      	movs	r3, #0
 80116a2:	9e04      	ldr	r6, [sp, #16]
 80116a4:	6123      	str	r3, [r4, #16]
 80116a6:	e7bb      	b.n	8011620 <_printf_i+0x128>
 80116a8:	681a      	ldr	r2, [r3, #0]
 80116aa:	1d11      	adds	r1, r2, #4
 80116ac:	6019      	str	r1, [r3, #0]
 80116ae:	6816      	ldr	r6, [r2, #0]
 80116b0:	2100      	movs	r1, #0
 80116b2:	0030      	movs	r0, r6
 80116b4:	6862      	ldr	r2, [r4, #4]
 80116b6:	f002 ff8f 	bl	80145d8 <memchr>
 80116ba:	2800      	cmp	r0, #0
 80116bc:	d001      	beq.n	80116c2 <_printf_i+0x1ca>
 80116be:	1b80      	subs	r0, r0, r6
 80116c0:	6060      	str	r0, [r4, #4]
 80116c2:	6863      	ldr	r3, [r4, #4]
 80116c4:	6123      	str	r3, [r4, #16]
 80116c6:	2300      	movs	r3, #0
 80116c8:	9a04      	ldr	r2, [sp, #16]
 80116ca:	7013      	strb	r3, [r2, #0]
 80116cc:	e7a8      	b.n	8011620 <_printf_i+0x128>
 80116ce:	6923      	ldr	r3, [r4, #16]
 80116d0:	0032      	movs	r2, r6
 80116d2:	9906      	ldr	r1, [sp, #24]
 80116d4:	9805      	ldr	r0, [sp, #20]
 80116d6:	9d07      	ldr	r5, [sp, #28]
 80116d8:	47a8      	blx	r5
 80116da:	1c43      	adds	r3, r0, #1
 80116dc:	d0aa      	beq.n	8011634 <_printf_i+0x13c>
 80116de:	6823      	ldr	r3, [r4, #0]
 80116e0:	079b      	lsls	r3, r3, #30
 80116e2:	d415      	bmi.n	8011710 <_printf_i+0x218>
 80116e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80116e6:	68e0      	ldr	r0, [r4, #12]
 80116e8:	4298      	cmp	r0, r3
 80116ea:	daa5      	bge.n	8011638 <_printf_i+0x140>
 80116ec:	0018      	movs	r0, r3
 80116ee:	e7a3      	b.n	8011638 <_printf_i+0x140>
 80116f0:	0022      	movs	r2, r4
 80116f2:	2301      	movs	r3, #1
 80116f4:	9906      	ldr	r1, [sp, #24]
 80116f6:	9805      	ldr	r0, [sp, #20]
 80116f8:	9e07      	ldr	r6, [sp, #28]
 80116fa:	3219      	adds	r2, #25
 80116fc:	47b0      	blx	r6
 80116fe:	1c43      	adds	r3, r0, #1
 8011700:	d098      	beq.n	8011634 <_printf_i+0x13c>
 8011702:	3501      	adds	r5, #1
 8011704:	68e3      	ldr	r3, [r4, #12]
 8011706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011708:	1a9b      	subs	r3, r3, r2
 801170a:	42ab      	cmp	r3, r5
 801170c:	dcf0      	bgt.n	80116f0 <_printf_i+0x1f8>
 801170e:	e7e9      	b.n	80116e4 <_printf_i+0x1ec>
 8011710:	2500      	movs	r5, #0
 8011712:	e7f7      	b.n	8011704 <_printf_i+0x20c>
 8011714:	080177e6 	.word	0x080177e6
 8011718:	080177f7 	.word	0x080177f7

0801171c <_scanf_float>:
 801171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801171e:	b08b      	sub	sp, #44	; 0x2c
 8011720:	0015      	movs	r5, r2
 8011722:	9001      	str	r0, [sp, #4]
 8011724:	22ae      	movs	r2, #174	; 0xae
 8011726:	2000      	movs	r0, #0
 8011728:	9306      	str	r3, [sp, #24]
 801172a:	688b      	ldr	r3, [r1, #8]
 801172c:	000e      	movs	r6, r1
 801172e:	1e59      	subs	r1, r3, #1
 8011730:	0052      	lsls	r2, r2, #1
 8011732:	9005      	str	r0, [sp, #20]
 8011734:	4291      	cmp	r1, r2
 8011736:	d905      	bls.n	8011744 <_scanf_float+0x28>
 8011738:	3b5e      	subs	r3, #94	; 0x5e
 801173a:	3bff      	subs	r3, #255	; 0xff
 801173c:	9305      	str	r3, [sp, #20]
 801173e:	235e      	movs	r3, #94	; 0x5e
 8011740:	33ff      	adds	r3, #255	; 0xff
 8011742:	60b3      	str	r3, [r6, #8]
 8011744:	23f0      	movs	r3, #240	; 0xf0
 8011746:	6832      	ldr	r2, [r6, #0]
 8011748:	00db      	lsls	r3, r3, #3
 801174a:	4313      	orrs	r3, r2
 801174c:	6033      	str	r3, [r6, #0]
 801174e:	0033      	movs	r3, r6
 8011750:	2400      	movs	r4, #0
 8011752:	331c      	adds	r3, #28
 8011754:	001f      	movs	r7, r3
 8011756:	9303      	str	r3, [sp, #12]
 8011758:	9402      	str	r4, [sp, #8]
 801175a:	9408      	str	r4, [sp, #32]
 801175c:	9407      	str	r4, [sp, #28]
 801175e:	9400      	str	r4, [sp, #0]
 8011760:	9404      	str	r4, [sp, #16]
 8011762:	68b2      	ldr	r2, [r6, #8]
 8011764:	2a00      	cmp	r2, #0
 8011766:	d00a      	beq.n	801177e <_scanf_float+0x62>
 8011768:	682b      	ldr	r3, [r5, #0]
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	2b4e      	cmp	r3, #78	; 0x4e
 801176e:	d844      	bhi.n	80117fa <_scanf_float+0xde>
 8011770:	0018      	movs	r0, r3
 8011772:	2b40      	cmp	r3, #64	; 0x40
 8011774:	d82c      	bhi.n	80117d0 <_scanf_float+0xb4>
 8011776:	382b      	subs	r0, #43	; 0x2b
 8011778:	b2c1      	uxtb	r1, r0
 801177a:	290e      	cmp	r1, #14
 801177c:	d92a      	bls.n	80117d4 <_scanf_float+0xb8>
 801177e:	9b00      	ldr	r3, [sp, #0]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d003      	beq.n	801178c <_scanf_float+0x70>
 8011784:	6832      	ldr	r2, [r6, #0]
 8011786:	4ba4      	ldr	r3, [pc, #656]	; (8011a18 <_scanf_float+0x2fc>)
 8011788:	4013      	ands	r3, r2
 801178a:	6033      	str	r3, [r6, #0]
 801178c:	9b02      	ldr	r3, [sp, #8]
 801178e:	3b01      	subs	r3, #1
 8011790:	2b01      	cmp	r3, #1
 8011792:	d900      	bls.n	8011796 <_scanf_float+0x7a>
 8011794:	e0f9      	b.n	801198a <_scanf_float+0x26e>
 8011796:	24be      	movs	r4, #190	; 0xbe
 8011798:	0064      	lsls	r4, r4, #1
 801179a:	9b03      	ldr	r3, [sp, #12]
 801179c:	429f      	cmp	r7, r3
 801179e:	d900      	bls.n	80117a2 <_scanf_float+0x86>
 80117a0:	e0e9      	b.n	8011976 <_scanf_float+0x25a>
 80117a2:	2301      	movs	r3, #1
 80117a4:	9302      	str	r3, [sp, #8]
 80117a6:	e185      	b.n	8011ab4 <_scanf_float+0x398>
 80117a8:	0018      	movs	r0, r3
 80117aa:	3861      	subs	r0, #97	; 0x61
 80117ac:	280d      	cmp	r0, #13
 80117ae:	d8e6      	bhi.n	801177e <_scanf_float+0x62>
 80117b0:	f7ee fcc2 	bl	8000138 <__gnu_thumb1_case_shi>
 80117b4:	ffe50083 	.word	0xffe50083
 80117b8:	ffe5ffe5 	.word	0xffe5ffe5
 80117bc:	00a200b6 	.word	0x00a200b6
 80117c0:	ffe5ffe5 	.word	0xffe5ffe5
 80117c4:	ffe50089 	.word	0xffe50089
 80117c8:	ffe5ffe5 	.word	0xffe5ffe5
 80117cc:	0065ffe5 	.word	0x0065ffe5
 80117d0:	3841      	subs	r0, #65	; 0x41
 80117d2:	e7eb      	b.n	80117ac <_scanf_float+0x90>
 80117d4:	280e      	cmp	r0, #14
 80117d6:	d8d2      	bhi.n	801177e <_scanf_float+0x62>
 80117d8:	f7ee fcae 	bl	8000138 <__gnu_thumb1_case_shi>
 80117dc:	ffd1004b 	.word	0xffd1004b
 80117e0:	0098004b 	.word	0x0098004b
 80117e4:	0020ffd1 	.word	0x0020ffd1
 80117e8:	00400040 	.word	0x00400040
 80117ec:	00400040 	.word	0x00400040
 80117f0:	00400040 	.word	0x00400040
 80117f4:	00400040 	.word	0x00400040
 80117f8:	0040      	.short	0x0040
 80117fa:	2b6e      	cmp	r3, #110	; 0x6e
 80117fc:	d809      	bhi.n	8011812 <_scanf_float+0xf6>
 80117fe:	2b60      	cmp	r3, #96	; 0x60
 8011800:	d8d2      	bhi.n	80117a8 <_scanf_float+0x8c>
 8011802:	2b54      	cmp	r3, #84	; 0x54
 8011804:	d07d      	beq.n	8011902 <_scanf_float+0x1e6>
 8011806:	2b59      	cmp	r3, #89	; 0x59
 8011808:	d1b9      	bne.n	801177e <_scanf_float+0x62>
 801180a:	2c07      	cmp	r4, #7
 801180c:	d1b7      	bne.n	801177e <_scanf_float+0x62>
 801180e:	2408      	movs	r4, #8
 8011810:	e02c      	b.n	801186c <_scanf_float+0x150>
 8011812:	2b74      	cmp	r3, #116	; 0x74
 8011814:	d075      	beq.n	8011902 <_scanf_float+0x1e6>
 8011816:	2b79      	cmp	r3, #121	; 0x79
 8011818:	d0f7      	beq.n	801180a <_scanf_float+0xee>
 801181a:	e7b0      	b.n	801177e <_scanf_float+0x62>
 801181c:	6831      	ldr	r1, [r6, #0]
 801181e:	05c8      	lsls	r0, r1, #23
 8011820:	d51c      	bpl.n	801185c <_scanf_float+0x140>
 8011822:	2380      	movs	r3, #128	; 0x80
 8011824:	4399      	bics	r1, r3
 8011826:	9b00      	ldr	r3, [sp, #0]
 8011828:	6031      	str	r1, [r6, #0]
 801182a:	3301      	adds	r3, #1
 801182c:	9300      	str	r3, [sp, #0]
 801182e:	9b05      	ldr	r3, [sp, #20]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d003      	beq.n	801183c <_scanf_float+0x120>
 8011834:	3b01      	subs	r3, #1
 8011836:	3201      	adds	r2, #1
 8011838:	9305      	str	r3, [sp, #20]
 801183a:	60b2      	str	r2, [r6, #8]
 801183c:	68b3      	ldr	r3, [r6, #8]
 801183e:	3b01      	subs	r3, #1
 8011840:	60b3      	str	r3, [r6, #8]
 8011842:	6933      	ldr	r3, [r6, #16]
 8011844:	3301      	adds	r3, #1
 8011846:	6133      	str	r3, [r6, #16]
 8011848:	686b      	ldr	r3, [r5, #4]
 801184a:	3b01      	subs	r3, #1
 801184c:	606b      	str	r3, [r5, #4]
 801184e:	2b00      	cmp	r3, #0
 8011850:	dc00      	bgt.n	8011854 <_scanf_float+0x138>
 8011852:	e086      	b.n	8011962 <_scanf_float+0x246>
 8011854:	682b      	ldr	r3, [r5, #0]
 8011856:	3301      	adds	r3, #1
 8011858:	602b      	str	r3, [r5, #0]
 801185a:	e782      	b.n	8011762 <_scanf_float+0x46>
 801185c:	9a02      	ldr	r2, [sp, #8]
 801185e:	1912      	adds	r2, r2, r4
 8011860:	2a00      	cmp	r2, #0
 8011862:	d18c      	bne.n	801177e <_scanf_float+0x62>
 8011864:	4a6d      	ldr	r2, [pc, #436]	; (8011a1c <_scanf_float+0x300>)
 8011866:	6831      	ldr	r1, [r6, #0]
 8011868:	400a      	ands	r2, r1
 801186a:	6032      	str	r2, [r6, #0]
 801186c:	703b      	strb	r3, [r7, #0]
 801186e:	3701      	adds	r7, #1
 8011870:	e7e4      	b.n	801183c <_scanf_float+0x120>
 8011872:	2180      	movs	r1, #128	; 0x80
 8011874:	6832      	ldr	r2, [r6, #0]
 8011876:	420a      	tst	r2, r1
 8011878:	d081      	beq.n	801177e <_scanf_float+0x62>
 801187a:	438a      	bics	r2, r1
 801187c:	e7f5      	b.n	801186a <_scanf_float+0x14e>
 801187e:	9a02      	ldr	r2, [sp, #8]
 8011880:	2a00      	cmp	r2, #0
 8011882:	d10f      	bne.n	80118a4 <_scanf_float+0x188>
 8011884:	9a00      	ldr	r2, [sp, #0]
 8011886:	2a00      	cmp	r2, #0
 8011888:	d10f      	bne.n	80118aa <_scanf_float+0x18e>
 801188a:	6832      	ldr	r2, [r6, #0]
 801188c:	21e0      	movs	r1, #224	; 0xe0
 801188e:	0010      	movs	r0, r2
 8011890:	00c9      	lsls	r1, r1, #3
 8011892:	4008      	ands	r0, r1
 8011894:	4288      	cmp	r0, r1
 8011896:	d108      	bne.n	80118aa <_scanf_float+0x18e>
 8011898:	4961      	ldr	r1, [pc, #388]	; (8011a20 <_scanf_float+0x304>)
 801189a:	400a      	ands	r2, r1
 801189c:	6032      	str	r2, [r6, #0]
 801189e:	2201      	movs	r2, #1
 80118a0:	9202      	str	r2, [sp, #8]
 80118a2:	e7e3      	b.n	801186c <_scanf_float+0x150>
 80118a4:	9a02      	ldr	r2, [sp, #8]
 80118a6:	2a02      	cmp	r2, #2
 80118a8:	d059      	beq.n	801195e <_scanf_float+0x242>
 80118aa:	2c01      	cmp	r4, #1
 80118ac:	d002      	beq.n	80118b4 <_scanf_float+0x198>
 80118ae:	2c04      	cmp	r4, #4
 80118b0:	d000      	beq.n	80118b4 <_scanf_float+0x198>
 80118b2:	e764      	b.n	801177e <_scanf_float+0x62>
 80118b4:	3401      	adds	r4, #1
 80118b6:	b2e4      	uxtb	r4, r4
 80118b8:	e7d8      	b.n	801186c <_scanf_float+0x150>
 80118ba:	9a02      	ldr	r2, [sp, #8]
 80118bc:	2a01      	cmp	r2, #1
 80118be:	d000      	beq.n	80118c2 <_scanf_float+0x1a6>
 80118c0:	e75d      	b.n	801177e <_scanf_float+0x62>
 80118c2:	2202      	movs	r2, #2
 80118c4:	e7ec      	b.n	80118a0 <_scanf_float+0x184>
 80118c6:	2c00      	cmp	r4, #0
 80118c8:	d110      	bne.n	80118ec <_scanf_float+0x1d0>
 80118ca:	9a00      	ldr	r2, [sp, #0]
 80118cc:	2a00      	cmp	r2, #0
 80118ce:	d000      	beq.n	80118d2 <_scanf_float+0x1b6>
 80118d0:	e758      	b.n	8011784 <_scanf_float+0x68>
 80118d2:	6832      	ldr	r2, [r6, #0]
 80118d4:	21e0      	movs	r1, #224	; 0xe0
 80118d6:	0010      	movs	r0, r2
 80118d8:	00c9      	lsls	r1, r1, #3
 80118da:	4008      	ands	r0, r1
 80118dc:	4288      	cmp	r0, r1
 80118de:	d000      	beq.n	80118e2 <_scanf_float+0x1c6>
 80118e0:	e754      	b.n	801178c <_scanf_float+0x70>
 80118e2:	494f      	ldr	r1, [pc, #316]	; (8011a20 <_scanf_float+0x304>)
 80118e4:	3401      	adds	r4, #1
 80118e6:	400a      	ands	r2, r1
 80118e8:	6032      	str	r2, [r6, #0]
 80118ea:	e7bf      	b.n	801186c <_scanf_float+0x150>
 80118ec:	21fd      	movs	r1, #253	; 0xfd
 80118ee:	1ee2      	subs	r2, r4, #3
 80118f0:	420a      	tst	r2, r1
 80118f2:	d000      	beq.n	80118f6 <_scanf_float+0x1da>
 80118f4:	e743      	b.n	801177e <_scanf_float+0x62>
 80118f6:	e7dd      	b.n	80118b4 <_scanf_float+0x198>
 80118f8:	2c02      	cmp	r4, #2
 80118fa:	d000      	beq.n	80118fe <_scanf_float+0x1e2>
 80118fc:	e73f      	b.n	801177e <_scanf_float+0x62>
 80118fe:	2403      	movs	r4, #3
 8011900:	e7b4      	b.n	801186c <_scanf_float+0x150>
 8011902:	2c06      	cmp	r4, #6
 8011904:	d000      	beq.n	8011908 <_scanf_float+0x1ec>
 8011906:	e73a      	b.n	801177e <_scanf_float+0x62>
 8011908:	2407      	movs	r4, #7
 801190a:	e7af      	b.n	801186c <_scanf_float+0x150>
 801190c:	6832      	ldr	r2, [r6, #0]
 801190e:	0591      	lsls	r1, r2, #22
 8011910:	d400      	bmi.n	8011914 <_scanf_float+0x1f8>
 8011912:	e734      	b.n	801177e <_scanf_float+0x62>
 8011914:	4943      	ldr	r1, [pc, #268]	; (8011a24 <_scanf_float+0x308>)
 8011916:	400a      	ands	r2, r1
 8011918:	6032      	str	r2, [r6, #0]
 801191a:	9a00      	ldr	r2, [sp, #0]
 801191c:	9204      	str	r2, [sp, #16]
 801191e:	e7a5      	b.n	801186c <_scanf_float+0x150>
 8011920:	21a0      	movs	r1, #160	; 0xa0
 8011922:	2080      	movs	r0, #128	; 0x80
 8011924:	6832      	ldr	r2, [r6, #0]
 8011926:	00c9      	lsls	r1, r1, #3
 8011928:	4011      	ands	r1, r2
 801192a:	00c0      	lsls	r0, r0, #3
 801192c:	4281      	cmp	r1, r0
 801192e:	d006      	beq.n	801193e <_scanf_float+0x222>
 8011930:	4202      	tst	r2, r0
 8011932:	d100      	bne.n	8011936 <_scanf_float+0x21a>
 8011934:	e723      	b.n	801177e <_scanf_float+0x62>
 8011936:	9900      	ldr	r1, [sp, #0]
 8011938:	2900      	cmp	r1, #0
 801193a:	d100      	bne.n	801193e <_scanf_float+0x222>
 801193c:	e726      	b.n	801178c <_scanf_float+0x70>
 801193e:	0591      	lsls	r1, r2, #22
 8011940:	d404      	bmi.n	801194c <_scanf_float+0x230>
 8011942:	9900      	ldr	r1, [sp, #0]
 8011944:	9804      	ldr	r0, [sp, #16]
 8011946:	9708      	str	r7, [sp, #32]
 8011948:	1a09      	subs	r1, r1, r0
 801194a:	9107      	str	r1, [sp, #28]
 801194c:	4934      	ldr	r1, [pc, #208]	; (8011a20 <_scanf_float+0x304>)
 801194e:	400a      	ands	r2, r1
 8011950:	21c0      	movs	r1, #192	; 0xc0
 8011952:	0049      	lsls	r1, r1, #1
 8011954:	430a      	orrs	r2, r1
 8011956:	6032      	str	r2, [r6, #0]
 8011958:	2200      	movs	r2, #0
 801195a:	9200      	str	r2, [sp, #0]
 801195c:	e786      	b.n	801186c <_scanf_float+0x150>
 801195e:	2203      	movs	r2, #3
 8011960:	e79e      	b.n	80118a0 <_scanf_float+0x184>
 8011962:	23c0      	movs	r3, #192	; 0xc0
 8011964:	005b      	lsls	r3, r3, #1
 8011966:	0029      	movs	r1, r5
 8011968:	58f3      	ldr	r3, [r6, r3]
 801196a:	9801      	ldr	r0, [sp, #4]
 801196c:	4798      	blx	r3
 801196e:	2800      	cmp	r0, #0
 8011970:	d100      	bne.n	8011974 <_scanf_float+0x258>
 8011972:	e6f6      	b.n	8011762 <_scanf_float+0x46>
 8011974:	e703      	b.n	801177e <_scanf_float+0x62>
 8011976:	3f01      	subs	r7, #1
 8011978:	5933      	ldr	r3, [r6, r4]
 801197a:	002a      	movs	r2, r5
 801197c:	7839      	ldrb	r1, [r7, #0]
 801197e:	9801      	ldr	r0, [sp, #4]
 8011980:	4798      	blx	r3
 8011982:	6933      	ldr	r3, [r6, #16]
 8011984:	3b01      	subs	r3, #1
 8011986:	6133      	str	r3, [r6, #16]
 8011988:	e707      	b.n	801179a <_scanf_float+0x7e>
 801198a:	1e63      	subs	r3, r4, #1
 801198c:	2b06      	cmp	r3, #6
 801198e:	d80e      	bhi.n	80119ae <_scanf_float+0x292>
 8011990:	9702      	str	r7, [sp, #8]
 8011992:	2c02      	cmp	r4, #2
 8011994:	d920      	bls.n	80119d8 <_scanf_float+0x2bc>
 8011996:	1be3      	subs	r3, r4, r7
 8011998:	b2db      	uxtb	r3, r3
 801199a:	9305      	str	r3, [sp, #20]
 801199c:	9b02      	ldr	r3, [sp, #8]
 801199e:	9a05      	ldr	r2, [sp, #20]
 80119a0:	189b      	adds	r3, r3, r2
 80119a2:	b2db      	uxtb	r3, r3
 80119a4:	2b03      	cmp	r3, #3
 80119a6:	d827      	bhi.n	80119f8 <_scanf_float+0x2dc>
 80119a8:	3c03      	subs	r4, #3
 80119aa:	b2e4      	uxtb	r4, r4
 80119ac:	1b3f      	subs	r7, r7, r4
 80119ae:	6833      	ldr	r3, [r6, #0]
 80119b0:	05da      	lsls	r2, r3, #23
 80119b2:	d554      	bpl.n	8011a5e <_scanf_float+0x342>
 80119b4:	055b      	lsls	r3, r3, #21
 80119b6:	d537      	bpl.n	8011a28 <_scanf_float+0x30c>
 80119b8:	24be      	movs	r4, #190	; 0xbe
 80119ba:	0064      	lsls	r4, r4, #1
 80119bc:	9b03      	ldr	r3, [sp, #12]
 80119be:	429f      	cmp	r7, r3
 80119c0:	d800      	bhi.n	80119c4 <_scanf_float+0x2a8>
 80119c2:	e6ee      	b.n	80117a2 <_scanf_float+0x86>
 80119c4:	3f01      	subs	r7, #1
 80119c6:	5933      	ldr	r3, [r6, r4]
 80119c8:	002a      	movs	r2, r5
 80119ca:	7839      	ldrb	r1, [r7, #0]
 80119cc:	9801      	ldr	r0, [sp, #4]
 80119ce:	4798      	blx	r3
 80119d0:	6933      	ldr	r3, [r6, #16]
 80119d2:	3b01      	subs	r3, #1
 80119d4:	6133      	str	r3, [r6, #16]
 80119d6:	e7f1      	b.n	80119bc <_scanf_float+0x2a0>
 80119d8:	24be      	movs	r4, #190	; 0xbe
 80119da:	0064      	lsls	r4, r4, #1
 80119dc:	9b03      	ldr	r3, [sp, #12]
 80119de:	429f      	cmp	r7, r3
 80119e0:	d800      	bhi.n	80119e4 <_scanf_float+0x2c8>
 80119e2:	e6de      	b.n	80117a2 <_scanf_float+0x86>
 80119e4:	3f01      	subs	r7, #1
 80119e6:	5933      	ldr	r3, [r6, r4]
 80119e8:	002a      	movs	r2, r5
 80119ea:	7839      	ldrb	r1, [r7, #0]
 80119ec:	9801      	ldr	r0, [sp, #4]
 80119ee:	4798      	blx	r3
 80119f0:	6933      	ldr	r3, [r6, #16]
 80119f2:	3b01      	subs	r3, #1
 80119f4:	6133      	str	r3, [r6, #16]
 80119f6:	e7f1      	b.n	80119dc <_scanf_float+0x2c0>
 80119f8:	9b02      	ldr	r3, [sp, #8]
 80119fa:	002a      	movs	r2, r5
 80119fc:	3b01      	subs	r3, #1
 80119fe:	7819      	ldrb	r1, [r3, #0]
 8011a00:	9302      	str	r3, [sp, #8]
 8011a02:	23be      	movs	r3, #190	; 0xbe
 8011a04:	005b      	lsls	r3, r3, #1
 8011a06:	58f3      	ldr	r3, [r6, r3]
 8011a08:	9801      	ldr	r0, [sp, #4]
 8011a0a:	9309      	str	r3, [sp, #36]	; 0x24
 8011a0c:	4798      	blx	r3
 8011a0e:	6933      	ldr	r3, [r6, #16]
 8011a10:	3b01      	subs	r3, #1
 8011a12:	6133      	str	r3, [r6, #16]
 8011a14:	e7c2      	b.n	801199c <_scanf_float+0x280>
 8011a16:	46c0      	nop			; (mov r8, r8)
 8011a18:	fffffeff 	.word	0xfffffeff
 8011a1c:	fffffe7f 	.word	0xfffffe7f
 8011a20:	fffff87f 	.word	0xfffff87f
 8011a24:	fffffd7f 	.word	0xfffffd7f
 8011a28:	6933      	ldr	r3, [r6, #16]
 8011a2a:	1e7c      	subs	r4, r7, #1
 8011a2c:	7821      	ldrb	r1, [r4, #0]
 8011a2e:	3b01      	subs	r3, #1
 8011a30:	6133      	str	r3, [r6, #16]
 8011a32:	2965      	cmp	r1, #101	; 0x65
 8011a34:	d00c      	beq.n	8011a50 <_scanf_float+0x334>
 8011a36:	2945      	cmp	r1, #69	; 0x45
 8011a38:	d00a      	beq.n	8011a50 <_scanf_float+0x334>
 8011a3a:	23be      	movs	r3, #190	; 0xbe
 8011a3c:	005b      	lsls	r3, r3, #1
 8011a3e:	58f3      	ldr	r3, [r6, r3]
 8011a40:	002a      	movs	r2, r5
 8011a42:	9801      	ldr	r0, [sp, #4]
 8011a44:	4798      	blx	r3
 8011a46:	6933      	ldr	r3, [r6, #16]
 8011a48:	1ebc      	subs	r4, r7, #2
 8011a4a:	3b01      	subs	r3, #1
 8011a4c:	7821      	ldrb	r1, [r4, #0]
 8011a4e:	6133      	str	r3, [r6, #16]
 8011a50:	23be      	movs	r3, #190	; 0xbe
 8011a52:	005b      	lsls	r3, r3, #1
 8011a54:	002a      	movs	r2, r5
 8011a56:	58f3      	ldr	r3, [r6, r3]
 8011a58:	9801      	ldr	r0, [sp, #4]
 8011a5a:	4798      	blx	r3
 8011a5c:	0027      	movs	r7, r4
 8011a5e:	6832      	ldr	r2, [r6, #0]
 8011a60:	2310      	movs	r3, #16
 8011a62:	0011      	movs	r1, r2
 8011a64:	4019      	ands	r1, r3
 8011a66:	9102      	str	r1, [sp, #8]
 8011a68:	421a      	tst	r2, r3
 8011a6a:	d158      	bne.n	8011b1e <_scanf_float+0x402>
 8011a6c:	23c0      	movs	r3, #192	; 0xc0
 8011a6e:	7039      	strb	r1, [r7, #0]
 8011a70:	6832      	ldr	r2, [r6, #0]
 8011a72:	00db      	lsls	r3, r3, #3
 8011a74:	4013      	ands	r3, r2
 8011a76:	2280      	movs	r2, #128	; 0x80
 8011a78:	00d2      	lsls	r2, r2, #3
 8011a7a:	4293      	cmp	r3, r2
 8011a7c:	d11d      	bne.n	8011aba <_scanf_float+0x39e>
 8011a7e:	9b04      	ldr	r3, [sp, #16]
 8011a80:	9a00      	ldr	r2, [sp, #0]
 8011a82:	9900      	ldr	r1, [sp, #0]
 8011a84:	1a9a      	subs	r2, r3, r2
 8011a86:	428b      	cmp	r3, r1
 8011a88:	d124      	bne.n	8011ad4 <_scanf_float+0x3b8>
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	9903      	ldr	r1, [sp, #12]
 8011a8e:	9801      	ldr	r0, [sp, #4]
 8011a90:	f000 ff5c 	bl	801294c <_strtod_r>
 8011a94:	9b06      	ldr	r3, [sp, #24]
 8011a96:	000d      	movs	r5, r1
 8011a98:	6831      	ldr	r1, [r6, #0]
 8011a9a:	0004      	movs	r4, r0
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	078a      	lsls	r2, r1, #30
 8011aa0:	d525      	bpl.n	8011aee <_scanf_float+0x3d2>
 8011aa2:	1d1a      	adds	r2, r3, #4
 8011aa4:	9906      	ldr	r1, [sp, #24]
 8011aa6:	600a      	str	r2, [r1, #0]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	601c      	str	r4, [r3, #0]
 8011aac:	605d      	str	r5, [r3, #4]
 8011aae:	68f3      	ldr	r3, [r6, #12]
 8011ab0:	3301      	adds	r3, #1
 8011ab2:	60f3      	str	r3, [r6, #12]
 8011ab4:	9802      	ldr	r0, [sp, #8]
 8011ab6:	b00b      	add	sp, #44	; 0x2c
 8011ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011aba:	9b07      	ldr	r3, [sp, #28]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d0e4      	beq.n	8011a8a <_scanf_float+0x36e>
 8011ac0:	9b08      	ldr	r3, [sp, #32]
 8011ac2:	9a02      	ldr	r2, [sp, #8]
 8011ac4:	1c59      	adds	r1, r3, #1
 8011ac6:	9801      	ldr	r0, [sp, #4]
 8011ac8:	230a      	movs	r3, #10
 8011aca:	f000 ffd5 	bl	8012a78 <_strtol_r>
 8011ace:	9b07      	ldr	r3, [sp, #28]
 8011ad0:	9f08      	ldr	r7, [sp, #32]
 8011ad2:	1ac2      	subs	r2, r0, r3
 8011ad4:	0033      	movs	r3, r6
 8011ad6:	3370      	adds	r3, #112	; 0x70
 8011ad8:	33ff      	adds	r3, #255	; 0xff
 8011ada:	429f      	cmp	r7, r3
 8011adc:	d302      	bcc.n	8011ae4 <_scanf_float+0x3c8>
 8011ade:	0037      	movs	r7, r6
 8011ae0:	376f      	adds	r7, #111	; 0x6f
 8011ae2:	37ff      	adds	r7, #255	; 0xff
 8011ae4:	0038      	movs	r0, r7
 8011ae6:	490f      	ldr	r1, [pc, #60]	; (8011b24 <_scanf_float+0x408>)
 8011ae8:	f000 f8ba 	bl	8011c60 <siprintf>
 8011aec:	e7cd      	b.n	8011a8a <_scanf_float+0x36e>
 8011aee:	1d1a      	adds	r2, r3, #4
 8011af0:	0749      	lsls	r1, r1, #29
 8011af2:	d4d7      	bmi.n	8011aa4 <_scanf_float+0x388>
 8011af4:	9906      	ldr	r1, [sp, #24]
 8011af6:	0020      	movs	r0, r4
 8011af8:	600a      	str	r2, [r1, #0]
 8011afa:	681f      	ldr	r7, [r3, #0]
 8011afc:	0022      	movs	r2, r4
 8011afe:	002b      	movs	r3, r5
 8011b00:	0029      	movs	r1, r5
 8011b02:	f7f0 ff37 	bl	8002974 <__aeabi_dcmpun>
 8011b06:	2800      	cmp	r0, #0
 8011b08:	d004      	beq.n	8011b14 <_scanf_float+0x3f8>
 8011b0a:	4807      	ldr	r0, [pc, #28]	; (8011b28 <_scanf_float+0x40c>)
 8011b0c:	f000 f8a4 	bl	8011c58 <nanf>
 8011b10:	6038      	str	r0, [r7, #0]
 8011b12:	e7cc      	b.n	8011aae <_scanf_float+0x392>
 8011b14:	0020      	movs	r0, r4
 8011b16:	0029      	movs	r1, r5
 8011b18:	f7f1 f81e 	bl	8002b58 <__aeabi_d2f>
 8011b1c:	e7f8      	b.n	8011b10 <_scanf_float+0x3f4>
 8011b1e:	2300      	movs	r3, #0
 8011b20:	e640      	b.n	80117a4 <_scanf_float+0x88>
 8011b22:	46c0      	nop			; (mov r8, r8)
 8011b24:	08017808 	.word	0x08017808
 8011b28:	0801789b 	.word	0x0801789b

08011b2c <iprintf>:
 8011b2c:	b40f      	push	{r0, r1, r2, r3}
 8011b2e:	4b0b      	ldr	r3, [pc, #44]	; (8011b5c <iprintf+0x30>)
 8011b30:	b513      	push	{r0, r1, r4, lr}
 8011b32:	681c      	ldr	r4, [r3, #0]
 8011b34:	2c00      	cmp	r4, #0
 8011b36:	d005      	beq.n	8011b44 <iprintf+0x18>
 8011b38:	69a3      	ldr	r3, [r4, #24]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d102      	bne.n	8011b44 <iprintf+0x18>
 8011b3e:	0020      	movs	r0, r4
 8011b40:	f002 f896 	bl	8013c70 <__sinit>
 8011b44:	ab05      	add	r3, sp, #20
 8011b46:	0020      	movs	r0, r4
 8011b48:	9a04      	ldr	r2, [sp, #16]
 8011b4a:	68a1      	ldr	r1, [r4, #8]
 8011b4c:	9301      	str	r3, [sp, #4]
 8011b4e:	f003 fcb1 	bl	80154b4 <_vfiprintf_r>
 8011b52:	bc16      	pop	{r1, r2, r4}
 8011b54:	bc08      	pop	{r3}
 8011b56:	b004      	add	sp, #16
 8011b58:	4718      	bx	r3
 8011b5a:	46c0      	nop			; (mov r8, r8)
 8011b5c:	20000180 	.word	0x20000180

08011b60 <_puts_r>:
 8011b60:	b570      	push	{r4, r5, r6, lr}
 8011b62:	0005      	movs	r5, r0
 8011b64:	000e      	movs	r6, r1
 8011b66:	2800      	cmp	r0, #0
 8011b68:	d004      	beq.n	8011b74 <_puts_r+0x14>
 8011b6a:	6983      	ldr	r3, [r0, #24]
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d101      	bne.n	8011b74 <_puts_r+0x14>
 8011b70:	f002 f87e 	bl	8013c70 <__sinit>
 8011b74:	69ab      	ldr	r3, [r5, #24]
 8011b76:	68ac      	ldr	r4, [r5, #8]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d102      	bne.n	8011b82 <_puts_r+0x22>
 8011b7c:	0028      	movs	r0, r5
 8011b7e:	f002 f877 	bl	8013c70 <__sinit>
 8011b82:	4b2d      	ldr	r3, [pc, #180]	; (8011c38 <_puts_r+0xd8>)
 8011b84:	429c      	cmp	r4, r3
 8011b86:	d122      	bne.n	8011bce <_puts_r+0x6e>
 8011b88:	686c      	ldr	r4, [r5, #4]
 8011b8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b8c:	07db      	lsls	r3, r3, #31
 8011b8e:	d405      	bmi.n	8011b9c <_puts_r+0x3c>
 8011b90:	89a3      	ldrh	r3, [r4, #12]
 8011b92:	059b      	lsls	r3, r3, #22
 8011b94:	d402      	bmi.n	8011b9c <_puts_r+0x3c>
 8011b96:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b98:	f002 fc93 	bl	80144c2 <__retarget_lock_acquire_recursive>
 8011b9c:	89a3      	ldrh	r3, [r4, #12]
 8011b9e:	071b      	lsls	r3, r3, #28
 8011ba0:	d502      	bpl.n	8011ba8 <_puts_r+0x48>
 8011ba2:	6923      	ldr	r3, [r4, #16]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d129      	bne.n	8011bfc <_puts_r+0x9c>
 8011ba8:	0021      	movs	r1, r4
 8011baa:	0028      	movs	r0, r5
 8011bac:	f000 fff6 	bl	8012b9c <__swsetup_r>
 8011bb0:	2800      	cmp	r0, #0
 8011bb2:	d023      	beq.n	8011bfc <_puts_r+0x9c>
 8011bb4:	2501      	movs	r5, #1
 8011bb6:	426d      	negs	r5, r5
 8011bb8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011bba:	07db      	lsls	r3, r3, #31
 8011bbc:	d405      	bmi.n	8011bca <_puts_r+0x6a>
 8011bbe:	89a3      	ldrh	r3, [r4, #12]
 8011bc0:	059b      	lsls	r3, r3, #22
 8011bc2:	d402      	bmi.n	8011bca <_puts_r+0x6a>
 8011bc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bc6:	f002 fc7d 	bl	80144c4 <__retarget_lock_release_recursive>
 8011bca:	0028      	movs	r0, r5
 8011bcc:	bd70      	pop	{r4, r5, r6, pc}
 8011bce:	4b1b      	ldr	r3, [pc, #108]	; (8011c3c <_puts_r+0xdc>)
 8011bd0:	429c      	cmp	r4, r3
 8011bd2:	d101      	bne.n	8011bd8 <_puts_r+0x78>
 8011bd4:	68ac      	ldr	r4, [r5, #8]
 8011bd6:	e7d8      	b.n	8011b8a <_puts_r+0x2a>
 8011bd8:	4b19      	ldr	r3, [pc, #100]	; (8011c40 <_puts_r+0xe0>)
 8011bda:	429c      	cmp	r4, r3
 8011bdc:	d1d5      	bne.n	8011b8a <_puts_r+0x2a>
 8011bde:	68ec      	ldr	r4, [r5, #12]
 8011be0:	e7d3      	b.n	8011b8a <_puts_r+0x2a>
 8011be2:	3601      	adds	r6, #1
 8011be4:	60a3      	str	r3, [r4, #8]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	da04      	bge.n	8011bf4 <_puts_r+0x94>
 8011bea:	69a2      	ldr	r2, [r4, #24]
 8011bec:	429a      	cmp	r2, r3
 8011bee:	dc16      	bgt.n	8011c1e <_puts_r+0xbe>
 8011bf0:	290a      	cmp	r1, #10
 8011bf2:	d014      	beq.n	8011c1e <_puts_r+0xbe>
 8011bf4:	6823      	ldr	r3, [r4, #0]
 8011bf6:	1c5a      	adds	r2, r3, #1
 8011bf8:	6022      	str	r2, [r4, #0]
 8011bfa:	7019      	strb	r1, [r3, #0]
 8011bfc:	68a3      	ldr	r3, [r4, #8]
 8011bfe:	7831      	ldrb	r1, [r6, #0]
 8011c00:	3b01      	subs	r3, #1
 8011c02:	2900      	cmp	r1, #0
 8011c04:	d1ed      	bne.n	8011be2 <_puts_r+0x82>
 8011c06:	60a3      	str	r3, [r4, #8]
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	da0f      	bge.n	8011c2c <_puts_r+0xcc>
 8011c0c:	0028      	movs	r0, r5
 8011c0e:	0022      	movs	r2, r4
 8011c10:	310a      	adds	r1, #10
 8011c12:	f000 ff6d 	bl	8012af0 <__swbuf_r>
 8011c16:	250a      	movs	r5, #10
 8011c18:	1c43      	adds	r3, r0, #1
 8011c1a:	d1cd      	bne.n	8011bb8 <_puts_r+0x58>
 8011c1c:	e7ca      	b.n	8011bb4 <_puts_r+0x54>
 8011c1e:	0022      	movs	r2, r4
 8011c20:	0028      	movs	r0, r5
 8011c22:	f000 ff65 	bl	8012af0 <__swbuf_r>
 8011c26:	1c43      	adds	r3, r0, #1
 8011c28:	d1e8      	bne.n	8011bfc <_puts_r+0x9c>
 8011c2a:	e7c3      	b.n	8011bb4 <_puts_r+0x54>
 8011c2c:	250a      	movs	r5, #10
 8011c2e:	6823      	ldr	r3, [r4, #0]
 8011c30:	1c5a      	adds	r2, r3, #1
 8011c32:	6022      	str	r2, [r4, #0]
 8011c34:	701d      	strb	r5, [r3, #0]
 8011c36:	e7bf      	b.n	8011bb8 <_puts_r+0x58>
 8011c38:	08017a50 	.word	0x08017a50
 8011c3c:	08017a70 	.word	0x08017a70
 8011c40:	08017a30 	.word	0x08017a30

08011c44 <puts>:
 8011c44:	b510      	push	{r4, lr}
 8011c46:	4b03      	ldr	r3, [pc, #12]	; (8011c54 <puts+0x10>)
 8011c48:	0001      	movs	r1, r0
 8011c4a:	6818      	ldr	r0, [r3, #0]
 8011c4c:	f7ff ff88 	bl	8011b60 <_puts_r>
 8011c50:	bd10      	pop	{r4, pc}
 8011c52:	46c0      	nop			; (mov r8, r8)
 8011c54:	20000180 	.word	0x20000180

08011c58 <nanf>:
 8011c58:	4800      	ldr	r0, [pc, #0]	; (8011c5c <nanf+0x4>)
 8011c5a:	4770      	bx	lr
 8011c5c:	7fc00000 	.word	0x7fc00000

08011c60 <siprintf>:
 8011c60:	b40e      	push	{r1, r2, r3}
 8011c62:	b500      	push	{lr}
 8011c64:	490b      	ldr	r1, [pc, #44]	; (8011c94 <siprintf+0x34>)
 8011c66:	b09c      	sub	sp, #112	; 0x70
 8011c68:	ab1d      	add	r3, sp, #116	; 0x74
 8011c6a:	9002      	str	r0, [sp, #8]
 8011c6c:	9006      	str	r0, [sp, #24]
 8011c6e:	9107      	str	r1, [sp, #28]
 8011c70:	9104      	str	r1, [sp, #16]
 8011c72:	4809      	ldr	r0, [pc, #36]	; (8011c98 <siprintf+0x38>)
 8011c74:	4909      	ldr	r1, [pc, #36]	; (8011c9c <siprintf+0x3c>)
 8011c76:	cb04      	ldmia	r3!, {r2}
 8011c78:	9105      	str	r1, [sp, #20]
 8011c7a:	6800      	ldr	r0, [r0, #0]
 8011c7c:	a902      	add	r1, sp, #8
 8011c7e:	9301      	str	r3, [sp, #4]
 8011c80:	f003 faf0 	bl	8015264 <_svfiprintf_r>
 8011c84:	2300      	movs	r3, #0
 8011c86:	9a02      	ldr	r2, [sp, #8]
 8011c88:	7013      	strb	r3, [r2, #0]
 8011c8a:	b01c      	add	sp, #112	; 0x70
 8011c8c:	bc08      	pop	{r3}
 8011c8e:	b003      	add	sp, #12
 8011c90:	4718      	bx	r3
 8011c92:	46c0      	nop			; (mov r8, r8)
 8011c94:	7fffffff 	.word	0x7fffffff
 8011c98:	20000180 	.word	0x20000180
 8011c9c:	ffff0208 	.word	0xffff0208

08011ca0 <strcat>:
 8011ca0:	0002      	movs	r2, r0
 8011ca2:	b510      	push	{r4, lr}
 8011ca4:	7813      	ldrb	r3, [r2, #0]
 8011ca6:	0014      	movs	r4, r2
 8011ca8:	3201      	adds	r2, #1
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d1fa      	bne.n	8011ca4 <strcat+0x4>
 8011cae:	5cca      	ldrb	r2, [r1, r3]
 8011cb0:	54e2      	strb	r2, [r4, r3]
 8011cb2:	3301      	adds	r3, #1
 8011cb4:	2a00      	cmp	r2, #0
 8011cb6:	d1fa      	bne.n	8011cae <strcat+0xe>
 8011cb8:	bd10      	pop	{r4, pc}

08011cba <strcpy>:
 8011cba:	0003      	movs	r3, r0
 8011cbc:	780a      	ldrb	r2, [r1, #0]
 8011cbe:	3101      	adds	r1, #1
 8011cc0:	701a      	strb	r2, [r3, #0]
 8011cc2:	3301      	adds	r3, #1
 8011cc4:	2a00      	cmp	r2, #0
 8011cc6:	d1f9      	bne.n	8011cbc <strcpy+0x2>
 8011cc8:	4770      	bx	lr

08011cca <strncat>:
 8011cca:	0003      	movs	r3, r0
 8011ccc:	b510      	push	{r4, lr}
 8011cce:	781c      	ldrb	r4, [r3, #0]
 8011cd0:	2c00      	cmp	r4, #0
 8011cd2:	d107      	bne.n	8011ce4 <strncat+0x1a>
 8011cd4:	3a01      	subs	r2, #1
 8011cd6:	1c54      	adds	r4, r2, #1
 8011cd8:	d003      	beq.n	8011ce2 <strncat+0x18>
 8011cda:	780c      	ldrb	r4, [r1, #0]
 8011cdc:	701c      	strb	r4, [r3, #0]
 8011cde:	2c00      	cmp	r4, #0
 8011ce0:	d102      	bne.n	8011ce8 <strncat+0x1e>
 8011ce2:	bd10      	pop	{r4, pc}
 8011ce4:	3301      	adds	r3, #1
 8011ce6:	e7f2      	b.n	8011cce <strncat+0x4>
 8011ce8:	2a00      	cmp	r2, #0
 8011cea:	d100      	bne.n	8011cee <strncat+0x24>
 8011cec:	705a      	strb	r2, [r3, #1]
 8011cee:	3301      	adds	r3, #1
 8011cf0:	3101      	adds	r1, #1
 8011cf2:	e7ef      	b.n	8011cd4 <strncat+0xa>

08011cf4 <sulp>:
 8011cf4:	b570      	push	{r4, r5, r6, lr}
 8011cf6:	0016      	movs	r6, r2
 8011cf8:	000d      	movs	r5, r1
 8011cfa:	f002 fffd 	bl	8014cf8 <__ulp>
 8011cfe:	2e00      	cmp	r6, #0
 8011d00:	d00d      	beq.n	8011d1e <sulp+0x2a>
 8011d02:	236b      	movs	r3, #107	; 0x6b
 8011d04:	006a      	lsls	r2, r5, #1
 8011d06:	0d52      	lsrs	r2, r2, #21
 8011d08:	1a9b      	subs	r3, r3, r2
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	dd07      	ble.n	8011d1e <sulp+0x2a>
 8011d0e:	2400      	movs	r4, #0
 8011d10:	4a03      	ldr	r2, [pc, #12]	; (8011d20 <sulp+0x2c>)
 8011d12:	051b      	lsls	r3, r3, #20
 8011d14:	189d      	adds	r5, r3, r2
 8011d16:	002b      	movs	r3, r5
 8011d18:	0022      	movs	r2, r4
 8011d1a:	f7f0 f82d 	bl	8001d78 <__aeabi_dmul>
 8011d1e:	bd70      	pop	{r4, r5, r6, pc}
 8011d20:	3ff00000 	.word	0x3ff00000

08011d24 <_strtod_l>:
 8011d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d26:	001d      	movs	r5, r3
 8011d28:	2300      	movs	r3, #0
 8011d2a:	b0a5      	sub	sp, #148	; 0x94
 8011d2c:	9320      	str	r3, [sp, #128]	; 0x80
 8011d2e:	4bac      	ldr	r3, [pc, #688]	; (8011fe0 <_strtod_l+0x2bc>)
 8011d30:	9005      	str	r0, [sp, #20]
 8011d32:	681b      	ldr	r3, [r3, #0]
 8011d34:	9108      	str	r1, [sp, #32]
 8011d36:	0018      	movs	r0, r3
 8011d38:	9307      	str	r3, [sp, #28]
 8011d3a:	921b      	str	r2, [sp, #108]	; 0x6c
 8011d3c:	f7ee f9ea 	bl	8000114 <strlen>
 8011d40:	2600      	movs	r6, #0
 8011d42:	0004      	movs	r4, r0
 8011d44:	2700      	movs	r7, #0
 8011d46:	9b08      	ldr	r3, [sp, #32]
 8011d48:	931f      	str	r3, [sp, #124]	; 0x7c
 8011d4a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011d4c:	7813      	ldrb	r3, [r2, #0]
 8011d4e:	2b2b      	cmp	r3, #43	; 0x2b
 8011d50:	d058      	beq.n	8011e04 <_strtod_l+0xe0>
 8011d52:	d844      	bhi.n	8011dde <_strtod_l+0xba>
 8011d54:	2b0d      	cmp	r3, #13
 8011d56:	d83d      	bhi.n	8011dd4 <_strtod_l+0xb0>
 8011d58:	2b08      	cmp	r3, #8
 8011d5a:	d83d      	bhi.n	8011dd8 <_strtod_l+0xb4>
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d047      	beq.n	8011df0 <_strtod_l+0xcc>
 8011d60:	2300      	movs	r3, #0
 8011d62:	930e      	str	r3, [sp, #56]	; 0x38
 8011d64:	2200      	movs	r2, #0
 8011d66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011d68:	920a      	str	r2, [sp, #40]	; 0x28
 8011d6a:	9306      	str	r3, [sp, #24]
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	2b30      	cmp	r3, #48	; 0x30
 8011d70:	d000      	beq.n	8011d74 <_strtod_l+0x50>
 8011d72:	e07f      	b.n	8011e74 <_strtod_l+0x150>
 8011d74:	9b06      	ldr	r3, [sp, #24]
 8011d76:	3220      	adds	r2, #32
 8011d78:	785b      	ldrb	r3, [r3, #1]
 8011d7a:	4393      	bics	r3, r2
 8011d7c:	2b58      	cmp	r3, #88	; 0x58
 8011d7e:	d000      	beq.n	8011d82 <_strtod_l+0x5e>
 8011d80:	e06e      	b.n	8011e60 <_strtod_l+0x13c>
 8011d82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d84:	9502      	str	r5, [sp, #8]
 8011d86:	9301      	str	r3, [sp, #4]
 8011d88:	ab20      	add	r3, sp, #128	; 0x80
 8011d8a:	9300      	str	r3, [sp, #0]
 8011d8c:	4a95      	ldr	r2, [pc, #596]	; (8011fe4 <_strtod_l+0x2c0>)
 8011d8e:	ab21      	add	r3, sp, #132	; 0x84
 8011d90:	9805      	ldr	r0, [sp, #20]
 8011d92:	a91f      	add	r1, sp, #124	; 0x7c
 8011d94:	f002 f886 	bl	8013ea4 <__gethex>
 8011d98:	2307      	movs	r3, #7
 8011d9a:	0005      	movs	r5, r0
 8011d9c:	0004      	movs	r4, r0
 8011d9e:	401d      	ands	r5, r3
 8011da0:	4218      	tst	r0, r3
 8011da2:	d006      	beq.n	8011db2 <_strtod_l+0x8e>
 8011da4:	2d06      	cmp	r5, #6
 8011da6:	d12f      	bne.n	8011e08 <_strtod_l+0xe4>
 8011da8:	9b06      	ldr	r3, [sp, #24]
 8011daa:	3301      	adds	r3, #1
 8011dac:	931f      	str	r3, [sp, #124]	; 0x7c
 8011dae:	2300      	movs	r3, #0
 8011db0:	930e      	str	r3, [sp, #56]	; 0x38
 8011db2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d002      	beq.n	8011dbe <_strtod_l+0x9a>
 8011db8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011dba:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011dbc:	601a      	str	r2, [r3, #0]
 8011dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d01c      	beq.n	8011dfe <_strtod_l+0xda>
 8011dc4:	2380      	movs	r3, #128	; 0x80
 8011dc6:	0032      	movs	r2, r6
 8011dc8:	061b      	lsls	r3, r3, #24
 8011dca:	18fb      	adds	r3, r7, r3
 8011dcc:	0010      	movs	r0, r2
 8011dce:	0019      	movs	r1, r3
 8011dd0:	b025      	add	sp, #148	; 0x94
 8011dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011dd4:	2b20      	cmp	r3, #32
 8011dd6:	d1c3      	bne.n	8011d60 <_strtod_l+0x3c>
 8011dd8:	3201      	adds	r2, #1
 8011dda:	921f      	str	r2, [sp, #124]	; 0x7c
 8011ddc:	e7b5      	b.n	8011d4a <_strtod_l+0x26>
 8011dde:	2b2d      	cmp	r3, #45	; 0x2d
 8011de0:	d1be      	bne.n	8011d60 <_strtod_l+0x3c>
 8011de2:	3b2c      	subs	r3, #44	; 0x2c
 8011de4:	930e      	str	r3, [sp, #56]	; 0x38
 8011de6:	1c53      	adds	r3, r2, #1
 8011de8:	931f      	str	r3, [sp, #124]	; 0x7c
 8011dea:	7853      	ldrb	r3, [r2, #1]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d1b9      	bne.n	8011d64 <_strtod_l+0x40>
 8011df0:	9b08      	ldr	r3, [sp, #32]
 8011df2:	931f      	str	r3, [sp, #124]	; 0x7c
 8011df4:	2300      	movs	r3, #0
 8011df6:	930e      	str	r3, [sp, #56]	; 0x38
 8011df8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d1dc      	bne.n	8011db8 <_strtod_l+0x94>
 8011dfe:	0032      	movs	r2, r6
 8011e00:	003b      	movs	r3, r7
 8011e02:	e7e3      	b.n	8011dcc <_strtod_l+0xa8>
 8011e04:	2300      	movs	r3, #0
 8011e06:	e7ed      	b.n	8011de4 <_strtod_l+0xc0>
 8011e08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011e0a:	2a00      	cmp	r2, #0
 8011e0c:	d007      	beq.n	8011e1e <_strtod_l+0xfa>
 8011e0e:	2135      	movs	r1, #53	; 0x35
 8011e10:	a822      	add	r0, sp, #136	; 0x88
 8011e12:	f003 f872 	bl	8014efa <__copybits>
 8011e16:	9920      	ldr	r1, [sp, #128]	; 0x80
 8011e18:	9805      	ldr	r0, [sp, #20]
 8011e1a:	f002 fc2d 	bl	8014678 <_Bfree>
 8011e1e:	1e68      	subs	r0, r5, #1
 8011e20:	2804      	cmp	r0, #4
 8011e22:	d806      	bhi.n	8011e32 <_strtod_l+0x10e>
 8011e24:	f7ee f97e 	bl	8000124 <__gnu_thumb1_case_uqi>
 8011e28:	1816030b 	.word	0x1816030b
 8011e2c:	0b          	.byte	0x0b
 8011e2d:	00          	.byte	0x00
 8011e2e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8011e30:	9f23      	ldr	r7, [sp, #140]	; 0x8c
 8011e32:	0723      	lsls	r3, r4, #28
 8011e34:	d5bd      	bpl.n	8011db2 <_strtod_l+0x8e>
 8011e36:	2380      	movs	r3, #128	; 0x80
 8011e38:	061b      	lsls	r3, r3, #24
 8011e3a:	431f      	orrs	r7, r3
 8011e3c:	e7b9      	b.n	8011db2 <_strtod_l+0x8e>
 8011e3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011e40:	4a69      	ldr	r2, [pc, #420]	; (8011fe8 <_strtod_l+0x2c4>)
 8011e42:	496a      	ldr	r1, [pc, #424]	; (8011fec <_strtod_l+0x2c8>)
 8011e44:	401a      	ands	r2, r3
 8011e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e48:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8011e4a:	185b      	adds	r3, r3, r1
 8011e4c:	051b      	lsls	r3, r3, #20
 8011e4e:	431a      	orrs	r2, r3
 8011e50:	0017      	movs	r7, r2
 8011e52:	e7ee      	b.n	8011e32 <_strtod_l+0x10e>
 8011e54:	4f66      	ldr	r7, [pc, #408]	; (8011ff0 <_strtod_l+0x2cc>)
 8011e56:	e7ec      	b.n	8011e32 <_strtod_l+0x10e>
 8011e58:	2601      	movs	r6, #1
 8011e5a:	4f66      	ldr	r7, [pc, #408]	; (8011ff4 <_strtod_l+0x2d0>)
 8011e5c:	4276      	negs	r6, r6
 8011e5e:	e7e8      	b.n	8011e32 <_strtod_l+0x10e>
 8011e60:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011e62:	1c5a      	adds	r2, r3, #1
 8011e64:	921f      	str	r2, [sp, #124]	; 0x7c
 8011e66:	785b      	ldrb	r3, [r3, #1]
 8011e68:	2b30      	cmp	r3, #48	; 0x30
 8011e6a:	d0f9      	beq.n	8011e60 <_strtod_l+0x13c>
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d0a0      	beq.n	8011db2 <_strtod_l+0x8e>
 8011e70:	2301      	movs	r3, #1
 8011e72:	930a      	str	r3, [sp, #40]	; 0x28
 8011e74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011e76:	220a      	movs	r2, #10
 8011e78:	9310      	str	r3, [sp, #64]	; 0x40
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e80:	9309      	str	r3, [sp, #36]	; 0x24
 8011e82:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8011e84:	7805      	ldrb	r5, [r0, #0]
 8011e86:	002b      	movs	r3, r5
 8011e88:	3b30      	subs	r3, #48	; 0x30
 8011e8a:	b2d9      	uxtb	r1, r3
 8011e8c:	2909      	cmp	r1, #9
 8011e8e:	d927      	bls.n	8011ee0 <_strtod_l+0x1bc>
 8011e90:	0022      	movs	r2, r4
 8011e92:	9907      	ldr	r1, [sp, #28]
 8011e94:	f003 fcac 	bl	80157f0 <strncmp>
 8011e98:	2800      	cmp	r0, #0
 8011e9a:	d033      	beq.n	8011f04 <_strtod_l+0x1e0>
 8011e9c:	2000      	movs	r0, #0
 8011e9e:	002b      	movs	r3, r5
 8011ea0:	4684      	mov	ip, r0
 8011ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ea4:	900c      	str	r0, [sp, #48]	; 0x30
 8011ea6:	9206      	str	r2, [sp, #24]
 8011ea8:	2220      	movs	r2, #32
 8011eaa:	0019      	movs	r1, r3
 8011eac:	4391      	bics	r1, r2
 8011eae:	000a      	movs	r2, r1
 8011eb0:	2100      	movs	r1, #0
 8011eb2:	9107      	str	r1, [sp, #28]
 8011eb4:	2a45      	cmp	r2, #69	; 0x45
 8011eb6:	d000      	beq.n	8011eba <_strtod_l+0x196>
 8011eb8:	e0c5      	b.n	8012046 <_strtod_l+0x322>
 8011eba:	9b06      	ldr	r3, [sp, #24]
 8011ebc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ebe:	4303      	orrs	r3, r0
 8011ec0:	4313      	orrs	r3, r2
 8011ec2:	428b      	cmp	r3, r1
 8011ec4:	d094      	beq.n	8011df0 <_strtod_l+0xcc>
 8011ec6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011ec8:	9308      	str	r3, [sp, #32]
 8011eca:	3301      	adds	r3, #1
 8011ecc:	931f      	str	r3, [sp, #124]	; 0x7c
 8011ece:	9b08      	ldr	r3, [sp, #32]
 8011ed0:	785b      	ldrb	r3, [r3, #1]
 8011ed2:	2b2b      	cmp	r3, #43	; 0x2b
 8011ed4:	d076      	beq.n	8011fc4 <_strtod_l+0x2a0>
 8011ed6:	000c      	movs	r4, r1
 8011ed8:	2b2d      	cmp	r3, #45	; 0x2d
 8011eda:	d179      	bne.n	8011fd0 <_strtod_l+0x2ac>
 8011edc:	2401      	movs	r4, #1
 8011ede:	e072      	b.n	8011fc6 <_strtod_l+0x2a2>
 8011ee0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ee2:	2908      	cmp	r1, #8
 8011ee4:	dc09      	bgt.n	8011efa <_strtod_l+0x1d6>
 8011ee6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011ee8:	4351      	muls	r1, r2
 8011eea:	185b      	adds	r3, r3, r1
 8011eec:	930b      	str	r3, [sp, #44]	; 0x2c
 8011eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ef0:	3001      	adds	r0, #1
 8011ef2:	3301      	adds	r3, #1
 8011ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8011ef6:	901f      	str	r0, [sp, #124]	; 0x7c
 8011ef8:	e7c3      	b.n	8011e82 <_strtod_l+0x15e>
 8011efa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011efc:	4351      	muls	r1, r2
 8011efe:	185b      	adds	r3, r3, r1
 8011f00:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f02:	e7f4      	b.n	8011eee <_strtod_l+0x1ca>
 8011f04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011f08:	191c      	adds	r4, r3, r4
 8011f0a:	941f      	str	r4, [sp, #124]	; 0x7c
 8011f0c:	7823      	ldrb	r3, [r4, #0]
 8011f0e:	2a00      	cmp	r2, #0
 8011f10:	d039      	beq.n	8011f86 <_strtod_l+0x262>
 8011f12:	900c      	str	r0, [sp, #48]	; 0x30
 8011f14:	9206      	str	r2, [sp, #24]
 8011f16:	001a      	movs	r2, r3
 8011f18:	3a30      	subs	r2, #48	; 0x30
 8011f1a:	2a09      	cmp	r2, #9
 8011f1c:	d912      	bls.n	8011f44 <_strtod_l+0x220>
 8011f1e:	2201      	movs	r2, #1
 8011f20:	4694      	mov	ip, r2
 8011f22:	e7c1      	b.n	8011ea8 <_strtod_l+0x184>
 8011f24:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011f26:	3001      	adds	r0, #1
 8011f28:	1c5a      	adds	r2, r3, #1
 8011f2a:	921f      	str	r2, [sp, #124]	; 0x7c
 8011f2c:	785b      	ldrb	r3, [r3, #1]
 8011f2e:	2b30      	cmp	r3, #48	; 0x30
 8011f30:	d0f8      	beq.n	8011f24 <_strtod_l+0x200>
 8011f32:	001a      	movs	r2, r3
 8011f34:	3a31      	subs	r2, #49	; 0x31
 8011f36:	2a08      	cmp	r2, #8
 8011f38:	d83f      	bhi.n	8011fba <_strtod_l+0x296>
 8011f3a:	900c      	str	r0, [sp, #48]	; 0x30
 8011f3c:	2000      	movs	r0, #0
 8011f3e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011f40:	9006      	str	r0, [sp, #24]
 8011f42:	9210      	str	r2, [sp, #64]	; 0x40
 8011f44:	001a      	movs	r2, r3
 8011f46:	1c41      	adds	r1, r0, #1
 8011f48:	3a30      	subs	r2, #48	; 0x30
 8011f4a:	2b30      	cmp	r3, #48	; 0x30
 8011f4c:	d015      	beq.n	8011f7a <_strtod_l+0x256>
 8011f4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f50:	185b      	adds	r3, r3, r1
 8011f52:	210a      	movs	r1, #10
 8011f54:	930c      	str	r3, [sp, #48]	; 0x30
 8011f56:	9b06      	ldr	r3, [sp, #24]
 8011f58:	18c4      	adds	r4, r0, r3
 8011f5a:	42a3      	cmp	r3, r4
 8011f5c:	d115      	bne.n	8011f8a <_strtod_l+0x266>
 8011f5e:	9906      	ldr	r1, [sp, #24]
 8011f60:	9b06      	ldr	r3, [sp, #24]
 8011f62:	3101      	adds	r1, #1
 8011f64:	1809      	adds	r1, r1, r0
 8011f66:	181b      	adds	r3, r3, r0
 8011f68:	9106      	str	r1, [sp, #24]
 8011f6a:	2b08      	cmp	r3, #8
 8011f6c:	dc1b      	bgt.n	8011fa6 <_strtod_l+0x282>
 8011f6e:	230a      	movs	r3, #10
 8011f70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011f72:	434b      	muls	r3, r1
 8011f74:	2100      	movs	r1, #0
 8011f76:	18d3      	adds	r3, r2, r3
 8011f78:	930b      	str	r3, [sp, #44]	; 0x2c
 8011f7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011f7c:	0008      	movs	r0, r1
 8011f7e:	1c5a      	adds	r2, r3, #1
 8011f80:	921f      	str	r2, [sp, #124]	; 0x7c
 8011f82:	785b      	ldrb	r3, [r3, #1]
 8011f84:	e7c7      	b.n	8011f16 <_strtod_l+0x1f2>
 8011f86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011f88:	e7d1      	b.n	8011f2e <_strtod_l+0x20a>
 8011f8a:	2b08      	cmp	r3, #8
 8011f8c:	dc04      	bgt.n	8011f98 <_strtod_l+0x274>
 8011f8e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8011f90:	434d      	muls	r5, r1
 8011f92:	950b      	str	r5, [sp, #44]	; 0x2c
 8011f94:	3301      	adds	r3, #1
 8011f96:	e7e0      	b.n	8011f5a <_strtod_l+0x236>
 8011f98:	1c5d      	adds	r5, r3, #1
 8011f9a:	2d10      	cmp	r5, #16
 8011f9c:	dcfa      	bgt.n	8011f94 <_strtod_l+0x270>
 8011f9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8011fa0:	434d      	muls	r5, r1
 8011fa2:	950f      	str	r5, [sp, #60]	; 0x3c
 8011fa4:	e7f6      	b.n	8011f94 <_strtod_l+0x270>
 8011fa6:	9b06      	ldr	r3, [sp, #24]
 8011fa8:	2100      	movs	r1, #0
 8011faa:	2b10      	cmp	r3, #16
 8011fac:	dce5      	bgt.n	8011f7a <_strtod_l+0x256>
 8011fae:	230a      	movs	r3, #10
 8011fb0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8011fb2:	4343      	muls	r3, r0
 8011fb4:	18d3      	adds	r3, r2, r3
 8011fb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8011fb8:	e7df      	b.n	8011f7a <_strtod_l+0x256>
 8011fba:	2200      	movs	r2, #0
 8011fbc:	920c      	str	r2, [sp, #48]	; 0x30
 8011fbe:	9206      	str	r2, [sp, #24]
 8011fc0:	3201      	adds	r2, #1
 8011fc2:	e7ad      	b.n	8011f20 <_strtod_l+0x1fc>
 8011fc4:	2400      	movs	r4, #0
 8011fc6:	9b08      	ldr	r3, [sp, #32]
 8011fc8:	3302      	adds	r3, #2
 8011fca:	931f      	str	r3, [sp, #124]	; 0x7c
 8011fcc:	9b08      	ldr	r3, [sp, #32]
 8011fce:	789b      	ldrb	r3, [r3, #2]
 8011fd0:	001a      	movs	r2, r3
 8011fd2:	3a30      	subs	r2, #48	; 0x30
 8011fd4:	2a09      	cmp	r2, #9
 8011fd6:	d913      	bls.n	8012000 <_strtod_l+0x2dc>
 8011fd8:	9a08      	ldr	r2, [sp, #32]
 8011fda:	921f      	str	r2, [sp, #124]	; 0x7c
 8011fdc:	2200      	movs	r2, #0
 8011fde:	e031      	b.n	8012044 <_strtod_l+0x320>
 8011fe0:	08017af8 	.word	0x08017af8
 8011fe4:	08017810 	.word	0x08017810
 8011fe8:	ffefffff 	.word	0xffefffff
 8011fec:	00000433 	.word	0x00000433
 8011ff0:	7ff00000 	.word	0x7ff00000
 8011ff4:	7fffffff 	.word	0x7fffffff
 8011ff8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011ffa:	1c5a      	adds	r2, r3, #1
 8011ffc:	921f      	str	r2, [sp, #124]	; 0x7c
 8011ffe:	785b      	ldrb	r3, [r3, #1]
 8012000:	2b30      	cmp	r3, #48	; 0x30
 8012002:	d0f9      	beq.n	8011ff8 <_strtod_l+0x2d4>
 8012004:	2200      	movs	r2, #0
 8012006:	9207      	str	r2, [sp, #28]
 8012008:	001a      	movs	r2, r3
 801200a:	3a31      	subs	r2, #49	; 0x31
 801200c:	2a08      	cmp	r2, #8
 801200e:	d81a      	bhi.n	8012046 <_strtod_l+0x322>
 8012010:	3b30      	subs	r3, #48	; 0x30
 8012012:	001a      	movs	r2, r3
 8012014:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012016:	9307      	str	r3, [sp, #28]
 8012018:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801201a:	1c59      	adds	r1, r3, #1
 801201c:	911f      	str	r1, [sp, #124]	; 0x7c
 801201e:	785b      	ldrb	r3, [r3, #1]
 8012020:	001d      	movs	r5, r3
 8012022:	3d30      	subs	r5, #48	; 0x30
 8012024:	2d09      	cmp	r5, #9
 8012026:	d939      	bls.n	801209c <_strtod_l+0x378>
 8012028:	9d07      	ldr	r5, [sp, #28]
 801202a:	1b49      	subs	r1, r1, r5
 801202c:	4db0      	ldr	r5, [pc, #704]	; (80122f0 <_strtod_l+0x5cc>)
 801202e:	9507      	str	r5, [sp, #28]
 8012030:	2908      	cmp	r1, #8
 8012032:	dc03      	bgt.n	801203c <_strtod_l+0x318>
 8012034:	9207      	str	r2, [sp, #28]
 8012036:	42aa      	cmp	r2, r5
 8012038:	dd00      	ble.n	801203c <_strtod_l+0x318>
 801203a:	9507      	str	r5, [sp, #28]
 801203c:	2c00      	cmp	r4, #0
 801203e:	d002      	beq.n	8012046 <_strtod_l+0x322>
 8012040:	9a07      	ldr	r2, [sp, #28]
 8012042:	4252      	negs	r2, r2
 8012044:	9207      	str	r2, [sp, #28]
 8012046:	9a06      	ldr	r2, [sp, #24]
 8012048:	2a00      	cmp	r2, #0
 801204a:	d14b      	bne.n	80120e4 <_strtod_l+0x3c0>
 801204c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801204e:	4310      	orrs	r0, r2
 8012050:	d000      	beq.n	8012054 <_strtod_l+0x330>
 8012052:	e6ae      	b.n	8011db2 <_strtod_l+0x8e>
 8012054:	4662      	mov	r2, ip
 8012056:	2a00      	cmp	r2, #0
 8012058:	d000      	beq.n	801205c <_strtod_l+0x338>
 801205a:	e6c9      	b.n	8011df0 <_strtod_l+0xcc>
 801205c:	2b69      	cmp	r3, #105	; 0x69
 801205e:	d025      	beq.n	80120ac <_strtod_l+0x388>
 8012060:	dc21      	bgt.n	80120a6 <_strtod_l+0x382>
 8012062:	2b49      	cmp	r3, #73	; 0x49
 8012064:	d022      	beq.n	80120ac <_strtod_l+0x388>
 8012066:	2b4e      	cmp	r3, #78	; 0x4e
 8012068:	d000      	beq.n	801206c <_strtod_l+0x348>
 801206a:	e6c1      	b.n	8011df0 <_strtod_l+0xcc>
 801206c:	49a1      	ldr	r1, [pc, #644]	; (80122f4 <_strtod_l+0x5d0>)
 801206e:	a81f      	add	r0, sp, #124	; 0x7c
 8012070:	f002 f966 	bl	8014340 <__match>
 8012074:	2800      	cmp	r0, #0
 8012076:	d100      	bne.n	801207a <_strtod_l+0x356>
 8012078:	e6ba      	b.n	8011df0 <_strtod_l+0xcc>
 801207a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801207c:	781b      	ldrb	r3, [r3, #0]
 801207e:	2b28      	cmp	r3, #40	; 0x28
 8012080:	d12a      	bne.n	80120d8 <_strtod_l+0x3b4>
 8012082:	499d      	ldr	r1, [pc, #628]	; (80122f8 <_strtod_l+0x5d4>)
 8012084:	aa22      	add	r2, sp, #136	; 0x88
 8012086:	a81f      	add	r0, sp, #124	; 0x7c
 8012088:	f002 f96e 	bl	8014368 <__hexnan>
 801208c:	2805      	cmp	r0, #5
 801208e:	d123      	bne.n	80120d8 <_strtod_l+0x3b4>
 8012090:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8012092:	4a9a      	ldr	r2, [pc, #616]	; (80122fc <_strtod_l+0x5d8>)
 8012094:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8012096:	431a      	orrs	r2, r3
 8012098:	0017      	movs	r7, r2
 801209a:	e68a      	b.n	8011db2 <_strtod_l+0x8e>
 801209c:	210a      	movs	r1, #10
 801209e:	434a      	muls	r2, r1
 80120a0:	18d2      	adds	r2, r2, r3
 80120a2:	3a30      	subs	r2, #48	; 0x30
 80120a4:	e7b8      	b.n	8012018 <_strtod_l+0x2f4>
 80120a6:	2b6e      	cmp	r3, #110	; 0x6e
 80120a8:	d0e0      	beq.n	801206c <_strtod_l+0x348>
 80120aa:	e6a1      	b.n	8011df0 <_strtod_l+0xcc>
 80120ac:	4994      	ldr	r1, [pc, #592]	; (8012300 <_strtod_l+0x5dc>)
 80120ae:	a81f      	add	r0, sp, #124	; 0x7c
 80120b0:	f002 f946 	bl	8014340 <__match>
 80120b4:	2800      	cmp	r0, #0
 80120b6:	d100      	bne.n	80120ba <_strtod_l+0x396>
 80120b8:	e69a      	b.n	8011df0 <_strtod_l+0xcc>
 80120ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80120bc:	4991      	ldr	r1, [pc, #580]	; (8012304 <_strtod_l+0x5e0>)
 80120be:	3b01      	subs	r3, #1
 80120c0:	a81f      	add	r0, sp, #124	; 0x7c
 80120c2:	931f      	str	r3, [sp, #124]	; 0x7c
 80120c4:	f002 f93c 	bl	8014340 <__match>
 80120c8:	2800      	cmp	r0, #0
 80120ca:	d102      	bne.n	80120d2 <_strtod_l+0x3ae>
 80120cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80120ce:	3301      	adds	r3, #1
 80120d0:	931f      	str	r3, [sp, #124]	; 0x7c
 80120d2:	2600      	movs	r6, #0
 80120d4:	4f89      	ldr	r7, [pc, #548]	; (80122fc <_strtod_l+0x5d8>)
 80120d6:	e66c      	b.n	8011db2 <_strtod_l+0x8e>
 80120d8:	488b      	ldr	r0, [pc, #556]	; (8012308 <_strtod_l+0x5e4>)
 80120da:	f003 fb25 	bl	8015728 <nan>
 80120de:	0006      	movs	r6, r0
 80120e0:	000f      	movs	r7, r1
 80120e2:	e666      	b.n	8011db2 <_strtod_l+0x8e>
 80120e4:	9b07      	ldr	r3, [sp, #28]
 80120e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80120e8:	1a9b      	subs	r3, r3, r2
 80120ea:	930a      	str	r3, [sp, #40]	; 0x28
 80120ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d101      	bne.n	80120f6 <_strtod_l+0x3d2>
 80120f2:	9b06      	ldr	r3, [sp, #24]
 80120f4:	9309      	str	r3, [sp, #36]	; 0x24
 80120f6:	9c06      	ldr	r4, [sp, #24]
 80120f8:	2c10      	cmp	r4, #16
 80120fa:	dd00      	ble.n	80120fe <_strtod_l+0x3da>
 80120fc:	2410      	movs	r4, #16
 80120fe:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012100:	f7f0 fcbc 	bl	8002a7c <__aeabi_ui2d>
 8012104:	9b06      	ldr	r3, [sp, #24]
 8012106:	0006      	movs	r6, r0
 8012108:	000f      	movs	r7, r1
 801210a:	2b09      	cmp	r3, #9
 801210c:	dd15      	ble.n	801213a <_strtod_l+0x416>
 801210e:	0022      	movs	r2, r4
 8012110:	4b7e      	ldr	r3, [pc, #504]	; (801230c <_strtod_l+0x5e8>)
 8012112:	3a09      	subs	r2, #9
 8012114:	00d2      	lsls	r2, r2, #3
 8012116:	189b      	adds	r3, r3, r2
 8012118:	681a      	ldr	r2, [r3, #0]
 801211a:	685b      	ldr	r3, [r3, #4]
 801211c:	f7ef fe2c 	bl	8001d78 <__aeabi_dmul>
 8012120:	0006      	movs	r6, r0
 8012122:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8012124:	000f      	movs	r7, r1
 8012126:	f7f0 fca9 	bl	8002a7c <__aeabi_ui2d>
 801212a:	0002      	movs	r2, r0
 801212c:	000b      	movs	r3, r1
 801212e:	0030      	movs	r0, r6
 8012130:	0039      	movs	r1, r7
 8012132:	f7ee fee3 	bl	8000efc <__aeabi_dadd>
 8012136:	0006      	movs	r6, r0
 8012138:	000f      	movs	r7, r1
 801213a:	9b06      	ldr	r3, [sp, #24]
 801213c:	2b0f      	cmp	r3, #15
 801213e:	dc39      	bgt.n	80121b4 <_strtod_l+0x490>
 8012140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012142:	2b00      	cmp	r3, #0
 8012144:	d100      	bne.n	8012148 <_strtod_l+0x424>
 8012146:	e634      	b.n	8011db2 <_strtod_l+0x8e>
 8012148:	dd24      	ble.n	8012194 <_strtod_l+0x470>
 801214a:	2b16      	cmp	r3, #22
 801214c:	dc09      	bgt.n	8012162 <_strtod_l+0x43e>
 801214e:	496f      	ldr	r1, [pc, #444]	; (801230c <_strtod_l+0x5e8>)
 8012150:	00db      	lsls	r3, r3, #3
 8012152:	18c9      	adds	r1, r1, r3
 8012154:	0032      	movs	r2, r6
 8012156:	6808      	ldr	r0, [r1, #0]
 8012158:	6849      	ldr	r1, [r1, #4]
 801215a:	003b      	movs	r3, r7
 801215c:	f7ef fe0c 	bl	8001d78 <__aeabi_dmul>
 8012160:	e7bd      	b.n	80120de <_strtod_l+0x3ba>
 8012162:	2325      	movs	r3, #37	; 0x25
 8012164:	9a06      	ldr	r2, [sp, #24]
 8012166:	1a9b      	subs	r3, r3, r2
 8012168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801216a:	4293      	cmp	r3, r2
 801216c:	db22      	blt.n	80121b4 <_strtod_l+0x490>
 801216e:	240f      	movs	r4, #15
 8012170:	9b06      	ldr	r3, [sp, #24]
 8012172:	4d66      	ldr	r5, [pc, #408]	; (801230c <_strtod_l+0x5e8>)
 8012174:	1ae4      	subs	r4, r4, r3
 8012176:	00e1      	lsls	r1, r4, #3
 8012178:	1869      	adds	r1, r5, r1
 801217a:	0032      	movs	r2, r6
 801217c:	6808      	ldr	r0, [r1, #0]
 801217e:	6849      	ldr	r1, [r1, #4]
 8012180:	003b      	movs	r3, r7
 8012182:	f7ef fdf9 	bl	8001d78 <__aeabi_dmul>
 8012186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012188:	1b1c      	subs	r4, r3, r4
 801218a:	00e4      	lsls	r4, r4, #3
 801218c:	192c      	adds	r4, r5, r4
 801218e:	6822      	ldr	r2, [r4, #0]
 8012190:	6863      	ldr	r3, [r4, #4]
 8012192:	e7e3      	b.n	801215c <_strtod_l+0x438>
 8012194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012196:	3316      	adds	r3, #22
 8012198:	db0c      	blt.n	80121b4 <_strtod_l+0x490>
 801219a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801219c:	9a07      	ldr	r2, [sp, #28]
 801219e:	0030      	movs	r0, r6
 80121a0:	1a9a      	subs	r2, r3, r2
 80121a2:	4b5a      	ldr	r3, [pc, #360]	; (801230c <_strtod_l+0x5e8>)
 80121a4:	00d2      	lsls	r2, r2, #3
 80121a6:	189b      	adds	r3, r3, r2
 80121a8:	0039      	movs	r1, r7
 80121aa:	681a      	ldr	r2, [r3, #0]
 80121ac:	685b      	ldr	r3, [r3, #4]
 80121ae:	f7ef f9e1 	bl	8001574 <__aeabi_ddiv>
 80121b2:	e794      	b.n	80120de <_strtod_l+0x3ba>
 80121b4:	9b06      	ldr	r3, [sp, #24]
 80121b6:	1b1c      	subs	r4, r3, r4
 80121b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121ba:	18e4      	adds	r4, r4, r3
 80121bc:	2c00      	cmp	r4, #0
 80121be:	dd72      	ble.n	80122a6 <_strtod_l+0x582>
 80121c0:	230f      	movs	r3, #15
 80121c2:	0021      	movs	r1, r4
 80121c4:	4019      	ands	r1, r3
 80121c6:	421c      	tst	r4, r3
 80121c8:	d00a      	beq.n	80121e0 <_strtod_l+0x4bc>
 80121ca:	00cb      	lsls	r3, r1, #3
 80121cc:	494f      	ldr	r1, [pc, #316]	; (801230c <_strtod_l+0x5e8>)
 80121ce:	0032      	movs	r2, r6
 80121d0:	18c9      	adds	r1, r1, r3
 80121d2:	6808      	ldr	r0, [r1, #0]
 80121d4:	6849      	ldr	r1, [r1, #4]
 80121d6:	003b      	movs	r3, r7
 80121d8:	f7ef fdce 	bl	8001d78 <__aeabi_dmul>
 80121dc:	0006      	movs	r6, r0
 80121de:	000f      	movs	r7, r1
 80121e0:	230f      	movs	r3, #15
 80121e2:	439c      	bics	r4, r3
 80121e4:	d04a      	beq.n	801227c <_strtod_l+0x558>
 80121e6:	3326      	adds	r3, #38	; 0x26
 80121e8:	33ff      	adds	r3, #255	; 0xff
 80121ea:	429c      	cmp	r4, r3
 80121ec:	dd22      	ble.n	8012234 <_strtod_l+0x510>
 80121ee:	2300      	movs	r3, #0
 80121f0:	9306      	str	r3, [sp, #24]
 80121f2:	9307      	str	r3, [sp, #28]
 80121f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80121f6:	9309      	str	r3, [sp, #36]	; 0x24
 80121f8:	2322      	movs	r3, #34	; 0x22
 80121fa:	2600      	movs	r6, #0
 80121fc:	9a05      	ldr	r2, [sp, #20]
 80121fe:	4f3f      	ldr	r7, [pc, #252]	; (80122fc <_strtod_l+0x5d8>)
 8012200:	6013      	str	r3, [r2, #0]
 8012202:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012204:	42b3      	cmp	r3, r6
 8012206:	d100      	bne.n	801220a <_strtod_l+0x4e6>
 8012208:	e5d3      	b.n	8011db2 <_strtod_l+0x8e>
 801220a:	9920      	ldr	r1, [sp, #128]	; 0x80
 801220c:	9805      	ldr	r0, [sp, #20]
 801220e:	f002 fa33 	bl	8014678 <_Bfree>
 8012212:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012214:	9805      	ldr	r0, [sp, #20]
 8012216:	f002 fa2f 	bl	8014678 <_Bfree>
 801221a:	9907      	ldr	r1, [sp, #28]
 801221c:	9805      	ldr	r0, [sp, #20]
 801221e:	f002 fa2b 	bl	8014678 <_Bfree>
 8012222:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012224:	9805      	ldr	r0, [sp, #20]
 8012226:	f002 fa27 	bl	8014678 <_Bfree>
 801222a:	9906      	ldr	r1, [sp, #24]
 801222c:	9805      	ldr	r0, [sp, #20]
 801222e:	f002 fa23 	bl	8014678 <_Bfree>
 8012232:	e5be      	b.n	8011db2 <_strtod_l+0x8e>
 8012234:	2300      	movs	r3, #0
 8012236:	0030      	movs	r0, r6
 8012238:	0039      	movs	r1, r7
 801223a:	4d35      	ldr	r5, [pc, #212]	; (8012310 <_strtod_l+0x5ec>)
 801223c:	1124      	asrs	r4, r4, #4
 801223e:	9308      	str	r3, [sp, #32]
 8012240:	2c01      	cmp	r4, #1
 8012242:	dc1e      	bgt.n	8012282 <_strtod_l+0x55e>
 8012244:	2b00      	cmp	r3, #0
 8012246:	d001      	beq.n	801224c <_strtod_l+0x528>
 8012248:	0006      	movs	r6, r0
 801224a:	000f      	movs	r7, r1
 801224c:	4b31      	ldr	r3, [pc, #196]	; (8012314 <_strtod_l+0x5f0>)
 801224e:	0032      	movs	r2, r6
 8012250:	18ff      	adds	r7, r7, r3
 8012252:	9b08      	ldr	r3, [sp, #32]
 8012254:	00dd      	lsls	r5, r3, #3
 8012256:	4b2e      	ldr	r3, [pc, #184]	; (8012310 <_strtod_l+0x5ec>)
 8012258:	195d      	adds	r5, r3, r5
 801225a:	6828      	ldr	r0, [r5, #0]
 801225c:	6869      	ldr	r1, [r5, #4]
 801225e:	003b      	movs	r3, r7
 8012260:	f7ef fd8a 	bl	8001d78 <__aeabi_dmul>
 8012264:	4b25      	ldr	r3, [pc, #148]	; (80122fc <_strtod_l+0x5d8>)
 8012266:	4a2c      	ldr	r2, [pc, #176]	; (8012318 <_strtod_l+0x5f4>)
 8012268:	0006      	movs	r6, r0
 801226a:	400b      	ands	r3, r1
 801226c:	4293      	cmp	r3, r2
 801226e:	d8be      	bhi.n	80121ee <_strtod_l+0x4ca>
 8012270:	4a2a      	ldr	r2, [pc, #168]	; (801231c <_strtod_l+0x5f8>)
 8012272:	4293      	cmp	r3, r2
 8012274:	d913      	bls.n	801229e <_strtod_l+0x57a>
 8012276:	2601      	movs	r6, #1
 8012278:	4f29      	ldr	r7, [pc, #164]	; (8012320 <_strtod_l+0x5fc>)
 801227a:	4276      	negs	r6, r6
 801227c:	2300      	movs	r3, #0
 801227e:	9308      	str	r3, [sp, #32]
 8012280:	e087      	b.n	8012392 <_strtod_l+0x66e>
 8012282:	2201      	movs	r2, #1
 8012284:	4214      	tst	r4, r2
 8012286:	d004      	beq.n	8012292 <_strtod_l+0x56e>
 8012288:	682a      	ldr	r2, [r5, #0]
 801228a:	686b      	ldr	r3, [r5, #4]
 801228c:	f7ef fd74 	bl	8001d78 <__aeabi_dmul>
 8012290:	2301      	movs	r3, #1
 8012292:	9a08      	ldr	r2, [sp, #32]
 8012294:	1064      	asrs	r4, r4, #1
 8012296:	3201      	adds	r2, #1
 8012298:	9208      	str	r2, [sp, #32]
 801229a:	3508      	adds	r5, #8
 801229c:	e7d0      	b.n	8012240 <_strtod_l+0x51c>
 801229e:	23d4      	movs	r3, #212	; 0xd4
 80122a0:	049b      	lsls	r3, r3, #18
 80122a2:	18cf      	adds	r7, r1, r3
 80122a4:	e7ea      	b.n	801227c <_strtod_l+0x558>
 80122a6:	2c00      	cmp	r4, #0
 80122a8:	d0e8      	beq.n	801227c <_strtod_l+0x558>
 80122aa:	4264      	negs	r4, r4
 80122ac:	220f      	movs	r2, #15
 80122ae:	0023      	movs	r3, r4
 80122b0:	4013      	ands	r3, r2
 80122b2:	4214      	tst	r4, r2
 80122b4:	d00a      	beq.n	80122cc <_strtod_l+0x5a8>
 80122b6:	00da      	lsls	r2, r3, #3
 80122b8:	4b14      	ldr	r3, [pc, #80]	; (801230c <_strtod_l+0x5e8>)
 80122ba:	0030      	movs	r0, r6
 80122bc:	189b      	adds	r3, r3, r2
 80122be:	0039      	movs	r1, r7
 80122c0:	681a      	ldr	r2, [r3, #0]
 80122c2:	685b      	ldr	r3, [r3, #4]
 80122c4:	f7ef f956 	bl	8001574 <__aeabi_ddiv>
 80122c8:	0006      	movs	r6, r0
 80122ca:	000f      	movs	r7, r1
 80122cc:	1124      	asrs	r4, r4, #4
 80122ce:	d0d5      	beq.n	801227c <_strtod_l+0x558>
 80122d0:	2c1f      	cmp	r4, #31
 80122d2:	dd27      	ble.n	8012324 <_strtod_l+0x600>
 80122d4:	2300      	movs	r3, #0
 80122d6:	9306      	str	r3, [sp, #24]
 80122d8:	9307      	str	r3, [sp, #28]
 80122da:	930b      	str	r3, [sp, #44]	; 0x2c
 80122dc:	9309      	str	r3, [sp, #36]	; 0x24
 80122de:	2322      	movs	r3, #34	; 0x22
 80122e0:	9a05      	ldr	r2, [sp, #20]
 80122e2:	2600      	movs	r6, #0
 80122e4:	6013      	str	r3, [r2, #0]
 80122e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80122e8:	2700      	movs	r7, #0
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d18d      	bne.n	801220a <_strtod_l+0x4e6>
 80122ee:	e560      	b.n	8011db2 <_strtod_l+0x8e>
 80122f0:	00004e1f 	.word	0x00004e1f
 80122f4:	080177e1 	.word	0x080177e1
 80122f8:	08017824 	.word	0x08017824
 80122fc:	7ff00000 	.word	0x7ff00000
 8012300:	080177d9 	.word	0x080177d9
 8012304:	080179a0 	.word	0x080179a0
 8012308:	0801789b 	.word	0x0801789b
 801230c:	08017b90 	.word	0x08017b90
 8012310:	08017b68 	.word	0x08017b68
 8012314:	fcb00000 	.word	0xfcb00000
 8012318:	7ca00000 	.word	0x7ca00000
 801231c:	7c900000 	.word	0x7c900000
 8012320:	7fefffff 	.word	0x7fefffff
 8012324:	2310      	movs	r3, #16
 8012326:	0022      	movs	r2, r4
 8012328:	401a      	ands	r2, r3
 801232a:	9208      	str	r2, [sp, #32]
 801232c:	421c      	tst	r4, r3
 801232e:	d001      	beq.n	8012334 <_strtod_l+0x610>
 8012330:	335a      	adds	r3, #90	; 0x5a
 8012332:	9308      	str	r3, [sp, #32]
 8012334:	0030      	movs	r0, r6
 8012336:	0039      	movs	r1, r7
 8012338:	2300      	movs	r3, #0
 801233a:	4dc5      	ldr	r5, [pc, #788]	; (8012650 <_strtod_l+0x92c>)
 801233c:	2201      	movs	r2, #1
 801233e:	4214      	tst	r4, r2
 8012340:	d004      	beq.n	801234c <_strtod_l+0x628>
 8012342:	682a      	ldr	r2, [r5, #0]
 8012344:	686b      	ldr	r3, [r5, #4]
 8012346:	f7ef fd17 	bl	8001d78 <__aeabi_dmul>
 801234a:	2301      	movs	r3, #1
 801234c:	1064      	asrs	r4, r4, #1
 801234e:	3508      	adds	r5, #8
 8012350:	2c00      	cmp	r4, #0
 8012352:	d1f3      	bne.n	801233c <_strtod_l+0x618>
 8012354:	2b00      	cmp	r3, #0
 8012356:	d001      	beq.n	801235c <_strtod_l+0x638>
 8012358:	0006      	movs	r6, r0
 801235a:	000f      	movs	r7, r1
 801235c:	9b08      	ldr	r3, [sp, #32]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d00f      	beq.n	8012382 <_strtod_l+0x65e>
 8012362:	236b      	movs	r3, #107	; 0x6b
 8012364:	007a      	lsls	r2, r7, #1
 8012366:	0d52      	lsrs	r2, r2, #21
 8012368:	0039      	movs	r1, r7
 801236a:	1a9b      	subs	r3, r3, r2
 801236c:	2b00      	cmp	r3, #0
 801236e:	dd08      	ble.n	8012382 <_strtod_l+0x65e>
 8012370:	2b1f      	cmp	r3, #31
 8012372:	dc00      	bgt.n	8012376 <_strtod_l+0x652>
 8012374:	e124      	b.n	80125c0 <_strtod_l+0x89c>
 8012376:	2600      	movs	r6, #0
 8012378:	2b34      	cmp	r3, #52	; 0x34
 801237a:	dc00      	bgt.n	801237e <_strtod_l+0x65a>
 801237c:	e119      	b.n	80125b2 <_strtod_l+0x88e>
 801237e:	27dc      	movs	r7, #220	; 0xdc
 8012380:	04bf      	lsls	r7, r7, #18
 8012382:	2200      	movs	r2, #0
 8012384:	2300      	movs	r3, #0
 8012386:	0030      	movs	r0, r6
 8012388:	0039      	movs	r1, r7
 801238a:	f7ee f865 	bl	8000458 <__aeabi_dcmpeq>
 801238e:	2800      	cmp	r0, #0
 8012390:	d1a0      	bne.n	80122d4 <_strtod_l+0x5b0>
 8012392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012394:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012396:	9300      	str	r3, [sp, #0]
 8012398:	9910      	ldr	r1, [sp, #64]	; 0x40
 801239a:	9b06      	ldr	r3, [sp, #24]
 801239c:	9805      	ldr	r0, [sp, #20]
 801239e:	f002 f9d3 	bl	8014748 <__s2b>
 80123a2:	900b      	str	r0, [sp, #44]	; 0x2c
 80123a4:	2800      	cmp	r0, #0
 80123a6:	d100      	bne.n	80123aa <_strtod_l+0x686>
 80123a8:	e721      	b.n	80121ee <_strtod_l+0x4ca>
 80123aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123ac:	9907      	ldr	r1, [sp, #28]
 80123ae:	17da      	asrs	r2, r3, #31
 80123b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123b2:	1a5b      	subs	r3, r3, r1
 80123b4:	401a      	ands	r2, r3
 80123b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123b8:	9215      	str	r2, [sp, #84]	; 0x54
 80123ba:	43db      	mvns	r3, r3
 80123bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123be:	17db      	asrs	r3, r3, #31
 80123c0:	401a      	ands	r2, r3
 80123c2:	2300      	movs	r3, #0
 80123c4:	921a      	str	r2, [sp, #104]	; 0x68
 80123c6:	9306      	str	r3, [sp, #24]
 80123c8:	9307      	str	r3, [sp, #28]
 80123ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123cc:	9805      	ldr	r0, [sp, #20]
 80123ce:	6859      	ldr	r1, [r3, #4]
 80123d0:	f002 f90e 	bl	80145f0 <_Balloc>
 80123d4:	9009      	str	r0, [sp, #36]	; 0x24
 80123d6:	2800      	cmp	r0, #0
 80123d8:	d100      	bne.n	80123dc <_strtod_l+0x6b8>
 80123da:	e70d      	b.n	80121f8 <_strtod_l+0x4d4>
 80123dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80123de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80123e0:	691b      	ldr	r3, [r3, #16]
 80123e2:	310c      	adds	r1, #12
 80123e4:	1c9a      	adds	r2, r3, #2
 80123e6:	0092      	lsls	r2, r2, #2
 80123e8:	300c      	adds	r0, #12
 80123ea:	930c      	str	r3, [sp, #48]	; 0x30
 80123ec:	f7fe fd16 	bl	8010e1c <memcpy>
 80123f0:	ab22      	add	r3, sp, #136	; 0x88
 80123f2:	9301      	str	r3, [sp, #4]
 80123f4:	ab21      	add	r3, sp, #132	; 0x84
 80123f6:	9300      	str	r3, [sp, #0]
 80123f8:	0032      	movs	r2, r6
 80123fa:	003b      	movs	r3, r7
 80123fc:	9805      	ldr	r0, [sp, #20]
 80123fe:	9612      	str	r6, [sp, #72]	; 0x48
 8012400:	9713      	str	r7, [sp, #76]	; 0x4c
 8012402:	f002 fced 	bl	8014de0 <__d2b>
 8012406:	9020      	str	r0, [sp, #128]	; 0x80
 8012408:	2800      	cmp	r0, #0
 801240a:	d100      	bne.n	801240e <_strtod_l+0x6ea>
 801240c:	e6f4      	b.n	80121f8 <_strtod_l+0x4d4>
 801240e:	2101      	movs	r1, #1
 8012410:	9805      	ldr	r0, [sp, #20]
 8012412:	f002 fa2d 	bl	8014870 <__i2b>
 8012416:	9007      	str	r0, [sp, #28]
 8012418:	2800      	cmp	r0, #0
 801241a:	d100      	bne.n	801241e <_strtod_l+0x6fa>
 801241c:	e6ec      	b.n	80121f8 <_strtod_l+0x4d4>
 801241e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012420:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8012422:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8012424:	1ad4      	subs	r4, r2, r3
 8012426:	2b00      	cmp	r3, #0
 8012428:	db01      	blt.n	801242e <_strtod_l+0x70a>
 801242a:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 801242c:	195d      	adds	r5, r3, r5
 801242e:	9908      	ldr	r1, [sp, #32]
 8012430:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012432:	1a5b      	subs	r3, r3, r1
 8012434:	2136      	movs	r1, #54	; 0x36
 8012436:	189b      	adds	r3, r3, r2
 8012438:	1a8a      	subs	r2, r1, r2
 801243a:	4986      	ldr	r1, [pc, #536]	; (8012654 <_strtod_l+0x930>)
 801243c:	2001      	movs	r0, #1
 801243e:	468c      	mov	ip, r1
 8012440:	2100      	movs	r1, #0
 8012442:	3b01      	subs	r3, #1
 8012444:	9110      	str	r1, [sp, #64]	; 0x40
 8012446:	9014      	str	r0, [sp, #80]	; 0x50
 8012448:	4563      	cmp	r3, ip
 801244a:	da07      	bge.n	801245c <_strtod_l+0x738>
 801244c:	4661      	mov	r1, ip
 801244e:	1ac9      	subs	r1, r1, r3
 8012450:	1a52      	subs	r2, r2, r1
 8012452:	291f      	cmp	r1, #31
 8012454:	dd00      	ble.n	8012458 <_strtod_l+0x734>
 8012456:	e0b8      	b.n	80125ca <_strtod_l+0x8a6>
 8012458:	4088      	lsls	r0, r1
 801245a:	9014      	str	r0, [sp, #80]	; 0x50
 801245c:	18ab      	adds	r3, r5, r2
 801245e:	930c      	str	r3, [sp, #48]	; 0x30
 8012460:	18a4      	adds	r4, r4, r2
 8012462:	9b08      	ldr	r3, [sp, #32]
 8012464:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012466:	191c      	adds	r4, r3, r4
 8012468:	002b      	movs	r3, r5
 801246a:	4295      	cmp	r5, r2
 801246c:	dd00      	ble.n	8012470 <_strtod_l+0x74c>
 801246e:	0013      	movs	r3, r2
 8012470:	42a3      	cmp	r3, r4
 8012472:	dd00      	ble.n	8012476 <_strtod_l+0x752>
 8012474:	0023      	movs	r3, r4
 8012476:	2b00      	cmp	r3, #0
 8012478:	dd04      	ble.n	8012484 <_strtod_l+0x760>
 801247a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801247c:	1ae4      	subs	r4, r4, r3
 801247e:	1ad2      	subs	r2, r2, r3
 8012480:	920c      	str	r2, [sp, #48]	; 0x30
 8012482:	1aed      	subs	r5, r5, r3
 8012484:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012486:	2b00      	cmp	r3, #0
 8012488:	dd17      	ble.n	80124ba <_strtod_l+0x796>
 801248a:	001a      	movs	r2, r3
 801248c:	9907      	ldr	r1, [sp, #28]
 801248e:	9805      	ldr	r0, [sp, #20]
 8012490:	f002 fab4 	bl	80149fc <__pow5mult>
 8012494:	9007      	str	r0, [sp, #28]
 8012496:	2800      	cmp	r0, #0
 8012498:	d100      	bne.n	801249c <_strtod_l+0x778>
 801249a:	e6ad      	b.n	80121f8 <_strtod_l+0x4d4>
 801249c:	0001      	movs	r1, r0
 801249e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80124a0:	9805      	ldr	r0, [sp, #20]
 80124a2:	f002 f9fb 	bl	801489c <__multiply>
 80124a6:	900f      	str	r0, [sp, #60]	; 0x3c
 80124a8:	2800      	cmp	r0, #0
 80124aa:	d100      	bne.n	80124ae <_strtod_l+0x78a>
 80124ac:	e6a4      	b.n	80121f8 <_strtod_l+0x4d4>
 80124ae:	9920      	ldr	r1, [sp, #128]	; 0x80
 80124b0:	9805      	ldr	r0, [sp, #20]
 80124b2:	f002 f8e1 	bl	8014678 <_Bfree>
 80124b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80124b8:	9320      	str	r3, [sp, #128]	; 0x80
 80124ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80124bc:	2b00      	cmp	r3, #0
 80124be:	dd00      	ble.n	80124c2 <_strtod_l+0x79e>
 80124c0:	e089      	b.n	80125d6 <_strtod_l+0x8b2>
 80124c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	dd08      	ble.n	80124da <_strtod_l+0x7b6>
 80124c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80124ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80124cc:	9805      	ldr	r0, [sp, #20]
 80124ce:	f002 fa95 	bl	80149fc <__pow5mult>
 80124d2:	9009      	str	r0, [sp, #36]	; 0x24
 80124d4:	2800      	cmp	r0, #0
 80124d6:	d100      	bne.n	80124da <_strtod_l+0x7b6>
 80124d8:	e68e      	b.n	80121f8 <_strtod_l+0x4d4>
 80124da:	2c00      	cmp	r4, #0
 80124dc:	dd08      	ble.n	80124f0 <_strtod_l+0x7cc>
 80124de:	0022      	movs	r2, r4
 80124e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80124e2:	9805      	ldr	r0, [sp, #20]
 80124e4:	f002 fae6 	bl	8014ab4 <__lshift>
 80124e8:	9009      	str	r0, [sp, #36]	; 0x24
 80124ea:	2800      	cmp	r0, #0
 80124ec:	d100      	bne.n	80124f0 <_strtod_l+0x7cc>
 80124ee:	e683      	b.n	80121f8 <_strtod_l+0x4d4>
 80124f0:	2d00      	cmp	r5, #0
 80124f2:	dd08      	ble.n	8012506 <_strtod_l+0x7e2>
 80124f4:	002a      	movs	r2, r5
 80124f6:	9907      	ldr	r1, [sp, #28]
 80124f8:	9805      	ldr	r0, [sp, #20]
 80124fa:	f002 fadb 	bl	8014ab4 <__lshift>
 80124fe:	9007      	str	r0, [sp, #28]
 8012500:	2800      	cmp	r0, #0
 8012502:	d100      	bne.n	8012506 <_strtod_l+0x7e2>
 8012504:	e678      	b.n	80121f8 <_strtod_l+0x4d4>
 8012506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012508:	9920      	ldr	r1, [sp, #128]	; 0x80
 801250a:	9805      	ldr	r0, [sp, #20]
 801250c:	f002 fb5c 	bl	8014bc8 <__mdiff>
 8012510:	9006      	str	r0, [sp, #24]
 8012512:	2800      	cmp	r0, #0
 8012514:	d100      	bne.n	8012518 <_strtod_l+0x7f4>
 8012516:	e66f      	b.n	80121f8 <_strtod_l+0x4d4>
 8012518:	2200      	movs	r2, #0
 801251a:	68c3      	ldr	r3, [r0, #12]
 801251c:	9907      	ldr	r1, [sp, #28]
 801251e:	60c2      	str	r2, [r0, #12]
 8012520:	930f      	str	r3, [sp, #60]	; 0x3c
 8012522:	f002 fb35 	bl	8014b90 <__mcmp>
 8012526:	2800      	cmp	r0, #0
 8012528:	da5f      	bge.n	80125ea <_strtod_l+0x8c6>
 801252a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801252c:	4333      	orrs	r3, r6
 801252e:	d000      	beq.n	8012532 <_strtod_l+0x80e>
 8012530:	e08a      	b.n	8012648 <_strtod_l+0x924>
 8012532:	033b      	lsls	r3, r7, #12
 8012534:	d000      	beq.n	8012538 <_strtod_l+0x814>
 8012536:	e087      	b.n	8012648 <_strtod_l+0x924>
 8012538:	22d6      	movs	r2, #214	; 0xd6
 801253a:	4b47      	ldr	r3, [pc, #284]	; (8012658 <_strtod_l+0x934>)
 801253c:	04d2      	lsls	r2, r2, #19
 801253e:	403b      	ands	r3, r7
 8012540:	4293      	cmp	r3, r2
 8012542:	d800      	bhi.n	8012546 <_strtod_l+0x822>
 8012544:	e080      	b.n	8012648 <_strtod_l+0x924>
 8012546:	9b06      	ldr	r3, [sp, #24]
 8012548:	695b      	ldr	r3, [r3, #20]
 801254a:	930a      	str	r3, [sp, #40]	; 0x28
 801254c:	2b00      	cmp	r3, #0
 801254e:	d104      	bne.n	801255a <_strtod_l+0x836>
 8012550:	9b06      	ldr	r3, [sp, #24]
 8012552:	691b      	ldr	r3, [r3, #16]
 8012554:	930a      	str	r3, [sp, #40]	; 0x28
 8012556:	2b01      	cmp	r3, #1
 8012558:	dd76      	ble.n	8012648 <_strtod_l+0x924>
 801255a:	9906      	ldr	r1, [sp, #24]
 801255c:	2201      	movs	r2, #1
 801255e:	9805      	ldr	r0, [sp, #20]
 8012560:	f002 faa8 	bl	8014ab4 <__lshift>
 8012564:	9907      	ldr	r1, [sp, #28]
 8012566:	9006      	str	r0, [sp, #24]
 8012568:	f002 fb12 	bl	8014b90 <__mcmp>
 801256c:	2800      	cmp	r0, #0
 801256e:	dd6b      	ble.n	8012648 <_strtod_l+0x924>
 8012570:	9908      	ldr	r1, [sp, #32]
 8012572:	003b      	movs	r3, r7
 8012574:	4a38      	ldr	r2, [pc, #224]	; (8012658 <_strtod_l+0x934>)
 8012576:	2900      	cmp	r1, #0
 8012578:	d100      	bne.n	801257c <_strtod_l+0x858>
 801257a:	e092      	b.n	80126a2 <_strtod_l+0x97e>
 801257c:	0011      	movs	r1, r2
 801257e:	20d6      	movs	r0, #214	; 0xd6
 8012580:	4039      	ands	r1, r7
 8012582:	04c0      	lsls	r0, r0, #19
 8012584:	4281      	cmp	r1, r0
 8012586:	dd00      	ble.n	801258a <_strtod_l+0x866>
 8012588:	e08b      	b.n	80126a2 <_strtod_l+0x97e>
 801258a:	23dc      	movs	r3, #220	; 0xdc
 801258c:	049b      	lsls	r3, r3, #18
 801258e:	4299      	cmp	r1, r3
 8012590:	dc00      	bgt.n	8012594 <_strtod_l+0x870>
 8012592:	e6a4      	b.n	80122de <_strtod_l+0x5ba>
 8012594:	0030      	movs	r0, r6
 8012596:	0039      	movs	r1, r7
 8012598:	2200      	movs	r2, #0
 801259a:	4b30      	ldr	r3, [pc, #192]	; (801265c <_strtod_l+0x938>)
 801259c:	f7ef fbec 	bl	8001d78 <__aeabi_dmul>
 80125a0:	0006      	movs	r6, r0
 80125a2:	000f      	movs	r7, r1
 80125a4:	4308      	orrs	r0, r1
 80125a6:	d000      	beq.n	80125aa <_strtod_l+0x886>
 80125a8:	e62f      	b.n	801220a <_strtod_l+0x4e6>
 80125aa:	2322      	movs	r3, #34	; 0x22
 80125ac:	9a05      	ldr	r2, [sp, #20]
 80125ae:	6013      	str	r3, [r2, #0]
 80125b0:	e62b      	b.n	801220a <_strtod_l+0x4e6>
 80125b2:	234b      	movs	r3, #75	; 0x4b
 80125b4:	1a9a      	subs	r2, r3, r2
 80125b6:	3b4c      	subs	r3, #76	; 0x4c
 80125b8:	4093      	lsls	r3, r2
 80125ba:	4019      	ands	r1, r3
 80125bc:	000f      	movs	r7, r1
 80125be:	e6e0      	b.n	8012382 <_strtod_l+0x65e>
 80125c0:	2201      	movs	r2, #1
 80125c2:	4252      	negs	r2, r2
 80125c4:	409a      	lsls	r2, r3
 80125c6:	4016      	ands	r6, r2
 80125c8:	e6db      	b.n	8012382 <_strtod_l+0x65e>
 80125ca:	4925      	ldr	r1, [pc, #148]	; (8012660 <_strtod_l+0x93c>)
 80125cc:	1acb      	subs	r3, r1, r3
 80125ce:	0001      	movs	r1, r0
 80125d0:	4099      	lsls	r1, r3
 80125d2:	9110      	str	r1, [sp, #64]	; 0x40
 80125d4:	e741      	b.n	801245a <_strtod_l+0x736>
 80125d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80125d8:	9920      	ldr	r1, [sp, #128]	; 0x80
 80125da:	9805      	ldr	r0, [sp, #20]
 80125dc:	f002 fa6a 	bl	8014ab4 <__lshift>
 80125e0:	9020      	str	r0, [sp, #128]	; 0x80
 80125e2:	2800      	cmp	r0, #0
 80125e4:	d000      	beq.n	80125e8 <_strtod_l+0x8c4>
 80125e6:	e76c      	b.n	80124c2 <_strtod_l+0x79e>
 80125e8:	e606      	b.n	80121f8 <_strtod_l+0x4d4>
 80125ea:	970c      	str	r7, [sp, #48]	; 0x30
 80125ec:	2800      	cmp	r0, #0
 80125ee:	d176      	bne.n	80126de <_strtod_l+0x9ba>
 80125f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80125f2:	033b      	lsls	r3, r7, #12
 80125f4:	0b1b      	lsrs	r3, r3, #12
 80125f6:	2a00      	cmp	r2, #0
 80125f8:	d038      	beq.n	801266c <_strtod_l+0x948>
 80125fa:	4a1a      	ldr	r2, [pc, #104]	; (8012664 <_strtod_l+0x940>)
 80125fc:	4293      	cmp	r3, r2
 80125fe:	d138      	bne.n	8012672 <_strtod_l+0x94e>
 8012600:	2201      	movs	r2, #1
 8012602:	9b08      	ldr	r3, [sp, #32]
 8012604:	4252      	negs	r2, r2
 8012606:	0031      	movs	r1, r6
 8012608:	0010      	movs	r0, r2
 801260a:	2b00      	cmp	r3, #0
 801260c:	d00b      	beq.n	8012626 <_strtod_l+0x902>
 801260e:	24d4      	movs	r4, #212	; 0xd4
 8012610:	4b11      	ldr	r3, [pc, #68]	; (8012658 <_strtod_l+0x934>)
 8012612:	0010      	movs	r0, r2
 8012614:	403b      	ands	r3, r7
 8012616:	04e4      	lsls	r4, r4, #19
 8012618:	42a3      	cmp	r3, r4
 801261a:	d804      	bhi.n	8012626 <_strtod_l+0x902>
 801261c:	306c      	adds	r0, #108	; 0x6c
 801261e:	0d1b      	lsrs	r3, r3, #20
 8012620:	1ac3      	subs	r3, r0, r3
 8012622:	409a      	lsls	r2, r3
 8012624:	0010      	movs	r0, r2
 8012626:	4281      	cmp	r1, r0
 8012628:	d123      	bne.n	8012672 <_strtod_l+0x94e>
 801262a:	4b0f      	ldr	r3, [pc, #60]	; (8012668 <_strtod_l+0x944>)
 801262c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801262e:	429a      	cmp	r2, r3
 8012630:	d102      	bne.n	8012638 <_strtod_l+0x914>
 8012632:	1c4b      	adds	r3, r1, #1
 8012634:	d100      	bne.n	8012638 <_strtod_l+0x914>
 8012636:	e5df      	b.n	80121f8 <_strtod_l+0x4d4>
 8012638:	4b07      	ldr	r3, [pc, #28]	; (8012658 <_strtod_l+0x934>)
 801263a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801263c:	2600      	movs	r6, #0
 801263e:	401a      	ands	r2, r3
 8012640:	0013      	movs	r3, r2
 8012642:	2280      	movs	r2, #128	; 0x80
 8012644:	0352      	lsls	r2, r2, #13
 8012646:	189f      	adds	r7, r3, r2
 8012648:	9b08      	ldr	r3, [sp, #32]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d1a2      	bne.n	8012594 <_strtod_l+0x870>
 801264e:	e5dc      	b.n	801220a <_strtod_l+0x4e6>
 8012650:	08017838 	.word	0x08017838
 8012654:	fffffc02 	.word	0xfffffc02
 8012658:	7ff00000 	.word	0x7ff00000
 801265c:	39500000 	.word	0x39500000
 8012660:	fffffbe2 	.word	0xfffffbe2
 8012664:	000fffff 	.word	0x000fffff
 8012668:	7fefffff 	.word	0x7fefffff
 801266c:	4333      	orrs	r3, r6
 801266e:	d100      	bne.n	8012672 <_strtod_l+0x94e>
 8012670:	e77e      	b.n	8012570 <_strtod_l+0x84c>
 8012672:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012674:	2b00      	cmp	r3, #0
 8012676:	d01d      	beq.n	80126b4 <_strtod_l+0x990>
 8012678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801267a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801267c:	4213      	tst	r3, r2
 801267e:	d0e3      	beq.n	8012648 <_strtod_l+0x924>
 8012680:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012682:	0030      	movs	r0, r6
 8012684:	0039      	movs	r1, r7
 8012686:	9a08      	ldr	r2, [sp, #32]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d017      	beq.n	80126bc <_strtod_l+0x998>
 801268c:	f7ff fb32 	bl	8011cf4 <sulp>
 8012690:	0002      	movs	r2, r0
 8012692:	000b      	movs	r3, r1
 8012694:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012696:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012698:	f7ee fc30 	bl	8000efc <__aeabi_dadd>
 801269c:	0006      	movs	r6, r0
 801269e:	000f      	movs	r7, r1
 80126a0:	e7d2      	b.n	8012648 <_strtod_l+0x924>
 80126a2:	2601      	movs	r6, #1
 80126a4:	4013      	ands	r3, r2
 80126a6:	4a99      	ldr	r2, [pc, #612]	; (801290c <_strtod_l+0xbe8>)
 80126a8:	4276      	negs	r6, r6
 80126aa:	189b      	adds	r3, r3, r2
 80126ac:	4a98      	ldr	r2, [pc, #608]	; (8012910 <_strtod_l+0xbec>)
 80126ae:	431a      	orrs	r2, r3
 80126b0:	0017      	movs	r7, r2
 80126b2:	e7c9      	b.n	8012648 <_strtod_l+0x924>
 80126b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80126b6:	4233      	tst	r3, r6
 80126b8:	d0c6      	beq.n	8012648 <_strtod_l+0x924>
 80126ba:	e7e1      	b.n	8012680 <_strtod_l+0x95c>
 80126bc:	f7ff fb1a 	bl	8011cf4 <sulp>
 80126c0:	0002      	movs	r2, r0
 80126c2:	000b      	movs	r3, r1
 80126c4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80126c6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80126c8:	f7ef fdc2 	bl	8002250 <__aeabi_dsub>
 80126cc:	2200      	movs	r2, #0
 80126ce:	2300      	movs	r3, #0
 80126d0:	0006      	movs	r6, r0
 80126d2:	000f      	movs	r7, r1
 80126d4:	f7ed fec0 	bl	8000458 <__aeabi_dcmpeq>
 80126d8:	2800      	cmp	r0, #0
 80126da:	d0b5      	beq.n	8012648 <_strtod_l+0x924>
 80126dc:	e5ff      	b.n	80122de <_strtod_l+0x5ba>
 80126de:	9907      	ldr	r1, [sp, #28]
 80126e0:	9806      	ldr	r0, [sp, #24]
 80126e2:	f002 fbe1 	bl	8014ea8 <__ratio>
 80126e6:	2380      	movs	r3, #128	; 0x80
 80126e8:	2200      	movs	r2, #0
 80126ea:	05db      	lsls	r3, r3, #23
 80126ec:	0004      	movs	r4, r0
 80126ee:	000d      	movs	r5, r1
 80126f0:	f7ed fec2 	bl	8000478 <__aeabi_dcmple>
 80126f4:	2800      	cmp	r0, #0
 80126f6:	d075      	beq.n	80127e4 <_strtod_l+0xac0>
 80126f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d047      	beq.n	801278e <_strtod_l+0xa6a>
 80126fe:	2300      	movs	r3, #0
 8012700:	4c84      	ldr	r4, [pc, #528]	; (8012914 <_strtod_l+0xbf0>)
 8012702:	2500      	movs	r5, #0
 8012704:	9310      	str	r3, [sp, #64]	; 0x40
 8012706:	9411      	str	r4, [sp, #68]	; 0x44
 8012708:	4c82      	ldr	r4, [pc, #520]	; (8012914 <_strtod_l+0xbf0>)
 801270a:	4a83      	ldr	r2, [pc, #524]	; (8012918 <_strtod_l+0xbf4>)
 801270c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801270e:	4013      	ands	r3, r2
 8012710:	9314      	str	r3, [sp, #80]	; 0x50
 8012712:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012714:	4b81      	ldr	r3, [pc, #516]	; (801291c <_strtod_l+0xbf8>)
 8012716:	429a      	cmp	r2, r3
 8012718:	d000      	beq.n	801271c <_strtod_l+0x9f8>
 801271a:	e0ac      	b.n	8012876 <_strtod_l+0xb52>
 801271c:	4a80      	ldr	r2, [pc, #512]	; (8012920 <_strtod_l+0xbfc>)
 801271e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012720:	4694      	mov	ip, r2
 8012722:	4463      	add	r3, ip
 8012724:	001f      	movs	r7, r3
 8012726:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012728:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801272a:	0030      	movs	r0, r6
 801272c:	0039      	movs	r1, r7
 801272e:	920c      	str	r2, [sp, #48]	; 0x30
 8012730:	930d      	str	r3, [sp, #52]	; 0x34
 8012732:	f002 fae1 	bl	8014cf8 <__ulp>
 8012736:	0002      	movs	r2, r0
 8012738:	000b      	movs	r3, r1
 801273a:	980c      	ldr	r0, [sp, #48]	; 0x30
 801273c:	990d      	ldr	r1, [sp, #52]	; 0x34
 801273e:	f7ef fb1b 	bl	8001d78 <__aeabi_dmul>
 8012742:	0032      	movs	r2, r6
 8012744:	003b      	movs	r3, r7
 8012746:	f7ee fbd9 	bl	8000efc <__aeabi_dadd>
 801274a:	4a73      	ldr	r2, [pc, #460]	; (8012918 <_strtod_l+0xbf4>)
 801274c:	4b75      	ldr	r3, [pc, #468]	; (8012924 <_strtod_l+0xc00>)
 801274e:	0006      	movs	r6, r0
 8012750:	400a      	ands	r2, r1
 8012752:	429a      	cmp	r2, r3
 8012754:	d95e      	bls.n	8012814 <_strtod_l+0xaf0>
 8012756:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012758:	4b73      	ldr	r3, [pc, #460]	; (8012928 <_strtod_l+0xc04>)
 801275a:	429a      	cmp	r2, r3
 801275c:	d103      	bne.n	8012766 <_strtod_l+0xa42>
 801275e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012760:	3301      	adds	r3, #1
 8012762:	d100      	bne.n	8012766 <_strtod_l+0xa42>
 8012764:	e548      	b.n	80121f8 <_strtod_l+0x4d4>
 8012766:	2601      	movs	r6, #1
 8012768:	4f6f      	ldr	r7, [pc, #444]	; (8012928 <_strtod_l+0xc04>)
 801276a:	4276      	negs	r6, r6
 801276c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801276e:	9805      	ldr	r0, [sp, #20]
 8012770:	f001 ff82 	bl	8014678 <_Bfree>
 8012774:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012776:	9805      	ldr	r0, [sp, #20]
 8012778:	f001 ff7e 	bl	8014678 <_Bfree>
 801277c:	9907      	ldr	r1, [sp, #28]
 801277e:	9805      	ldr	r0, [sp, #20]
 8012780:	f001 ff7a 	bl	8014678 <_Bfree>
 8012784:	9906      	ldr	r1, [sp, #24]
 8012786:	9805      	ldr	r0, [sp, #20]
 8012788:	f001 ff76 	bl	8014678 <_Bfree>
 801278c:	e61d      	b.n	80123ca <_strtod_l+0x6a6>
 801278e:	2e00      	cmp	r6, #0
 8012790:	d11c      	bne.n	80127cc <_strtod_l+0xaa8>
 8012792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012794:	031b      	lsls	r3, r3, #12
 8012796:	d11f      	bne.n	80127d8 <_strtod_l+0xab4>
 8012798:	2200      	movs	r2, #0
 801279a:	0020      	movs	r0, r4
 801279c:	0029      	movs	r1, r5
 801279e:	4b5d      	ldr	r3, [pc, #372]	; (8012914 <_strtod_l+0xbf0>)
 80127a0:	f7ed fe60 	bl	8000464 <__aeabi_dcmplt>
 80127a4:	2800      	cmp	r0, #0
 80127a6:	d11a      	bne.n	80127de <_strtod_l+0xaba>
 80127a8:	0020      	movs	r0, r4
 80127aa:	0029      	movs	r1, r5
 80127ac:	2200      	movs	r2, #0
 80127ae:	4b5f      	ldr	r3, [pc, #380]	; (801292c <_strtod_l+0xc08>)
 80127b0:	f7ef fae2 	bl	8001d78 <__aeabi_dmul>
 80127b4:	0005      	movs	r5, r0
 80127b6:	000c      	movs	r4, r1
 80127b8:	2380      	movs	r3, #128	; 0x80
 80127ba:	061b      	lsls	r3, r3, #24
 80127bc:	18e3      	adds	r3, r4, r3
 80127be:	951c      	str	r5, [sp, #112]	; 0x70
 80127c0:	931d      	str	r3, [sp, #116]	; 0x74
 80127c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80127c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80127c6:	9210      	str	r2, [sp, #64]	; 0x40
 80127c8:	9311      	str	r3, [sp, #68]	; 0x44
 80127ca:	e79e      	b.n	801270a <_strtod_l+0x9e6>
 80127cc:	2e01      	cmp	r6, #1
 80127ce:	d103      	bne.n	80127d8 <_strtod_l+0xab4>
 80127d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	d100      	bne.n	80127d8 <_strtod_l+0xab4>
 80127d6:	e582      	b.n	80122de <_strtod_l+0x5ba>
 80127d8:	2300      	movs	r3, #0
 80127da:	4c55      	ldr	r4, [pc, #340]	; (8012930 <_strtod_l+0xc0c>)
 80127dc:	e791      	b.n	8012702 <_strtod_l+0x9de>
 80127de:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80127e0:	4c52      	ldr	r4, [pc, #328]	; (801292c <_strtod_l+0xc08>)
 80127e2:	e7e9      	b.n	80127b8 <_strtod_l+0xa94>
 80127e4:	2200      	movs	r2, #0
 80127e6:	0020      	movs	r0, r4
 80127e8:	0029      	movs	r1, r5
 80127ea:	4b50      	ldr	r3, [pc, #320]	; (801292c <_strtod_l+0xc08>)
 80127ec:	f7ef fac4 	bl	8001d78 <__aeabi_dmul>
 80127f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80127f2:	0005      	movs	r5, r0
 80127f4:	000b      	movs	r3, r1
 80127f6:	000c      	movs	r4, r1
 80127f8:	2a00      	cmp	r2, #0
 80127fa:	d107      	bne.n	801280c <_strtod_l+0xae8>
 80127fc:	2280      	movs	r2, #128	; 0x80
 80127fe:	0612      	lsls	r2, r2, #24
 8012800:	188b      	adds	r3, r1, r2
 8012802:	9016      	str	r0, [sp, #88]	; 0x58
 8012804:	9317      	str	r3, [sp, #92]	; 0x5c
 8012806:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012808:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801280a:	e7dc      	b.n	80127c6 <_strtod_l+0xaa2>
 801280c:	0002      	movs	r2, r0
 801280e:	9216      	str	r2, [sp, #88]	; 0x58
 8012810:	9317      	str	r3, [sp, #92]	; 0x5c
 8012812:	e7f8      	b.n	8012806 <_strtod_l+0xae2>
 8012814:	23d4      	movs	r3, #212	; 0xd4
 8012816:	049b      	lsls	r3, r3, #18
 8012818:	18cf      	adds	r7, r1, r3
 801281a:	9b08      	ldr	r3, [sp, #32]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d1a5      	bne.n	801276c <_strtod_l+0xa48>
 8012820:	4b3d      	ldr	r3, [pc, #244]	; (8012918 <_strtod_l+0xbf4>)
 8012822:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012824:	403b      	ands	r3, r7
 8012826:	429a      	cmp	r2, r3
 8012828:	d1a0      	bne.n	801276c <_strtod_l+0xa48>
 801282a:	0028      	movs	r0, r5
 801282c:	0021      	movs	r1, r4
 801282e:	f7ed fedf 	bl	80005f0 <__aeabi_d2lz>
 8012832:	f7ed ff19 	bl	8000668 <__aeabi_l2d>
 8012836:	0002      	movs	r2, r0
 8012838:	000b      	movs	r3, r1
 801283a:	0028      	movs	r0, r5
 801283c:	0021      	movs	r1, r4
 801283e:	f7ef fd07 	bl	8002250 <__aeabi_dsub>
 8012842:	033b      	lsls	r3, r7, #12
 8012844:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012846:	0b1b      	lsrs	r3, r3, #12
 8012848:	4333      	orrs	r3, r6
 801284a:	4313      	orrs	r3, r2
 801284c:	0004      	movs	r4, r0
 801284e:	000d      	movs	r5, r1
 8012850:	4a38      	ldr	r2, [pc, #224]	; (8012934 <_strtod_l+0xc10>)
 8012852:	2b00      	cmp	r3, #0
 8012854:	d055      	beq.n	8012902 <_strtod_l+0xbde>
 8012856:	4b38      	ldr	r3, [pc, #224]	; (8012938 <_strtod_l+0xc14>)
 8012858:	f7ed fe04 	bl	8000464 <__aeabi_dcmplt>
 801285c:	2800      	cmp	r0, #0
 801285e:	d000      	beq.n	8012862 <_strtod_l+0xb3e>
 8012860:	e4d3      	b.n	801220a <_strtod_l+0x4e6>
 8012862:	0020      	movs	r0, r4
 8012864:	0029      	movs	r1, r5
 8012866:	4a35      	ldr	r2, [pc, #212]	; (801293c <_strtod_l+0xc18>)
 8012868:	4b30      	ldr	r3, [pc, #192]	; (801292c <_strtod_l+0xc08>)
 801286a:	f7ed fe0f 	bl	800048c <__aeabi_dcmpgt>
 801286e:	2800      	cmp	r0, #0
 8012870:	d100      	bne.n	8012874 <_strtod_l+0xb50>
 8012872:	e77b      	b.n	801276c <_strtod_l+0xa48>
 8012874:	e4c9      	b.n	801220a <_strtod_l+0x4e6>
 8012876:	9b08      	ldr	r3, [sp, #32]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d02b      	beq.n	80128d4 <_strtod_l+0xbb0>
 801287c:	23d4      	movs	r3, #212	; 0xd4
 801287e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012880:	04db      	lsls	r3, r3, #19
 8012882:	429a      	cmp	r2, r3
 8012884:	d826      	bhi.n	80128d4 <_strtod_l+0xbb0>
 8012886:	0028      	movs	r0, r5
 8012888:	0021      	movs	r1, r4
 801288a:	4a2d      	ldr	r2, [pc, #180]	; (8012940 <_strtod_l+0xc1c>)
 801288c:	4b2d      	ldr	r3, [pc, #180]	; (8012944 <_strtod_l+0xc20>)
 801288e:	f7ed fdf3 	bl	8000478 <__aeabi_dcmple>
 8012892:	2800      	cmp	r0, #0
 8012894:	d017      	beq.n	80128c6 <_strtod_l+0xba2>
 8012896:	0028      	movs	r0, r5
 8012898:	0021      	movs	r1, r4
 801289a:	f7ed fe8b 	bl	80005b4 <__aeabi_d2uiz>
 801289e:	2800      	cmp	r0, #0
 80128a0:	d100      	bne.n	80128a4 <_strtod_l+0xb80>
 80128a2:	3001      	adds	r0, #1
 80128a4:	f7f0 f8ea 	bl	8002a7c <__aeabi_ui2d>
 80128a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80128aa:	0005      	movs	r5, r0
 80128ac:	000b      	movs	r3, r1
 80128ae:	000c      	movs	r4, r1
 80128b0:	2a00      	cmp	r2, #0
 80128b2:	d122      	bne.n	80128fa <_strtod_l+0xbd6>
 80128b4:	2280      	movs	r2, #128	; 0x80
 80128b6:	0612      	lsls	r2, r2, #24
 80128b8:	188b      	adds	r3, r1, r2
 80128ba:	9018      	str	r0, [sp, #96]	; 0x60
 80128bc:	9319      	str	r3, [sp, #100]	; 0x64
 80128be:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80128c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80128c2:	9210      	str	r2, [sp, #64]	; 0x40
 80128c4:	9311      	str	r3, [sp, #68]	; 0x44
 80128c6:	22d6      	movs	r2, #214	; 0xd6
 80128c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80128ca:	04d2      	lsls	r2, r2, #19
 80128cc:	189b      	adds	r3, r3, r2
 80128ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80128d0:	1a9b      	subs	r3, r3, r2
 80128d2:	9311      	str	r3, [sp, #68]	; 0x44
 80128d4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80128d6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80128d8:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80128da:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80128dc:	f002 fa0c 	bl	8014cf8 <__ulp>
 80128e0:	0002      	movs	r2, r0
 80128e2:	000b      	movs	r3, r1
 80128e4:	0030      	movs	r0, r6
 80128e6:	0039      	movs	r1, r7
 80128e8:	f7ef fa46 	bl	8001d78 <__aeabi_dmul>
 80128ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80128ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80128f0:	f7ee fb04 	bl	8000efc <__aeabi_dadd>
 80128f4:	0006      	movs	r6, r0
 80128f6:	000f      	movs	r7, r1
 80128f8:	e78f      	b.n	801281a <_strtod_l+0xaf6>
 80128fa:	0002      	movs	r2, r0
 80128fc:	9218      	str	r2, [sp, #96]	; 0x60
 80128fe:	9319      	str	r3, [sp, #100]	; 0x64
 8012900:	e7dd      	b.n	80128be <_strtod_l+0xb9a>
 8012902:	4b11      	ldr	r3, [pc, #68]	; (8012948 <_strtod_l+0xc24>)
 8012904:	f7ed fdae 	bl	8000464 <__aeabi_dcmplt>
 8012908:	e7b1      	b.n	801286e <_strtod_l+0xb4a>
 801290a:	46c0      	nop			; (mov r8, r8)
 801290c:	fff00000 	.word	0xfff00000
 8012910:	000fffff 	.word	0x000fffff
 8012914:	3ff00000 	.word	0x3ff00000
 8012918:	7ff00000 	.word	0x7ff00000
 801291c:	7fe00000 	.word	0x7fe00000
 8012920:	fcb00000 	.word	0xfcb00000
 8012924:	7c9fffff 	.word	0x7c9fffff
 8012928:	7fefffff 	.word	0x7fefffff
 801292c:	3fe00000 	.word	0x3fe00000
 8012930:	bff00000 	.word	0xbff00000
 8012934:	94a03595 	.word	0x94a03595
 8012938:	3fdfffff 	.word	0x3fdfffff
 801293c:	35afe535 	.word	0x35afe535
 8012940:	ffc00000 	.word	0xffc00000
 8012944:	41dfffff 	.word	0x41dfffff
 8012948:	3fcfffff 	.word	0x3fcfffff

0801294c <_strtod_r>:
 801294c:	b510      	push	{r4, lr}
 801294e:	4b02      	ldr	r3, [pc, #8]	; (8012958 <_strtod_r+0xc>)
 8012950:	f7ff f9e8 	bl	8011d24 <_strtod_l>
 8012954:	bd10      	pop	{r4, pc}
 8012956:	46c0      	nop			; (mov r8, r8)
 8012958:	200001e8 	.word	0x200001e8

0801295c <_strtol_l.constprop.0>:
 801295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801295e:	b087      	sub	sp, #28
 8012960:	001e      	movs	r6, r3
 8012962:	9005      	str	r0, [sp, #20]
 8012964:	9101      	str	r1, [sp, #4]
 8012966:	9202      	str	r2, [sp, #8]
 8012968:	2b01      	cmp	r3, #1
 801296a:	d045      	beq.n	80129f8 <_strtol_l.constprop.0+0x9c>
 801296c:	000b      	movs	r3, r1
 801296e:	2e24      	cmp	r6, #36	; 0x24
 8012970:	d842      	bhi.n	80129f8 <_strtol_l.constprop.0+0x9c>
 8012972:	4a3f      	ldr	r2, [pc, #252]	; (8012a70 <_strtol_l.constprop.0+0x114>)
 8012974:	2108      	movs	r1, #8
 8012976:	4694      	mov	ip, r2
 8012978:	001a      	movs	r2, r3
 801297a:	4660      	mov	r0, ip
 801297c:	7814      	ldrb	r4, [r2, #0]
 801297e:	3301      	adds	r3, #1
 8012980:	5d00      	ldrb	r0, [r0, r4]
 8012982:	001d      	movs	r5, r3
 8012984:	0007      	movs	r7, r0
 8012986:	400f      	ands	r7, r1
 8012988:	4208      	tst	r0, r1
 801298a:	d1f5      	bne.n	8012978 <_strtol_l.constprop.0+0x1c>
 801298c:	2c2d      	cmp	r4, #45	; 0x2d
 801298e:	d13a      	bne.n	8012a06 <_strtol_l.constprop.0+0xaa>
 8012990:	2701      	movs	r7, #1
 8012992:	781c      	ldrb	r4, [r3, #0]
 8012994:	1c95      	adds	r5, r2, #2
 8012996:	2e00      	cmp	r6, #0
 8012998:	d065      	beq.n	8012a66 <_strtol_l.constprop.0+0x10a>
 801299a:	2e10      	cmp	r6, #16
 801299c:	d109      	bne.n	80129b2 <_strtol_l.constprop.0+0x56>
 801299e:	2c30      	cmp	r4, #48	; 0x30
 80129a0:	d107      	bne.n	80129b2 <_strtol_l.constprop.0+0x56>
 80129a2:	2220      	movs	r2, #32
 80129a4:	782b      	ldrb	r3, [r5, #0]
 80129a6:	4393      	bics	r3, r2
 80129a8:	2b58      	cmp	r3, #88	; 0x58
 80129aa:	d157      	bne.n	8012a5c <_strtol_l.constprop.0+0x100>
 80129ac:	2610      	movs	r6, #16
 80129ae:	786c      	ldrb	r4, [r5, #1]
 80129b0:	3502      	adds	r5, #2
 80129b2:	4b30      	ldr	r3, [pc, #192]	; (8012a74 <_strtol_l.constprop.0+0x118>)
 80129b4:	0031      	movs	r1, r6
 80129b6:	18fb      	adds	r3, r7, r3
 80129b8:	0018      	movs	r0, r3
 80129ba:	9303      	str	r3, [sp, #12]
 80129bc:	f7ed fc4c 	bl	8000258 <__aeabi_uidivmod>
 80129c0:	2300      	movs	r3, #0
 80129c2:	2201      	movs	r2, #1
 80129c4:	4684      	mov	ip, r0
 80129c6:	0018      	movs	r0, r3
 80129c8:	9104      	str	r1, [sp, #16]
 80129ca:	4252      	negs	r2, r2
 80129cc:	0021      	movs	r1, r4
 80129ce:	3930      	subs	r1, #48	; 0x30
 80129d0:	2909      	cmp	r1, #9
 80129d2:	d81d      	bhi.n	8012a10 <_strtol_l.constprop.0+0xb4>
 80129d4:	000c      	movs	r4, r1
 80129d6:	42a6      	cmp	r6, r4
 80129d8:	dd28      	ble.n	8012a2c <_strtol_l.constprop.0+0xd0>
 80129da:	2b00      	cmp	r3, #0
 80129dc:	db24      	blt.n	8012a28 <_strtol_l.constprop.0+0xcc>
 80129de:	0013      	movs	r3, r2
 80129e0:	4584      	cmp	ip, r0
 80129e2:	d306      	bcc.n	80129f2 <_strtol_l.constprop.0+0x96>
 80129e4:	d102      	bne.n	80129ec <_strtol_l.constprop.0+0x90>
 80129e6:	9904      	ldr	r1, [sp, #16]
 80129e8:	42a1      	cmp	r1, r4
 80129ea:	db02      	blt.n	80129f2 <_strtol_l.constprop.0+0x96>
 80129ec:	2301      	movs	r3, #1
 80129ee:	4370      	muls	r0, r6
 80129f0:	1820      	adds	r0, r4, r0
 80129f2:	782c      	ldrb	r4, [r5, #0]
 80129f4:	3501      	adds	r5, #1
 80129f6:	e7e9      	b.n	80129cc <_strtol_l.constprop.0+0x70>
 80129f8:	f7fe f9e6 	bl	8010dc8 <__errno>
 80129fc:	2316      	movs	r3, #22
 80129fe:	6003      	str	r3, [r0, #0]
 8012a00:	2000      	movs	r0, #0
 8012a02:	b007      	add	sp, #28
 8012a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a06:	2c2b      	cmp	r4, #43	; 0x2b
 8012a08:	d1c5      	bne.n	8012996 <_strtol_l.constprop.0+0x3a>
 8012a0a:	781c      	ldrb	r4, [r3, #0]
 8012a0c:	1c95      	adds	r5, r2, #2
 8012a0e:	e7c2      	b.n	8012996 <_strtol_l.constprop.0+0x3a>
 8012a10:	0021      	movs	r1, r4
 8012a12:	3941      	subs	r1, #65	; 0x41
 8012a14:	2919      	cmp	r1, #25
 8012a16:	d801      	bhi.n	8012a1c <_strtol_l.constprop.0+0xc0>
 8012a18:	3c37      	subs	r4, #55	; 0x37
 8012a1a:	e7dc      	b.n	80129d6 <_strtol_l.constprop.0+0x7a>
 8012a1c:	0021      	movs	r1, r4
 8012a1e:	3961      	subs	r1, #97	; 0x61
 8012a20:	2919      	cmp	r1, #25
 8012a22:	d803      	bhi.n	8012a2c <_strtol_l.constprop.0+0xd0>
 8012a24:	3c57      	subs	r4, #87	; 0x57
 8012a26:	e7d6      	b.n	80129d6 <_strtol_l.constprop.0+0x7a>
 8012a28:	0013      	movs	r3, r2
 8012a2a:	e7e2      	b.n	80129f2 <_strtol_l.constprop.0+0x96>
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	da09      	bge.n	8012a44 <_strtol_l.constprop.0+0xe8>
 8012a30:	2322      	movs	r3, #34	; 0x22
 8012a32:	9a05      	ldr	r2, [sp, #20]
 8012a34:	9803      	ldr	r0, [sp, #12]
 8012a36:	6013      	str	r3, [r2, #0]
 8012a38:	9b02      	ldr	r3, [sp, #8]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d0e1      	beq.n	8012a02 <_strtol_l.constprop.0+0xa6>
 8012a3e:	1e6b      	subs	r3, r5, #1
 8012a40:	9301      	str	r3, [sp, #4]
 8012a42:	e007      	b.n	8012a54 <_strtol_l.constprop.0+0xf8>
 8012a44:	2f00      	cmp	r7, #0
 8012a46:	d000      	beq.n	8012a4a <_strtol_l.constprop.0+0xee>
 8012a48:	4240      	negs	r0, r0
 8012a4a:	9a02      	ldr	r2, [sp, #8]
 8012a4c:	2a00      	cmp	r2, #0
 8012a4e:	d0d8      	beq.n	8012a02 <_strtol_l.constprop.0+0xa6>
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d1f4      	bne.n	8012a3e <_strtol_l.constprop.0+0xe2>
 8012a54:	9b02      	ldr	r3, [sp, #8]
 8012a56:	9a01      	ldr	r2, [sp, #4]
 8012a58:	601a      	str	r2, [r3, #0]
 8012a5a:	e7d2      	b.n	8012a02 <_strtol_l.constprop.0+0xa6>
 8012a5c:	2430      	movs	r4, #48	; 0x30
 8012a5e:	2e00      	cmp	r6, #0
 8012a60:	d1a7      	bne.n	80129b2 <_strtol_l.constprop.0+0x56>
 8012a62:	3608      	adds	r6, #8
 8012a64:	e7a5      	b.n	80129b2 <_strtol_l.constprop.0+0x56>
 8012a66:	2c30      	cmp	r4, #48	; 0x30
 8012a68:	d09b      	beq.n	80129a2 <_strtol_l.constprop.0+0x46>
 8012a6a:	260a      	movs	r6, #10
 8012a6c:	e7a1      	b.n	80129b2 <_strtol_l.constprop.0+0x56>
 8012a6e:	46c0      	nop			; (mov r8, r8)
 8012a70:	0801789d 	.word	0x0801789d
 8012a74:	7fffffff 	.word	0x7fffffff

08012a78 <_strtol_r>:
 8012a78:	b510      	push	{r4, lr}
 8012a7a:	f7ff ff6f 	bl	801295c <_strtol_l.constprop.0>
 8012a7e:	bd10      	pop	{r4, pc}

08012a80 <_vsniprintf_r>:
 8012a80:	b530      	push	{r4, r5, lr}
 8012a82:	0014      	movs	r4, r2
 8012a84:	0005      	movs	r5, r0
 8012a86:	001a      	movs	r2, r3
 8012a88:	b09b      	sub	sp, #108	; 0x6c
 8012a8a:	2c00      	cmp	r4, #0
 8012a8c:	da05      	bge.n	8012a9a <_vsniprintf_r+0x1a>
 8012a8e:	238b      	movs	r3, #139	; 0x8b
 8012a90:	6003      	str	r3, [r0, #0]
 8012a92:	2001      	movs	r0, #1
 8012a94:	4240      	negs	r0, r0
 8012a96:	b01b      	add	sp, #108	; 0x6c
 8012a98:	bd30      	pop	{r4, r5, pc}
 8012a9a:	2382      	movs	r3, #130	; 0x82
 8012a9c:	4668      	mov	r0, sp
 8012a9e:	009b      	lsls	r3, r3, #2
 8012aa0:	8183      	strh	r3, [r0, #12]
 8012aa2:	2300      	movs	r3, #0
 8012aa4:	9100      	str	r1, [sp, #0]
 8012aa6:	9104      	str	r1, [sp, #16]
 8012aa8:	429c      	cmp	r4, r3
 8012aaa:	d000      	beq.n	8012aae <_vsniprintf_r+0x2e>
 8012aac:	1e63      	subs	r3, r4, #1
 8012aae:	9302      	str	r3, [sp, #8]
 8012ab0:	9305      	str	r3, [sp, #20]
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	4669      	mov	r1, sp
 8012ab6:	425b      	negs	r3, r3
 8012ab8:	81cb      	strh	r3, [r1, #14]
 8012aba:	0028      	movs	r0, r5
 8012abc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012abe:	f002 fbd1 	bl	8015264 <_svfiprintf_r>
 8012ac2:	1c43      	adds	r3, r0, #1
 8012ac4:	da01      	bge.n	8012aca <_vsniprintf_r+0x4a>
 8012ac6:	238b      	movs	r3, #139	; 0x8b
 8012ac8:	602b      	str	r3, [r5, #0]
 8012aca:	2c00      	cmp	r4, #0
 8012acc:	d0e3      	beq.n	8012a96 <_vsniprintf_r+0x16>
 8012ace:	2300      	movs	r3, #0
 8012ad0:	9a00      	ldr	r2, [sp, #0]
 8012ad2:	7013      	strb	r3, [r2, #0]
 8012ad4:	e7df      	b.n	8012a96 <_vsniprintf_r+0x16>
	...

08012ad8 <vsniprintf>:
 8012ad8:	b507      	push	{r0, r1, r2, lr}
 8012ada:	9300      	str	r3, [sp, #0]
 8012adc:	0013      	movs	r3, r2
 8012ade:	000a      	movs	r2, r1
 8012ae0:	0001      	movs	r1, r0
 8012ae2:	4802      	ldr	r0, [pc, #8]	; (8012aec <vsniprintf+0x14>)
 8012ae4:	6800      	ldr	r0, [r0, #0]
 8012ae6:	f7ff ffcb 	bl	8012a80 <_vsniprintf_r>
 8012aea:	bd0e      	pop	{r1, r2, r3, pc}
 8012aec:	20000180 	.word	0x20000180

08012af0 <__swbuf_r>:
 8012af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012af2:	0005      	movs	r5, r0
 8012af4:	000e      	movs	r6, r1
 8012af6:	0014      	movs	r4, r2
 8012af8:	2800      	cmp	r0, #0
 8012afa:	d004      	beq.n	8012b06 <__swbuf_r+0x16>
 8012afc:	6983      	ldr	r3, [r0, #24]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d101      	bne.n	8012b06 <__swbuf_r+0x16>
 8012b02:	f001 f8b5 	bl	8013c70 <__sinit>
 8012b06:	4b22      	ldr	r3, [pc, #136]	; (8012b90 <__swbuf_r+0xa0>)
 8012b08:	429c      	cmp	r4, r3
 8012b0a:	d12e      	bne.n	8012b6a <__swbuf_r+0x7a>
 8012b0c:	686c      	ldr	r4, [r5, #4]
 8012b0e:	69a3      	ldr	r3, [r4, #24]
 8012b10:	60a3      	str	r3, [r4, #8]
 8012b12:	89a3      	ldrh	r3, [r4, #12]
 8012b14:	071b      	lsls	r3, r3, #28
 8012b16:	d532      	bpl.n	8012b7e <__swbuf_r+0x8e>
 8012b18:	6923      	ldr	r3, [r4, #16]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d02f      	beq.n	8012b7e <__swbuf_r+0x8e>
 8012b1e:	6823      	ldr	r3, [r4, #0]
 8012b20:	6922      	ldr	r2, [r4, #16]
 8012b22:	b2f7      	uxtb	r7, r6
 8012b24:	1a98      	subs	r0, r3, r2
 8012b26:	6963      	ldr	r3, [r4, #20]
 8012b28:	b2f6      	uxtb	r6, r6
 8012b2a:	4283      	cmp	r3, r0
 8012b2c:	dc05      	bgt.n	8012b3a <__swbuf_r+0x4a>
 8012b2e:	0021      	movs	r1, r4
 8012b30:	0028      	movs	r0, r5
 8012b32:	f000 fffb 	bl	8013b2c <_fflush_r>
 8012b36:	2800      	cmp	r0, #0
 8012b38:	d127      	bne.n	8012b8a <__swbuf_r+0x9a>
 8012b3a:	68a3      	ldr	r3, [r4, #8]
 8012b3c:	3001      	adds	r0, #1
 8012b3e:	3b01      	subs	r3, #1
 8012b40:	60a3      	str	r3, [r4, #8]
 8012b42:	6823      	ldr	r3, [r4, #0]
 8012b44:	1c5a      	adds	r2, r3, #1
 8012b46:	6022      	str	r2, [r4, #0]
 8012b48:	701f      	strb	r7, [r3, #0]
 8012b4a:	6963      	ldr	r3, [r4, #20]
 8012b4c:	4283      	cmp	r3, r0
 8012b4e:	d004      	beq.n	8012b5a <__swbuf_r+0x6a>
 8012b50:	89a3      	ldrh	r3, [r4, #12]
 8012b52:	07db      	lsls	r3, r3, #31
 8012b54:	d507      	bpl.n	8012b66 <__swbuf_r+0x76>
 8012b56:	2e0a      	cmp	r6, #10
 8012b58:	d105      	bne.n	8012b66 <__swbuf_r+0x76>
 8012b5a:	0021      	movs	r1, r4
 8012b5c:	0028      	movs	r0, r5
 8012b5e:	f000 ffe5 	bl	8013b2c <_fflush_r>
 8012b62:	2800      	cmp	r0, #0
 8012b64:	d111      	bne.n	8012b8a <__swbuf_r+0x9a>
 8012b66:	0030      	movs	r0, r6
 8012b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b6a:	4b0a      	ldr	r3, [pc, #40]	; (8012b94 <__swbuf_r+0xa4>)
 8012b6c:	429c      	cmp	r4, r3
 8012b6e:	d101      	bne.n	8012b74 <__swbuf_r+0x84>
 8012b70:	68ac      	ldr	r4, [r5, #8]
 8012b72:	e7cc      	b.n	8012b0e <__swbuf_r+0x1e>
 8012b74:	4b08      	ldr	r3, [pc, #32]	; (8012b98 <__swbuf_r+0xa8>)
 8012b76:	429c      	cmp	r4, r3
 8012b78:	d1c9      	bne.n	8012b0e <__swbuf_r+0x1e>
 8012b7a:	68ec      	ldr	r4, [r5, #12]
 8012b7c:	e7c7      	b.n	8012b0e <__swbuf_r+0x1e>
 8012b7e:	0021      	movs	r1, r4
 8012b80:	0028      	movs	r0, r5
 8012b82:	f000 f80b 	bl	8012b9c <__swsetup_r>
 8012b86:	2800      	cmp	r0, #0
 8012b88:	d0c9      	beq.n	8012b1e <__swbuf_r+0x2e>
 8012b8a:	2601      	movs	r6, #1
 8012b8c:	4276      	negs	r6, r6
 8012b8e:	e7ea      	b.n	8012b66 <__swbuf_r+0x76>
 8012b90:	08017a50 	.word	0x08017a50
 8012b94:	08017a70 	.word	0x08017a70
 8012b98:	08017a30 	.word	0x08017a30

08012b9c <__swsetup_r>:
 8012b9c:	4b37      	ldr	r3, [pc, #220]	; (8012c7c <__swsetup_r+0xe0>)
 8012b9e:	b570      	push	{r4, r5, r6, lr}
 8012ba0:	681d      	ldr	r5, [r3, #0]
 8012ba2:	0006      	movs	r6, r0
 8012ba4:	000c      	movs	r4, r1
 8012ba6:	2d00      	cmp	r5, #0
 8012ba8:	d005      	beq.n	8012bb6 <__swsetup_r+0x1a>
 8012baa:	69ab      	ldr	r3, [r5, #24]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d102      	bne.n	8012bb6 <__swsetup_r+0x1a>
 8012bb0:	0028      	movs	r0, r5
 8012bb2:	f001 f85d 	bl	8013c70 <__sinit>
 8012bb6:	4b32      	ldr	r3, [pc, #200]	; (8012c80 <__swsetup_r+0xe4>)
 8012bb8:	429c      	cmp	r4, r3
 8012bba:	d10f      	bne.n	8012bdc <__swsetup_r+0x40>
 8012bbc:	686c      	ldr	r4, [r5, #4]
 8012bbe:	230c      	movs	r3, #12
 8012bc0:	5ee2      	ldrsh	r2, [r4, r3]
 8012bc2:	b293      	uxth	r3, r2
 8012bc4:	0711      	lsls	r1, r2, #28
 8012bc6:	d42d      	bmi.n	8012c24 <__swsetup_r+0x88>
 8012bc8:	06d9      	lsls	r1, r3, #27
 8012bca:	d411      	bmi.n	8012bf0 <__swsetup_r+0x54>
 8012bcc:	2309      	movs	r3, #9
 8012bce:	2001      	movs	r0, #1
 8012bd0:	6033      	str	r3, [r6, #0]
 8012bd2:	3337      	adds	r3, #55	; 0x37
 8012bd4:	4313      	orrs	r3, r2
 8012bd6:	81a3      	strh	r3, [r4, #12]
 8012bd8:	4240      	negs	r0, r0
 8012bda:	bd70      	pop	{r4, r5, r6, pc}
 8012bdc:	4b29      	ldr	r3, [pc, #164]	; (8012c84 <__swsetup_r+0xe8>)
 8012bde:	429c      	cmp	r4, r3
 8012be0:	d101      	bne.n	8012be6 <__swsetup_r+0x4a>
 8012be2:	68ac      	ldr	r4, [r5, #8]
 8012be4:	e7eb      	b.n	8012bbe <__swsetup_r+0x22>
 8012be6:	4b28      	ldr	r3, [pc, #160]	; (8012c88 <__swsetup_r+0xec>)
 8012be8:	429c      	cmp	r4, r3
 8012bea:	d1e8      	bne.n	8012bbe <__swsetup_r+0x22>
 8012bec:	68ec      	ldr	r4, [r5, #12]
 8012bee:	e7e6      	b.n	8012bbe <__swsetup_r+0x22>
 8012bf0:	075b      	lsls	r3, r3, #29
 8012bf2:	d513      	bpl.n	8012c1c <__swsetup_r+0x80>
 8012bf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012bf6:	2900      	cmp	r1, #0
 8012bf8:	d008      	beq.n	8012c0c <__swsetup_r+0x70>
 8012bfa:	0023      	movs	r3, r4
 8012bfc:	3344      	adds	r3, #68	; 0x44
 8012bfe:	4299      	cmp	r1, r3
 8012c00:	d002      	beq.n	8012c08 <__swsetup_r+0x6c>
 8012c02:	0030      	movs	r0, r6
 8012c04:	f002 f9ea 	bl	8014fdc <_free_r>
 8012c08:	2300      	movs	r3, #0
 8012c0a:	6363      	str	r3, [r4, #52]	; 0x34
 8012c0c:	2224      	movs	r2, #36	; 0x24
 8012c0e:	89a3      	ldrh	r3, [r4, #12]
 8012c10:	4393      	bics	r3, r2
 8012c12:	81a3      	strh	r3, [r4, #12]
 8012c14:	2300      	movs	r3, #0
 8012c16:	6063      	str	r3, [r4, #4]
 8012c18:	6923      	ldr	r3, [r4, #16]
 8012c1a:	6023      	str	r3, [r4, #0]
 8012c1c:	2308      	movs	r3, #8
 8012c1e:	89a2      	ldrh	r2, [r4, #12]
 8012c20:	4313      	orrs	r3, r2
 8012c22:	81a3      	strh	r3, [r4, #12]
 8012c24:	6923      	ldr	r3, [r4, #16]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d10b      	bne.n	8012c42 <__swsetup_r+0xa6>
 8012c2a:	21a0      	movs	r1, #160	; 0xa0
 8012c2c:	2280      	movs	r2, #128	; 0x80
 8012c2e:	89a3      	ldrh	r3, [r4, #12]
 8012c30:	0089      	lsls	r1, r1, #2
 8012c32:	0092      	lsls	r2, r2, #2
 8012c34:	400b      	ands	r3, r1
 8012c36:	4293      	cmp	r3, r2
 8012c38:	d003      	beq.n	8012c42 <__swsetup_r+0xa6>
 8012c3a:	0021      	movs	r1, r4
 8012c3c:	0030      	movs	r0, r6
 8012c3e:	f001 fc6b 	bl	8014518 <__smakebuf_r>
 8012c42:	220c      	movs	r2, #12
 8012c44:	5ea3      	ldrsh	r3, [r4, r2]
 8012c46:	2001      	movs	r0, #1
 8012c48:	001a      	movs	r2, r3
 8012c4a:	b299      	uxth	r1, r3
 8012c4c:	4002      	ands	r2, r0
 8012c4e:	4203      	tst	r3, r0
 8012c50:	d00f      	beq.n	8012c72 <__swsetup_r+0xd6>
 8012c52:	2200      	movs	r2, #0
 8012c54:	60a2      	str	r2, [r4, #8]
 8012c56:	6962      	ldr	r2, [r4, #20]
 8012c58:	4252      	negs	r2, r2
 8012c5a:	61a2      	str	r2, [r4, #24]
 8012c5c:	2000      	movs	r0, #0
 8012c5e:	6922      	ldr	r2, [r4, #16]
 8012c60:	4282      	cmp	r2, r0
 8012c62:	d1ba      	bne.n	8012bda <__swsetup_r+0x3e>
 8012c64:	060a      	lsls	r2, r1, #24
 8012c66:	d5b8      	bpl.n	8012bda <__swsetup_r+0x3e>
 8012c68:	2240      	movs	r2, #64	; 0x40
 8012c6a:	4313      	orrs	r3, r2
 8012c6c:	81a3      	strh	r3, [r4, #12]
 8012c6e:	3801      	subs	r0, #1
 8012c70:	e7b3      	b.n	8012bda <__swsetup_r+0x3e>
 8012c72:	0788      	lsls	r0, r1, #30
 8012c74:	d400      	bmi.n	8012c78 <__swsetup_r+0xdc>
 8012c76:	6962      	ldr	r2, [r4, #20]
 8012c78:	60a2      	str	r2, [r4, #8]
 8012c7a:	e7ef      	b.n	8012c5c <__swsetup_r+0xc0>
 8012c7c:	20000180 	.word	0x20000180
 8012c80:	08017a50 	.word	0x08017a50
 8012c84:	08017a70 	.word	0x08017a70
 8012c88:	08017a30 	.word	0x08017a30

08012c8c <__assert_func>:
 8012c8c:	b530      	push	{r4, r5, lr}
 8012c8e:	0014      	movs	r4, r2
 8012c90:	001a      	movs	r2, r3
 8012c92:	4b09      	ldr	r3, [pc, #36]	; (8012cb8 <__assert_func+0x2c>)
 8012c94:	0005      	movs	r5, r0
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	b085      	sub	sp, #20
 8012c9a:	68d8      	ldr	r0, [r3, #12]
 8012c9c:	4b07      	ldr	r3, [pc, #28]	; (8012cbc <__assert_func+0x30>)
 8012c9e:	2c00      	cmp	r4, #0
 8012ca0:	d101      	bne.n	8012ca6 <__assert_func+0x1a>
 8012ca2:	4b07      	ldr	r3, [pc, #28]	; (8012cc0 <__assert_func+0x34>)
 8012ca4:	001c      	movs	r4, r3
 8012ca6:	9301      	str	r3, [sp, #4]
 8012ca8:	9100      	str	r1, [sp, #0]
 8012caa:	002b      	movs	r3, r5
 8012cac:	4905      	ldr	r1, [pc, #20]	; (8012cc4 <__assert_func+0x38>)
 8012cae:	9402      	str	r4, [sp, #8]
 8012cb0:	f001 f85e 	bl	8013d70 <fiprintf>
 8012cb4:	f002 fdd0 	bl	8015858 <abort>
 8012cb8:	20000180 	.word	0x20000180
 8012cbc:	08017860 	.word	0x08017860
 8012cc0:	0801789b 	.word	0x0801789b
 8012cc4:	0801786d 	.word	0x0801786d

08012cc8 <quorem>:
 8012cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cca:	0006      	movs	r6, r0
 8012ccc:	690b      	ldr	r3, [r1, #16]
 8012cce:	6932      	ldr	r2, [r6, #16]
 8012cd0:	b087      	sub	sp, #28
 8012cd2:	2000      	movs	r0, #0
 8012cd4:	9103      	str	r1, [sp, #12]
 8012cd6:	429a      	cmp	r2, r3
 8012cd8:	db65      	blt.n	8012da6 <quorem+0xde>
 8012cda:	3b01      	subs	r3, #1
 8012cdc:	009c      	lsls	r4, r3, #2
 8012cde:	9300      	str	r3, [sp, #0]
 8012ce0:	000b      	movs	r3, r1
 8012ce2:	3314      	adds	r3, #20
 8012ce4:	9305      	str	r3, [sp, #20]
 8012ce6:	191b      	adds	r3, r3, r4
 8012ce8:	9304      	str	r3, [sp, #16]
 8012cea:	0033      	movs	r3, r6
 8012cec:	3314      	adds	r3, #20
 8012cee:	9302      	str	r3, [sp, #8]
 8012cf0:	191c      	adds	r4, r3, r4
 8012cf2:	9b04      	ldr	r3, [sp, #16]
 8012cf4:	6827      	ldr	r7, [r4, #0]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	0038      	movs	r0, r7
 8012cfa:	1c5d      	adds	r5, r3, #1
 8012cfc:	0029      	movs	r1, r5
 8012cfe:	9301      	str	r3, [sp, #4]
 8012d00:	f7ed fa24 	bl	800014c <__udivsi3>
 8012d04:	9001      	str	r0, [sp, #4]
 8012d06:	42af      	cmp	r7, r5
 8012d08:	d324      	bcc.n	8012d54 <quorem+0x8c>
 8012d0a:	2500      	movs	r5, #0
 8012d0c:	46ac      	mov	ip, r5
 8012d0e:	9802      	ldr	r0, [sp, #8]
 8012d10:	9f05      	ldr	r7, [sp, #20]
 8012d12:	cf08      	ldmia	r7!, {r3}
 8012d14:	9a01      	ldr	r2, [sp, #4]
 8012d16:	b299      	uxth	r1, r3
 8012d18:	4351      	muls	r1, r2
 8012d1a:	0c1b      	lsrs	r3, r3, #16
 8012d1c:	4353      	muls	r3, r2
 8012d1e:	1949      	adds	r1, r1, r5
 8012d20:	0c0a      	lsrs	r2, r1, #16
 8012d22:	189b      	adds	r3, r3, r2
 8012d24:	6802      	ldr	r2, [r0, #0]
 8012d26:	b289      	uxth	r1, r1
 8012d28:	b292      	uxth	r2, r2
 8012d2a:	4462      	add	r2, ip
 8012d2c:	1a52      	subs	r2, r2, r1
 8012d2e:	6801      	ldr	r1, [r0, #0]
 8012d30:	0c1d      	lsrs	r5, r3, #16
 8012d32:	0c09      	lsrs	r1, r1, #16
 8012d34:	b29b      	uxth	r3, r3
 8012d36:	1acb      	subs	r3, r1, r3
 8012d38:	1411      	asrs	r1, r2, #16
 8012d3a:	185b      	adds	r3, r3, r1
 8012d3c:	1419      	asrs	r1, r3, #16
 8012d3e:	b292      	uxth	r2, r2
 8012d40:	041b      	lsls	r3, r3, #16
 8012d42:	431a      	orrs	r2, r3
 8012d44:	9b04      	ldr	r3, [sp, #16]
 8012d46:	468c      	mov	ip, r1
 8012d48:	c004      	stmia	r0!, {r2}
 8012d4a:	42bb      	cmp	r3, r7
 8012d4c:	d2e1      	bcs.n	8012d12 <quorem+0x4a>
 8012d4e:	6823      	ldr	r3, [r4, #0]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d030      	beq.n	8012db6 <quorem+0xee>
 8012d54:	0030      	movs	r0, r6
 8012d56:	9903      	ldr	r1, [sp, #12]
 8012d58:	f001 ff1a 	bl	8014b90 <__mcmp>
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	db21      	blt.n	8012da4 <quorem+0xdc>
 8012d60:	0030      	movs	r0, r6
 8012d62:	2400      	movs	r4, #0
 8012d64:	9b01      	ldr	r3, [sp, #4]
 8012d66:	9903      	ldr	r1, [sp, #12]
 8012d68:	3301      	adds	r3, #1
 8012d6a:	9301      	str	r3, [sp, #4]
 8012d6c:	3014      	adds	r0, #20
 8012d6e:	3114      	adds	r1, #20
 8012d70:	6803      	ldr	r3, [r0, #0]
 8012d72:	c920      	ldmia	r1!, {r5}
 8012d74:	b29a      	uxth	r2, r3
 8012d76:	1914      	adds	r4, r2, r4
 8012d78:	b2aa      	uxth	r2, r5
 8012d7a:	1aa2      	subs	r2, r4, r2
 8012d7c:	0c1b      	lsrs	r3, r3, #16
 8012d7e:	0c2d      	lsrs	r5, r5, #16
 8012d80:	1414      	asrs	r4, r2, #16
 8012d82:	1b5b      	subs	r3, r3, r5
 8012d84:	191b      	adds	r3, r3, r4
 8012d86:	141c      	asrs	r4, r3, #16
 8012d88:	b292      	uxth	r2, r2
 8012d8a:	041b      	lsls	r3, r3, #16
 8012d8c:	4313      	orrs	r3, r2
 8012d8e:	c008      	stmia	r0!, {r3}
 8012d90:	9b04      	ldr	r3, [sp, #16]
 8012d92:	428b      	cmp	r3, r1
 8012d94:	d2ec      	bcs.n	8012d70 <quorem+0xa8>
 8012d96:	9b00      	ldr	r3, [sp, #0]
 8012d98:	9a02      	ldr	r2, [sp, #8]
 8012d9a:	009b      	lsls	r3, r3, #2
 8012d9c:	18d3      	adds	r3, r2, r3
 8012d9e:	681a      	ldr	r2, [r3, #0]
 8012da0:	2a00      	cmp	r2, #0
 8012da2:	d015      	beq.n	8012dd0 <quorem+0x108>
 8012da4:	9801      	ldr	r0, [sp, #4]
 8012da6:	b007      	add	sp, #28
 8012da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012daa:	6823      	ldr	r3, [r4, #0]
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d106      	bne.n	8012dbe <quorem+0xf6>
 8012db0:	9b00      	ldr	r3, [sp, #0]
 8012db2:	3b01      	subs	r3, #1
 8012db4:	9300      	str	r3, [sp, #0]
 8012db6:	9b02      	ldr	r3, [sp, #8]
 8012db8:	3c04      	subs	r4, #4
 8012dba:	42a3      	cmp	r3, r4
 8012dbc:	d3f5      	bcc.n	8012daa <quorem+0xe2>
 8012dbe:	9b00      	ldr	r3, [sp, #0]
 8012dc0:	6133      	str	r3, [r6, #16]
 8012dc2:	e7c7      	b.n	8012d54 <quorem+0x8c>
 8012dc4:	681a      	ldr	r2, [r3, #0]
 8012dc6:	2a00      	cmp	r2, #0
 8012dc8:	d106      	bne.n	8012dd8 <quorem+0x110>
 8012dca:	9a00      	ldr	r2, [sp, #0]
 8012dcc:	3a01      	subs	r2, #1
 8012dce:	9200      	str	r2, [sp, #0]
 8012dd0:	9a02      	ldr	r2, [sp, #8]
 8012dd2:	3b04      	subs	r3, #4
 8012dd4:	429a      	cmp	r2, r3
 8012dd6:	d3f5      	bcc.n	8012dc4 <quorem+0xfc>
 8012dd8:	9b00      	ldr	r3, [sp, #0]
 8012dda:	6133      	str	r3, [r6, #16]
 8012ddc:	e7e2      	b.n	8012da4 <quorem+0xdc>
	...

08012de0 <_dtoa_r>:
 8012de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012de2:	b09d      	sub	sp, #116	; 0x74
 8012de4:	9202      	str	r2, [sp, #8]
 8012de6:	9303      	str	r3, [sp, #12]
 8012de8:	9b02      	ldr	r3, [sp, #8]
 8012dea:	9c03      	ldr	r4, [sp, #12]
 8012dec:	9308      	str	r3, [sp, #32]
 8012dee:	9409      	str	r4, [sp, #36]	; 0x24
 8012df0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012df2:	0007      	movs	r7, r0
 8012df4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8012df6:	2c00      	cmp	r4, #0
 8012df8:	d10e      	bne.n	8012e18 <_dtoa_r+0x38>
 8012dfa:	2010      	movs	r0, #16
 8012dfc:	f001 fbd0 	bl	80145a0 <malloc>
 8012e00:	1e02      	subs	r2, r0, #0
 8012e02:	6278      	str	r0, [r7, #36]	; 0x24
 8012e04:	d104      	bne.n	8012e10 <_dtoa_r+0x30>
 8012e06:	21ea      	movs	r1, #234	; 0xea
 8012e08:	4bc7      	ldr	r3, [pc, #796]	; (8013128 <_dtoa_r+0x348>)
 8012e0a:	48c8      	ldr	r0, [pc, #800]	; (801312c <_dtoa_r+0x34c>)
 8012e0c:	f7ff ff3e 	bl	8012c8c <__assert_func>
 8012e10:	6044      	str	r4, [r0, #4]
 8012e12:	6084      	str	r4, [r0, #8]
 8012e14:	6004      	str	r4, [r0, #0]
 8012e16:	60c4      	str	r4, [r0, #12]
 8012e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e1a:	6819      	ldr	r1, [r3, #0]
 8012e1c:	2900      	cmp	r1, #0
 8012e1e:	d00a      	beq.n	8012e36 <_dtoa_r+0x56>
 8012e20:	685a      	ldr	r2, [r3, #4]
 8012e22:	2301      	movs	r3, #1
 8012e24:	4093      	lsls	r3, r2
 8012e26:	604a      	str	r2, [r1, #4]
 8012e28:	608b      	str	r3, [r1, #8]
 8012e2a:	0038      	movs	r0, r7
 8012e2c:	f001 fc24 	bl	8014678 <_Bfree>
 8012e30:	2200      	movs	r2, #0
 8012e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e34:	601a      	str	r2, [r3, #0]
 8012e36:	9b03      	ldr	r3, [sp, #12]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	da20      	bge.n	8012e7e <_dtoa_r+0x9e>
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	602b      	str	r3, [r5, #0]
 8012e40:	9b03      	ldr	r3, [sp, #12]
 8012e42:	005b      	lsls	r3, r3, #1
 8012e44:	085b      	lsrs	r3, r3, #1
 8012e46:	9309      	str	r3, [sp, #36]	; 0x24
 8012e48:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8012e4a:	4bb9      	ldr	r3, [pc, #740]	; (8013130 <_dtoa_r+0x350>)
 8012e4c:	4ab8      	ldr	r2, [pc, #736]	; (8013130 <_dtoa_r+0x350>)
 8012e4e:	402b      	ands	r3, r5
 8012e50:	4293      	cmp	r3, r2
 8012e52:	d117      	bne.n	8012e84 <_dtoa_r+0xa4>
 8012e54:	4bb7      	ldr	r3, [pc, #732]	; (8013134 <_dtoa_r+0x354>)
 8012e56:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012e58:	0328      	lsls	r0, r5, #12
 8012e5a:	6013      	str	r3, [r2, #0]
 8012e5c:	9b02      	ldr	r3, [sp, #8]
 8012e5e:	0b00      	lsrs	r0, r0, #12
 8012e60:	4318      	orrs	r0, r3
 8012e62:	d101      	bne.n	8012e68 <_dtoa_r+0x88>
 8012e64:	f000 fdbf 	bl	80139e6 <_dtoa_r+0xc06>
 8012e68:	48b3      	ldr	r0, [pc, #716]	; (8013138 <_dtoa_r+0x358>)
 8012e6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012e6c:	9006      	str	r0, [sp, #24]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d002      	beq.n	8012e78 <_dtoa_r+0x98>
 8012e72:	4bb2      	ldr	r3, [pc, #712]	; (801313c <_dtoa_r+0x35c>)
 8012e74:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8012e76:	6013      	str	r3, [r2, #0]
 8012e78:	9806      	ldr	r0, [sp, #24]
 8012e7a:	b01d      	add	sp, #116	; 0x74
 8012e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e7e:	2300      	movs	r3, #0
 8012e80:	602b      	str	r3, [r5, #0]
 8012e82:	e7e1      	b.n	8012e48 <_dtoa_r+0x68>
 8012e84:	9b08      	ldr	r3, [sp, #32]
 8012e86:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8012e88:	9312      	str	r3, [sp, #72]	; 0x48
 8012e8a:	9413      	str	r4, [sp, #76]	; 0x4c
 8012e8c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012e8e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012e90:	2200      	movs	r2, #0
 8012e92:	2300      	movs	r3, #0
 8012e94:	f7ed fae0 	bl	8000458 <__aeabi_dcmpeq>
 8012e98:	1e04      	subs	r4, r0, #0
 8012e9a:	d009      	beq.n	8012eb0 <_dtoa_r+0xd0>
 8012e9c:	2301      	movs	r3, #1
 8012e9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8012ea0:	6013      	str	r3, [r2, #0]
 8012ea2:	4ba7      	ldr	r3, [pc, #668]	; (8013140 <_dtoa_r+0x360>)
 8012ea4:	9306      	str	r3, [sp, #24]
 8012ea6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d0e5      	beq.n	8012e78 <_dtoa_r+0x98>
 8012eac:	4ba5      	ldr	r3, [pc, #660]	; (8013144 <_dtoa_r+0x364>)
 8012eae:	e7e1      	b.n	8012e74 <_dtoa_r+0x94>
 8012eb0:	ab1a      	add	r3, sp, #104	; 0x68
 8012eb2:	9301      	str	r3, [sp, #4]
 8012eb4:	ab1b      	add	r3, sp, #108	; 0x6c
 8012eb6:	9300      	str	r3, [sp, #0]
 8012eb8:	0038      	movs	r0, r7
 8012eba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012ebc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012ebe:	f001 ff8f 	bl	8014de0 <__d2b>
 8012ec2:	006e      	lsls	r6, r5, #1
 8012ec4:	9005      	str	r0, [sp, #20]
 8012ec6:	0d76      	lsrs	r6, r6, #21
 8012ec8:	d100      	bne.n	8012ecc <_dtoa_r+0xec>
 8012eca:	e07c      	b.n	8012fc6 <_dtoa_r+0x1e6>
 8012ecc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012ece:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012ed0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012ed2:	4a9d      	ldr	r2, [pc, #628]	; (8013148 <_dtoa_r+0x368>)
 8012ed4:	031b      	lsls	r3, r3, #12
 8012ed6:	0b1b      	lsrs	r3, r3, #12
 8012ed8:	431a      	orrs	r2, r3
 8012eda:	0011      	movs	r1, r2
 8012edc:	4b9b      	ldr	r3, [pc, #620]	; (801314c <_dtoa_r+0x36c>)
 8012ede:	9418      	str	r4, [sp, #96]	; 0x60
 8012ee0:	18f6      	adds	r6, r6, r3
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	4b9a      	ldr	r3, [pc, #616]	; (8013150 <_dtoa_r+0x370>)
 8012ee6:	f7ef f9b3 	bl	8002250 <__aeabi_dsub>
 8012eea:	4a9a      	ldr	r2, [pc, #616]	; (8013154 <_dtoa_r+0x374>)
 8012eec:	4b9a      	ldr	r3, [pc, #616]	; (8013158 <_dtoa_r+0x378>)
 8012eee:	f7ee ff43 	bl	8001d78 <__aeabi_dmul>
 8012ef2:	4a9a      	ldr	r2, [pc, #616]	; (801315c <_dtoa_r+0x37c>)
 8012ef4:	4b9a      	ldr	r3, [pc, #616]	; (8013160 <_dtoa_r+0x380>)
 8012ef6:	f7ee f801 	bl	8000efc <__aeabi_dadd>
 8012efa:	0004      	movs	r4, r0
 8012efc:	0030      	movs	r0, r6
 8012efe:	000d      	movs	r5, r1
 8012f00:	f7ef fd8c 	bl	8002a1c <__aeabi_i2d>
 8012f04:	4a97      	ldr	r2, [pc, #604]	; (8013164 <_dtoa_r+0x384>)
 8012f06:	4b98      	ldr	r3, [pc, #608]	; (8013168 <_dtoa_r+0x388>)
 8012f08:	f7ee ff36 	bl	8001d78 <__aeabi_dmul>
 8012f0c:	0002      	movs	r2, r0
 8012f0e:	000b      	movs	r3, r1
 8012f10:	0020      	movs	r0, r4
 8012f12:	0029      	movs	r1, r5
 8012f14:	f7ed fff2 	bl	8000efc <__aeabi_dadd>
 8012f18:	0004      	movs	r4, r0
 8012f1a:	000d      	movs	r5, r1
 8012f1c:	f7ef fd48 	bl	80029b0 <__aeabi_d2iz>
 8012f20:	2200      	movs	r2, #0
 8012f22:	9002      	str	r0, [sp, #8]
 8012f24:	2300      	movs	r3, #0
 8012f26:	0020      	movs	r0, r4
 8012f28:	0029      	movs	r1, r5
 8012f2a:	f7ed fa9b 	bl	8000464 <__aeabi_dcmplt>
 8012f2e:	2800      	cmp	r0, #0
 8012f30:	d00b      	beq.n	8012f4a <_dtoa_r+0x16a>
 8012f32:	9802      	ldr	r0, [sp, #8]
 8012f34:	f7ef fd72 	bl	8002a1c <__aeabi_i2d>
 8012f38:	002b      	movs	r3, r5
 8012f3a:	0022      	movs	r2, r4
 8012f3c:	f7ed fa8c 	bl	8000458 <__aeabi_dcmpeq>
 8012f40:	4243      	negs	r3, r0
 8012f42:	4158      	adcs	r0, r3
 8012f44:	9b02      	ldr	r3, [sp, #8]
 8012f46:	1a1b      	subs	r3, r3, r0
 8012f48:	9302      	str	r3, [sp, #8]
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	9316      	str	r3, [sp, #88]	; 0x58
 8012f4e:	9b02      	ldr	r3, [sp, #8]
 8012f50:	2b16      	cmp	r3, #22
 8012f52:	d80f      	bhi.n	8012f74 <_dtoa_r+0x194>
 8012f54:	9812      	ldr	r0, [sp, #72]	; 0x48
 8012f56:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8012f58:	00da      	lsls	r2, r3, #3
 8012f5a:	4b84      	ldr	r3, [pc, #528]	; (801316c <_dtoa_r+0x38c>)
 8012f5c:	189b      	adds	r3, r3, r2
 8012f5e:	681a      	ldr	r2, [r3, #0]
 8012f60:	685b      	ldr	r3, [r3, #4]
 8012f62:	f7ed fa7f 	bl	8000464 <__aeabi_dcmplt>
 8012f66:	2800      	cmp	r0, #0
 8012f68:	d049      	beq.n	8012ffe <_dtoa_r+0x21e>
 8012f6a:	9b02      	ldr	r3, [sp, #8]
 8012f6c:	3b01      	subs	r3, #1
 8012f6e:	9302      	str	r3, [sp, #8]
 8012f70:	2300      	movs	r3, #0
 8012f72:	9316      	str	r3, [sp, #88]	; 0x58
 8012f74:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012f76:	1b9e      	subs	r6, r3, r6
 8012f78:	2300      	movs	r3, #0
 8012f7a:	930a      	str	r3, [sp, #40]	; 0x28
 8012f7c:	0033      	movs	r3, r6
 8012f7e:	3b01      	subs	r3, #1
 8012f80:	930d      	str	r3, [sp, #52]	; 0x34
 8012f82:	d504      	bpl.n	8012f8e <_dtoa_r+0x1ae>
 8012f84:	2301      	movs	r3, #1
 8012f86:	1b9b      	subs	r3, r3, r6
 8012f88:	930a      	str	r3, [sp, #40]	; 0x28
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	930d      	str	r3, [sp, #52]	; 0x34
 8012f8e:	9b02      	ldr	r3, [sp, #8]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	db36      	blt.n	8013002 <_dtoa_r+0x222>
 8012f94:	9a02      	ldr	r2, [sp, #8]
 8012f96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f98:	4694      	mov	ip, r2
 8012f9a:	4463      	add	r3, ip
 8012f9c:	930d      	str	r3, [sp, #52]	; 0x34
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	9215      	str	r2, [sp, #84]	; 0x54
 8012fa2:	930e      	str	r3, [sp, #56]	; 0x38
 8012fa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012fa6:	2401      	movs	r4, #1
 8012fa8:	2b09      	cmp	r3, #9
 8012faa:	d864      	bhi.n	8013076 <_dtoa_r+0x296>
 8012fac:	2b05      	cmp	r3, #5
 8012fae:	dd02      	ble.n	8012fb6 <_dtoa_r+0x1d6>
 8012fb0:	2400      	movs	r4, #0
 8012fb2:	3b04      	subs	r3, #4
 8012fb4:	9322      	str	r3, [sp, #136]	; 0x88
 8012fb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012fb8:	1e98      	subs	r0, r3, #2
 8012fba:	2803      	cmp	r0, #3
 8012fbc:	d864      	bhi.n	8013088 <_dtoa_r+0x2a8>
 8012fbe:	f7ed f8b1 	bl	8000124 <__gnu_thumb1_case_uqi>
 8012fc2:	3829      	.short	0x3829
 8012fc4:	5836      	.short	0x5836
 8012fc6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8012fc8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012fca:	189e      	adds	r6, r3, r2
 8012fcc:	4b68      	ldr	r3, [pc, #416]	; (8013170 <_dtoa_r+0x390>)
 8012fce:	18f2      	adds	r2, r6, r3
 8012fd0:	2a20      	cmp	r2, #32
 8012fd2:	dd0f      	ble.n	8012ff4 <_dtoa_r+0x214>
 8012fd4:	2340      	movs	r3, #64	; 0x40
 8012fd6:	1a9b      	subs	r3, r3, r2
 8012fd8:	409d      	lsls	r5, r3
 8012fda:	4b66      	ldr	r3, [pc, #408]	; (8013174 <_dtoa_r+0x394>)
 8012fdc:	9802      	ldr	r0, [sp, #8]
 8012fde:	18f3      	adds	r3, r6, r3
 8012fe0:	40d8      	lsrs	r0, r3
 8012fe2:	4328      	orrs	r0, r5
 8012fe4:	f7ef fd4a 	bl	8002a7c <__aeabi_ui2d>
 8012fe8:	2301      	movs	r3, #1
 8012fea:	4c63      	ldr	r4, [pc, #396]	; (8013178 <_dtoa_r+0x398>)
 8012fec:	3e01      	subs	r6, #1
 8012fee:	1909      	adds	r1, r1, r4
 8012ff0:	9318      	str	r3, [sp, #96]	; 0x60
 8012ff2:	e776      	b.n	8012ee2 <_dtoa_r+0x102>
 8012ff4:	2320      	movs	r3, #32
 8012ff6:	9802      	ldr	r0, [sp, #8]
 8012ff8:	1a9b      	subs	r3, r3, r2
 8012ffa:	4098      	lsls	r0, r3
 8012ffc:	e7f2      	b.n	8012fe4 <_dtoa_r+0x204>
 8012ffe:	9016      	str	r0, [sp, #88]	; 0x58
 8013000:	e7b8      	b.n	8012f74 <_dtoa_r+0x194>
 8013002:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013004:	9a02      	ldr	r2, [sp, #8]
 8013006:	1a9b      	subs	r3, r3, r2
 8013008:	930a      	str	r3, [sp, #40]	; 0x28
 801300a:	4253      	negs	r3, r2
 801300c:	930e      	str	r3, [sp, #56]	; 0x38
 801300e:	2300      	movs	r3, #0
 8013010:	9315      	str	r3, [sp, #84]	; 0x54
 8013012:	e7c7      	b.n	8012fa4 <_dtoa_r+0x1c4>
 8013014:	2300      	movs	r3, #0
 8013016:	930f      	str	r3, [sp, #60]	; 0x3c
 8013018:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801301a:	930c      	str	r3, [sp, #48]	; 0x30
 801301c:	9307      	str	r3, [sp, #28]
 801301e:	2b00      	cmp	r3, #0
 8013020:	dc13      	bgt.n	801304a <_dtoa_r+0x26a>
 8013022:	2301      	movs	r3, #1
 8013024:	001a      	movs	r2, r3
 8013026:	930c      	str	r3, [sp, #48]	; 0x30
 8013028:	9307      	str	r3, [sp, #28]
 801302a:	9223      	str	r2, [sp, #140]	; 0x8c
 801302c:	e00d      	b.n	801304a <_dtoa_r+0x26a>
 801302e:	2301      	movs	r3, #1
 8013030:	e7f1      	b.n	8013016 <_dtoa_r+0x236>
 8013032:	2300      	movs	r3, #0
 8013034:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8013036:	930f      	str	r3, [sp, #60]	; 0x3c
 8013038:	4694      	mov	ip, r2
 801303a:	9b02      	ldr	r3, [sp, #8]
 801303c:	4463      	add	r3, ip
 801303e:	930c      	str	r3, [sp, #48]	; 0x30
 8013040:	3301      	adds	r3, #1
 8013042:	9307      	str	r3, [sp, #28]
 8013044:	2b00      	cmp	r3, #0
 8013046:	dc00      	bgt.n	801304a <_dtoa_r+0x26a>
 8013048:	2301      	movs	r3, #1
 801304a:	2200      	movs	r2, #0
 801304c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801304e:	6042      	str	r2, [r0, #4]
 8013050:	3204      	adds	r2, #4
 8013052:	0015      	movs	r5, r2
 8013054:	3514      	adds	r5, #20
 8013056:	6841      	ldr	r1, [r0, #4]
 8013058:	429d      	cmp	r5, r3
 801305a:	d919      	bls.n	8013090 <_dtoa_r+0x2b0>
 801305c:	0038      	movs	r0, r7
 801305e:	f001 fac7 	bl	80145f0 <_Balloc>
 8013062:	9006      	str	r0, [sp, #24]
 8013064:	2800      	cmp	r0, #0
 8013066:	d117      	bne.n	8013098 <_dtoa_r+0x2b8>
 8013068:	21d5      	movs	r1, #213	; 0xd5
 801306a:	0002      	movs	r2, r0
 801306c:	4b43      	ldr	r3, [pc, #268]	; (801317c <_dtoa_r+0x39c>)
 801306e:	0049      	lsls	r1, r1, #1
 8013070:	e6cb      	b.n	8012e0a <_dtoa_r+0x2a>
 8013072:	2301      	movs	r3, #1
 8013074:	e7de      	b.n	8013034 <_dtoa_r+0x254>
 8013076:	2300      	movs	r3, #0
 8013078:	940f      	str	r4, [sp, #60]	; 0x3c
 801307a:	9322      	str	r3, [sp, #136]	; 0x88
 801307c:	3b01      	subs	r3, #1
 801307e:	930c      	str	r3, [sp, #48]	; 0x30
 8013080:	9307      	str	r3, [sp, #28]
 8013082:	2200      	movs	r2, #0
 8013084:	3313      	adds	r3, #19
 8013086:	e7d0      	b.n	801302a <_dtoa_r+0x24a>
 8013088:	2301      	movs	r3, #1
 801308a:	930f      	str	r3, [sp, #60]	; 0x3c
 801308c:	3b02      	subs	r3, #2
 801308e:	e7f6      	b.n	801307e <_dtoa_r+0x29e>
 8013090:	3101      	adds	r1, #1
 8013092:	6041      	str	r1, [r0, #4]
 8013094:	0052      	lsls	r2, r2, #1
 8013096:	e7dc      	b.n	8013052 <_dtoa_r+0x272>
 8013098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309a:	9a06      	ldr	r2, [sp, #24]
 801309c:	601a      	str	r2, [r3, #0]
 801309e:	9b07      	ldr	r3, [sp, #28]
 80130a0:	2b0e      	cmp	r3, #14
 80130a2:	d900      	bls.n	80130a6 <_dtoa_r+0x2c6>
 80130a4:	e0eb      	b.n	801327e <_dtoa_r+0x49e>
 80130a6:	2c00      	cmp	r4, #0
 80130a8:	d100      	bne.n	80130ac <_dtoa_r+0x2cc>
 80130aa:	e0e8      	b.n	801327e <_dtoa_r+0x49e>
 80130ac:	9b02      	ldr	r3, [sp, #8]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	dd68      	ble.n	8013184 <_dtoa_r+0x3a4>
 80130b2:	001a      	movs	r2, r3
 80130b4:	210f      	movs	r1, #15
 80130b6:	4b2d      	ldr	r3, [pc, #180]	; (801316c <_dtoa_r+0x38c>)
 80130b8:	400a      	ands	r2, r1
 80130ba:	00d2      	lsls	r2, r2, #3
 80130bc:	189b      	adds	r3, r3, r2
 80130be:	681d      	ldr	r5, [r3, #0]
 80130c0:	685e      	ldr	r6, [r3, #4]
 80130c2:	9b02      	ldr	r3, [sp, #8]
 80130c4:	111c      	asrs	r4, r3, #4
 80130c6:	2302      	movs	r3, #2
 80130c8:	9310      	str	r3, [sp, #64]	; 0x40
 80130ca:	9b02      	ldr	r3, [sp, #8]
 80130cc:	05db      	lsls	r3, r3, #23
 80130ce:	d50b      	bpl.n	80130e8 <_dtoa_r+0x308>
 80130d0:	4b2b      	ldr	r3, [pc, #172]	; (8013180 <_dtoa_r+0x3a0>)
 80130d2:	400c      	ands	r4, r1
 80130d4:	6a1a      	ldr	r2, [r3, #32]
 80130d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80130da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80130dc:	f7ee fa4a 	bl	8001574 <__aeabi_ddiv>
 80130e0:	2303      	movs	r3, #3
 80130e2:	9008      	str	r0, [sp, #32]
 80130e4:	9109      	str	r1, [sp, #36]	; 0x24
 80130e6:	9310      	str	r3, [sp, #64]	; 0x40
 80130e8:	4b25      	ldr	r3, [pc, #148]	; (8013180 <_dtoa_r+0x3a0>)
 80130ea:	9314      	str	r3, [sp, #80]	; 0x50
 80130ec:	2c00      	cmp	r4, #0
 80130ee:	d108      	bne.n	8013102 <_dtoa_r+0x322>
 80130f0:	9808      	ldr	r0, [sp, #32]
 80130f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80130f4:	002a      	movs	r2, r5
 80130f6:	0033      	movs	r3, r6
 80130f8:	f7ee fa3c 	bl	8001574 <__aeabi_ddiv>
 80130fc:	9008      	str	r0, [sp, #32]
 80130fe:	9109      	str	r1, [sp, #36]	; 0x24
 8013100:	e05c      	b.n	80131bc <_dtoa_r+0x3dc>
 8013102:	2301      	movs	r3, #1
 8013104:	421c      	tst	r4, r3
 8013106:	d00b      	beq.n	8013120 <_dtoa_r+0x340>
 8013108:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801310a:	0028      	movs	r0, r5
 801310c:	3301      	adds	r3, #1
 801310e:	9310      	str	r3, [sp, #64]	; 0x40
 8013110:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013112:	0031      	movs	r1, r6
 8013114:	681a      	ldr	r2, [r3, #0]
 8013116:	685b      	ldr	r3, [r3, #4]
 8013118:	f7ee fe2e 	bl	8001d78 <__aeabi_dmul>
 801311c:	0005      	movs	r5, r0
 801311e:	000e      	movs	r6, r1
 8013120:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013122:	1064      	asrs	r4, r4, #1
 8013124:	3308      	adds	r3, #8
 8013126:	e7e0      	b.n	80130ea <_dtoa_r+0x30a>
 8013128:	080179aa 	.word	0x080179aa
 801312c:	080179c1 	.word	0x080179c1
 8013130:	7ff00000 	.word	0x7ff00000
 8013134:	0000270f 	.word	0x0000270f
 8013138:	080179a6 	.word	0x080179a6
 801313c:	080179a9 	.word	0x080179a9
 8013140:	080177e4 	.word	0x080177e4
 8013144:	080177e5 	.word	0x080177e5
 8013148:	3ff00000 	.word	0x3ff00000
 801314c:	fffffc01 	.word	0xfffffc01
 8013150:	3ff80000 	.word	0x3ff80000
 8013154:	636f4361 	.word	0x636f4361
 8013158:	3fd287a7 	.word	0x3fd287a7
 801315c:	8b60c8b3 	.word	0x8b60c8b3
 8013160:	3fc68a28 	.word	0x3fc68a28
 8013164:	509f79fb 	.word	0x509f79fb
 8013168:	3fd34413 	.word	0x3fd34413
 801316c:	08017b90 	.word	0x08017b90
 8013170:	00000432 	.word	0x00000432
 8013174:	00000412 	.word	0x00000412
 8013178:	fe100000 	.word	0xfe100000
 801317c:	08017a1c 	.word	0x08017a1c
 8013180:	08017b68 	.word	0x08017b68
 8013184:	2302      	movs	r3, #2
 8013186:	9310      	str	r3, [sp, #64]	; 0x40
 8013188:	9b02      	ldr	r3, [sp, #8]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d016      	beq.n	80131bc <_dtoa_r+0x3dc>
 801318e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8013190:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8013192:	425c      	negs	r4, r3
 8013194:	230f      	movs	r3, #15
 8013196:	4ab6      	ldr	r2, [pc, #728]	; (8013470 <_dtoa_r+0x690>)
 8013198:	4023      	ands	r3, r4
 801319a:	00db      	lsls	r3, r3, #3
 801319c:	18d3      	adds	r3, r2, r3
 801319e:	681a      	ldr	r2, [r3, #0]
 80131a0:	685b      	ldr	r3, [r3, #4]
 80131a2:	f7ee fde9 	bl	8001d78 <__aeabi_dmul>
 80131a6:	2601      	movs	r6, #1
 80131a8:	2300      	movs	r3, #0
 80131aa:	9008      	str	r0, [sp, #32]
 80131ac:	9109      	str	r1, [sp, #36]	; 0x24
 80131ae:	4db1      	ldr	r5, [pc, #708]	; (8013474 <_dtoa_r+0x694>)
 80131b0:	1124      	asrs	r4, r4, #4
 80131b2:	2c00      	cmp	r4, #0
 80131b4:	d000      	beq.n	80131b8 <_dtoa_r+0x3d8>
 80131b6:	e094      	b.n	80132e2 <_dtoa_r+0x502>
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d19f      	bne.n	80130fc <_dtoa_r+0x31c>
 80131bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d100      	bne.n	80131c4 <_dtoa_r+0x3e4>
 80131c2:	e09b      	b.n	80132fc <_dtoa_r+0x51c>
 80131c4:	9c08      	ldr	r4, [sp, #32]
 80131c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80131c8:	2200      	movs	r2, #0
 80131ca:	0020      	movs	r0, r4
 80131cc:	0029      	movs	r1, r5
 80131ce:	4baa      	ldr	r3, [pc, #680]	; (8013478 <_dtoa_r+0x698>)
 80131d0:	f7ed f948 	bl	8000464 <__aeabi_dcmplt>
 80131d4:	2800      	cmp	r0, #0
 80131d6:	d100      	bne.n	80131da <_dtoa_r+0x3fa>
 80131d8:	e090      	b.n	80132fc <_dtoa_r+0x51c>
 80131da:	9b07      	ldr	r3, [sp, #28]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d100      	bne.n	80131e2 <_dtoa_r+0x402>
 80131e0:	e08c      	b.n	80132fc <_dtoa_r+0x51c>
 80131e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	dd46      	ble.n	8013276 <_dtoa_r+0x496>
 80131e8:	9b02      	ldr	r3, [sp, #8]
 80131ea:	2200      	movs	r2, #0
 80131ec:	0020      	movs	r0, r4
 80131ee:	0029      	movs	r1, r5
 80131f0:	1e5e      	subs	r6, r3, #1
 80131f2:	4ba2      	ldr	r3, [pc, #648]	; (801347c <_dtoa_r+0x69c>)
 80131f4:	f7ee fdc0 	bl	8001d78 <__aeabi_dmul>
 80131f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80131fa:	9008      	str	r0, [sp, #32]
 80131fc:	9109      	str	r1, [sp, #36]	; 0x24
 80131fe:	3301      	adds	r3, #1
 8013200:	9310      	str	r3, [sp, #64]	; 0x40
 8013202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013204:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013206:	9c08      	ldr	r4, [sp, #32]
 8013208:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801320a:	9314      	str	r3, [sp, #80]	; 0x50
 801320c:	f7ef fc06 	bl	8002a1c <__aeabi_i2d>
 8013210:	0022      	movs	r2, r4
 8013212:	002b      	movs	r3, r5
 8013214:	f7ee fdb0 	bl	8001d78 <__aeabi_dmul>
 8013218:	2200      	movs	r2, #0
 801321a:	4b99      	ldr	r3, [pc, #612]	; (8013480 <_dtoa_r+0x6a0>)
 801321c:	f7ed fe6e 	bl	8000efc <__aeabi_dadd>
 8013220:	9010      	str	r0, [sp, #64]	; 0x40
 8013222:	9111      	str	r1, [sp, #68]	; 0x44
 8013224:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013226:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013228:	9208      	str	r2, [sp, #32]
 801322a:	9309      	str	r3, [sp, #36]	; 0x24
 801322c:	4a95      	ldr	r2, [pc, #596]	; (8013484 <_dtoa_r+0x6a4>)
 801322e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013230:	4694      	mov	ip, r2
 8013232:	4463      	add	r3, ip
 8013234:	9317      	str	r3, [sp, #92]	; 0x5c
 8013236:	9309      	str	r3, [sp, #36]	; 0x24
 8013238:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801323a:	2b00      	cmp	r3, #0
 801323c:	d161      	bne.n	8013302 <_dtoa_r+0x522>
 801323e:	2200      	movs	r2, #0
 8013240:	0020      	movs	r0, r4
 8013242:	0029      	movs	r1, r5
 8013244:	4b90      	ldr	r3, [pc, #576]	; (8013488 <_dtoa_r+0x6a8>)
 8013246:	f7ef f803 	bl	8002250 <__aeabi_dsub>
 801324a:	9a08      	ldr	r2, [sp, #32]
 801324c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801324e:	0004      	movs	r4, r0
 8013250:	000d      	movs	r5, r1
 8013252:	f7ed f91b 	bl	800048c <__aeabi_dcmpgt>
 8013256:	2800      	cmp	r0, #0
 8013258:	d000      	beq.n	801325c <_dtoa_r+0x47c>
 801325a:	e2af      	b.n	80137bc <_dtoa_r+0x9dc>
 801325c:	488b      	ldr	r0, [pc, #556]	; (801348c <_dtoa_r+0x6ac>)
 801325e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013260:	4684      	mov	ip, r0
 8013262:	4461      	add	r1, ip
 8013264:	000b      	movs	r3, r1
 8013266:	0020      	movs	r0, r4
 8013268:	0029      	movs	r1, r5
 801326a:	9a08      	ldr	r2, [sp, #32]
 801326c:	f7ed f8fa 	bl	8000464 <__aeabi_dcmplt>
 8013270:	2800      	cmp	r0, #0
 8013272:	d000      	beq.n	8013276 <_dtoa_r+0x496>
 8013274:	e29f      	b.n	80137b6 <_dtoa_r+0x9d6>
 8013276:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013278:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801327a:	9308      	str	r3, [sp, #32]
 801327c:	9409      	str	r4, [sp, #36]	; 0x24
 801327e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013280:	2b00      	cmp	r3, #0
 8013282:	da00      	bge.n	8013286 <_dtoa_r+0x4a6>
 8013284:	e172      	b.n	801356c <_dtoa_r+0x78c>
 8013286:	9a02      	ldr	r2, [sp, #8]
 8013288:	2a0e      	cmp	r2, #14
 801328a:	dd00      	ble.n	801328e <_dtoa_r+0x4ae>
 801328c:	e16e      	b.n	801356c <_dtoa_r+0x78c>
 801328e:	4b78      	ldr	r3, [pc, #480]	; (8013470 <_dtoa_r+0x690>)
 8013290:	00d2      	lsls	r2, r2, #3
 8013292:	189b      	adds	r3, r3, r2
 8013294:	685c      	ldr	r4, [r3, #4]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	930a      	str	r3, [sp, #40]	; 0x28
 801329a:	940b      	str	r4, [sp, #44]	; 0x2c
 801329c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801329e:	2b00      	cmp	r3, #0
 80132a0:	db00      	blt.n	80132a4 <_dtoa_r+0x4c4>
 80132a2:	e0f7      	b.n	8013494 <_dtoa_r+0x6b4>
 80132a4:	9b07      	ldr	r3, [sp, #28]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	dd00      	ble.n	80132ac <_dtoa_r+0x4cc>
 80132aa:	e0f3      	b.n	8013494 <_dtoa_r+0x6b4>
 80132ac:	d000      	beq.n	80132b0 <_dtoa_r+0x4d0>
 80132ae:	e282      	b.n	80137b6 <_dtoa_r+0x9d6>
 80132b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80132b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80132b4:	2200      	movs	r2, #0
 80132b6:	4b74      	ldr	r3, [pc, #464]	; (8013488 <_dtoa_r+0x6a8>)
 80132b8:	f7ee fd5e 	bl	8001d78 <__aeabi_dmul>
 80132bc:	9a08      	ldr	r2, [sp, #32]
 80132be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132c0:	f7ed f8ee 	bl	80004a0 <__aeabi_dcmpge>
 80132c4:	9e07      	ldr	r6, [sp, #28]
 80132c6:	0035      	movs	r5, r6
 80132c8:	2800      	cmp	r0, #0
 80132ca:	d000      	beq.n	80132ce <_dtoa_r+0x4ee>
 80132cc:	e259      	b.n	8013782 <_dtoa_r+0x9a2>
 80132ce:	9b06      	ldr	r3, [sp, #24]
 80132d0:	9a06      	ldr	r2, [sp, #24]
 80132d2:	3301      	adds	r3, #1
 80132d4:	9308      	str	r3, [sp, #32]
 80132d6:	2331      	movs	r3, #49	; 0x31
 80132d8:	7013      	strb	r3, [r2, #0]
 80132da:	9b02      	ldr	r3, [sp, #8]
 80132dc:	3301      	adds	r3, #1
 80132de:	9302      	str	r3, [sp, #8]
 80132e0:	e254      	b.n	801378c <_dtoa_r+0x9ac>
 80132e2:	4234      	tst	r4, r6
 80132e4:	d007      	beq.n	80132f6 <_dtoa_r+0x516>
 80132e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80132e8:	3301      	adds	r3, #1
 80132ea:	9310      	str	r3, [sp, #64]	; 0x40
 80132ec:	682a      	ldr	r2, [r5, #0]
 80132ee:	686b      	ldr	r3, [r5, #4]
 80132f0:	f7ee fd42 	bl	8001d78 <__aeabi_dmul>
 80132f4:	0033      	movs	r3, r6
 80132f6:	1064      	asrs	r4, r4, #1
 80132f8:	3508      	adds	r5, #8
 80132fa:	e75a      	b.n	80131b2 <_dtoa_r+0x3d2>
 80132fc:	9e02      	ldr	r6, [sp, #8]
 80132fe:	9b07      	ldr	r3, [sp, #28]
 8013300:	e780      	b.n	8013204 <_dtoa_r+0x424>
 8013302:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013304:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8013306:	1e5a      	subs	r2, r3, #1
 8013308:	4b59      	ldr	r3, [pc, #356]	; (8013470 <_dtoa_r+0x690>)
 801330a:	00d2      	lsls	r2, r2, #3
 801330c:	189b      	adds	r3, r3, r2
 801330e:	681a      	ldr	r2, [r3, #0]
 8013310:	685b      	ldr	r3, [r3, #4]
 8013312:	2900      	cmp	r1, #0
 8013314:	d051      	beq.n	80133ba <_dtoa_r+0x5da>
 8013316:	2000      	movs	r0, #0
 8013318:	495d      	ldr	r1, [pc, #372]	; (8013490 <_dtoa_r+0x6b0>)
 801331a:	f7ee f92b 	bl	8001574 <__aeabi_ddiv>
 801331e:	9a08      	ldr	r2, [sp, #32]
 8013320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013322:	f7ee ff95 	bl	8002250 <__aeabi_dsub>
 8013326:	9a06      	ldr	r2, [sp, #24]
 8013328:	9b06      	ldr	r3, [sp, #24]
 801332a:	4694      	mov	ip, r2
 801332c:	9317      	str	r3, [sp, #92]	; 0x5c
 801332e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013330:	9010      	str	r0, [sp, #64]	; 0x40
 8013332:	9111      	str	r1, [sp, #68]	; 0x44
 8013334:	4463      	add	r3, ip
 8013336:	9319      	str	r3, [sp, #100]	; 0x64
 8013338:	0029      	movs	r1, r5
 801333a:	0020      	movs	r0, r4
 801333c:	f7ef fb38 	bl	80029b0 <__aeabi_d2iz>
 8013340:	9014      	str	r0, [sp, #80]	; 0x50
 8013342:	f7ef fb6b 	bl	8002a1c <__aeabi_i2d>
 8013346:	0002      	movs	r2, r0
 8013348:	000b      	movs	r3, r1
 801334a:	0020      	movs	r0, r4
 801334c:	0029      	movs	r1, r5
 801334e:	f7ee ff7f 	bl	8002250 <__aeabi_dsub>
 8013352:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013354:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013356:	3301      	adds	r3, #1
 8013358:	9308      	str	r3, [sp, #32]
 801335a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801335c:	0004      	movs	r4, r0
 801335e:	3330      	adds	r3, #48	; 0x30
 8013360:	7013      	strb	r3, [r2, #0]
 8013362:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013364:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013366:	000d      	movs	r5, r1
 8013368:	f7ed f87c 	bl	8000464 <__aeabi_dcmplt>
 801336c:	2800      	cmp	r0, #0
 801336e:	d175      	bne.n	801345c <_dtoa_r+0x67c>
 8013370:	0022      	movs	r2, r4
 8013372:	002b      	movs	r3, r5
 8013374:	2000      	movs	r0, #0
 8013376:	4940      	ldr	r1, [pc, #256]	; (8013478 <_dtoa_r+0x698>)
 8013378:	f7ee ff6a 	bl	8002250 <__aeabi_dsub>
 801337c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801337e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013380:	f7ed f870 	bl	8000464 <__aeabi_dcmplt>
 8013384:	2800      	cmp	r0, #0
 8013386:	d000      	beq.n	801338a <_dtoa_r+0x5aa>
 8013388:	e0d2      	b.n	8013530 <_dtoa_r+0x750>
 801338a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801338c:	9a08      	ldr	r2, [sp, #32]
 801338e:	4293      	cmp	r3, r2
 8013390:	d100      	bne.n	8013394 <_dtoa_r+0x5b4>
 8013392:	e770      	b.n	8013276 <_dtoa_r+0x496>
 8013394:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013396:	9911      	ldr	r1, [sp, #68]	; 0x44
 8013398:	2200      	movs	r2, #0
 801339a:	4b38      	ldr	r3, [pc, #224]	; (801347c <_dtoa_r+0x69c>)
 801339c:	f7ee fcec 	bl	8001d78 <__aeabi_dmul>
 80133a0:	4b36      	ldr	r3, [pc, #216]	; (801347c <_dtoa_r+0x69c>)
 80133a2:	9010      	str	r0, [sp, #64]	; 0x40
 80133a4:	9111      	str	r1, [sp, #68]	; 0x44
 80133a6:	2200      	movs	r2, #0
 80133a8:	0020      	movs	r0, r4
 80133aa:	0029      	movs	r1, r5
 80133ac:	f7ee fce4 	bl	8001d78 <__aeabi_dmul>
 80133b0:	9b08      	ldr	r3, [sp, #32]
 80133b2:	0004      	movs	r4, r0
 80133b4:	000d      	movs	r5, r1
 80133b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80133b8:	e7be      	b.n	8013338 <_dtoa_r+0x558>
 80133ba:	9808      	ldr	r0, [sp, #32]
 80133bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80133be:	f7ee fcdb 	bl	8001d78 <__aeabi_dmul>
 80133c2:	9a06      	ldr	r2, [sp, #24]
 80133c4:	9b06      	ldr	r3, [sp, #24]
 80133c6:	4694      	mov	ip, r2
 80133c8:	9308      	str	r3, [sp, #32]
 80133ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80133cc:	9010      	str	r0, [sp, #64]	; 0x40
 80133ce:	9111      	str	r1, [sp, #68]	; 0x44
 80133d0:	4463      	add	r3, ip
 80133d2:	9319      	str	r3, [sp, #100]	; 0x64
 80133d4:	0029      	movs	r1, r5
 80133d6:	0020      	movs	r0, r4
 80133d8:	f7ef faea 	bl	80029b0 <__aeabi_d2iz>
 80133dc:	9017      	str	r0, [sp, #92]	; 0x5c
 80133de:	f7ef fb1d 	bl	8002a1c <__aeabi_i2d>
 80133e2:	0002      	movs	r2, r0
 80133e4:	000b      	movs	r3, r1
 80133e6:	0020      	movs	r0, r4
 80133e8:	0029      	movs	r1, r5
 80133ea:	f7ee ff31 	bl	8002250 <__aeabi_dsub>
 80133ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80133f0:	9a08      	ldr	r2, [sp, #32]
 80133f2:	3330      	adds	r3, #48	; 0x30
 80133f4:	7013      	strb	r3, [r2, #0]
 80133f6:	0013      	movs	r3, r2
 80133f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80133fa:	3301      	adds	r3, #1
 80133fc:	0004      	movs	r4, r0
 80133fe:	000d      	movs	r5, r1
 8013400:	9308      	str	r3, [sp, #32]
 8013402:	4293      	cmp	r3, r2
 8013404:	d12c      	bne.n	8013460 <_dtoa_r+0x680>
 8013406:	9810      	ldr	r0, [sp, #64]	; 0x40
 8013408:	9911      	ldr	r1, [sp, #68]	; 0x44
 801340a:	9a06      	ldr	r2, [sp, #24]
 801340c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801340e:	4694      	mov	ip, r2
 8013410:	4463      	add	r3, ip
 8013412:	2200      	movs	r2, #0
 8013414:	9308      	str	r3, [sp, #32]
 8013416:	4b1e      	ldr	r3, [pc, #120]	; (8013490 <_dtoa_r+0x6b0>)
 8013418:	f7ed fd70 	bl	8000efc <__aeabi_dadd>
 801341c:	0002      	movs	r2, r0
 801341e:	000b      	movs	r3, r1
 8013420:	0020      	movs	r0, r4
 8013422:	0029      	movs	r1, r5
 8013424:	f7ed f832 	bl	800048c <__aeabi_dcmpgt>
 8013428:	2800      	cmp	r0, #0
 801342a:	d000      	beq.n	801342e <_dtoa_r+0x64e>
 801342c:	e080      	b.n	8013530 <_dtoa_r+0x750>
 801342e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013430:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013432:	2000      	movs	r0, #0
 8013434:	4916      	ldr	r1, [pc, #88]	; (8013490 <_dtoa_r+0x6b0>)
 8013436:	f7ee ff0b 	bl	8002250 <__aeabi_dsub>
 801343a:	0002      	movs	r2, r0
 801343c:	000b      	movs	r3, r1
 801343e:	0020      	movs	r0, r4
 8013440:	0029      	movs	r1, r5
 8013442:	f7ed f80f 	bl	8000464 <__aeabi_dcmplt>
 8013446:	2800      	cmp	r0, #0
 8013448:	d100      	bne.n	801344c <_dtoa_r+0x66c>
 801344a:	e714      	b.n	8013276 <_dtoa_r+0x496>
 801344c:	9b08      	ldr	r3, [sp, #32]
 801344e:	001a      	movs	r2, r3
 8013450:	3a01      	subs	r2, #1
 8013452:	9208      	str	r2, [sp, #32]
 8013454:	7812      	ldrb	r2, [r2, #0]
 8013456:	2a30      	cmp	r2, #48	; 0x30
 8013458:	d0f8      	beq.n	801344c <_dtoa_r+0x66c>
 801345a:	9308      	str	r3, [sp, #32]
 801345c:	9602      	str	r6, [sp, #8]
 801345e:	e055      	b.n	801350c <_dtoa_r+0x72c>
 8013460:	2200      	movs	r2, #0
 8013462:	4b06      	ldr	r3, [pc, #24]	; (801347c <_dtoa_r+0x69c>)
 8013464:	f7ee fc88 	bl	8001d78 <__aeabi_dmul>
 8013468:	0004      	movs	r4, r0
 801346a:	000d      	movs	r5, r1
 801346c:	e7b2      	b.n	80133d4 <_dtoa_r+0x5f4>
 801346e:	46c0      	nop			; (mov r8, r8)
 8013470:	08017b90 	.word	0x08017b90
 8013474:	08017b68 	.word	0x08017b68
 8013478:	3ff00000 	.word	0x3ff00000
 801347c:	40240000 	.word	0x40240000
 8013480:	401c0000 	.word	0x401c0000
 8013484:	fcc00000 	.word	0xfcc00000
 8013488:	40140000 	.word	0x40140000
 801348c:	7cc00000 	.word	0x7cc00000
 8013490:	3fe00000 	.word	0x3fe00000
 8013494:	9b07      	ldr	r3, [sp, #28]
 8013496:	9e06      	ldr	r6, [sp, #24]
 8013498:	3b01      	subs	r3, #1
 801349a:	199b      	adds	r3, r3, r6
 801349c:	930c      	str	r3, [sp, #48]	; 0x30
 801349e:	9c08      	ldr	r4, [sp, #32]
 80134a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80134a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80134a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134a6:	0020      	movs	r0, r4
 80134a8:	0029      	movs	r1, r5
 80134aa:	f7ee f863 	bl	8001574 <__aeabi_ddiv>
 80134ae:	f7ef fa7f 	bl	80029b0 <__aeabi_d2iz>
 80134b2:	9007      	str	r0, [sp, #28]
 80134b4:	f7ef fab2 	bl	8002a1c <__aeabi_i2d>
 80134b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80134ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134bc:	f7ee fc5c 	bl	8001d78 <__aeabi_dmul>
 80134c0:	0002      	movs	r2, r0
 80134c2:	000b      	movs	r3, r1
 80134c4:	0020      	movs	r0, r4
 80134c6:	0029      	movs	r1, r5
 80134c8:	f7ee fec2 	bl	8002250 <__aeabi_dsub>
 80134cc:	0033      	movs	r3, r6
 80134ce:	9a07      	ldr	r2, [sp, #28]
 80134d0:	3601      	adds	r6, #1
 80134d2:	3230      	adds	r2, #48	; 0x30
 80134d4:	701a      	strb	r2, [r3, #0]
 80134d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80134d8:	9608      	str	r6, [sp, #32]
 80134da:	429a      	cmp	r2, r3
 80134dc:	d139      	bne.n	8013552 <_dtoa_r+0x772>
 80134de:	0002      	movs	r2, r0
 80134e0:	000b      	movs	r3, r1
 80134e2:	f7ed fd0b 	bl	8000efc <__aeabi_dadd>
 80134e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80134e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134ea:	0004      	movs	r4, r0
 80134ec:	000d      	movs	r5, r1
 80134ee:	f7ec ffcd 	bl	800048c <__aeabi_dcmpgt>
 80134f2:	2800      	cmp	r0, #0
 80134f4:	d11b      	bne.n	801352e <_dtoa_r+0x74e>
 80134f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80134f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80134fa:	0020      	movs	r0, r4
 80134fc:	0029      	movs	r1, r5
 80134fe:	f7ec ffab 	bl	8000458 <__aeabi_dcmpeq>
 8013502:	2800      	cmp	r0, #0
 8013504:	d002      	beq.n	801350c <_dtoa_r+0x72c>
 8013506:	9b07      	ldr	r3, [sp, #28]
 8013508:	07db      	lsls	r3, r3, #31
 801350a:	d410      	bmi.n	801352e <_dtoa_r+0x74e>
 801350c:	0038      	movs	r0, r7
 801350e:	9905      	ldr	r1, [sp, #20]
 8013510:	f001 f8b2 	bl	8014678 <_Bfree>
 8013514:	2300      	movs	r3, #0
 8013516:	9a08      	ldr	r2, [sp, #32]
 8013518:	9802      	ldr	r0, [sp, #8]
 801351a:	7013      	strb	r3, [r2, #0]
 801351c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801351e:	3001      	adds	r0, #1
 8013520:	6018      	str	r0, [r3, #0]
 8013522:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8013524:	2b00      	cmp	r3, #0
 8013526:	d100      	bne.n	801352a <_dtoa_r+0x74a>
 8013528:	e4a6      	b.n	8012e78 <_dtoa_r+0x98>
 801352a:	601a      	str	r2, [r3, #0]
 801352c:	e4a4      	b.n	8012e78 <_dtoa_r+0x98>
 801352e:	9e02      	ldr	r6, [sp, #8]
 8013530:	9b08      	ldr	r3, [sp, #32]
 8013532:	9308      	str	r3, [sp, #32]
 8013534:	3b01      	subs	r3, #1
 8013536:	781a      	ldrb	r2, [r3, #0]
 8013538:	2a39      	cmp	r2, #57	; 0x39
 801353a:	d106      	bne.n	801354a <_dtoa_r+0x76a>
 801353c:	9a06      	ldr	r2, [sp, #24]
 801353e:	429a      	cmp	r2, r3
 8013540:	d1f7      	bne.n	8013532 <_dtoa_r+0x752>
 8013542:	2230      	movs	r2, #48	; 0x30
 8013544:	9906      	ldr	r1, [sp, #24]
 8013546:	3601      	adds	r6, #1
 8013548:	700a      	strb	r2, [r1, #0]
 801354a:	781a      	ldrb	r2, [r3, #0]
 801354c:	3201      	adds	r2, #1
 801354e:	701a      	strb	r2, [r3, #0]
 8013550:	e784      	b.n	801345c <_dtoa_r+0x67c>
 8013552:	2200      	movs	r2, #0
 8013554:	4baa      	ldr	r3, [pc, #680]	; (8013800 <_dtoa_r+0xa20>)
 8013556:	f7ee fc0f 	bl	8001d78 <__aeabi_dmul>
 801355a:	2200      	movs	r2, #0
 801355c:	2300      	movs	r3, #0
 801355e:	0004      	movs	r4, r0
 8013560:	000d      	movs	r5, r1
 8013562:	f7ec ff79 	bl	8000458 <__aeabi_dcmpeq>
 8013566:	2800      	cmp	r0, #0
 8013568:	d09b      	beq.n	80134a2 <_dtoa_r+0x6c2>
 801356a:	e7cf      	b.n	801350c <_dtoa_r+0x72c>
 801356c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801356e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8013570:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013572:	2d00      	cmp	r5, #0
 8013574:	d012      	beq.n	801359c <_dtoa_r+0x7bc>
 8013576:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8013578:	2a01      	cmp	r2, #1
 801357a:	dc66      	bgt.n	801364a <_dtoa_r+0x86a>
 801357c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801357e:	2a00      	cmp	r2, #0
 8013580:	d05d      	beq.n	801363e <_dtoa_r+0x85e>
 8013582:	4aa0      	ldr	r2, [pc, #640]	; (8013804 <_dtoa_r+0xa24>)
 8013584:	189b      	adds	r3, r3, r2
 8013586:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013588:	2101      	movs	r1, #1
 801358a:	18d2      	adds	r2, r2, r3
 801358c:	920a      	str	r2, [sp, #40]	; 0x28
 801358e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013590:	0038      	movs	r0, r7
 8013592:	18d3      	adds	r3, r2, r3
 8013594:	930d      	str	r3, [sp, #52]	; 0x34
 8013596:	f001 f96b 	bl	8014870 <__i2b>
 801359a:	0005      	movs	r5, r0
 801359c:	2c00      	cmp	r4, #0
 801359e:	dd0e      	ble.n	80135be <_dtoa_r+0x7de>
 80135a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	dd0b      	ble.n	80135be <_dtoa_r+0x7de>
 80135a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80135a8:	0023      	movs	r3, r4
 80135aa:	4294      	cmp	r4, r2
 80135ac:	dd00      	ble.n	80135b0 <_dtoa_r+0x7d0>
 80135ae:	0013      	movs	r3, r2
 80135b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80135b2:	1ae4      	subs	r4, r4, r3
 80135b4:	1ad2      	subs	r2, r2, r3
 80135b6:	920a      	str	r2, [sp, #40]	; 0x28
 80135b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80135ba:	1ad3      	subs	r3, r2, r3
 80135bc:	930d      	str	r3, [sp, #52]	; 0x34
 80135be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d01f      	beq.n	8013604 <_dtoa_r+0x824>
 80135c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d054      	beq.n	8013674 <_dtoa_r+0x894>
 80135ca:	2e00      	cmp	r6, #0
 80135cc:	dd11      	ble.n	80135f2 <_dtoa_r+0x812>
 80135ce:	0029      	movs	r1, r5
 80135d0:	0032      	movs	r2, r6
 80135d2:	0038      	movs	r0, r7
 80135d4:	f001 fa12 	bl	80149fc <__pow5mult>
 80135d8:	9a05      	ldr	r2, [sp, #20]
 80135da:	0001      	movs	r1, r0
 80135dc:	0005      	movs	r5, r0
 80135de:	0038      	movs	r0, r7
 80135e0:	f001 f95c 	bl	801489c <__multiply>
 80135e4:	9905      	ldr	r1, [sp, #20]
 80135e6:	9014      	str	r0, [sp, #80]	; 0x50
 80135e8:	0038      	movs	r0, r7
 80135ea:	f001 f845 	bl	8014678 <_Bfree>
 80135ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80135f0:	9305      	str	r3, [sp, #20]
 80135f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80135f4:	1b9a      	subs	r2, r3, r6
 80135f6:	42b3      	cmp	r3, r6
 80135f8:	d004      	beq.n	8013604 <_dtoa_r+0x824>
 80135fa:	0038      	movs	r0, r7
 80135fc:	9905      	ldr	r1, [sp, #20]
 80135fe:	f001 f9fd 	bl	80149fc <__pow5mult>
 8013602:	9005      	str	r0, [sp, #20]
 8013604:	2101      	movs	r1, #1
 8013606:	0038      	movs	r0, r7
 8013608:	f001 f932 	bl	8014870 <__i2b>
 801360c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801360e:	0006      	movs	r6, r0
 8013610:	2b00      	cmp	r3, #0
 8013612:	dd31      	ble.n	8013678 <_dtoa_r+0x898>
 8013614:	001a      	movs	r2, r3
 8013616:	0001      	movs	r1, r0
 8013618:	0038      	movs	r0, r7
 801361a:	f001 f9ef 	bl	80149fc <__pow5mult>
 801361e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013620:	0006      	movs	r6, r0
 8013622:	2b01      	cmp	r3, #1
 8013624:	dd2d      	ble.n	8013682 <_dtoa_r+0x8a2>
 8013626:	2300      	movs	r3, #0
 8013628:	930e      	str	r3, [sp, #56]	; 0x38
 801362a:	6933      	ldr	r3, [r6, #16]
 801362c:	3303      	adds	r3, #3
 801362e:	009b      	lsls	r3, r3, #2
 8013630:	18f3      	adds	r3, r6, r3
 8013632:	6858      	ldr	r0, [r3, #4]
 8013634:	f001 f8d4 	bl	80147e0 <__hi0bits>
 8013638:	2320      	movs	r3, #32
 801363a:	1a18      	subs	r0, r3, r0
 801363c:	e039      	b.n	80136b2 <_dtoa_r+0x8d2>
 801363e:	2336      	movs	r3, #54	; 0x36
 8013640:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013642:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8013644:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8013646:	1a9b      	subs	r3, r3, r2
 8013648:	e79d      	b.n	8013586 <_dtoa_r+0x7a6>
 801364a:	9b07      	ldr	r3, [sp, #28]
 801364c:	1e5e      	subs	r6, r3, #1
 801364e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013650:	42b3      	cmp	r3, r6
 8013652:	db07      	blt.n	8013664 <_dtoa_r+0x884>
 8013654:	1b9e      	subs	r6, r3, r6
 8013656:	9b07      	ldr	r3, [sp, #28]
 8013658:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801365a:	2b00      	cmp	r3, #0
 801365c:	da93      	bge.n	8013586 <_dtoa_r+0x7a6>
 801365e:	1ae4      	subs	r4, r4, r3
 8013660:	2300      	movs	r3, #0
 8013662:	e790      	b.n	8013586 <_dtoa_r+0x7a6>
 8013664:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013666:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013668:	1af3      	subs	r3, r6, r3
 801366a:	18d3      	adds	r3, r2, r3
 801366c:	960e      	str	r6, [sp, #56]	; 0x38
 801366e:	9315      	str	r3, [sp, #84]	; 0x54
 8013670:	2600      	movs	r6, #0
 8013672:	e7f0      	b.n	8013656 <_dtoa_r+0x876>
 8013674:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013676:	e7c0      	b.n	80135fa <_dtoa_r+0x81a>
 8013678:	2300      	movs	r3, #0
 801367a:	930e      	str	r3, [sp, #56]	; 0x38
 801367c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801367e:	2b01      	cmp	r3, #1
 8013680:	dc13      	bgt.n	80136aa <_dtoa_r+0x8ca>
 8013682:	2300      	movs	r3, #0
 8013684:	930e      	str	r3, [sp, #56]	; 0x38
 8013686:	9b08      	ldr	r3, [sp, #32]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d10e      	bne.n	80136aa <_dtoa_r+0x8ca>
 801368c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801368e:	031b      	lsls	r3, r3, #12
 8013690:	d10b      	bne.n	80136aa <_dtoa_r+0x8ca>
 8013692:	4b5d      	ldr	r3, [pc, #372]	; (8013808 <_dtoa_r+0xa28>)
 8013694:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013696:	4213      	tst	r3, r2
 8013698:	d007      	beq.n	80136aa <_dtoa_r+0x8ca>
 801369a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801369c:	3301      	adds	r3, #1
 801369e:	930a      	str	r3, [sp, #40]	; 0x28
 80136a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136a2:	3301      	adds	r3, #1
 80136a4:	930d      	str	r3, [sp, #52]	; 0x34
 80136a6:	2301      	movs	r3, #1
 80136a8:	930e      	str	r3, [sp, #56]	; 0x38
 80136aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136ac:	2001      	movs	r0, #1
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d1bb      	bne.n	801362a <_dtoa_r+0x84a>
 80136b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136b4:	221f      	movs	r2, #31
 80136b6:	1818      	adds	r0, r3, r0
 80136b8:	0003      	movs	r3, r0
 80136ba:	4013      	ands	r3, r2
 80136bc:	4210      	tst	r0, r2
 80136be:	d046      	beq.n	801374e <_dtoa_r+0x96e>
 80136c0:	3201      	adds	r2, #1
 80136c2:	1ad2      	subs	r2, r2, r3
 80136c4:	2a04      	cmp	r2, #4
 80136c6:	dd3f      	ble.n	8013748 <_dtoa_r+0x968>
 80136c8:	221c      	movs	r2, #28
 80136ca:	1ad3      	subs	r3, r2, r3
 80136cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80136ce:	18e4      	adds	r4, r4, r3
 80136d0:	18d2      	adds	r2, r2, r3
 80136d2:	920a      	str	r2, [sp, #40]	; 0x28
 80136d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80136d6:	18d3      	adds	r3, r2, r3
 80136d8:	930d      	str	r3, [sp, #52]	; 0x34
 80136da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136dc:	2b00      	cmp	r3, #0
 80136de:	dd05      	ble.n	80136ec <_dtoa_r+0x90c>
 80136e0:	001a      	movs	r2, r3
 80136e2:	0038      	movs	r0, r7
 80136e4:	9905      	ldr	r1, [sp, #20]
 80136e6:	f001 f9e5 	bl	8014ab4 <__lshift>
 80136ea:	9005      	str	r0, [sp, #20]
 80136ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136ee:	2b00      	cmp	r3, #0
 80136f0:	dd05      	ble.n	80136fe <_dtoa_r+0x91e>
 80136f2:	0031      	movs	r1, r6
 80136f4:	001a      	movs	r2, r3
 80136f6:	0038      	movs	r0, r7
 80136f8:	f001 f9dc 	bl	8014ab4 <__lshift>
 80136fc:	0006      	movs	r6, r0
 80136fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8013700:	2b00      	cmp	r3, #0
 8013702:	d026      	beq.n	8013752 <_dtoa_r+0x972>
 8013704:	0031      	movs	r1, r6
 8013706:	9805      	ldr	r0, [sp, #20]
 8013708:	f001 fa42 	bl	8014b90 <__mcmp>
 801370c:	2800      	cmp	r0, #0
 801370e:	da20      	bge.n	8013752 <_dtoa_r+0x972>
 8013710:	9b02      	ldr	r3, [sp, #8]
 8013712:	220a      	movs	r2, #10
 8013714:	3b01      	subs	r3, #1
 8013716:	9302      	str	r3, [sp, #8]
 8013718:	0038      	movs	r0, r7
 801371a:	2300      	movs	r3, #0
 801371c:	9905      	ldr	r1, [sp, #20]
 801371e:	f000 ffcf 	bl	80146c0 <__multadd>
 8013722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013724:	9005      	str	r0, [sp, #20]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d100      	bne.n	801372c <_dtoa_r+0x94c>
 801372a:	e166      	b.n	80139fa <_dtoa_r+0xc1a>
 801372c:	2300      	movs	r3, #0
 801372e:	0029      	movs	r1, r5
 8013730:	220a      	movs	r2, #10
 8013732:	0038      	movs	r0, r7
 8013734:	f000 ffc4 	bl	80146c0 <__multadd>
 8013738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801373a:	0005      	movs	r5, r0
 801373c:	2b00      	cmp	r3, #0
 801373e:	dc47      	bgt.n	80137d0 <_dtoa_r+0x9f0>
 8013740:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013742:	2b02      	cmp	r3, #2
 8013744:	dc0d      	bgt.n	8013762 <_dtoa_r+0x982>
 8013746:	e043      	b.n	80137d0 <_dtoa_r+0x9f0>
 8013748:	2a04      	cmp	r2, #4
 801374a:	d0c6      	beq.n	80136da <_dtoa_r+0x8fa>
 801374c:	0013      	movs	r3, r2
 801374e:	331c      	adds	r3, #28
 8013750:	e7bc      	b.n	80136cc <_dtoa_r+0x8ec>
 8013752:	9b07      	ldr	r3, [sp, #28]
 8013754:	2b00      	cmp	r3, #0
 8013756:	dc35      	bgt.n	80137c4 <_dtoa_r+0x9e4>
 8013758:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801375a:	2b02      	cmp	r3, #2
 801375c:	dd32      	ble.n	80137c4 <_dtoa_r+0x9e4>
 801375e:	9b07      	ldr	r3, [sp, #28]
 8013760:	930c      	str	r3, [sp, #48]	; 0x30
 8013762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013764:	2b00      	cmp	r3, #0
 8013766:	d10c      	bne.n	8013782 <_dtoa_r+0x9a2>
 8013768:	0031      	movs	r1, r6
 801376a:	2205      	movs	r2, #5
 801376c:	0038      	movs	r0, r7
 801376e:	f000 ffa7 	bl	80146c0 <__multadd>
 8013772:	0006      	movs	r6, r0
 8013774:	0001      	movs	r1, r0
 8013776:	9805      	ldr	r0, [sp, #20]
 8013778:	f001 fa0a 	bl	8014b90 <__mcmp>
 801377c:	2800      	cmp	r0, #0
 801377e:	dd00      	ble.n	8013782 <_dtoa_r+0x9a2>
 8013780:	e5a5      	b.n	80132ce <_dtoa_r+0x4ee>
 8013782:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8013784:	43db      	mvns	r3, r3
 8013786:	9302      	str	r3, [sp, #8]
 8013788:	9b06      	ldr	r3, [sp, #24]
 801378a:	9308      	str	r3, [sp, #32]
 801378c:	2400      	movs	r4, #0
 801378e:	0031      	movs	r1, r6
 8013790:	0038      	movs	r0, r7
 8013792:	f000 ff71 	bl	8014678 <_Bfree>
 8013796:	2d00      	cmp	r5, #0
 8013798:	d100      	bne.n	801379c <_dtoa_r+0x9bc>
 801379a:	e6b7      	b.n	801350c <_dtoa_r+0x72c>
 801379c:	2c00      	cmp	r4, #0
 801379e:	d005      	beq.n	80137ac <_dtoa_r+0x9cc>
 80137a0:	42ac      	cmp	r4, r5
 80137a2:	d003      	beq.n	80137ac <_dtoa_r+0x9cc>
 80137a4:	0021      	movs	r1, r4
 80137a6:	0038      	movs	r0, r7
 80137a8:	f000 ff66 	bl	8014678 <_Bfree>
 80137ac:	0029      	movs	r1, r5
 80137ae:	0038      	movs	r0, r7
 80137b0:	f000 ff62 	bl	8014678 <_Bfree>
 80137b4:	e6aa      	b.n	801350c <_dtoa_r+0x72c>
 80137b6:	2600      	movs	r6, #0
 80137b8:	0035      	movs	r5, r6
 80137ba:	e7e2      	b.n	8013782 <_dtoa_r+0x9a2>
 80137bc:	9602      	str	r6, [sp, #8]
 80137be:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80137c0:	0035      	movs	r5, r6
 80137c2:	e584      	b.n	80132ce <_dtoa_r+0x4ee>
 80137c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d100      	bne.n	80137cc <_dtoa_r+0x9ec>
 80137ca:	e0ce      	b.n	801396a <_dtoa_r+0xb8a>
 80137cc:	9b07      	ldr	r3, [sp, #28]
 80137ce:	930c      	str	r3, [sp, #48]	; 0x30
 80137d0:	2c00      	cmp	r4, #0
 80137d2:	dd05      	ble.n	80137e0 <_dtoa_r+0xa00>
 80137d4:	0029      	movs	r1, r5
 80137d6:	0022      	movs	r2, r4
 80137d8:	0038      	movs	r0, r7
 80137da:	f001 f96b 	bl	8014ab4 <__lshift>
 80137de:	0005      	movs	r5, r0
 80137e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80137e2:	0028      	movs	r0, r5
 80137e4:	2b00      	cmp	r3, #0
 80137e6:	d022      	beq.n	801382e <_dtoa_r+0xa4e>
 80137e8:	0038      	movs	r0, r7
 80137ea:	6869      	ldr	r1, [r5, #4]
 80137ec:	f000 ff00 	bl	80145f0 <_Balloc>
 80137f0:	1e04      	subs	r4, r0, #0
 80137f2:	d10f      	bne.n	8013814 <_dtoa_r+0xa34>
 80137f4:	0002      	movs	r2, r0
 80137f6:	4b05      	ldr	r3, [pc, #20]	; (801380c <_dtoa_r+0xa2c>)
 80137f8:	4905      	ldr	r1, [pc, #20]	; (8013810 <_dtoa_r+0xa30>)
 80137fa:	f7ff fb06 	bl	8012e0a <_dtoa_r+0x2a>
 80137fe:	46c0      	nop			; (mov r8, r8)
 8013800:	40240000 	.word	0x40240000
 8013804:	00000433 	.word	0x00000433
 8013808:	7ff00000 	.word	0x7ff00000
 801380c:	08017a1c 	.word	0x08017a1c
 8013810:	000002ea 	.word	0x000002ea
 8013814:	0029      	movs	r1, r5
 8013816:	692b      	ldr	r3, [r5, #16]
 8013818:	310c      	adds	r1, #12
 801381a:	1c9a      	adds	r2, r3, #2
 801381c:	0092      	lsls	r2, r2, #2
 801381e:	300c      	adds	r0, #12
 8013820:	f7fd fafc 	bl	8010e1c <memcpy>
 8013824:	2201      	movs	r2, #1
 8013826:	0021      	movs	r1, r4
 8013828:	0038      	movs	r0, r7
 801382a:	f001 f943 	bl	8014ab4 <__lshift>
 801382e:	9b06      	ldr	r3, [sp, #24]
 8013830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013832:	930a      	str	r3, [sp, #40]	; 0x28
 8013834:	3b01      	subs	r3, #1
 8013836:	189b      	adds	r3, r3, r2
 8013838:	2201      	movs	r2, #1
 801383a:	002c      	movs	r4, r5
 801383c:	0005      	movs	r5, r0
 801383e:	9314      	str	r3, [sp, #80]	; 0x50
 8013840:	9b08      	ldr	r3, [sp, #32]
 8013842:	4013      	ands	r3, r2
 8013844:	930f      	str	r3, [sp, #60]	; 0x3c
 8013846:	0031      	movs	r1, r6
 8013848:	9805      	ldr	r0, [sp, #20]
 801384a:	f7ff fa3d 	bl	8012cc8 <quorem>
 801384e:	0003      	movs	r3, r0
 8013850:	0021      	movs	r1, r4
 8013852:	3330      	adds	r3, #48	; 0x30
 8013854:	900d      	str	r0, [sp, #52]	; 0x34
 8013856:	9805      	ldr	r0, [sp, #20]
 8013858:	9307      	str	r3, [sp, #28]
 801385a:	f001 f999 	bl	8014b90 <__mcmp>
 801385e:	002a      	movs	r2, r5
 8013860:	900e      	str	r0, [sp, #56]	; 0x38
 8013862:	0031      	movs	r1, r6
 8013864:	0038      	movs	r0, r7
 8013866:	f001 f9af 	bl	8014bc8 <__mdiff>
 801386a:	68c3      	ldr	r3, [r0, #12]
 801386c:	9008      	str	r0, [sp, #32]
 801386e:	9310      	str	r3, [sp, #64]	; 0x40
 8013870:	2301      	movs	r3, #1
 8013872:	930c      	str	r3, [sp, #48]	; 0x30
 8013874:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013876:	2b00      	cmp	r3, #0
 8013878:	d104      	bne.n	8013884 <_dtoa_r+0xaa4>
 801387a:	0001      	movs	r1, r0
 801387c:	9805      	ldr	r0, [sp, #20]
 801387e:	f001 f987 	bl	8014b90 <__mcmp>
 8013882:	900c      	str	r0, [sp, #48]	; 0x30
 8013884:	0038      	movs	r0, r7
 8013886:	9908      	ldr	r1, [sp, #32]
 8013888:	f000 fef6 	bl	8014678 <_Bfree>
 801388c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801388e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013890:	3301      	adds	r3, #1
 8013892:	9308      	str	r3, [sp, #32]
 8013894:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013896:	4313      	orrs	r3, r2
 8013898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801389a:	4313      	orrs	r3, r2
 801389c:	d10c      	bne.n	80138b8 <_dtoa_r+0xad8>
 801389e:	9b07      	ldr	r3, [sp, #28]
 80138a0:	2b39      	cmp	r3, #57	; 0x39
 80138a2:	d026      	beq.n	80138f2 <_dtoa_r+0xb12>
 80138a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	dd02      	ble.n	80138b0 <_dtoa_r+0xad0>
 80138aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80138ac:	3331      	adds	r3, #49	; 0x31
 80138ae:	9307      	str	r3, [sp, #28]
 80138b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138b2:	9a07      	ldr	r2, [sp, #28]
 80138b4:	701a      	strb	r2, [r3, #0]
 80138b6:	e76a      	b.n	801378e <_dtoa_r+0x9ae>
 80138b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	db04      	blt.n	80138c8 <_dtoa_r+0xae8>
 80138be:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80138c0:	4313      	orrs	r3, r2
 80138c2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80138c4:	4313      	orrs	r3, r2
 80138c6:	d11f      	bne.n	8013908 <_dtoa_r+0xb28>
 80138c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	ddf0      	ble.n	80138b0 <_dtoa_r+0xad0>
 80138ce:	9905      	ldr	r1, [sp, #20]
 80138d0:	2201      	movs	r2, #1
 80138d2:	0038      	movs	r0, r7
 80138d4:	f001 f8ee 	bl	8014ab4 <__lshift>
 80138d8:	0031      	movs	r1, r6
 80138da:	9005      	str	r0, [sp, #20]
 80138dc:	f001 f958 	bl	8014b90 <__mcmp>
 80138e0:	2800      	cmp	r0, #0
 80138e2:	dc03      	bgt.n	80138ec <_dtoa_r+0xb0c>
 80138e4:	d1e4      	bne.n	80138b0 <_dtoa_r+0xad0>
 80138e6:	9b07      	ldr	r3, [sp, #28]
 80138e8:	07db      	lsls	r3, r3, #31
 80138ea:	d5e1      	bpl.n	80138b0 <_dtoa_r+0xad0>
 80138ec:	9b07      	ldr	r3, [sp, #28]
 80138ee:	2b39      	cmp	r3, #57	; 0x39
 80138f0:	d1db      	bne.n	80138aa <_dtoa_r+0xaca>
 80138f2:	2339      	movs	r3, #57	; 0x39
 80138f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80138f6:	7013      	strb	r3, [r2, #0]
 80138f8:	9b08      	ldr	r3, [sp, #32]
 80138fa:	9308      	str	r3, [sp, #32]
 80138fc:	3b01      	subs	r3, #1
 80138fe:	781a      	ldrb	r2, [r3, #0]
 8013900:	2a39      	cmp	r2, #57	; 0x39
 8013902:	d068      	beq.n	80139d6 <_dtoa_r+0xbf6>
 8013904:	3201      	adds	r2, #1
 8013906:	e7d5      	b.n	80138b4 <_dtoa_r+0xad4>
 8013908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801390a:	2b00      	cmp	r3, #0
 801390c:	dd07      	ble.n	801391e <_dtoa_r+0xb3e>
 801390e:	9b07      	ldr	r3, [sp, #28]
 8013910:	2b39      	cmp	r3, #57	; 0x39
 8013912:	d0ee      	beq.n	80138f2 <_dtoa_r+0xb12>
 8013914:	9b07      	ldr	r3, [sp, #28]
 8013916:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013918:	3301      	adds	r3, #1
 801391a:	7013      	strb	r3, [r2, #0]
 801391c:	e737      	b.n	801378e <_dtoa_r+0x9ae>
 801391e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013920:	9a07      	ldr	r2, [sp, #28]
 8013922:	701a      	strb	r2, [r3, #0]
 8013924:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013926:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013928:	4293      	cmp	r3, r2
 801392a:	d03e      	beq.n	80139aa <_dtoa_r+0xbca>
 801392c:	2300      	movs	r3, #0
 801392e:	220a      	movs	r2, #10
 8013930:	9905      	ldr	r1, [sp, #20]
 8013932:	0038      	movs	r0, r7
 8013934:	f000 fec4 	bl	80146c0 <__multadd>
 8013938:	2300      	movs	r3, #0
 801393a:	9005      	str	r0, [sp, #20]
 801393c:	220a      	movs	r2, #10
 801393e:	0021      	movs	r1, r4
 8013940:	0038      	movs	r0, r7
 8013942:	42ac      	cmp	r4, r5
 8013944:	d106      	bne.n	8013954 <_dtoa_r+0xb74>
 8013946:	f000 febb 	bl	80146c0 <__multadd>
 801394a:	0004      	movs	r4, r0
 801394c:	0005      	movs	r5, r0
 801394e:	9b08      	ldr	r3, [sp, #32]
 8013950:	930a      	str	r3, [sp, #40]	; 0x28
 8013952:	e778      	b.n	8013846 <_dtoa_r+0xa66>
 8013954:	f000 feb4 	bl	80146c0 <__multadd>
 8013958:	0029      	movs	r1, r5
 801395a:	0004      	movs	r4, r0
 801395c:	2300      	movs	r3, #0
 801395e:	220a      	movs	r2, #10
 8013960:	0038      	movs	r0, r7
 8013962:	f000 fead 	bl	80146c0 <__multadd>
 8013966:	0005      	movs	r5, r0
 8013968:	e7f1      	b.n	801394e <_dtoa_r+0xb6e>
 801396a:	9b07      	ldr	r3, [sp, #28]
 801396c:	930c      	str	r3, [sp, #48]	; 0x30
 801396e:	2400      	movs	r4, #0
 8013970:	0031      	movs	r1, r6
 8013972:	9805      	ldr	r0, [sp, #20]
 8013974:	f7ff f9a8 	bl	8012cc8 <quorem>
 8013978:	9b06      	ldr	r3, [sp, #24]
 801397a:	3030      	adds	r0, #48	; 0x30
 801397c:	5518      	strb	r0, [r3, r4]
 801397e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013980:	3401      	adds	r4, #1
 8013982:	9007      	str	r0, [sp, #28]
 8013984:	42a3      	cmp	r3, r4
 8013986:	dd07      	ble.n	8013998 <_dtoa_r+0xbb8>
 8013988:	2300      	movs	r3, #0
 801398a:	220a      	movs	r2, #10
 801398c:	0038      	movs	r0, r7
 801398e:	9905      	ldr	r1, [sp, #20]
 8013990:	f000 fe96 	bl	80146c0 <__multadd>
 8013994:	9005      	str	r0, [sp, #20]
 8013996:	e7eb      	b.n	8013970 <_dtoa_r+0xb90>
 8013998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801399a:	2001      	movs	r0, #1
 801399c:	2b00      	cmp	r3, #0
 801399e:	dd00      	ble.n	80139a2 <_dtoa_r+0xbc2>
 80139a0:	0018      	movs	r0, r3
 80139a2:	2400      	movs	r4, #0
 80139a4:	9b06      	ldr	r3, [sp, #24]
 80139a6:	181b      	adds	r3, r3, r0
 80139a8:	9308      	str	r3, [sp, #32]
 80139aa:	9905      	ldr	r1, [sp, #20]
 80139ac:	2201      	movs	r2, #1
 80139ae:	0038      	movs	r0, r7
 80139b0:	f001 f880 	bl	8014ab4 <__lshift>
 80139b4:	0031      	movs	r1, r6
 80139b6:	9005      	str	r0, [sp, #20]
 80139b8:	f001 f8ea 	bl	8014b90 <__mcmp>
 80139bc:	2800      	cmp	r0, #0
 80139be:	dc9b      	bgt.n	80138f8 <_dtoa_r+0xb18>
 80139c0:	d102      	bne.n	80139c8 <_dtoa_r+0xbe8>
 80139c2:	9b07      	ldr	r3, [sp, #28]
 80139c4:	07db      	lsls	r3, r3, #31
 80139c6:	d497      	bmi.n	80138f8 <_dtoa_r+0xb18>
 80139c8:	9b08      	ldr	r3, [sp, #32]
 80139ca:	9308      	str	r3, [sp, #32]
 80139cc:	3b01      	subs	r3, #1
 80139ce:	781a      	ldrb	r2, [r3, #0]
 80139d0:	2a30      	cmp	r2, #48	; 0x30
 80139d2:	d0fa      	beq.n	80139ca <_dtoa_r+0xbea>
 80139d4:	e6db      	b.n	801378e <_dtoa_r+0x9ae>
 80139d6:	9a06      	ldr	r2, [sp, #24]
 80139d8:	429a      	cmp	r2, r3
 80139da:	d18e      	bne.n	80138fa <_dtoa_r+0xb1a>
 80139dc:	9b02      	ldr	r3, [sp, #8]
 80139de:	3301      	adds	r3, #1
 80139e0:	9302      	str	r3, [sp, #8]
 80139e2:	2331      	movs	r3, #49	; 0x31
 80139e4:	e799      	b.n	801391a <_dtoa_r+0xb3a>
 80139e6:	4b09      	ldr	r3, [pc, #36]	; (8013a0c <_dtoa_r+0xc2c>)
 80139e8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80139ea:	9306      	str	r3, [sp, #24]
 80139ec:	4b08      	ldr	r3, [pc, #32]	; (8013a10 <_dtoa_r+0xc30>)
 80139ee:	2a00      	cmp	r2, #0
 80139f0:	d001      	beq.n	80139f6 <_dtoa_r+0xc16>
 80139f2:	f7ff fa3f 	bl	8012e74 <_dtoa_r+0x94>
 80139f6:	f7ff fa3f 	bl	8012e78 <_dtoa_r+0x98>
 80139fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	dcb6      	bgt.n	801396e <_dtoa_r+0xb8e>
 8013a00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8013a02:	2b02      	cmp	r3, #2
 8013a04:	dd00      	ble.n	8013a08 <_dtoa_r+0xc28>
 8013a06:	e6ac      	b.n	8013762 <_dtoa_r+0x982>
 8013a08:	e7b1      	b.n	801396e <_dtoa_r+0xb8e>
 8013a0a:	46c0      	nop			; (mov r8, r8)
 8013a0c:	0801799d 	.word	0x0801799d
 8013a10:	080179a5 	.word	0x080179a5

08013a14 <__sflush_r>:
 8013a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013a16:	898b      	ldrh	r3, [r1, #12]
 8013a18:	0005      	movs	r5, r0
 8013a1a:	000c      	movs	r4, r1
 8013a1c:	071a      	lsls	r2, r3, #28
 8013a1e:	d45f      	bmi.n	8013ae0 <__sflush_r+0xcc>
 8013a20:	684a      	ldr	r2, [r1, #4]
 8013a22:	2a00      	cmp	r2, #0
 8013a24:	dc04      	bgt.n	8013a30 <__sflush_r+0x1c>
 8013a26:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8013a28:	2a00      	cmp	r2, #0
 8013a2a:	dc01      	bgt.n	8013a30 <__sflush_r+0x1c>
 8013a2c:	2000      	movs	r0, #0
 8013a2e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013a30:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8013a32:	2f00      	cmp	r7, #0
 8013a34:	d0fa      	beq.n	8013a2c <__sflush_r+0x18>
 8013a36:	2200      	movs	r2, #0
 8013a38:	2180      	movs	r1, #128	; 0x80
 8013a3a:	682e      	ldr	r6, [r5, #0]
 8013a3c:	602a      	str	r2, [r5, #0]
 8013a3e:	001a      	movs	r2, r3
 8013a40:	0149      	lsls	r1, r1, #5
 8013a42:	400a      	ands	r2, r1
 8013a44:	420b      	tst	r3, r1
 8013a46:	d034      	beq.n	8013ab2 <__sflush_r+0x9e>
 8013a48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013a4a:	89a3      	ldrh	r3, [r4, #12]
 8013a4c:	075b      	lsls	r3, r3, #29
 8013a4e:	d506      	bpl.n	8013a5e <__sflush_r+0x4a>
 8013a50:	6863      	ldr	r3, [r4, #4]
 8013a52:	1ac0      	subs	r0, r0, r3
 8013a54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d001      	beq.n	8013a5e <__sflush_r+0x4a>
 8013a5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013a5c:	1ac0      	subs	r0, r0, r3
 8013a5e:	0002      	movs	r2, r0
 8013a60:	6a21      	ldr	r1, [r4, #32]
 8013a62:	2300      	movs	r3, #0
 8013a64:	0028      	movs	r0, r5
 8013a66:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8013a68:	47b8      	blx	r7
 8013a6a:	89a1      	ldrh	r1, [r4, #12]
 8013a6c:	1c43      	adds	r3, r0, #1
 8013a6e:	d106      	bne.n	8013a7e <__sflush_r+0x6a>
 8013a70:	682b      	ldr	r3, [r5, #0]
 8013a72:	2b1d      	cmp	r3, #29
 8013a74:	d831      	bhi.n	8013ada <__sflush_r+0xc6>
 8013a76:	4a2c      	ldr	r2, [pc, #176]	; (8013b28 <__sflush_r+0x114>)
 8013a78:	40da      	lsrs	r2, r3
 8013a7a:	07d3      	lsls	r3, r2, #31
 8013a7c:	d52d      	bpl.n	8013ada <__sflush_r+0xc6>
 8013a7e:	2300      	movs	r3, #0
 8013a80:	6063      	str	r3, [r4, #4]
 8013a82:	6923      	ldr	r3, [r4, #16]
 8013a84:	6023      	str	r3, [r4, #0]
 8013a86:	04cb      	lsls	r3, r1, #19
 8013a88:	d505      	bpl.n	8013a96 <__sflush_r+0x82>
 8013a8a:	1c43      	adds	r3, r0, #1
 8013a8c:	d102      	bne.n	8013a94 <__sflush_r+0x80>
 8013a8e:	682b      	ldr	r3, [r5, #0]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d100      	bne.n	8013a96 <__sflush_r+0x82>
 8013a94:	6560      	str	r0, [r4, #84]	; 0x54
 8013a96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a98:	602e      	str	r6, [r5, #0]
 8013a9a:	2900      	cmp	r1, #0
 8013a9c:	d0c6      	beq.n	8013a2c <__sflush_r+0x18>
 8013a9e:	0023      	movs	r3, r4
 8013aa0:	3344      	adds	r3, #68	; 0x44
 8013aa2:	4299      	cmp	r1, r3
 8013aa4:	d002      	beq.n	8013aac <__sflush_r+0x98>
 8013aa6:	0028      	movs	r0, r5
 8013aa8:	f001 fa98 	bl	8014fdc <_free_r>
 8013aac:	2000      	movs	r0, #0
 8013aae:	6360      	str	r0, [r4, #52]	; 0x34
 8013ab0:	e7bd      	b.n	8013a2e <__sflush_r+0x1a>
 8013ab2:	2301      	movs	r3, #1
 8013ab4:	0028      	movs	r0, r5
 8013ab6:	6a21      	ldr	r1, [r4, #32]
 8013ab8:	47b8      	blx	r7
 8013aba:	1c43      	adds	r3, r0, #1
 8013abc:	d1c5      	bne.n	8013a4a <__sflush_r+0x36>
 8013abe:	682b      	ldr	r3, [r5, #0]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d0c2      	beq.n	8013a4a <__sflush_r+0x36>
 8013ac4:	2b1d      	cmp	r3, #29
 8013ac6:	d001      	beq.n	8013acc <__sflush_r+0xb8>
 8013ac8:	2b16      	cmp	r3, #22
 8013aca:	d101      	bne.n	8013ad0 <__sflush_r+0xbc>
 8013acc:	602e      	str	r6, [r5, #0]
 8013ace:	e7ad      	b.n	8013a2c <__sflush_r+0x18>
 8013ad0:	2340      	movs	r3, #64	; 0x40
 8013ad2:	89a2      	ldrh	r2, [r4, #12]
 8013ad4:	4313      	orrs	r3, r2
 8013ad6:	81a3      	strh	r3, [r4, #12]
 8013ad8:	e7a9      	b.n	8013a2e <__sflush_r+0x1a>
 8013ada:	2340      	movs	r3, #64	; 0x40
 8013adc:	430b      	orrs	r3, r1
 8013ade:	e7fa      	b.n	8013ad6 <__sflush_r+0xc2>
 8013ae0:	690f      	ldr	r7, [r1, #16]
 8013ae2:	2f00      	cmp	r7, #0
 8013ae4:	d0a2      	beq.n	8013a2c <__sflush_r+0x18>
 8013ae6:	680a      	ldr	r2, [r1, #0]
 8013ae8:	600f      	str	r7, [r1, #0]
 8013aea:	1bd2      	subs	r2, r2, r7
 8013aec:	9201      	str	r2, [sp, #4]
 8013aee:	2200      	movs	r2, #0
 8013af0:	079b      	lsls	r3, r3, #30
 8013af2:	d100      	bne.n	8013af6 <__sflush_r+0xe2>
 8013af4:	694a      	ldr	r2, [r1, #20]
 8013af6:	60a2      	str	r2, [r4, #8]
 8013af8:	9b01      	ldr	r3, [sp, #4]
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	dc00      	bgt.n	8013b00 <__sflush_r+0xec>
 8013afe:	e795      	b.n	8013a2c <__sflush_r+0x18>
 8013b00:	003a      	movs	r2, r7
 8013b02:	0028      	movs	r0, r5
 8013b04:	9b01      	ldr	r3, [sp, #4]
 8013b06:	6a21      	ldr	r1, [r4, #32]
 8013b08:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013b0a:	47b0      	blx	r6
 8013b0c:	2800      	cmp	r0, #0
 8013b0e:	dc06      	bgt.n	8013b1e <__sflush_r+0x10a>
 8013b10:	2340      	movs	r3, #64	; 0x40
 8013b12:	2001      	movs	r0, #1
 8013b14:	89a2      	ldrh	r2, [r4, #12]
 8013b16:	4240      	negs	r0, r0
 8013b18:	4313      	orrs	r3, r2
 8013b1a:	81a3      	strh	r3, [r4, #12]
 8013b1c:	e787      	b.n	8013a2e <__sflush_r+0x1a>
 8013b1e:	9b01      	ldr	r3, [sp, #4]
 8013b20:	183f      	adds	r7, r7, r0
 8013b22:	1a1b      	subs	r3, r3, r0
 8013b24:	9301      	str	r3, [sp, #4]
 8013b26:	e7e7      	b.n	8013af8 <__sflush_r+0xe4>
 8013b28:	20400001 	.word	0x20400001

08013b2c <_fflush_r>:
 8013b2c:	690b      	ldr	r3, [r1, #16]
 8013b2e:	b570      	push	{r4, r5, r6, lr}
 8013b30:	0005      	movs	r5, r0
 8013b32:	000c      	movs	r4, r1
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d102      	bne.n	8013b3e <_fflush_r+0x12>
 8013b38:	2500      	movs	r5, #0
 8013b3a:	0028      	movs	r0, r5
 8013b3c:	bd70      	pop	{r4, r5, r6, pc}
 8013b3e:	2800      	cmp	r0, #0
 8013b40:	d004      	beq.n	8013b4c <_fflush_r+0x20>
 8013b42:	6983      	ldr	r3, [r0, #24]
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d101      	bne.n	8013b4c <_fflush_r+0x20>
 8013b48:	f000 f892 	bl	8013c70 <__sinit>
 8013b4c:	4b14      	ldr	r3, [pc, #80]	; (8013ba0 <_fflush_r+0x74>)
 8013b4e:	429c      	cmp	r4, r3
 8013b50:	d11b      	bne.n	8013b8a <_fflush_r+0x5e>
 8013b52:	686c      	ldr	r4, [r5, #4]
 8013b54:	220c      	movs	r2, #12
 8013b56:	5ea3      	ldrsh	r3, [r4, r2]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d0ed      	beq.n	8013b38 <_fflush_r+0xc>
 8013b5c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013b5e:	07d2      	lsls	r2, r2, #31
 8013b60:	d404      	bmi.n	8013b6c <_fflush_r+0x40>
 8013b62:	059b      	lsls	r3, r3, #22
 8013b64:	d402      	bmi.n	8013b6c <_fflush_r+0x40>
 8013b66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b68:	f000 fcab 	bl	80144c2 <__retarget_lock_acquire_recursive>
 8013b6c:	0028      	movs	r0, r5
 8013b6e:	0021      	movs	r1, r4
 8013b70:	f7ff ff50 	bl	8013a14 <__sflush_r>
 8013b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b76:	0005      	movs	r5, r0
 8013b78:	07db      	lsls	r3, r3, #31
 8013b7a:	d4de      	bmi.n	8013b3a <_fflush_r+0xe>
 8013b7c:	89a3      	ldrh	r3, [r4, #12]
 8013b7e:	059b      	lsls	r3, r3, #22
 8013b80:	d4db      	bmi.n	8013b3a <_fflush_r+0xe>
 8013b82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b84:	f000 fc9e 	bl	80144c4 <__retarget_lock_release_recursive>
 8013b88:	e7d7      	b.n	8013b3a <_fflush_r+0xe>
 8013b8a:	4b06      	ldr	r3, [pc, #24]	; (8013ba4 <_fflush_r+0x78>)
 8013b8c:	429c      	cmp	r4, r3
 8013b8e:	d101      	bne.n	8013b94 <_fflush_r+0x68>
 8013b90:	68ac      	ldr	r4, [r5, #8]
 8013b92:	e7df      	b.n	8013b54 <_fflush_r+0x28>
 8013b94:	4b04      	ldr	r3, [pc, #16]	; (8013ba8 <_fflush_r+0x7c>)
 8013b96:	429c      	cmp	r4, r3
 8013b98:	d1dc      	bne.n	8013b54 <_fflush_r+0x28>
 8013b9a:	68ec      	ldr	r4, [r5, #12]
 8013b9c:	e7da      	b.n	8013b54 <_fflush_r+0x28>
 8013b9e:	46c0      	nop			; (mov r8, r8)
 8013ba0:	08017a50 	.word	0x08017a50
 8013ba4:	08017a70 	.word	0x08017a70
 8013ba8:	08017a30 	.word	0x08017a30

08013bac <std>:
 8013bac:	2300      	movs	r3, #0
 8013bae:	b510      	push	{r4, lr}
 8013bb0:	0004      	movs	r4, r0
 8013bb2:	6003      	str	r3, [r0, #0]
 8013bb4:	6043      	str	r3, [r0, #4]
 8013bb6:	6083      	str	r3, [r0, #8]
 8013bb8:	8181      	strh	r1, [r0, #12]
 8013bba:	6643      	str	r3, [r0, #100]	; 0x64
 8013bbc:	0019      	movs	r1, r3
 8013bbe:	81c2      	strh	r2, [r0, #14]
 8013bc0:	6103      	str	r3, [r0, #16]
 8013bc2:	6143      	str	r3, [r0, #20]
 8013bc4:	6183      	str	r3, [r0, #24]
 8013bc6:	2208      	movs	r2, #8
 8013bc8:	305c      	adds	r0, #92	; 0x5c
 8013bca:	f7fd f930 	bl	8010e2e <memset>
 8013bce:	4b05      	ldr	r3, [pc, #20]	; (8013be4 <std+0x38>)
 8013bd0:	6224      	str	r4, [r4, #32]
 8013bd2:	6263      	str	r3, [r4, #36]	; 0x24
 8013bd4:	4b04      	ldr	r3, [pc, #16]	; (8013be8 <std+0x3c>)
 8013bd6:	62a3      	str	r3, [r4, #40]	; 0x28
 8013bd8:	4b04      	ldr	r3, [pc, #16]	; (8013bec <std+0x40>)
 8013bda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013bdc:	4b04      	ldr	r3, [pc, #16]	; (8013bf0 <std+0x44>)
 8013bde:	6323      	str	r3, [r4, #48]	; 0x30
 8013be0:	bd10      	pop	{r4, pc}
 8013be2:	46c0      	nop			; (mov r8, r8)
 8013be4:	08015759 	.word	0x08015759
 8013be8:	08015781 	.word	0x08015781
 8013bec:	080157b9 	.word	0x080157b9
 8013bf0:	080157e5 	.word	0x080157e5

08013bf4 <_cleanup_r>:
 8013bf4:	b510      	push	{r4, lr}
 8013bf6:	4902      	ldr	r1, [pc, #8]	; (8013c00 <_cleanup_r+0xc>)
 8013bf8:	f000 f8ca 	bl	8013d90 <_fwalk_reent>
 8013bfc:	bd10      	pop	{r4, pc}
 8013bfe:	46c0      	nop			; (mov r8, r8)
 8013c00:	08013b2d 	.word	0x08013b2d

08013c04 <__sfmoreglue>:
 8013c04:	b570      	push	{r4, r5, r6, lr}
 8013c06:	2568      	movs	r5, #104	; 0x68
 8013c08:	1e4a      	subs	r2, r1, #1
 8013c0a:	4355      	muls	r5, r2
 8013c0c:	000e      	movs	r6, r1
 8013c0e:	0029      	movs	r1, r5
 8013c10:	3174      	adds	r1, #116	; 0x74
 8013c12:	f001 fa4f 	bl	80150b4 <_malloc_r>
 8013c16:	1e04      	subs	r4, r0, #0
 8013c18:	d008      	beq.n	8013c2c <__sfmoreglue+0x28>
 8013c1a:	2100      	movs	r1, #0
 8013c1c:	002a      	movs	r2, r5
 8013c1e:	6001      	str	r1, [r0, #0]
 8013c20:	6046      	str	r6, [r0, #4]
 8013c22:	300c      	adds	r0, #12
 8013c24:	60a0      	str	r0, [r4, #8]
 8013c26:	3268      	adds	r2, #104	; 0x68
 8013c28:	f7fd f901 	bl	8010e2e <memset>
 8013c2c:	0020      	movs	r0, r4
 8013c2e:	bd70      	pop	{r4, r5, r6, pc}

08013c30 <__sfp_lock_acquire>:
 8013c30:	b510      	push	{r4, lr}
 8013c32:	4802      	ldr	r0, [pc, #8]	; (8013c3c <__sfp_lock_acquire+0xc>)
 8013c34:	f000 fc45 	bl	80144c2 <__retarget_lock_acquire_recursive>
 8013c38:	bd10      	pop	{r4, pc}
 8013c3a:	46c0      	nop			; (mov r8, r8)
 8013c3c:	20000c95 	.word	0x20000c95

08013c40 <__sfp_lock_release>:
 8013c40:	b510      	push	{r4, lr}
 8013c42:	4802      	ldr	r0, [pc, #8]	; (8013c4c <__sfp_lock_release+0xc>)
 8013c44:	f000 fc3e 	bl	80144c4 <__retarget_lock_release_recursive>
 8013c48:	bd10      	pop	{r4, pc}
 8013c4a:	46c0      	nop			; (mov r8, r8)
 8013c4c:	20000c95 	.word	0x20000c95

08013c50 <__sinit_lock_acquire>:
 8013c50:	b510      	push	{r4, lr}
 8013c52:	4802      	ldr	r0, [pc, #8]	; (8013c5c <__sinit_lock_acquire+0xc>)
 8013c54:	f000 fc35 	bl	80144c2 <__retarget_lock_acquire_recursive>
 8013c58:	bd10      	pop	{r4, pc}
 8013c5a:	46c0      	nop			; (mov r8, r8)
 8013c5c:	20000c96 	.word	0x20000c96

08013c60 <__sinit_lock_release>:
 8013c60:	b510      	push	{r4, lr}
 8013c62:	4802      	ldr	r0, [pc, #8]	; (8013c6c <__sinit_lock_release+0xc>)
 8013c64:	f000 fc2e 	bl	80144c4 <__retarget_lock_release_recursive>
 8013c68:	bd10      	pop	{r4, pc}
 8013c6a:	46c0      	nop			; (mov r8, r8)
 8013c6c:	20000c96 	.word	0x20000c96

08013c70 <__sinit>:
 8013c70:	b513      	push	{r0, r1, r4, lr}
 8013c72:	0004      	movs	r4, r0
 8013c74:	f7ff ffec 	bl	8013c50 <__sinit_lock_acquire>
 8013c78:	69a3      	ldr	r3, [r4, #24]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d002      	beq.n	8013c84 <__sinit+0x14>
 8013c7e:	f7ff ffef 	bl	8013c60 <__sinit_lock_release>
 8013c82:	bd13      	pop	{r0, r1, r4, pc}
 8013c84:	64a3      	str	r3, [r4, #72]	; 0x48
 8013c86:	64e3      	str	r3, [r4, #76]	; 0x4c
 8013c88:	6523      	str	r3, [r4, #80]	; 0x50
 8013c8a:	4b13      	ldr	r3, [pc, #76]	; (8013cd8 <__sinit+0x68>)
 8013c8c:	4a13      	ldr	r2, [pc, #76]	; (8013cdc <__sinit+0x6c>)
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	62a2      	str	r2, [r4, #40]	; 0x28
 8013c92:	9301      	str	r3, [sp, #4]
 8013c94:	42a3      	cmp	r3, r4
 8013c96:	d101      	bne.n	8013c9c <__sinit+0x2c>
 8013c98:	2301      	movs	r3, #1
 8013c9a:	61a3      	str	r3, [r4, #24]
 8013c9c:	0020      	movs	r0, r4
 8013c9e:	f000 f81f 	bl	8013ce0 <__sfp>
 8013ca2:	6060      	str	r0, [r4, #4]
 8013ca4:	0020      	movs	r0, r4
 8013ca6:	f000 f81b 	bl	8013ce0 <__sfp>
 8013caa:	60a0      	str	r0, [r4, #8]
 8013cac:	0020      	movs	r0, r4
 8013cae:	f000 f817 	bl	8013ce0 <__sfp>
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	2104      	movs	r1, #4
 8013cb6:	60e0      	str	r0, [r4, #12]
 8013cb8:	6860      	ldr	r0, [r4, #4]
 8013cba:	f7ff ff77 	bl	8013bac <std>
 8013cbe:	2201      	movs	r2, #1
 8013cc0:	2109      	movs	r1, #9
 8013cc2:	68a0      	ldr	r0, [r4, #8]
 8013cc4:	f7ff ff72 	bl	8013bac <std>
 8013cc8:	2202      	movs	r2, #2
 8013cca:	2112      	movs	r1, #18
 8013ccc:	68e0      	ldr	r0, [r4, #12]
 8013cce:	f7ff ff6d 	bl	8013bac <std>
 8013cd2:	2301      	movs	r3, #1
 8013cd4:	61a3      	str	r3, [r4, #24]
 8013cd6:	e7d2      	b.n	8013c7e <__sinit+0xe>
 8013cd8:	080177d0 	.word	0x080177d0
 8013cdc:	08013bf5 	.word	0x08013bf5

08013ce0 <__sfp>:
 8013ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ce2:	0007      	movs	r7, r0
 8013ce4:	f7ff ffa4 	bl	8013c30 <__sfp_lock_acquire>
 8013ce8:	4b1f      	ldr	r3, [pc, #124]	; (8013d68 <__sfp+0x88>)
 8013cea:	681e      	ldr	r6, [r3, #0]
 8013cec:	69b3      	ldr	r3, [r6, #24]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d102      	bne.n	8013cf8 <__sfp+0x18>
 8013cf2:	0030      	movs	r0, r6
 8013cf4:	f7ff ffbc 	bl	8013c70 <__sinit>
 8013cf8:	3648      	adds	r6, #72	; 0x48
 8013cfa:	68b4      	ldr	r4, [r6, #8]
 8013cfc:	6873      	ldr	r3, [r6, #4]
 8013cfe:	3b01      	subs	r3, #1
 8013d00:	d504      	bpl.n	8013d0c <__sfp+0x2c>
 8013d02:	6833      	ldr	r3, [r6, #0]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d022      	beq.n	8013d4e <__sfp+0x6e>
 8013d08:	6836      	ldr	r6, [r6, #0]
 8013d0a:	e7f6      	b.n	8013cfa <__sfp+0x1a>
 8013d0c:	220c      	movs	r2, #12
 8013d0e:	5ea5      	ldrsh	r5, [r4, r2]
 8013d10:	2d00      	cmp	r5, #0
 8013d12:	d11a      	bne.n	8013d4a <__sfp+0x6a>
 8013d14:	0020      	movs	r0, r4
 8013d16:	4b15      	ldr	r3, [pc, #84]	; (8013d6c <__sfp+0x8c>)
 8013d18:	3058      	adds	r0, #88	; 0x58
 8013d1a:	60e3      	str	r3, [r4, #12]
 8013d1c:	6665      	str	r5, [r4, #100]	; 0x64
 8013d1e:	f000 fbcf 	bl	80144c0 <__retarget_lock_init_recursive>
 8013d22:	f7ff ff8d 	bl	8013c40 <__sfp_lock_release>
 8013d26:	0020      	movs	r0, r4
 8013d28:	2208      	movs	r2, #8
 8013d2a:	0029      	movs	r1, r5
 8013d2c:	6025      	str	r5, [r4, #0]
 8013d2e:	60a5      	str	r5, [r4, #8]
 8013d30:	6065      	str	r5, [r4, #4]
 8013d32:	6125      	str	r5, [r4, #16]
 8013d34:	6165      	str	r5, [r4, #20]
 8013d36:	61a5      	str	r5, [r4, #24]
 8013d38:	305c      	adds	r0, #92	; 0x5c
 8013d3a:	f7fd f878 	bl	8010e2e <memset>
 8013d3e:	6365      	str	r5, [r4, #52]	; 0x34
 8013d40:	63a5      	str	r5, [r4, #56]	; 0x38
 8013d42:	64a5      	str	r5, [r4, #72]	; 0x48
 8013d44:	64e5      	str	r5, [r4, #76]	; 0x4c
 8013d46:	0020      	movs	r0, r4
 8013d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d4a:	3468      	adds	r4, #104	; 0x68
 8013d4c:	e7d7      	b.n	8013cfe <__sfp+0x1e>
 8013d4e:	2104      	movs	r1, #4
 8013d50:	0038      	movs	r0, r7
 8013d52:	f7ff ff57 	bl	8013c04 <__sfmoreglue>
 8013d56:	1e04      	subs	r4, r0, #0
 8013d58:	6030      	str	r0, [r6, #0]
 8013d5a:	d1d5      	bne.n	8013d08 <__sfp+0x28>
 8013d5c:	f7ff ff70 	bl	8013c40 <__sfp_lock_release>
 8013d60:	230c      	movs	r3, #12
 8013d62:	603b      	str	r3, [r7, #0]
 8013d64:	e7ef      	b.n	8013d46 <__sfp+0x66>
 8013d66:	46c0      	nop			; (mov r8, r8)
 8013d68:	080177d0 	.word	0x080177d0
 8013d6c:	ffff0001 	.word	0xffff0001

08013d70 <fiprintf>:
 8013d70:	b40e      	push	{r1, r2, r3}
 8013d72:	b503      	push	{r0, r1, lr}
 8013d74:	0001      	movs	r1, r0
 8013d76:	ab03      	add	r3, sp, #12
 8013d78:	4804      	ldr	r0, [pc, #16]	; (8013d8c <fiprintf+0x1c>)
 8013d7a:	cb04      	ldmia	r3!, {r2}
 8013d7c:	6800      	ldr	r0, [r0, #0]
 8013d7e:	9301      	str	r3, [sp, #4]
 8013d80:	f001 fb98 	bl	80154b4 <_vfiprintf_r>
 8013d84:	b002      	add	sp, #8
 8013d86:	bc08      	pop	{r3}
 8013d88:	b003      	add	sp, #12
 8013d8a:	4718      	bx	r3
 8013d8c:	20000180 	.word	0x20000180

08013d90 <_fwalk_reent>:
 8013d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d92:	0004      	movs	r4, r0
 8013d94:	0006      	movs	r6, r0
 8013d96:	2700      	movs	r7, #0
 8013d98:	9101      	str	r1, [sp, #4]
 8013d9a:	3448      	adds	r4, #72	; 0x48
 8013d9c:	6863      	ldr	r3, [r4, #4]
 8013d9e:	68a5      	ldr	r5, [r4, #8]
 8013da0:	9300      	str	r3, [sp, #0]
 8013da2:	9b00      	ldr	r3, [sp, #0]
 8013da4:	3b01      	subs	r3, #1
 8013da6:	9300      	str	r3, [sp, #0]
 8013da8:	d504      	bpl.n	8013db4 <_fwalk_reent+0x24>
 8013daa:	6824      	ldr	r4, [r4, #0]
 8013dac:	2c00      	cmp	r4, #0
 8013dae:	d1f5      	bne.n	8013d9c <_fwalk_reent+0xc>
 8013db0:	0038      	movs	r0, r7
 8013db2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013db4:	89ab      	ldrh	r3, [r5, #12]
 8013db6:	2b01      	cmp	r3, #1
 8013db8:	d908      	bls.n	8013dcc <_fwalk_reent+0x3c>
 8013dba:	220e      	movs	r2, #14
 8013dbc:	5eab      	ldrsh	r3, [r5, r2]
 8013dbe:	3301      	adds	r3, #1
 8013dc0:	d004      	beq.n	8013dcc <_fwalk_reent+0x3c>
 8013dc2:	0029      	movs	r1, r5
 8013dc4:	0030      	movs	r0, r6
 8013dc6:	9b01      	ldr	r3, [sp, #4]
 8013dc8:	4798      	blx	r3
 8013dca:	4307      	orrs	r7, r0
 8013dcc:	3568      	adds	r5, #104	; 0x68
 8013dce:	e7e8      	b.n	8013da2 <_fwalk_reent+0x12>

08013dd0 <rshift>:
 8013dd0:	0002      	movs	r2, r0
 8013dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dd4:	6904      	ldr	r4, [r0, #16]
 8013dd6:	3214      	adds	r2, #20
 8013dd8:	0013      	movs	r3, r2
 8013dda:	b085      	sub	sp, #20
 8013ddc:	114f      	asrs	r7, r1, #5
 8013dde:	42bc      	cmp	r4, r7
 8013de0:	dd31      	ble.n	8013e46 <rshift+0x76>
 8013de2:	00bb      	lsls	r3, r7, #2
 8013de4:	18d3      	adds	r3, r2, r3
 8013de6:	261f      	movs	r6, #31
 8013de8:	9301      	str	r3, [sp, #4]
 8013dea:	000b      	movs	r3, r1
 8013dec:	00a5      	lsls	r5, r4, #2
 8013dee:	4033      	ands	r3, r6
 8013df0:	1955      	adds	r5, r2, r5
 8013df2:	9302      	str	r3, [sp, #8]
 8013df4:	4231      	tst	r1, r6
 8013df6:	d10c      	bne.n	8013e12 <rshift+0x42>
 8013df8:	0016      	movs	r6, r2
 8013dfa:	9901      	ldr	r1, [sp, #4]
 8013dfc:	428d      	cmp	r5, r1
 8013dfe:	d838      	bhi.n	8013e72 <rshift+0xa2>
 8013e00:	9901      	ldr	r1, [sp, #4]
 8013e02:	2300      	movs	r3, #0
 8013e04:	3903      	subs	r1, #3
 8013e06:	428d      	cmp	r5, r1
 8013e08:	d301      	bcc.n	8013e0e <rshift+0x3e>
 8013e0a:	1be3      	subs	r3, r4, r7
 8013e0c:	009b      	lsls	r3, r3, #2
 8013e0e:	18d3      	adds	r3, r2, r3
 8013e10:	e019      	b.n	8013e46 <rshift+0x76>
 8013e12:	2120      	movs	r1, #32
 8013e14:	9b02      	ldr	r3, [sp, #8]
 8013e16:	9e01      	ldr	r6, [sp, #4]
 8013e18:	1acb      	subs	r3, r1, r3
 8013e1a:	9303      	str	r3, [sp, #12]
 8013e1c:	ce02      	ldmia	r6!, {r1}
 8013e1e:	9b02      	ldr	r3, [sp, #8]
 8013e20:	4694      	mov	ip, r2
 8013e22:	40d9      	lsrs	r1, r3
 8013e24:	9100      	str	r1, [sp, #0]
 8013e26:	42b5      	cmp	r5, r6
 8013e28:	d816      	bhi.n	8013e58 <rshift+0x88>
 8013e2a:	9e01      	ldr	r6, [sp, #4]
 8013e2c:	2300      	movs	r3, #0
 8013e2e:	3601      	adds	r6, #1
 8013e30:	42b5      	cmp	r5, r6
 8013e32:	d302      	bcc.n	8013e3a <rshift+0x6a>
 8013e34:	1be3      	subs	r3, r4, r7
 8013e36:	009b      	lsls	r3, r3, #2
 8013e38:	3b04      	subs	r3, #4
 8013e3a:	9900      	ldr	r1, [sp, #0]
 8013e3c:	18d3      	adds	r3, r2, r3
 8013e3e:	6019      	str	r1, [r3, #0]
 8013e40:	2900      	cmp	r1, #0
 8013e42:	d000      	beq.n	8013e46 <rshift+0x76>
 8013e44:	3304      	adds	r3, #4
 8013e46:	1a99      	subs	r1, r3, r2
 8013e48:	1089      	asrs	r1, r1, #2
 8013e4a:	6101      	str	r1, [r0, #16]
 8013e4c:	4293      	cmp	r3, r2
 8013e4e:	d101      	bne.n	8013e54 <rshift+0x84>
 8013e50:	2300      	movs	r3, #0
 8013e52:	6143      	str	r3, [r0, #20]
 8013e54:	b005      	add	sp, #20
 8013e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e58:	6833      	ldr	r3, [r6, #0]
 8013e5a:	9903      	ldr	r1, [sp, #12]
 8013e5c:	408b      	lsls	r3, r1
 8013e5e:	9900      	ldr	r1, [sp, #0]
 8013e60:	4319      	orrs	r1, r3
 8013e62:	4663      	mov	r3, ip
 8013e64:	c302      	stmia	r3!, {r1}
 8013e66:	469c      	mov	ip, r3
 8013e68:	ce02      	ldmia	r6!, {r1}
 8013e6a:	9b02      	ldr	r3, [sp, #8]
 8013e6c:	40d9      	lsrs	r1, r3
 8013e6e:	9100      	str	r1, [sp, #0]
 8013e70:	e7d9      	b.n	8013e26 <rshift+0x56>
 8013e72:	c908      	ldmia	r1!, {r3}
 8013e74:	c608      	stmia	r6!, {r3}
 8013e76:	e7c1      	b.n	8013dfc <rshift+0x2c>

08013e78 <__hexdig_fun>:
 8013e78:	0002      	movs	r2, r0
 8013e7a:	3a30      	subs	r2, #48	; 0x30
 8013e7c:	0003      	movs	r3, r0
 8013e7e:	2a09      	cmp	r2, #9
 8013e80:	d802      	bhi.n	8013e88 <__hexdig_fun+0x10>
 8013e82:	3b20      	subs	r3, #32
 8013e84:	b2d8      	uxtb	r0, r3
 8013e86:	4770      	bx	lr
 8013e88:	0002      	movs	r2, r0
 8013e8a:	3a61      	subs	r2, #97	; 0x61
 8013e8c:	2a05      	cmp	r2, #5
 8013e8e:	d801      	bhi.n	8013e94 <__hexdig_fun+0x1c>
 8013e90:	3b47      	subs	r3, #71	; 0x47
 8013e92:	e7f7      	b.n	8013e84 <__hexdig_fun+0xc>
 8013e94:	001a      	movs	r2, r3
 8013e96:	3a41      	subs	r2, #65	; 0x41
 8013e98:	2000      	movs	r0, #0
 8013e9a:	2a05      	cmp	r2, #5
 8013e9c:	d8f3      	bhi.n	8013e86 <__hexdig_fun+0xe>
 8013e9e:	3b27      	subs	r3, #39	; 0x27
 8013ea0:	e7f0      	b.n	8013e84 <__hexdig_fun+0xc>
	...

08013ea4 <__gethex>:
 8013ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ea6:	b08d      	sub	sp, #52	; 0x34
 8013ea8:	930a      	str	r3, [sp, #40]	; 0x28
 8013eaa:	4bbf      	ldr	r3, [pc, #764]	; (80141a8 <__gethex+0x304>)
 8013eac:	9005      	str	r0, [sp, #20]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	9109      	str	r1, [sp, #36]	; 0x24
 8013eb2:	0018      	movs	r0, r3
 8013eb4:	9202      	str	r2, [sp, #8]
 8013eb6:	9307      	str	r3, [sp, #28]
 8013eb8:	f7ec f92c 	bl	8000114 <strlen>
 8013ebc:	2202      	movs	r2, #2
 8013ebe:	9b07      	ldr	r3, [sp, #28]
 8013ec0:	4252      	negs	r2, r2
 8013ec2:	181b      	adds	r3, r3, r0
 8013ec4:	3b01      	subs	r3, #1
 8013ec6:	781b      	ldrb	r3, [r3, #0]
 8013ec8:	9003      	str	r0, [sp, #12]
 8013eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8013ecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ece:	6819      	ldr	r1, [r3, #0]
 8013ed0:	1c8b      	adds	r3, r1, #2
 8013ed2:	1a52      	subs	r2, r2, r1
 8013ed4:	18d1      	adds	r1, r2, r3
 8013ed6:	9301      	str	r3, [sp, #4]
 8013ed8:	9108      	str	r1, [sp, #32]
 8013eda:	9901      	ldr	r1, [sp, #4]
 8013edc:	3301      	adds	r3, #1
 8013ede:	7808      	ldrb	r0, [r1, #0]
 8013ee0:	2830      	cmp	r0, #48	; 0x30
 8013ee2:	d0f7      	beq.n	8013ed4 <__gethex+0x30>
 8013ee4:	f7ff ffc8 	bl	8013e78 <__hexdig_fun>
 8013ee8:	2300      	movs	r3, #0
 8013eea:	001c      	movs	r4, r3
 8013eec:	9304      	str	r3, [sp, #16]
 8013eee:	4298      	cmp	r0, r3
 8013ef0:	d11f      	bne.n	8013f32 <__gethex+0x8e>
 8013ef2:	9a03      	ldr	r2, [sp, #12]
 8013ef4:	9907      	ldr	r1, [sp, #28]
 8013ef6:	9801      	ldr	r0, [sp, #4]
 8013ef8:	f001 fc7a 	bl	80157f0 <strncmp>
 8013efc:	0007      	movs	r7, r0
 8013efe:	42a0      	cmp	r0, r4
 8013f00:	d000      	beq.n	8013f04 <__gethex+0x60>
 8013f02:	e06b      	b.n	8013fdc <__gethex+0x138>
 8013f04:	9b01      	ldr	r3, [sp, #4]
 8013f06:	9a03      	ldr	r2, [sp, #12]
 8013f08:	5c98      	ldrb	r0, [r3, r2]
 8013f0a:	189d      	adds	r5, r3, r2
 8013f0c:	f7ff ffb4 	bl	8013e78 <__hexdig_fun>
 8013f10:	2301      	movs	r3, #1
 8013f12:	9304      	str	r3, [sp, #16]
 8013f14:	42a0      	cmp	r0, r4
 8013f16:	d030      	beq.n	8013f7a <__gethex+0xd6>
 8013f18:	9501      	str	r5, [sp, #4]
 8013f1a:	9b01      	ldr	r3, [sp, #4]
 8013f1c:	7818      	ldrb	r0, [r3, #0]
 8013f1e:	2830      	cmp	r0, #48	; 0x30
 8013f20:	d009      	beq.n	8013f36 <__gethex+0x92>
 8013f22:	f7ff ffa9 	bl	8013e78 <__hexdig_fun>
 8013f26:	4242      	negs	r2, r0
 8013f28:	4142      	adcs	r2, r0
 8013f2a:	2301      	movs	r3, #1
 8013f2c:	002c      	movs	r4, r5
 8013f2e:	9204      	str	r2, [sp, #16]
 8013f30:	9308      	str	r3, [sp, #32]
 8013f32:	9d01      	ldr	r5, [sp, #4]
 8013f34:	e004      	b.n	8013f40 <__gethex+0x9c>
 8013f36:	9b01      	ldr	r3, [sp, #4]
 8013f38:	3301      	adds	r3, #1
 8013f3a:	9301      	str	r3, [sp, #4]
 8013f3c:	e7ed      	b.n	8013f1a <__gethex+0x76>
 8013f3e:	3501      	adds	r5, #1
 8013f40:	7828      	ldrb	r0, [r5, #0]
 8013f42:	f7ff ff99 	bl	8013e78 <__hexdig_fun>
 8013f46:	1e07      	subs	r7, r0, #0
 8013f48:	d1f9      	bne.n	8013f3e <__gethex+0x9a>
 8013f4a:	0028      	movs	r0, r5
 8013f4c:	9a03      	ldr	r2, [sp, #12]
 8013f4e:	9907      	ldr	r1, [sp, #28]
 8013f50:	f001 fc4e 	bl	80157f0 <strncmp>
 8013f54:	2800      	cmp	r0, #0
 8013f56:	d10e      	bne.n	8013f76 <__gethex+0xd2>
 8013f58:	2c00      	cmp	r4, #0
 8013f5a:	d107      	bne.n	8013f6c <__gethex+0xc8>
 8013f5c:	9b03      	ldr	r3, [sp, #12]
 8013f5e:	18ed      	adds	r5, r5, r3
 8013f60:	002c      	movs	r4, r5
 8013f62:	7828      	ldrb	r0, [r5, #0]
 8013f64:	f7ff ff88 	bl	8013e78 <__hexdig_fun>
 8013f68:	2800      	cmp	r0, #0
 8013f6a:	d102      	bne.n	8013f72 <__gethex+0xce>
 8013f6c:	1b64      	subs	r4, r4, r5
 8013f6e:	00a7      	lsls	r7, r4, #2
 8013f70:	e003      	b.n	8013f7a <__gethex+0xd6>
 8013f72:	3501      	adds	r5, #1
 8013f74:	e7f5      	b.n	8013f62 <__gethex+0xbe>
 8013f76:	2c00      	cmp	r4, #0
 8013f78:	d1f8      	bne.n	8013f6c <__gethex+0xc8>
 8013f7a:	2220      	movs	r2, #32
 8013f7c:	782b      	ldrb	r3, [r5, #0]
 8013f7e:	002e      	movs	r6, r5
 8013f80:	4393      	bics	r3, r2
 8013f82:	2b50      	cmp	r3, #80	; 0x50
 8013f84:	d11d      	bne.n	8013fc2 <__gethex+0x11e>
 8013f86:	786b      	ldrb	r3, [r5, #1]
 8013f88:	2b2b      	cmp	r3, #43	; 0x2b
 8013f8a:	d02c      	beq.n	8013fe6 <__gethex+0x142>
 8013f8c:	2b2d      	cmp	r3, #45	; 0x2d
 8013f8e:	d02e      	beq.n	8013fee <__gethex+0x14a>
 8013f90:	2300      	movs	r3, #0
 8013f92:	1c6e      	adds	r6, r5, #1
 8013f94:	9306      	str	r3, [sp, #24]
 8013f96:	7830      	ldrb	r0, [r6, #0]
 8013f98:	f7ff ff6e 	bl	8013e78 <__hexdig_fun>
 8013f9c:	1e43      	subs	r3, r0, #1
 8013f9e:	b2db      	uxtb	r3, r3
 8013fa0:	2b18      	cmp	r3, #24
 8013fa2:	d82b      	bhi.n	8013ffc <__gethex+0x158>
 8013fa4:	3810      	subs	r0, #16
 8013fa6:	0004      	movs	r4, r0
 8013fa8:	7870      	ldrb	r0, [r6, #1]
 8013faa:	f7ff ff65 	bl	8013e78 <__hexdig_fun>
 8013fae:	1e43      	subs	r3, r0, #1
 8013fb0:	b2db      	uxtb	r3, r3
 8013fb2:	3601      	adds	r6, #1
 8013fb4:	2b18      	cmp	r3, #24
 8013fb6:	d91c      	bls.n	8013ff2 <__gethex+0x14e>
 8013fb8:	9b06      	ldr	r3, [sp, #24]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d000      	beq.n	8013fc0 <__gethex+0x11c>
 8013fbe:	4264      	negs	r4, r4
 8013fc0:	193f      	adds	r7, r7, r4
 8013fc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fc4:	601e      	str	r6, [r3, #0]
 8013fc6:	9b04      	ldr	r3, [sp, #16]
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d019      	beq.n	8014000 <__gethex+0x15c>
 8013fcc:	2600      	movs	r6, #0
 8013fce:	9b08      	ldr	r3, [sp, #32]
 8013fd0:	42b3      	cmp	r3, r6
 8013fd2:	d100      	bne.n	8013fd6 <__gethex+0x132>
 8013fd4:	3606      	adds	r6, #6
 8013fd6:	0030      	movs	r0, r6
 8013fd8:	b00d      	add	sp, #52	; 0x34
 8013fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fdc:	2301      	movs	r3, #1
 8013fde:	2700      	movs	r7, #0
 8013fe0:	9d01      	ldr	r5, [sp, #4]
 8013fe2:	9304      	str	r3, [sp, #16]
 8013fe4:	e7c9      	b.n	8013f7a <__gethex+0xd6>
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	9306      	str	r3, [sp, #24]
 8013fea:	1cae      	adds	r6, r5, #2
 8013fec:	e7d3      	b.n	8013f96 <__gethex+0xf2>
 8013fee:	2301      	movs	r3, #1
 8013ff0:	e7fa      	b.n	8013fe8 <__gethex+0x144>
 8013ff2:	230a      	movs	r3, #10
 8013ff4:	435c      	muls	r4, r3
 8013ff6:	1824      	adds	r4, r4, r0
 8013ff8:	3c10      	subs	r4, #16
 8013ffa:	e7d5      	b.n	8013fa8 <__gethex+0x104>
 8013ffc:	002e      	movs	r6, r5
 8013ffe:	e7e0      	b.n	8013fc2 <__gethex+0x11e>
 8014000:	9b01      	ldr	r3, [sp, #4]
 8014002:	9904      	ldr	r1, [sp, #16]
 8014004:	1aeb      	subs	r3, r5, r3
 8014006:	3b01      	subs	r3, #1
 8014008:	2b07      	cmp	r3, #7
 801400a:	dc0a      	bgt.n	8014022 <__gethex+0x17e>
 801400c:	9805      	ldr	r0, [sp, #20]
 801400e:	f000 faef 	bl	80145f0 <_Balloc>
 8014012:	1e04      	subs	r4, r0, #0
 8014014:	d108      	bne.n	8014028 <__gethex+0x184>
 8014016:	0002      	movs	r2, r0
 8014018:	21de      	movs	r1, #222	; 0xde
 801401a:	4b64      	ldr	r3, [pc, #400]	; (80141ac <__gethex+0x308>)
 801401c:	4864      	ldr	r0, [pc, #400]	; (80141b0 <__gethex+0x30c>)
 801401e:	f7fe fe35 	bl	8012c8c <__assert_func>
 8014022:	3101      	adds	r1, #1
 8014024:	105b      	asrs	r3, r3, #1
 8014026:	e7ef      	b.n	8014008 <__gethex+0x164>
 8014028:	0003      	movs	r3, r0
 801402a:	3314      	adds	r3, #20
 801402c:	9304      	str	r3, [sp, #16]
 801402e:	9309      	str	r3, [sp, #36]	; 0x24
 8014030:	2300      	movs	r3, #0
 8014032:	001e      	movs	r6, r3
 8014034:	9306      	str	r3, [sp, #24]
 8014036:	9b01      	ldr	r3, [sp, #4]
 8014038:	42ab      	cmp	r3, r5
 801403a:	d340      	bcc.n	80140be <__gethex+0x21a>
 801403c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801403e:	9b04      	ldr	r3, [sp, #16]
 8014040:	c540      	stmia	r5!, {r6}
 8014042:	1aed      	subs	r5, r5, r3
 8014044:	10ad      	asrs	r5, r5, #2
 8014046:	0030      	movs	r0, r6
 8014048:	6125      	str	r5, [r4, #16]
 801404a:	f000 fbc9 	bl	80147e0 <__hi0bits>
 801404e:	9b02      	ldr	r3, [sp, #8]
 8014050:	016d      	lsls	r5, r5, #5
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	1a2e      	subs	r6, r5, r0
 8014056:	9301      	str	r3, [sp, #4]
 8014058:	429e      	cmp	r6, r3
 801405a:	dd5a      	ble.n	8014112 <__gethex+0x26e>
 801405c:	1af6      	subs	r6, r6, r3
 801405e:	0031      	movs	r1, r6
 8014060:	0020      	movs	r0, r4
 8014062:	f000 ff6b 	bl	8014f3c <__any_on>
 8014066:	1e05      	subs	r5, r0, #0
 8014068:	d016      	beq.n	8014098 <__gethex+0x1f4>
 801406a:	2501      	movs	r5, #1
 801406c:	211f      	movs	r1, #31
 801406e:	0028      	movs	r0, r5
 8014070:	1e73      	subs	r3, r6, #1
 8014072:	4019      	ands	r1, r3
 8014074:	4088      	lsls	r0, r1
 8014076:	0001      	movs	r1, r0
 8014078:	115a      	asrs	r2, r3, #5
 801407a:	9804      	ldr	r0, [sp, #16]
 801407c:	0092      	lsls	r2, r2, #2
 801407e:	5812      	ldr	r2, [r2, r0]
 8014080:	420a      	tst	r2, r1
 8014082:	d009      	beq.n	8014098 <__gethex+0x1f4>
 8014084:	42ab      	cmp	r3, r5
 8014086:	dd06      	ble.n	8014096 <__gethex+0x1f2>
 8014088:	0020      	movs	r0, r4
 801408a:	1eb1      	subs	r1, r6, #2
 801408c:	f000 ff56 	bl	8014f3c <__any_on>
 8014090:	3502      	adds	r5, #2
 8014092:	2800      	cmp	r0, #0
 8014094:	d100      	bne.n	8014098 <__gethex+0x1f4>
 8014096:	2502      	movs	r5, #2
 8014098:	0031      	movs	r1, r6
 801409a:	0020      	movs	r0, r4
 801409c:	f7ff fe98 	bl	8013dd0 <rshift>
 80140a0:	19bf      	adds	r7, r7, r6
 80140a2:	9b02      	ldr	r3, [sp, #8]
 80140a4:	689b      	ldr	r3, [r3, #8]
 80140a6:	9303      	str	r3, [sp, #12]
 80140a8:	42bb      	cmp	r3, r7
 80140aa:	da42      	bge.n	8014132 <__gethex+0x28e>
 80140ac:	0021      	movs	r1, r4
 80140ae:	9805      	ldr	r0, [sp, #20]
 80140b0:	f000 fae2 	bl	8014678 <_Bfree>
 80140b4:	2300      	movs	r3, #0
 80140b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80140b8:	26a3      	movs	r6, #163	; 0xa3
 80140ba:	6013      	str	r3, [r2, #0]
 80140bc:	e78b      	b.n	8013fd6 <__gethex+0x132>
 80140be:	1e6b      	subs	r3, r5, #1
 80140c0:	9308      	str	r3, [sp, #32]
 80140c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80140c4:	781b      	ldrb	r3, [r3, #0]
 80140c6:	4293      	cmp	r3, r2
 80140c8:	d014      	beq.n	80140f4 <__gethex+0x250>
 80140ca:	9b06      	ldr	r3, [sp, #24]
 80140cc:	2b20      	cmp	r3, #32
 80140ce:	d104      	bne.n	80140da <__gethex+0x236>
 80140d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140d2:	c340      	stmia	r3!, {r6}
 80140d4:	2600      	movs	r6, #0
 80140d6:	9309      	str	r3, [sp, #36]	; 0x24
 80140d8:	9606      	str	r6, [sp, #24]
 80140da:	9b08      	ldr	r3, [sp, #32]
 80140dc:	7818      	ldrb	r0, [r3, #0]
 80140de:	f7ff fecb 	bl	8013e78 <__hexdig_fun>
 80140e2:	230f      	movs	r3, #15
 80140e4:	4018      	ands	r0, r3
 80140e6:	9b06      	ldr	r3, [sp, #24]
 80140e8:	9d08      	ldr	r5, [sp, #32]
 80140ea:	4098      	lsls	r0, r3
 80140ec:	3304      	adds	r3, #4
 80140ee:	4306      	orrs	r6, r0
 80140f0:	9306      	str	r3, [sp, #24]
 80140f2:	e7a0      	b.n	8014036 <__gethex+0x192>
 80140f4:	2301      	movs	r3, #1
 80140f6:	9a03      	ldr	r2, [sp, #12]
 80140f8:	1a9d      	subs	r5, r3, r2
 80140fa:	9b08      	ldr	r3, [sp, #32]
 80140fc:	195d      	adds	r5, r3, r5
 80140fe:	9b01      	ldr	r3, [sp, #4]
 8014100:	429d      	cmp	r5, r3
 8014102:	d3e2      	bcc.n	80140ca <__gethex+0x226>
 8014104:	0028      	movs	r0, r5
 8014106:	9907      	ldr	r1, [sp, #28]
 8014108:	f001 fb72 	bl	80157f0 <strncmp>
 801410c:	2800      	cmp	r0, #0
 801410e:	d1dc      	bne.n	80140ca <__gethex+0x226>
 8014110:	e791      	b.n	8014036 <__gethex+0x192>
 8014112:	9b01      	ldr	r3, [sp, #4]
 8014114:	2500      	movs	r5, #0
 8014116:	429e      	cmp	r6, r3
 8014118:	dac3      	bge.n	80140a2 <__gethex+0x1fe>
 801411a:	1b9e      	subs	r6, r3, r6
 801411c:	0021      	movs	r1, r4
 801411e:	0032      	movs	r2, r6
 8014120:	9805      	ldr	r0, [sp, #20]
 8014122:	f000 fcc7 	bl	8014ab4 <__lshift>
 8014126:	0003      	movs	r3, r0
 8014128:	3314      	adds	r3, #20
 801412a:	0004      	movs	r4, r0
 801412c:	1bbf      	subs	r7, r7, r6
 801412e:	9304      	str	r3, [sp, #16]
 8014130:	e7b7      	b.n	80140a2 <__gethex+0x1fe>
 8014132:	9b02      	ldr	r3, [sp, #8]
 8014134:	685e      	ldr	r6, [r3, #4]
 8014136:	42be      	cmp	r6, r7
 8014138:	dd71      	ble.n	801421e <__gethex+0x37a>
 801413a:	9b01      	ldr	r3, [sp, #4]
 801413c:	1bf6      	subs	r6, r6, r7
 801413e:	42b3      	cmp	r3, r6
 8014140:	dc38      	bgt.n	80141b4 <__gethex+0x310>
 8014142:	9b02      	ldr	r3, [sp, #8]
 8014144:	68db      	ldr	r3, [r3, #12]
 8014146:	2b02      	cmp	r3, #2
 8014148:	d026      	beq.n	8014198 <__gethex+0x2f4>
 801414a:	2b03      	cmp	r3, #3
 801414c:	d028      	beq.n	80141a0 <__gethex+0x2fc>
 801414e:	2b01      	cmp	r3, #1
 8014150:	d119      	bne.n	8014186 <__gethex+0x2e2>
 8014152:	9b01      	ldr	r3, [sp, #4]
 8014154:	42b3      	cmp	r3, r6
 8014156:	d116      	bne.n	8014186 <__gethex+0x2e2>
 8014158:	2b01      	cmp	r3, #1
 801415a:	d10d      	bne.n	8014178 <__gethex+0x2d4>
 801415c:	9b02      	ldr	r3, [sp, #8]
 801415e:	2662      	movs	r6, #98	; 0x62
 8014160:	685b      	ldr	r3, [r3, #4]
 8014162:	9301      	str	r3, [sp, #4]
 8014164:	9a01      	ldr	r2, [sp, #4]
 8014166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014168:	601a      	str	r2, [r3, #0]
 801416a:	2301      	movs	r3, #1
 801416c:	9a04      	ldr	r2, [sp, #16]
 801416e:	6123      	str	r3, [r4, #16]
 8014170:	6013      	str	r3, [r2, #0]
 8014172:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014174:	601c      	str	r4, [r3, #0]
 8014176:	e72e      	b.n	8013fd6 <__gethex+0x132>
 8014178:	9901      	ldr	r1, [sp, #4]
 801417a:	0020      	movs	r0, r4
 801417c:	3901      	subs	r1, #1
 801417e:	f000 fedd 	bl	8014f3c <__any_on>
 8014182:	2800      	cmp	r0, #0
 8014184:	d1ea      	bne.n	801415c <__gethex+0x2b8>
 8014186:	0021      	movs	r1, r4
 8014188:	9805      	ldr	r0, [sp, #20]
 801418a:	f000 fa75 	bl	8014678 <_Bfree>
 801418e:	2300      	movs	r3, #0
 8014190:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014192:	2650      	movs	r6, #80	; 0x50
 8014194:	6013      	str	r3, [r2, #0]
 8014196:	e71e      	b.n	8013fd6 <__gethex+0x132>
 8014198:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801419a:	2b00      	cmp	r3, #0
 801419c:	d1f3      	bne.n	8014186 <__gethex+0x2e2>
 801419e:	e7dd      	b.n	801415c <__gethex+0x2b8>
 80141a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d1da      	bne.n	801415c <__gethex+0x2b8>
 80141a6:	e7ee      	b.n	8014186 <__gethex+0x2e2>
 80141a8:	08017af8 	.word	0x08017af8
 80141ac:	08017a1c 	.word	0x08017a1c
 80141b0:	08017a90 	.word	0x08017a90
 80141b4:	1e77      	subs	r7, r6, #1
 80141b6:	2d00      	cmp	r5, #0
 80141b8:	d12f      	bne.n	801421a <__gethex+0x376>
 80141ba:	2f00      	cmp	r7, #0
 80141bc:	d004      	beq.n	80141c8 <__gethex+0x324>
 80141be:	0039      	movs	r1, r7
 80141c0:	0020      	movs	r0, r4
 80141c2:	f000 febb 	bl	8014f3c <__any_on>
 80141c6:	0005      	movs	r5, r0
 80141c8:	231f      	movs	r3, #31
 80141ca:	117a      	asrs	r2, r7, #5
 80141cc:	401f      	ands	r7, r3
 80141ce:	3b1e      	subs	r3, #30
 80141d0:	40bb      	lsls	r3, r7
 80141d2:	9904      	ldr	r1, [sp, #16]
 80141d4:	0092      	lsls	r2, r2, #2
 80141d6:	5852      	ldr	r2, [r2, r1]
 80141d8:	421a      	tst	r2, r3
 80141da:	d001      	beq.n	80141e0 <__gethex+0x33c>
 80141dc:	2302      	movs	r3, #2
 80141de:	431d      	orrs	r5, r3
 80141e0:	9b01      	ldr	r3, [sp, #4]
 80141e2:	0031      	movs	r1, r6
 80141e4:	1b9b      	subs	r3, r3, r6
 80141e6:	2602      	movs	r6, #2
 80141e8:	0020      	movs	r0, r4
 80141ea:	9301      	str	r3, [sp, #4]
 80141ec:	f7ff fdf0 	bl	8013dd0 <rshift>
 80141f0:	9b02      	ldr	r3, [sp, #8]
 80141f2:	685f      	ldr	r7, [r3, #4]
 80141f4:	2d00      	cmp	r5, #0
 80141f6:	d041      	beq.n	801427c <__gethex+0x3d8>
 80141f8:	9b02      	ldr	r3, [sp, #8]
 80141fa:	68db      	ldr	r3, [r3, #12]
 80141fc:	2b02      	cmp	r3, #2
 80141fe:	d010      	beq.n	8014222 <__gethex+0x37e>
 8014200:	2b03      	cmp	r3, #3
 8014202:	d012      	beq.n	801422a <__gethex+0x386>
 8014204:	2b01      	cmp	r3, #1
 8014206:	d106      	bne.n	8014216 <__gethex+0x372>
 8014208:	07aa      	lsls	r2, r5, #30
 801420a:	d504      	bpl.n	8014216 <__gethex+0x372>
 801420c:	9a04      	ldr	r2, [sp, #16]
 801420e:	6810      	ldr	r0, [r2, #0]
 8014210:	4305      	orrs	r5, r0
 8014212:	421d      	tst	r5, r3
 8014214:	d10c      	bne.n	8014230 <__gethex+0x38c>
 8014216:	2310      	movs	r3, #16
 8014218:	e02f      	b.n	801427a <__gethex+0x3d6>
 801421a:	2501      	movs	r5, #1
 801421c:	e7d4      	b.n	80141c8 <__gethex+0x324>
 801421e:	2601      	movs	r6, #1
 8014220:	e7e8      	b.n	80141f4 <__gethex+0x350>
 8014222:	2301      	movs	r3, #1
 8014224:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014226:	1a9b      	subs	r3, r3, r2
 8014228:	9313      	str	r3, [sp, #76]	; 0x4c
 801422a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801422c:	2b00      	cmp	r3, #0
 801422e:	d0f2      	beq.n	8014216 <__gethex+0x372>
 8014230:	6923      	ldr	r3, [r4, #16]
 8014232:	2000      	movs	r0, #0
 8014234:	9303      	str	r3, [sp, #12]
 8014236:	009b      	lsls	r3, r3, #2
 8014238:	9304      	str	r3, [sp, #16]
 801423a:	0023      	movs	r3, r4
 801423c:	9a04      	ldr	r2, [sp, #16]
 801423e:	3314      	adds	r3, #20
 8014240:	1899      	adds	r1, r3, r2
 8014242:	681a      	ldr	r2, [r3, #0]
 8014244:	1c55      	adds	r5, r2, #1
 8014246:	d01e      	beq.n	8014286 <__gethex+0x3e2>
 8014248:	3201      	adds	r2, #1
 801424a:	601a      	str	r2, [r3, #0]
 801424c:	0023      	movs	r3, r4
 801424e:	3314      	adds	r3, #20
 8014250:	2e02      	cmp	r6, #2
 8014252:	d140      	bne.n	80142d6 <__gethex+0x432>
 8014254:	9a02      	ldr	r2, [sp, #8]
 8014256:	9901      	ldr	r1, [sp, #4]
 8014258:	6812      	ldr	r2, [r2, #0]
 801425a:	3a01      	subs	r2, #1
 801425c:	428a      	cmp	r2, r1
 801425e:	d10b      	bne.n	8014278 <__gethex+0x3d4>
 8014260:	114a      	asrs	r2, r1, #5
 8014262:	211f      	movs	r1, #31
 8014264:	9801      	ldr	r0, [sp, #4]
 8014266:	0092      	lsls	r2, r2, #2
 8014268:	4001      	ands	r1, r0
 801426a:	2001      	movs	r0, #1
 801426c:	0005      	movs	r5, r0
 801426e:	408d      	lsls	r5, r1
 8014270:	58d3      	ldr	r3, [r2, r3]
 8014272:	422b      	tst	r3, r5
 8014274:	d000      	beq.n	8014278 <__gethex+0x3d4>
 8014276:	2601      	movs	r6, #1
 8014278:	2320      	movs	r3, #32
 801427a:	431e      	orrs	r6, r3
 801427c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801427e:	601c      	str	r4, [r3, #0]
 8014280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014282:	601f      	str	r7, [r3, #0]
 8014284:	e6a7      	b.n	8013fd6 <__gethex+0x132>
 8014286:	c301      	stmia	r3!, {r0}
 8014288:	4299      	cmp	r1, r3
 801428a:	d8da      	bhi.n	8014242 <__gethex+0x39e>
 801428c:	9b03      	ldr	r3, [sp, #12]
 801428e:	68a2      	ldr	r2, [r4, #8]
 8014290:	4293      	cmp	r3, r2
 8014292:	db17      	blt.n	80142c4 <__gethex+0x420>
 8014294:	6863      	ldr	r3, [r4, #4]
 8014296:	9805      	ldr	r0, [sp, #20]
 8014298:	1c59      	adds	r1, r3, #1
 801429a:	f000 f9a9 	bl	80145f0 <_Balloc>
 801429e:	1e05      	subs	r5, r0, #0
 80142a0:	d103      	bne.n	80142aa <__gethex+0x406>
 80142a2:	0002      	movs	r2, r0
 80142a4:	2184      	movs	r1, #132	; 0x84
 80142a6:	4b1c      	ldr	r3, [pc, #112]	; (8014318 <__gethex+0x474>)
 80142a8:	e6b8      	b.n	801401c <__gethex+0x178>
 80142aa:	0021      	movs	r1, r4
 80142ac:	6923      	ldr	r3, [r4, #16]
 80142ae:	310c      	adds	r1, #12
 80142b0:	1c9a      	adds	r2, r3, #2
 80142b2:	0092      	lsls	r2, r2, #2
 80142b4:	300c      	adds	r0, #12
 80142b6:	f7fc fdb1 	bl	8010e1c <memcpy>
 80142ba:	0021      	movs	r1, r4
 80142bc:	9805      	ldr	r0, [sp, #20]
 80142be:	f000 f9db 	bl	8014678 <_Bfree>
 80142c2:	002c      	movs	r4, r5
 80142c4:	6923      	ldr	r3, [r4, #16]
 80142c6:	1c5a      	adds	r2, r3, #1
 80142c8:	6122      	str	r2, [r4, #16]
 80142ca:	2201      	movs	r2, #1
 80142cc:	3304      	adds	r3, #4
 80142ce:	009b      	lsls	r3, r3, #2
 80142d0:	18e3      	adds	r3, r4, r3
 80142d2:	605a      	str	r2, [r3, #4]
 80142d4:	e7ba      	b.n	801424c <__gethex+0x3a8>
 80142d6:	6922      	ldr	r2, [r4, #16]
 80142d8:	9903      	ldr	r1, [sp, #12]
 80142da:	428a      	cmp	r2, r1
 80142dc:	dd09      	ble.n	80142f2 <__gethex+0x44e>
 80142de:	2101      	movs	r1, #1
 80142e0:	0020      	movs	r0, r4
 80142e2:	f7ff fd75 	bl	8013dd0 <rshift>
 80142e6:	9b02      	ldr	r3, [sp, #8]
 80142e8:	3701      	adds	r7, #1
 80142ea:	689b      	ldr	r3, [r3, #8]
 80142ec:	42bb      	cmp	r3, r7
 80142ee:	dac2      	bge.n	8014276 <__gethex+0x3d2>
 80142f0:	e6dc      	b.n	80140ac <__gethex+0x208>
 80142f2:	221f      	movs	r2, #31
 80142f4:	9d01      	ldr	r5, [sp, #4]
 80142f6:	9901      	ldr	r1, [sp, #4]
 80142f8:	2601      	movs	r6, #1
 80142fa:	4015      	ands	r5, r2
 80142fc:	4211      	tst	r1, r2
 80142fe:	d0bb      	beq.n	8014278 <__gethex+0x3d4>
 8014300:	9a04      	ldr	r2, [sp, #16]
 8014302:	189b      	adds	r3, r3, r2
 8014304:	3b04      	subs	r3, #4
 8014306:	6818      	ldr	r0, [r3, #0]
 8014308:	f000 fa6a 	bl	80147e0 <__hi0bits>
 801430c:	2320      	movs	r3, #32
 801430e:	1b5d      	subs	r5, r3, r5
 8014310:	42a8      	cmp	r0, r5
 8014312:	dbe4      	blt.n	80142de <__gethex+0x43a>
 8014314:	e7b0      	b.n	8014278 <__gethex+0x3d4>
 8014316:	46c0      	nop			; (mov r8, r8)
 8014318:	08017a1c 	.word	0x08017a1c

0801431c <L_shift>:
 801431c:	2308      	movs	r3, #8
 801431e:	b570      	push	{r4, r5, r6, lr}
 8014320:	2520      	movs	r5, #32
 8014322:	1a9a      	subs	r2, r3, r2
 8014324:	0092      	lsls	r2, r2, #2
 8014326:	1aad      	subs	r5, r5, r2
 8014328:	6843      	ldr	r3, [r0, #4]
 801432a:	6806      	ldr	r6, [r0, #0]
 801432c:	001c      	movs	r4, r3
 801432e:	40ac      	lsls	r4, r5
 8014330:	40d3      	lsrs	r3, r2
 8014332:	4334      	orrs	r4, r6
 8014334:	6004      	str	r4, [r0, #0]
 8014336:	6043      	str	r3, [r0, #4]
 8014338:	3004      	adds	r0, #4
 801433a:	4288      	cmp	r0, r1
 801433c:	d3f4      	bcc.n	8014328 <L_shift+0xc>
 801433e:	bd70      	pop	{r4, r5, r6, pc}

08014340 <__match>:
 8014340:	b530      	push	{r4, r5, lr}
 8014342:	6803      	ldr	r3, [r0, #0]
 8014344:	780c      	ldrb	r4, [r1, #0]
 8014346:	3301      	adds	r3, #1
 8014348:	2c00      	cmp	r4, #0
 801434a:	d102      	bne.n	8014352 <__match+0x12>
 801434c:	6003      	str	r3, [r0, #0]
 801434e:	2001      	movs	r0, #1
 8014350:	bd30      	pop	{r4, r5, pc}
 8014352:	781a      	ldrb	r2, [r3, #0]
 8014354:	0015      	movs	r5, r2
 8014356:	3d41      	subs	r5, #65	; 0x41
 8014358:	2d19      	cmp	r5, #25
 801435a:	d800      	bhi.n	801435e <__match+0x1e>
 801435c:	3220      	adds	r2, #32
 801435e:	3101      	adds	r1, #1
 8014360:	42a2      	cmp	r2, r4
 8014362:	d0ef      	beq.n	8014344 <__match+0x4>
 8014364:	2000      	movs	r0, #0
 8014366:	e7f3      	b.n	8014350 <__match+0x10>

08014368 <__hexnan>:
 8014368:	b5f0      	push	{r4, r5, r6, r7, lr}
 801436a:	680b      	ldr	r3, [r1, #0]
 801436c:	b08b      	sub	sp, #44	; 0x2c
 801436e:	9201      	str	r2, [sp, #4]
 8014370:	9901      	ldr	r1, [sp, #4]
 8014372:	115a      	asrs	r2, r3, #5
 8014374:	0092      	lsls	r2, r2, #2
 8014376:	188a      	adds	r2, r1, r2
 8014378:	9202      	str	r2, [sp, #8]
 801437a:	0019      	movs	r1, r3
 801437c:	221f      	movs	r2, #31
 801437e:	4011      	ands	r1, r2
 8014380:	9008      	str	r0, [sp, #32]
 8014382:	9106      	str	r1, [sp, #24]
 8014384:	4213      	tst	r3, r2
 8014386:	d002      	beq.n	801438e <__hexnan+0x26>
 8014388:	9b02      	ldr	r3, [sp, #8]
 801438a:	3304      	adds	r3, #4
 801438c:	9302      	str	r3, [sp, #8]
 801438e:	9b02      	ldr	r3, [sp, #8]
 8014390:	2500      	movs	r5, #0
 8014392:	1f1e      	subs	r6, r3, #4
 8014394:	0037      	movs	r7, r6
 8014396:	0034      	movs	r4, r6
 8014398:	9b08      	ldr	r3, [sp, #32]
 801439a:	6035      	str	r5, [r6, #0]
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	9507      	str	r5, [sp, #28]
 80143a0:	9305      	str	r3, [sp, #20]
 80143a2:	9503      	str	r5, [sp, #12]
 80143a4:	9b05      	ldr	r3, [sp, #20]
 80143a6:	3301      	adds	r3, #1
 80143a8:	9309      	str	r3, [sp, #36]	; 0x24
 80143aa:	9b05      	ldr	r3, [sp, #20]
 80143ac:	785b      	ldrb	r3, [r3, #1]
 80143ae:	9304      	str	r3, [sp, #16]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d028      	beq.n	8014406 <__hexnan+0x9e>
 80143b4:	9804      	ldr	r0, [sp, #16]
 80143b6:	f7ff fd5f 	bl	8013e78 <__hexdig_fun>
 80143ba:	2800      	cmp	r0, #0
 80143bc:	d154      	bne.n	8014468 <__hexnan+0x100>
 80143be:	9b04      	ldr	r3, [sp, #16]
 80143c0:	2b20      	cmp	r3, #32
 80143c2:	d819      	bhi.n	80143f8 <__hexnan+0x90>
 80143c4:	9b03      	ldr	r3, [sp, #12]
 80143c6:	9a07      	ldr	r2, [sp, #28]
 80143c8:	4293      	cmp	r3, r2
 80143ca:	dd12      	ble.n	80143f2 <__hexnan+0x8a>
 80143cc:	42bc      	cmp	r4, r7
 80143ce:	d206      	bcs.n	80143de <__hexnan+0x76>
 80143d0:	2d07      	cmp	r5, #7
 80143d2:	dc04      	bgt.n	80143de <__hexnan+0x76>
 80143d4:	002a      	movs	r2, r5
 80143d6:	0039      	movs	r1, r7
 80143d8:	0020      	movs	r0, r4
 80143da:	f7ff ff9f 	bl	801431c <L_shift>
 80143de:	9b01      	ldr	r3, [sp, #4]
 80143e0:	2508      	movs	r5, #8
 80143e2:	429c      	cmp	r4, r3
 80143e4:	d905      	bls.n	80143f2 <__hexnan+0x8a>
 80143e6:	1f27      	subs	r7, r4, #4
 80143e8:	2500      	movs	r5, #0
 80143ea:	003c      	movs	r4, r7
 80143ec:	9b03      	ldr	r3, [sp, #12]
 80143ee:	603d      	str	r5, [r7, #0]
 80143f0:	9307      	str	r3, [sp, #28]
 80143f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80143f4:	9305      	str	r3, [sp, #20]
 80143f6:	e7d5      	b.n	80143a4 <__hexnan+0x3c>
 80143f8:	9b04      	ldr	r3, [sp, #16]
 80143fa:	2b29      	cmp	r3, #41	; 0x29
 80143fc:	d159      	bne.n	80144b2 <__hexnan+0x14a>
 80143fe:	9b05      	ldr	r3, [sp, #20]
 8014400:	9a08      	ldr	r2, [sp, #32]
 8014402:	3302      	adds	r3, #2
 8014404:	6013      	str	r3, [r2, #0]
 8014406:	9b03      	ldr	r3, [sp, #12]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d052      	beq.n	80144b2 <__hexnan+0x14a>
 801440c:	42bc      	cmp	r4, r7
 801440e:	d206      	bcs.n	801441e <__hexnan+0xb6>
 8014410:	2d07      	cmp	r5, #7
 8014412:	dc04      	bgt.n	801441e <__hexnan+0xb6>
 8014414:	002a      	movs	r2, r5
 8014416:	0039      	movs	r1, r7
 8014418:	0020      	movs	r0, r4
 801441a:	f7ff ff7f 	bl	801431c <L_shift>
 801441e:	9b01      	ldr	r3, [sp, #4]
 8014420:	429c      	cmp	r4, r3
 8014422:	d935      	bls.n	8014490 <__hexnan+0x128>
 8014424:	001a      	movs	r2, r3
 8014426:	0023      	movs	r3, r4
 8014428:	cb02      	ldmia	r3!, {r1}
 801442a:	c202      	stmia	r2!, {r1}
 801442c:	429e      	cmp	r6, r3
 801442e:	d2fb      	bcs.n	8014428 <__hexnan+0xc0>
 8014430:	9b02      	ldr	r3, [sp, #8]
 8014432:	1c61      	adds	r1, r4, #1
 8014434:	1eda      	subs	r2, r3, #3
 8014436:	2304      	movs	r3, #4
 8014438:	4291      	cmp	r1, r2
 801443a:	d805      	bhi.n	8014448 <__hexnan+0xe0>
 801443c:	9b02      	ldr	r3, [sp, #8]
 801443e:	3b04      	subs	r3, #4
 8014440:	1b1b      	subs	r3, r3, r4
 8014442:	089b      	lsrs	r3, r3, #2
 8014444:	3301      	adds	r3, #1
 8014446:	009b      	lsls	r3, r3, #2
 8014448:	9a01      	ldr	r2, [sp, #4]
 801444a:	18d3      	adds	r3, r2, r3
 801444c:	2200      	movs	r2, #0
 801444e:	c304      	stmia	r3!, {r2}
 8014450:	429e      	cmp	r6, r3
 8014452:	d2fc      	bcs.n	801444e <__hexnan+0xe6>
 8014454:	6833      	ldr	r3, [r6, #0]
 8014456:	2b00      	cmp	r3, #0
 8014458:	d104      	bne.n	8014464 <__hexnan+0xfc>
 801445a:	9b01      	ldr	r3, [sp, #4]
 801445c:	429e      	cmp	r6, r3
 801445e:	d126      	bne.n	80144ae <__hexnan+0x146>
 8014460:	2301      	movs	r3, #1
 8014462:	6033      	str	r3, [r6, #0]
 8014464:	2005      	movs	r0, #5
 8014466:	e025      	b.n	80144b4 <__hexnan+0x14c>
 8014468:	9b03      	ldr	r3, [sp, #12]
 801446a:	3501      	adds	r5, #1
 801446c:	3301      	adds	r3, #1
 801446e:	9303      	str	r3, [sp, #12]
 8014470:	2d08      	cmp	r5, #8
 8014472:	dd06      	ble.n	8014482 <__hexnan+0x11a>
 8014474:	9b01      	ldr	r3, [sp, #4]
 8014476:	429c      	cmp	r4, r3
 8014478:	d9bb      	bls.n	80143f2 <__hexnan+0x8a>
 801447a:	2300      	movs	r3, #0
 801447c:	2501      	movs	r5, #1
 801447e:	3c04      	subs	r4, #4
 8014480:	6023      	str	r3, [r4, #0]
 8014482:	220f      	movs	r2, #15
 8014484:	6823      	ldr	r3, [r4, #0]
 8014486:	4010      	ands	r0, r2
 8014488:	011b      	lsls	r3, r3, #4
 801448a:	4318      	orrs	r0, r3
 801448c:	6020      	str	r0, [r4, #0]
 801448e:	e7b0      	b.n	80143f2 <__hexnan+0x8a>
 8014490:	9b06      	ldr	r3, [sp, #24]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d0de      	beq.n	8014454 <__hexnan+0xec>
 8014496:	2120      	movs	r1, #32
 8014498:	9a06      	ldr	r2, [sp, #24]
 801449a:	9b02      	ldr	r3, [sp, #8]
 801449c:	1a89      	subs	r1, r1, r2
 801449e:	2201      	movs	r2, #1
 80144a0:	4252      	negs	r2, r2
 80144a2:	40ca      	lsrs	r2, r1
 80144a4:	3b04      	subs	r3, #4
 80144a6:	6819      	ldr	r1, [r3, #0]
 80144a8:	400a      	ands	r2, r1
 80144aa:	601a      	str	r2, [r3, #0]
 80144ac:	e7d2      	b.n	8014454 <__hexnan+0xec>
 80144ae:	3e04      	subs	r6, #4
 80144b0:	e7d0      	b.n	8014454 <__hexnan+0xec>
 80144b2:	2004      	movs	r0, #4
 80144b4:	b00b      	add	sp, #44	; 0x2c
 80144b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080144b8 <_localeconv_r>:
 80144b8:	4800      	ldr	r0, [pc, #0]	; (80144bc <_localeconv_r+0x4>)
 80144ba:	4770      	bx	lr
 80144bc:	200002d8 	.word	0x200002d8

080144c0 <__retarget_lock_init_recursive>:
 80144c0:	4770      	bx	lr

080144c2 <__retarget_lock_acquire_recursive>:
 80144c2:	4770      	bx	lr

080144c4 <__retarget_lock_release_recursive>:
 80144c4:	4770      	bx	lr
	...

080144c8 <__swhatbuf_r>:
 80144c8:	b570      	push	{r4, r5, r6, lr}
 80144ca:	000e      	movs	r6, r1
 80144cc:	001d      	movs	r5, r3
 80144ce:	230e      	movs	r3, #14
 80144d0:	5ec9      	ldrsh	r1, [r1, r3]
 80144d2:	0014      	movs	r4, r2
 80144d4:	b096      	sub	sp, #88	; 0x58
 80144d6:	2900      	cmp	r1, #0
 80144d8:	da08      	bge.n	80144ec <__swhatbuf_r+0x24>
 80144da:	220c      	movs	r2, #12
 80144dc:	5eb3      	ldrsh	r3, [r6, r2]
 80144de:	2200      	movs	r2, #0
 80144e0:	602a      	str	r2, [r5, #0]
 80144e2:	061b      	lsls	r3, r3, #24
 80144e4:	d411      	bmi.n	801450a <__swhatbuf_r+0x42>
 80144e6:	2380      	movs	r3, #128	; 0x80
 80144e8:	00db      	lsls	r3, r3, #3
 80144ea:	e00f      	b.n	801450c <__swhatbuf_r+0x44>
 80144ec:	466a      	mov	r2, sp
 80144ee:	f001 f9cd 	bl	801588c <_fstat_r>
 80144f2:	2800      	cmp	r0, #0
 80144f4:	dbf1      	blt.n	80144da <__swhatbuf_r+0x12>
 80144f6:	23f0      	movs	r3, #240	; 0xf0
 80144f8:	9901      	ldr	r1, [sp, #4]
 80144fa:	021b      	lsls	r3, r3, #8
 80144fc:	4019      	ands	r1, r3
 80144fe:	4b05      	ldr	r3, [pc, #20]	; (8014514 <__swhatbuf_r+0x4c>)
 8014500:	18c9      	adds	r1, r1, r3
 8014502:	424b      	negs	r3, r1
 8014504:	4159      	adcs	r1, r3
 8014506:	6029      	str	r1, [r5, #0]
 8014508:	e7ed      	b.n	80144e6 <__swhatbuf_r+0x1e>
 801450a:	2340      	movs	r3, #64	; 0x40
 801450c:	2000      	movs	r0, #0
 801450e:	6023      	str	r3, [r4, #0]
 8014510:	b016      	add	sp, #88	; 0x58
 8014512:	bd70      	pop	{r4, r5, r6, pc}
 8014514:	ffffe000 	.word	0xffffe000

08014518 <__smakebuf_r>:
 8014518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801451a:	2602      	movs	r6, #2
 801451c:	898b      	ldrh	r3, [r1, #12]
 801451e:	0005      	movs	r5, r0
 8014520:	000c      	movs	r4, r1
 8014522:	4233      	tst	r3, r6
 8014524:	d006      	beq.n	8014534 <__smakebuf_r+0x1c>
 8014526:	0023      	movs	r3, r4
 8014528:	3347      	adds	r3, #71	; 0x47
 801452a:	6023      	str	r3, [r4, #0]
 801452c:	6123      	str	r3, [r4, #16]
 801452e:	2301      	movs	r3, #1
 8014530:	6163      	str	r3, [r4, #20]
 8014532:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8014534:	466a      	mov	r2, sp
 8014536:	ab01      	add	r3, sp, #4
 8014538:	f7ff ffc6 	bl	80144c8 <__swhatbuf_r>
 801453c:	9900      	ldr	r1, [sp, #0]
 801453e:	0007      	movs	r7, r0
 8014540:	0028      	movs	r0, r5
 8014542:	f000 fdb7 	bl	80150b4 <_malloc_r>
 8014546:	2800      	cmp	r0, #0
 8014548:	d108      	bne.n	801455c <__smakebuf_r+0x44>
 801454a:	220c      	movs	r2, #12
 801454c:	5ea3      	ldrsh	r3, [r4, r2]
 801454e:	059a      	lsls	r2, r3, #22
 8014550:	d4ef      	bmi.n	8014532 <__smakebuf_r+0x1a>
 8014552:	2203      	movs	r2, #3
 8014554:	4393      	bics	r3, r2
 8014556:	431e      	orrs	r6, r3
 8014558:	81a6      	strh	r6, [r4, #12]
 801455a:	e7e4      	b.n	8014526 <__smakebuf_r+0xe>
 801455c:	4b0f      	ldr	r3, [pc, #60]	; (801459c <__smakebuf_r+0x84>)
 801455e:	62ab      	str	r3, [r5, #40]	; 0x28
 8014560:	2380      	movs	r3, #128	; 0x80
 8014562:	89a2      	ldrh	r2, [r4, #12]
 8014564:	6020      	str	r0, [r4, #0]
 8014566:	4313      	orrs	r3, r2
 8014568:	81a3      	strh	r3, [r4, #12]
 801456a:	9b00      	ldr	r3, [sp, #0]
 801456c:	6120      	str	r0, [r4, #16]
 801456e:	6163      	str	r3, [r4, #20]
 8014570:	9b01      	ldr	r3, [sp, #4]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d00d      	beq.n	8014592 <__smakebuf_r+0x7a>
 8014576:	0028      	movs	r0, r5
 8014578:	230e      	movs	r3, #14
 801457a:	5ee1      	ldrsh	r1, [r4, r3]
 801457c:	f001 f998 	bl	80158b0 <_isatty_r>
 8014580:	2800      	cmp	r0, #0
 8014582:	d006      	beq.n	8014592 <__smakebuf_r+0x7a>
 8014584:	2203      	movs	r2, #3
 8014586:	89a3      	ldrh	r3, [r4, #12]
 8014588:	4393      	bics	r3, r2
 801458a:	001a      	movs	r2, r3
 801458c:	2301      	movs	r3, #1
 801458e:	4313      	orrs	r3, r2
 8014590:	81a3      	strh	r3, [r4, #12]
 8014592:	89a0      	ldrh	r0, [r4, #12]
 8014594:	4307      	orrs	r7, r0
 8014596:	81a7      	strh	r7, [r4, #12]
 8014598:	e7cb      	b.n	8014532 <__smakebuf_r+0x1a>
 801459a:	46c0      	nop			; (mov r8, r8)
 801459c:	08013bf5 	.word	0x08013bf5

080145a0 <malloc>:
 80145a0:	b510      	push	{r4, lr}
 80145a2:	4b03      	ldr	r3, [pc, #12]	; (80145b0 <malloc+0x10>)
 80145a4:	0001      	movs	r1, r0
 80145a6:	6818      	ldr	r0, [r3, #0]
 80145a8:	f000 fd84 	bl	80150b4 <_malloc_r>
 80145ac:	bd10      	pop	{r4, pc}
 80145ae:	46c0      	nop			; (mov r8, r8)
 80145b0:	20000180 	.word	0x20000180

080145b4 <__ascii_mbtowc>:
 80145b4:	b082      	sub	sp, #8
 80145b6:	2900      	cmp	r1, #0
 80145b8:	d100      	bne.n	80145bc <__ascii_mbtowc+0x8>
 80145ba:	a901      	add	r1, sp, #4
 80145bc:	1e10      	subs	r0, r2, #0
 80145be:	d006      	beq.n	80145ce <__ascii_mbtowc+0x1a>
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d006      	beq.n	80145d2 <__ascii_mbtowc+0x1e>
 80145c4:	7813      	ldrb	r3, [r2, #0]
 80145c6:	600b      	str	r3, [r1, #0]
 80145c8:	7810      	ldrb	r0, [r2, #0]
 80145ca:	1e43      	subs	r3, r0, #1
 80145cc:	4198      	sbcs	r0, r3
 80145ce:	b002      	add	sp, #8
 80145d0:	4770      	bx	lr
 80145d2:	2002      	movs	r0, #2
 80145d4:	4240      	negs	r0, r0
 80145d6:	e7fa      	b.n	80145ce <__ascii_mbtowc+0x1a>

080145d8 <memchr>:
 80145d8:	b2c9      	uxtb	r1, r1
 80145da:	1882      	adds	r2, r0, r2
 80145dc:	4290      	cmp	r0, r2
 80145de:	d101      	bne.n	80145e4 <memchr+0xc>
 80145e0:	2000      	movs	r0, #0
 80145e2:	4770      	bx	lr
 80145e4:	7803      	ldrb	r3, [r0, #0]
 80145e6:	428b      	cmp	r3, r1
 80145e8:	d0fb      	beq.n	80145e2 <memchr+0xa>
 80145ea:	3001      	adds	r0, #1
 80145ec:	e7f6      	b.n	80145dc <memchr+0x4>
	...

080145f0 <_Balloc>:
 80145f0:	b570      	push	{r4, r5, r6, lr}
 80145f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80145f4:	0006      	movs	r6, r0
 80145f6:	000c      	movs	r4, r1
 80145f8:	2d00      	cmp	r5, #0
 80145fa:	d10e      	bne.n	801461a <_Balloc+0x2a>
 80145fc:	2010      	movs	r0, #16
 80145fe:	f7ff ffcf 	bl	80145a0 <malloc>
 8014602:	1e02      	subs	r2, r0, #0
 8014604:	6270      	str	r0, [r6, #36]	; 0x24
 8014606:	d104      	bne.n	8014612 <_Balloc+0x22>
 8014608:	2166      	movs	r1, #102	; 0x66
 801460a:	4b19      	ldr	r3, [pc, #100]	; (8014670 <_Balloc+0x80>)
 801460c:	4819      	ldr	r0, [pc, #100]	; (8014674 <_Balloc+0x84>)
 801460e:	f7fe fb3d 	bl	8012c8c <__assert_func>
 8014612:	6045      	str	r5, [r0, #4]
 8014614:	6085      	str	r5, [r0, #8]
 8014616:	6005      	str	r5, [r0, #0]
 8014618:	60c5      	str	r5, [r0, #12]
 801461a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 801461c:	68eb      	ldr	r3, [r5, #12]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d013      	beq.n	801464a <_Balloc+0x5a>
 8014622:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014624:	00a2      	lsls	r2, r4, #2
 8014626:	68db      	ldr	r3, [r3, #12]
 8014628:	189b      	adds	r3, r3, r2
 801462a:	6818      	ldr	r0, [r3, #0]
 801462c:	2800      	cmp	r0, #0
 801462e:	d118      	bne.n	8014662 <_Balloc+0x72>
 8014630:	2101      	movs	r1, #1
 8014632:	000d      	movs	r5, r1
 8014634:	40a5      	lsls	r5, r4
 8014636:	1d6a      	adds	r2, r5, #5
 8014638:	0030      	movs	r0, r6
 801463a:	0092      	lsls	r2, r2, #2
 801463c:	f000 fca1 	bl	8014f82 <_calloc_r>
 8014640:	2800      	cmp	r0, #0
 8014642:	d00c      	beq.n	801465e <_Balloc+0x6e>
 8014644:	6044      	str	r4, [r0, #4]
 8014646:	6085      	str	r5, [r0, #8]
 8014648:	e00d      	b.n	8014666 <_Balloc+0x76>
 801464a:	2221      	movs	r2, #33	; 0x21
 801464c:	2104      	movs	r1, #4
 801464e:	0030      	movs	r0, r6
 8014650:	f000 fc97 	bl	8014f82 <_calloc_r>
 8014654:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014656:	60e8      	str	r0, [r5, #12]
 8014658:	68db      	ldr	r3, [r3, #12]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d1e1      	bne.n	8014622 <_Balloc+0x32>
 801465e:	2000      	movs	r0, #0
 8014660:	bd70      	pop	{r4, r5, r6, pc}
 8014662:	6802      	ldr	r2, [r0, #0]
 8014664:	601a      	str	r2, [r3, #0]
 8014666:	2300      	movs	r3, #0
 8014668:	6103      	str	r3, [r0, #16]
 801466a:	60c3      	str	r3, [r0, #12]
 801466c:	e7f8      	b.n	8014660 <_Balloc+0x70>
 801466e:	46c0      	nop			; (mov r8, r8)
 8014670:	080179aa 	.word	0x080179aa
 8014674:	08017b0c 	.word	0x08017b0c

08014678 <_Bfree>:
 8014678:	b570      	push	{r4, r5, r6, lr}
 801467a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801467c:	0005      	movs	r5, r0
 801467e:	000c      	movs	r4, r1
 8014680:	2e00      	cmp	r6, #0
 8014682:	d10e      	bne.n	80146a2 <_Bfree+0x2a>
 8014684:	2010      	movs	r0, #16
 8014686:	f7ff ff8b 	bl	80145a0 <malloc>
 801468a:	1e02      	subs	r2, r0, #0
 801468c:	6268      	str	r0, [r5, #36]	; 0x24
 801468e:	d104      	bne.n	801469a <_Bfree+0x22>
 8014690:	218a      	movs	r1, #138	; 0x8a
 8014692:	4b09      	ldr	r3, [pc, #36]	; (80146b8 <_Bfree+0x40>)
 8014694:	4809      	ldr	r0, [pc, #36]	; (80146bc <_Bfree+0x44>)
 8014696:	f7fe faf9 	bl	8012c8c <__assert_func>
 801469a:	6046      	str	r6, [r0, #4]
 801469c:	6086      	str	r6, [r0, #8]
 801469e:	6006      	str	r6, [r0, #0]
 80146a0:	60c6      	str	r6, [r0, #12]
 80146a2:	2c00      	cmp	r4, #0
 80146a4:	d007      	beq.n	80146b6 <_Bfree+0x3e>
 80146a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80146a8:	6862      	ldr	r2, [r4, #4]
 80146aa:	68db      	ldr	r3, [r3, #12]
 80146ac:	0092      	lsls	r2, r2, #2
 80146ae:	189b      	adds	r3, r3, r2
 80146b0:	681a      	ldr	r2, [r3, #0]
 80146b2:	6022      	str	r2, [r4, #0]
 80146b4:	601c      	str	r4, [r3, #0]
 80146b6:	bd70      	pop	{r4, r5, r6, pc}
 80146b8:	080179aa 	.word	0x080179aa
 80146bc:	08017b0c 	.word	0x08017b0c

080146c0 <__multadd>:
 80146c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80146c2:	000e      	movs	r6, r1
 80146c4:	9001      	str	r0, [sp, #4]
 80146c6:	000c      	movs	r4, r1
 80146c8:	001d      	movs	r5, r3
 80146ca:	2000      	movs	r0, #0
 80146cc:	690f      	ldr	r7, [r1, #16]
 80146ce:	3614      	adds	r6, #20
 80146d0:	6833      	ldr	r3, [r6, #0]
 80146d2:	3001      	adds	r0, #1
 80146d4:	b299      	uxth	r1, r3
 80146d6:	4351      	muls	r1, r2
 80146d8:	0c1b      	lsrs	r3, r3, #16
 80146da:	4353      	muls	r3, r2
 80146dc:	1949      	adds	r1, r1, r5
 80146de:	0c0d      	lsrs	r5, r1, #16
 80146e0:	195b      	adds	r3, r3, r5
 80146e2:	0c1d      	lsrs	r5, r3, #16
 80146e4:	b289      	uxth	r1, r1
 80146e6:	041b      	lsls	r3, r3, #16
 80146e8:	185b      	adds	r3, r3, r1
 80146ea:	c608      	stmia	r6!, {r3}
 80146ec:	4287      	cmp	r7, r0
 80146ee:	dcef      	bgt.n	80146d0 <__multadd+0x10>
 80146f0:	2d00      	cmp	r5, #0
 80146f2:	d022      	beq.n	801473a <__multadd+0x7a>
 80146f4:	68a3      	ldr	r3, [r4, #8]
 80146f6:	42bb      	cmp	r3, r7
 80146f8:	dc19      	bgt.n	801472e <__multadd+0x6e>
 80146fa:	6863      	ldr	r3, [r4, #4]
 80146fc:	9801      	ldr	r0, [sp, #4]
 80146fe:	1c59      	adds	r1, r3, #1
 8014700:	f7ff ff76 	bl	80145f0 <_Balloc>
 8014704:	1e06      	subs	r6, r0, #0
 8014706:	d105      	bne.n	8014714 <__multadd+0x54>
 8014708:	0002      	movs	r2, r0
 801470a:	21b5      	movs	r1, #181	; 0xb5
 801470c:	4b0c      	ldr	r3, [pc, #48]	; (8014740 <__multadd+0x80>)
 801470e:	480d      	ldr	r0, [pc, #52]	; (8014744 <__multadd+0x84>)
 8014710:	f7fe fabc 	bl	8012c8c <__assert_func>
 8014714:	0021      	movs	r1, r4
 8014716:	6923      	ldr	r3, [r4, #16]
 8014718:	310c      	adds	r1, #12
 801471a:	1c9a      	adds	r2, r3, #2
 801471c:	0092      	lsls	r2, r2, #2
 801471e:	300c      	adds	r0, #12
 8014720:	f7fc fb7c 	bl	8010e1c <memcpy>
 8014724:	0021      	movs	r1, r4
 8014726:	9801      	ldr	r0, [sp, #4]
 8014728:	f7ff ffa6 	bl	8014678 <_Bfree>
 801472c:	0034      	movs	r4, r6
 801472e:	1d3b      	adds	r3, r7, #4
 8014730:	009b      	lsls	r3, r3, #2
 8014732:	18e3      	adds	r3, r4, r3
 8014734:	605d      	str	r5, [r3, #4]
 8014736:	1c7b      	adds	r3, r7, #1
 8014738:	6123      	str	r3, [r4, #16]
 801473a:	0020      	movs	r0, r4
 801473c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801473e:	46c0      	nop			; (mov r8, r8)
 8014740:	08017a1c 	.word	0x08017a1c
 8014744:	08017b0c 	.word	0x08017b0c

08014748 <__s2b>:
 8014748:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801474a:	0006      	movs	r6, r0
 801474c:	0018      	movs	r0, r3
 801474e:	000c      	movs	r4, r1
 8014750:	3008      	adds	r0, #8
 8014752:	2109      	movs	r1, #9
 8014754:	9301      	str	r3, [sp, #4]
 8014756:	0015      	movs	r5, r2
 8014758:	f7eb fd82 	bl	8000260 <__divsi3>
 801475c:	2301      	movs	r3, #1
 801475e:	2100      	movs	r1, #0
 8014760:	4283      	cmp	r3, r0
 8014762:	db0a      	blt.n	801477a <__s2b+0x32>
 8014764:	0030      	movs	r0, r6
 8014766:	f7ff ff43 	bl	80145f0 <_Balloc>
 801476a:	1e01      	subs	r1, r0, #0
 801476c:	d108      	bne.n	8014780 <__s2b+0x38>
 801476e:	0002      	movs	r2, r0
 8014770:	4b19      	ldr	r3, [pc, #100]	; (80147d8 <__s2b+0x90>)
 8014772:	481a      	ldr	r0, [pc, #104]	; (80147dc <__s2b+0x94>)
 8014774:	31ce      	adds	r1, #206	; 0xce
 8014776:	f7fe fa89 	bl	8012c8c <__assert_func>
 801477a:	005b      	lsls	r3, r3, #1
 801477c:	3101      	adds	r1, #1
 801477e:	e7ef      	b.n	8014760 <__s2b+0x18>
 8014780:	9b08      	ldr	r3, [sp, #32]
 8014782:	6143      	str	r3, [r0, #20]
 8014784:	2301      	movs	r3, #1
 8014786:	6103      	str	r3, [r0, #16]
 8014788:	2d09      	cmp	r5, #9
 801478a:	dd18      	ble.n	80147be <__s2b+0x76>
 801478c:	0023      	movs	r3, r4
 801478e:	3309      	adds	r3, #9
 8014790:	001f      	movs	r7, r3
 8014792:	9300      	str	r3, [sp, #0]
 8014794:	1964      	adds	r4, r4, r5
 8014796:	783b      	ldrb	r3, [r7, #0]
 8014798:	220a      	movs	r2, #10
 801479a:	0030      	movs	r0, r6
 801479c:	3b30      	subs	r3, #48	; 0x30
 801479e:	f7ff ff8f 	bl	80146c0 <__multadd>
 80147a2:	3701      	adds	r7, #1
 80147a4:	0001      	movs	r1, r0
 80147a6:	42a7      	cmp	r7, r4
 80147a8:	d1f5      	bne.n	8014796 <__s2b+0x4e>
 80147aa:	002c      	movs	r4, r5
 80147ac:	9b00      	ldr	r3, [sp, #0]
 80147ae:	3c08      	subs	r4, #8
 80147b0:	191c      	adds	r4, r3, r4
 80147b2:	002f      	movs	r7, r5
 80147b4:	9b01      	ldr	r3, [sp, #4]
 80147b6:	429f      	cmp	r7, r3
 80147b8:	db04      	blt.n	80147c4 <__s2b+0x7c>
 80147ba:	0008      	movs	r0, r1
 80147bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80147be:	2509      	movs	r5, #9
 80147c0:	340a      	adds	r4, #10
 80147c2:	e7f6      	b.n	80147b2 <__s2b+0x6a>
 80147c4:	1b63      	subs	r3, r4, r5
 80147c6:	5ddb      	ldrb	r3, [r3, r7]
 80147c8:	220a      	movs	r2, #10
 80147ca:	0030      	movs	r0, r6
 80147cc:	3b30      	subs	r3, #48	; 0x30
 80147ce:	f7ff ff77 	bl	80146c0 <__multadd>
 80147d2:	3701      	adds	r7, #1
 80147d4:	0001      	movs	r1, r0
 80147d6:	e7ed      	b.n	80147b4 <__s2b+0x6c>
 80147d8:	08017a1c 	.word	0x08017a1c
 80147dc:	08017b0c 	.word	0x08017b0c

080147e0 <__hi0bits>:
 80147e0:	0003      	movs	r3, r0
 80147e2:	0c02      	lsrs	r2, r0, #16
 80147e4:	2000      	movs	r0, #0
 80147e6:	4282      	cmp	r2, r0
 80147e8:	d101      	bne.n	80147ee <__hi0bits+0xe>
 80147ea:	041b      	lsls	r3, r3, #16
 80147ec:	3010      	adds	r0, #16
 80147ee:	0e1a      	lsrs	r2, r3, #24
 80147f0:	d101      	bne.n	80147f6 <__hi0bits+0x16>
 80147f2:	3008      	adds	r0, #8
 80147f4:	021b      	lsls	r3, r3, #8
 80147f6:	0f1a      	lsrs	r2, r3, #28
 80147f8:	d101      	bne.n	80147fe <__hi0bits+0x1e>
 80147fa:	3004      	adds	r0, #4
 80147fc:	011b      	lsls	r3, r3, #4
 80147fe:	0f9a      	lsrs	r2, r3, #30
 8014800:	d101      	bne.n	8014806 <__hi0bits+0x26>
 8014802:	3002      	adds	r0, #2
 8014804:	009b      	lsls	r3, r3, #2
 8014806:	2b00      	cmp	r3, #0
 8014808:	db03      	blt.n	8014812 <__hi0bits+0x32>
 801480a:	3001      	adds	r0, #1
 801480c:	005b      	lsls	r3, r3, #1
 801480e:	d400      	bmi.n	8014812 <__hi0bits+0x32>
 8014810:	2020      	movs	r0, #32
 8014812:	4770      	bx	lr

08014814 <__lo0bits>:
 8014814:	6803      	ldr	r3, [r0, #0]
 8014816:	0002      	movs	r2, r0
 8014818:	2107      	movs	r1, #7
 801481a:	0018      	movs	r0, r3
 801481c:	4008      	ands	r0, r1
 801481e:	420b      	tst	r3, r1
 8014820:	d00d      	beq.n	801483e <__lo0bits+0x2a>
 8014822:	3906      	subs	r1, #6
 8014824:	2000      	movs	r0, #0
 8014826:	420b      	tst	r3, r1
 8014828:	d105      	bne.n	8014836 <__lo0bits+0x22>
 801482a:	3002      	adds	r0, #2
 801482c:	4203      	tst	r3, r0
 801482e:	d003      	beq.n	8014838 <__lo0bits+0x24>
 8014830:	40cb      	lsrs	r3, r1
 8014832:	0008      	movs	r0, r1
 8014834:	6013      	str	r3, [r2, #0]
 8014836:	4770      	bx	lr
 8014838:	089b      	lsrs	r3, r3, #2
 801483a:	6013      	str	r3, [r2, #0]
 801483c:	e7fb      	b.n	8014836 <__lo0bits+0x22>
 801483e:	b299      	uxth	r1, r3
 8014840:	2900      	cmp	r1, #0
 8014842:	d101      	bne.n	8014848 <__lo0bits+0x34>
 8014844:	2010      	movs	r0, #16
 8014846:	0c1b      	lsrs	r3, r3, #16
 8014848:	b2d9      	uxtb	r1, r3
 801484a:	2900      	cmp	r1, #0
 801484c:	d101      	bne.n	8014852 <__lo0bits+0x3e>
 801484e:	3008      	adds	r0, #8
 8014850:	0a1b      	lsrs	r3, r3, #8
 8014852:	0719      	lsls	r1, r3, #28
 8014854:	d101      	bne.n	801485a <__lo0bits+0x46>
 8014856:	3004      	adds	r0, #4
 8014858:	091b      	lsrs	r3, r3, #4
 801485a:	0799      	lsls	r1, r3, #30
 801485c:	d101      	bne.n	8014862 <__lo0bits+0x4e>
 801485e:	3002      	adds	r0, #2
 8014860:	089b      	lsrs	r3, r3, #2
 8014862:	07d9      	lsls	r1, r3, #31
 8014864:	d4e9      	bmi.n	801483a <__lo0bits+0x26>
 8014866:	3001      	adds	r0, #1
 8014868:	085b      	lsrs	r3, r3, #1
 801486a:	d1e6      	bne.n	801483a <__lo0bits+0x26>
 801486c:	2020      	movs	r0, #32
 801486e:	e7e2      	b.n	8014836 <__lo0bits+0x22>

08014870 <__i2b>:
 8014870:	b510      	push	{r4, lr}
 8014872:	000c      	movs	r4, r1
 8014874:	2101      	movs	r1, #1
 8014876:	f7ff febb 	bl	80145f0 <_Balloc>
 801487a:	2800      	cmp	r0, #0
 801487c:	d106      	bne.n	801488c <__i2b+0x1c>
 801487e:	21a0      	movs	r1, #160	; 0xa0
 8014880:	0002      	movs	r2, r0
 8014882:	4b04      	ldr	r3, [pc, #16]	; (8014894 <__i2b+0x24>)
 8014884:	4804      	ldr	r0, [pc, #16]	; (8014898 <__i2b+0x28>)
 8014886:	0049      	lsls	r1, r1, #1
 8014888:	f7fe fa00 	bl	8012c8c <__assert_func>
 801488c:	2301      	movs	r3, #1
 801488e:	6144      	str	r4, [r0, #20]
 8014890:	6103      	str	r3, [r0, #16]
 8014892:	bd10      	pop	{r4, pc}
 8014894:	08017a1c 	.word	0x08017a1c
 8014898:	08017b0c 	.word	0x08017b0c

0801489c <__multiply>:
 801489c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801489e:	690b      	ldr	r3, [r1, #16]
 80148a0:	0014      	movs	r4, r2
 80148a2:	6912      	ldr	r2, [r2, #16]
 80148a4:	000d      	movs	r5, r1
 80148a6:	b089      	sub	sp, #36	; 0x24
 80148a8:	4293      	cmp	r3, r2
 80148aa:	da01      	bge.n	80148b0 <__multiply+0x14>
 80148ac:	0025      	movs	r5, r4
 80148ae:	000c      	movs	r4, r1
 80148b0:	692f      	ldr	r7, [r5, #16]
 80148b2:	6926      	ldr	r6, [r4, #16]
 80148b4:	6869      	ldr	r1, [r5, #4]
 80148b6:	19bb      	adds	r3, r7, r6
 80148b8:	9302      	str	r3, [sp, #8]
 80148ba:	68ab      	ldr	r3, [r5, #8]
 80148bc:	19ba      	adds	r2, r7, r6
 80148be:	4293      	cmp	r3, r2
 80148c0:	da00      	bge.n	80148c4 <__multiply+0x28>
 80148c2:	3101      	adds	r1, #1
 80148c4:	f7ff fe94 	bl	80145f0 <_Balloc>
 80148c8:	9001      	str	r0, [sp, #4]
 80148ca:	2800      	cmp	r0, #0
 80148cc:	d106      	bne.n	80148dc <__multiply+0x40>
 80148ce:	215e      	movs	r1, #94	; 0x5e
 80148d0:	0002      	movs	r2, r0
 80148d2:	4b48      	ldr	r3, [pc, #288]	; (80149f4 <__multiply+0x158>)
 80148d4:	4848      	ldr	r0, [pc, #288]	; (80149f8 <__multiply+0x15c>)
 80148d6:	31ff      	adds	r1, #255	; 0xff
 80148d8:	f7fe f9d8 	bl	8012c8c <__assert_func>
 80148dc:	9b01      	ldr	r3, [sp, #4]
 80148de:	2200      	movs	r2, #0
 80148e0:	3314      	adds	r3, #20
 80148e2:	469c      	mov	ip, r3
 80148e4:	19bb      	adds	r3, r7, r6
 80148e6:	009b      	lsls	r3, r3, #2
 80148e8:	4463      	add	r3, ip
 80148ea:	9303      	str	r3, [sp, #12]
 80148ec:	4663      	mov	r3, ip
 80148ee:	9903      	ldr	r1, [sp, #12]
 80148f0:	428b      	cmp	r3, r1
 80148f2:	d32c      	bcc.n	801494e <__multiply+0xb2>
 80148f4:	002b      	movs	r3, r5
 80148f6:	0022      	movs	r2, r4
 80148f8:	3314      	adds	r3, #20
 80148fa:	00bf      	lsls	r7, r7, #2
 80148fc:	3214      	adds	r2, #20
 80148fe:	9306      	str	r3, [sp, #24]
 8014900:	00b6      	lsls	r6, r6, #2
 8014902:	19db      	adds	r3, r3, r7
 8014904:	9304      	str	r3, [sp, #16]
 8014906:	1993      	adds	r3, r2, r6
 8014908:	9307      	str	r3, [sp, #28]
 801490a:	2304      	movs	r3, #4
 801490c:	9305      	str	r3, [sp, #20]
 801490e:	002b      	movs	r3, r5
 8014910:	9904      	ldr	r1, [sp, #16]
 8014912:	3315      	adds	r3, #21
 8014914:	9200      	str	r2, [sp, #0]
 8014916:	4299      	cmp	r1, r3
 8014918:	d305      	bcc.n	8014926 <__multiply+0x8a>
 801491a:	1b4b      	subs	r3, r1, r5
 801491c:	3b15      	subs	r3, #21
 801491e:	089b      	lsrs	r3, r3, #2
 8014920:	3301      	adds	r3, #1
 8014922:	009b      	lsls	r3, r3, #2
 8014924:	9305      	str	r3, [sp, #20]
 8014926:	9b07      	ldr	r3, [sp, #28]
 8014928:	9a00      	ldr	r2, [sp, #0]
 801492a:	429a      	cmp	r2, r3
 801492c:	d311      	bcc.n	8014952 <__multiply+0xb6>
 801492e:	9b02      	ldr	r3, [sp, #8]
 8014930:	2b00      	cmp	r3, #0
 8014932:	dd06      	ble.n	8014942 <__multiply+0xa6>
 8014934:	9b03      	ldr	r3, [sp, #12]
 8014936:	3b04      	subs	r3, #4
 8014938:	9303      	str	r3, [sp, #12]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	9300      	str	r3, [sp, #0]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d053      	beq.n	80149ea <__multiply+0x14e>
 8014942:	9b01      	ldr	r3, [sp, #4]
 8014944:	9a02      	ldr	r2, [sp, #8]
 8014946:	0018      	movs	r0, r3
 8014948:	611a      	str	r2, [r3, #16]
 801494a:	b009      	add	sp, #36	; 0x24
 801494c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801494e:	c304      	stmia	r3!, {r2}
 8014950:	e7cd      	b.n	80148ee <__multiply+0x52>
 8014952:	9b00      	ldr	r3, [sp, #0]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	b298      	uxth	r0, r3
 8014958:	2800      	cmp	r0, #0
 801495a:	d01b      	beq.n	8014994 <__multiply+0xf8>
 801495c:	4667      	mov	r7, ip
 801495e:	2400      	movs	r4, #0
 8014960:	9e06      	ldr	r6, [sp, #24]
 8014962:	ce02      	ldmia	r6!, {r1}
 8014964:	683a      	ldr	r2, [r7, #0]
 8014966:	b28b      	uxth	r3, r1
 8014968:	4343      	muls	r3, r0
 801496a:	b292      	uxth	r2, r2
 801496c:	189b      	adds	r3, r3, r2
 801496e:	191b      	adds	r3, r3, r4
 8014970:	0c0c      	lsrs	r4, r1, #16
 8014972:	4344      	muls	r4, r0
 8014974:	683a      	ldr	r2, [r7, #0]
 8014976:	0c11      	lsrs	r1, r2, #16
 8014978:	1861      	adds	r1, r4, r1
 801497a:	0c1c      	lsrs	r4, r3, #16
 801497c:	1909      	adds	r1, r1, r4
 801497e:	0c0c      	lsrs	r4, r1, #16
 8014980:	b29b      	uxth	r3, r3
 8014982:	0409      	lsls	r1, r1, #16
 8014984:	430b      	orrs	r3, r1
 8014986:	c708      	stmia	r7!, {r3}
 8014988:	9b04      	ldr	r3, [sp, #16]
 801498a:	42b3      	cmp	r3, r6
 801498c:	d8e9      	bhi.n	8014962 <__multiply+0xc6>
 801498e:	4663      	mov	r3, ip
 8014990:	9a05      	ldr	r2, [sp, #20]
 8014992:	509c      	str	r4, [r3, r2]
 8014994:	9b00      	ldr	r3, [sp, #0]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	0c1e      	lsrs	r6, r3, #16
 801499a:	d020      	beq.n	80149de <__multiply+0x142>
 801499c:	4663      	mov	r3, ip
 801499e:	002c      	movs	r4, r5
 80149a0:	4660      	mov	r0, ip
 80149a2:	2700      	movs	r7, #0
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	3414      	adds	r4, #20
 80149a8:	6822      	ldr	r2, [r4, #0]
 80149aa:	b29b      	uxth	r3, r3
 80149ac:	b291      	uxth	r1, r2
 80149ae:	4371      	muls	r1, r6
 80149b0:	6802      	ldr	r2, [r0, #0]
 80149b2:	0c12      	lsrs	r2, r2, #16
 80149b4:	1889      	adds	r1, r1, r2
 80149b6:	19cf      	adds	r7, r1, r7
 80149b8:	0439      	lsls	r1, r7, #16
 80149ba:	430b      	orrs	r3, r1
 80149bc:	6003      	str	r3, [r0, #0]
 80149be:	cc02      	ldmia	r4!, {r1}
 80149c0:	6843      	ldr	r3, [r0, #4]
 80149c2:	0c09      	lsrs	r1, r1, #16
 80149c4:	4371      	muls	r1, r6
 80149c6:	b29b      	uxth	r3, r3
 80149c8:	0c3f      	lsrs	r7, r7, #16
 80149ca:	18cb      	adds	r3, r1, r3
 80149cc:	9a04      	ldr	r2, [sp, #16]
 80149ce:	19db      	adds	r3, r3, r7
 80149d0:	0c1f      	lsrs	r7, r3, #16
 80149d2:	3004      	adds	r0, #4
 80149d4:	42a2      	cmp	r2, r4
 80149d6:	d8e7      	bhi.n	80149a8 <__multiply+0x10c>
 80149d8:	4662      	mov	r2, ip
 80149da:	9905      	ldr	r1, [sp, #20]
 80149dc:	5053      	str	r3, [r2, r1]
 80149de:	9b00      	ldr	r3, [sp, #0]
 80149e0:	3304      	adds	r3, #4
 80149e2:	9300      	str	r3, [sp, #0]
 80149e4:	2304      	movs	r3, #4
 80149e6:	449c      	add	ip, r3
 80149e8:	e79d      	b.n	8014926 <__multiply+0x8a>
 80149ea:	9b02      	ldr	r3, [sp, #8]
 80149ec:	3b01      	subs	r3, #1
 80149ee:	9302      	str	r3, [sp, #8]
 80149f0:	e79d      	b.n	801492e <__multiply+0x92>
 80149f2:	46c0      	nop			; (mov r8, r8)
 80149f4:	08017a1c 	.word	0x08017a1c
 80149f8:	08017b0c 	.word	0x08017b0c

080149fc <__pow5mult>:
 80149fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80149fe:	2303      	movs	r3, #3
 8014a00:	0015      	movs	r5, r2
 8014a02:	0007      	movs	r7, r0
 8014a04:	000e      	movs	r6, r1
 8014a06:	401a      	ands	r2, r3
 8014a08:	421d      	tst	r5, r3
 8014a0a:	d008      	beq.n	8014a1e <__pow5mult+0x22>
 8014a0c:	4925      	ldr	r1, [pc, #148]	; (8014aa4 <__pow5mult+0xa8>)
 8014a0e:	3a01      	subs	r2, #1
 8014a10:	0092      	lsls	r2, r2, #2
 8014a12:	5852      	ldr	r2, [r2, r1]
 8014a14:	2300      	movs	r3, #0
 8014a16:	0031      	movs	r1, r6
 8014a18:	f7ff fe52 	bl	80146c0 <__multadd>
 8014a1c:	0006      	movs	r6, r0
 8014a1e:	10ad      	asrs	r5, r5, #2
 8014a20:	d03d      	beq.n	8014a9e <__pow5mult+0xa2>
 8014a22:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8014a24:	2c00      	cmp	r4, #0
 8014a26:	d10f      	bne.n	8014a48 <__pow5mult+0x4c>
 8014a28:	2010      	movs	r0, #16
 8014a2a:	f7ff fdb9 	bl	80145a0 <malloc>
 8014a2e:	1e02      	subs	r2, r0, #0
 8014a30:	6278      	str	r0, [r7, #36]	; 0x24
 8014a32:	d105      	bne.n	8014a40 <__pow5mult+0x44>
 8014a34:	21d7      	movs	r1, #215	; 0xd7
 8014a36:	4b1c      	ldr	r3, [pc, #112]	; (8014aa8 <__pow5mult+0xac>)
 8014a38:	481c      	ldr	r0, [pc, #112]	; (8014aac <__pow5mult+0xb0>)
 8014a3a:	0049      	lsls	r1, r1, #1
 8014a3c:	f7fe f926 	bl	8012c8c <__assert_func>
 8014a40:	6044      	str	r4, [r0, #4]
 8014a42:	6084      	str	r4, [r0, #8]
 8014a44:	6004      	str	r4, [r0, #0]
 8014a46:	60c4      	str	r4, [r0, #12]
 8014a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a4a:	689c      	ldr	r4, [r3, #8]
 8014a4c:	9301      	str	r3, [sp, #4]
 8014a4e:	2c00      	cmp	r4, #0
 8014a50:	d108      	bne.n	8014a64 <__pow5mult+0x68>
 8014a52:	0038      	movs	r0, r7
 8014a54:	4916      	ldr	r1, [pc, #88]	; (8014ab0 <__pow5mult+0xb4>)
 8014a56:	f7ff ff0b 	bl	8014870 <__i2b>
 8014a5a:	9b01      	ldr	r3, [sp, #4]
 8014a5c:	0004      	movs	r4, r0
 8014a5e:	6098      	str	r0, [r3, #8]
 8014a60:	2300      	movs	r3, #0
 8014a62:	6003      	str	r3, [r0, #0]
 8014a64:	2301      	movs	r3, #1
 8014a66:	421d      	tst	r5, r3
 8014a68:	d00a      	beq.n	8014a80 <__pow5mult+0x84>
 8014a6a:	0031      	movs	r1, r6
 8014a6c:	0022      	movs	r2, r4
 8014a6e:	0038      	movs	r0, r7
 8014a70:	f7ff ff14 	bl	801489c <__multiply>
 8014a74:	0031      	movs	r1, r6
 8014a76:	9001      	str	r0, [sp, #4]
 8014a78:	0038      	movs	r0, r7
 8014a7a:	f7ff fdfd 	bl	8014678 <_Bfree>
 8014a7e:	9e01      	ldr	r6, [sp, #4]
 8014a80:	106d      	asrs	r5, r5, #1
 8014a82:	d00c      	beq.n	8014a9e <__pow5mult+0xa2>
 8014a84:	6820      	ldr	r0, [r4, #0]
 8014a86:	2800      	cmp	r0, #0
 8014a88:	d107      	bne.n	8014a9a <__pow5mult+0x9e>
 8014a8a:	0022      	movs	r2, r4
 8014a8c:	0021      	movs	r1, r4
 8014a8e:	0038      	movs	r0, r7
 8014a90:	f7ff ff04 	bl	801489c <__multiply>
 8014a94:	2300      	movs	r3, #0
 8014a96:	6020      	str	r0, [r4, #0]
 8014a98:	6003      	str	r3, [r0, #0]
 8014a9a:	0004      	movs	r4, r0
 8014a9c:	e7e2      	b.n	8014a64 <__pow5mult+0x68>
 8014a9e:	0030      	movs	r0, r6
 8014aa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014aa2:	46c0      	nop			; (mov r8, r8)
 8014aa4:	08017c58 	.word	0x08017c58
 8014aa8:	080179aa 	.word	0x080179aa
 8014aac:	08017b0c 	.word	0x08017b0c
 8014ab0:	00000271 	.word	0x00000271

08014ab4 <__lshift>:
 8014ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ab6:	000c      	movs	r4, r1
 8014ab8:	0017      	movs	r7, r2
 8014aba:	6923      	ldr	r3, [r4, #16]
 8014abc:	1155      	asrs	r5, r2, #5
 8014abe:	b087      	sub	sp, #28
 8014ac0:	18eb      	adds	r3, r5, r3
 8014ac2:	9302      	str	r3, [sp, #8]
 8014ac4:	3301      	adds	r3, #1
 8014ac6:	9301      	str	r3, [sp, #4]
 8014ac8:	6849      	ldr	r1, [r1, #4]
 8014aca:	68a3      	ldr	r3, [r4, #8]
 8014acc:	9004      	str	r0, [sp, #16]
 8014ace:	9a01      	ldr	r2, [sp, #4]
 8014ad0:	4293      	cmp	r3, r2
 8014ad2:	db10      	blt.n	8014af6 <__lshift+0x42>
 8014ad4:	9804      	ldr	r0, [sp, #16]
 8014ad6:	f7ff fd8b 	bl	80145f0 <_Balloc>
 8014ada:	2300      	movs	r3, #0
 8014adc:	0002      	movs	r2, r0
 8014ade:	0006      	movs	r6, r0
 8014ae0:	0019      	movs	r1, r3
 8014ae2:	3214      	adds	r2, #20
 8014ae4:	4298      	cmp	r0, r3
 8014ae6:	d10c      	bne.n	8014b02 <__lshift+0x4e>
 8014ae8:	21da      	movs	r1, #218	; 0xda
 8014aea:	0002      	movs	r2, r0
 8014aec:	4b26      	ldr	r3, [pc, #152]	; (8014b88 <__lshift+0xd4>)
 8014aee:	4827      	ldr	r0, [pc, #156]	; (8014b8c <__lshift+0xd8>)
 8014af0:	31ff      	adds	r1, #255	; 0xff
 8014af2:	f7fe f8cb 	bl	8012c8c <__assert_func>
 8014af6:	3101      	adds	r1, #1
 8014af8:	005b      	lsls	r3, r3, #1
 8014afa:	e7e8      	b.n	8014ace <__lshift+0x1a>
 8014afc:	0098      	lsls	r0, r3, #2
 8014afe:	5011      	str	r1, [r2, r0]
 8014b00:	3301      	adds	r3, #1
 8014b02:	42ab      	cmp	r3, r5
 8014b04:	dbfa      	blt.n	8014afc <__lshift+0x48>
 8014b06:	43eb      	mvns	r3, r5
 8014b08:	17db      	asrs	r3, r3, #31
 8014b0a:	401d      	ands	r5, r3
 8014b0c:	211f      	movs	r1, #31
 8014b0e:	0023      	movs	r3, r4
 8014b10:	0038      	movs	r0, r7
 8014b12:	00ad      	lsls	r5, r5, #2
 8014b14:	1955      	adds	r5, r2, r5
 8014b16:	6922      	ldr	r2, [r4, #16]
 8014b18:	3314      	adds	r3, #20
 8014b1a:	0092      	lsls	r2, r2, #2
 8014b1c:	4008      	ands	r0, r1
 8014b1e:	4684      	mov	ip, r0
 8014b20:	189a      	adds	r2, r3, r2
 8014b22:	420f      	tst	r7, r1
 8014b24:	d02a      	beq.n	8014b7c <__lshift+0xc8>
 8014b26:	3101      	adds	r1, #1
 8014b28:	1a09      	subs	r1, r1, r0
 8014b2a:	9105      	str	r1, [sp, #20]
 8014b2c:	2100      	movs	r1, #0
 8014b2e:	9503      	str	r5, [sp, #12]
 8014b30:	4667      	mov	r7, ip
 8014b32:	6818      	ldr	r0, [r3, #0]
 8014b34:	40b8      	lsls	r0, r7
 8014b36:	4301      	orrs	r1, r0
 8014b38:	9803      	ldr	r0, [sp, #12]
 8014b3a:	c002      	stmia	r0!, {r1}
 8014b3c:	cb02      	ldmia	r3!, {r1}
 8014b3e:	9003      	str	r0, [sp, #12]
 8014b40:	9805      	ldr	r0, [sp, #20]
 8014b42:	40c1      	lsrs	r1, r0
 8014b44:	429a      	cmp	r2, r3
 8014b46:	d8f3      	bhi.n	8014b30 <__lshift+0x7c>
 8014b48:	0020      	movs	r0, r4
 8014b4a:	3015      	adds	r0, #21
 8014b4c:	2304      	movs	r3, #4
 8014b4e:	4282      	cmp	r2, r0
 8014b50:	d304      	bcc.n	8014b5c <__lshift+0xa8>
 8014b52:	1b13      	subs	r3, r2, r4
 8014b54:	3b15      	subs	r3, #21
 8014b56:	089b      	lsrs	r3, r3, #2
 8014b58:	3301      	adds	r3, #1
 8014b5a:	009b      	lsls	r3, r3, #2
 8014b5c:	50e9      	str	r1, [r5, r3]
 8014b5e:	2900      	cmp	r1, #0
 8014b60:	d002      	beq.n	8014b68 <__lshift+0xb4>
 8014b62:	9b02      	ldr	r3, [sp, #8]
 8014b64:	3302      	adds	r3, #2
 8014b66:	9301      	str	r3, [sp, #4]
 8014b68:	9b01      	ldr	r3, [sp, #4]
 8014b6a:	9804      	ldr	r0, [sp, #16]
 8014b6c:	3b01      	subs	r3, #1
 8014b6e:	0021      	movs	r1, r4
 8014b70:	6133      	str	r3, [r6, #16]
 8014b72:	f7ff fd81 	bl	8014678 <_Bfree>
 8014b76:	0030      	movs	r0, r6
 8014b78:	b007      	add	sp, #28
 8014b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014b7c:	cb02      	ldmia	r3!, {r1}
 8014b7e:	c502      	stmia	r5!, {r1}
 8014b80:	429a      	cmp	r2, r3
 8014b82:	d8fb      	bhi.n	8014b7c <__lshift+0xc8>
 8014b84:	e7f0      	b.n	8014b68 <__lshift+0xb4>
 8014b86:	46c0      	nop			; (mov r8, r8)
 8014b88:	08017a1c 	.word	0x08017a1c
 8014b8c:	08017b0c 	.word	0x08017b0c

08014b90 <__mcmp>:
 8014b90:	6902      	ldr	r2, [r0, #16]
 8014b92:	690b      	ldr	r3, [r1, #16]
 8014b94:	b530      	push	{r4, r5, lr}
 8014b96:	0004      	movs	r4, r0
 8014b98:	1ad0      	subs	r0, r2, r3
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d10d      	bne.n	8014bba <__mcmp+0x2a>
 8014b9e:	009b      	lsls	r3, r3, #2
 8014ba0:	3414      	adds	r4, #20
 8014ba2:	3114      	adds	r1, #20
 8014ba4:	18e2      	adds	r2, r4, r3
 8014ba6:	18c9      	adds	r1, r1, r3
 8014ba8:	3a04      	subs	r2, #4
 8014baa:	3904      	subs	r1, #4
 8014bac:	6815      	ldr	r5, [r2, #0]
 8014bae:	680b      	ldr	r3, [r1, #0]
 8014bb0:	429d      	cmp	r5, r3
 8014bb2:	d003      	beq.n	8014bbc <__mcmp+0x2c>
 8014bb4:	2001      	movs	r0, #1
 8014bb6:	429d      	cmp	r5, r3
 8014bb8:	d303      	bcc.n	8014bc2 <__mcmp+0x32>
 8014bba:	bd30      	pop	{r4, r5, pc}
 8014bbc:	4294      	cmp	r4, r2
 8014bbe:	d3f3      	bcc.n	8014ba8 <__mcmp+0x18>
 8014bc0:	e7fb      	b.n	8014bba <__mcmp+0x2a>
 8014bc2:	4240      	negs	r0, r0
 8014bc4:	e7f9      	b.n	8014bba <__mcmp+0x2a>
	...

08014bc8 <__mdiff>:
 8014bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bca:	000e      	movs	r6, r1
 8014bcc:	0007      	movs	r7, r0
 8014bce:	0011      	movs	r1, r2
 8014bd0:	0030      	movs	r0, r6
 8014bd2:	b087      	sub	sp, #28
 8014bd4:	0014      	movs	r4, r2
 8014bd6:	f7ff ffdb 	bl	8014b90 <__mcmp>
 8014bda:	1e05      	subs	r5, r0, #0
 8014bdc:	d110      	bne.n	8014c00 <__mdiff+0x38>
 8014bde:	0001      	movs	r1, r0
 8014be0:	0038      	movs	r0, r7
 8014be2:	f7ff fd05 	bl	80145f0 <_Balloc>
 8014be6:	1e02      	subs	r2, r0, #0
 8014be8:	d104      	bne.n	8014bf4 <__mdiff+0x2c>
 8014bea:	4b40      	ldr	r3, [pc, #256]	; (8014cec <__mdiff+0x124>)
 8014bec:	4940      	ldr	r1, [pc, #256]	; (8014cf0 <__mdiff+0x128>)
 8014bee:	4841      	ldr	r0, [pc, #260]	; (8014cf4 <__mdiff+0x12c>)
 8014bf0:	f7fe f84c 	bl	8012c8c <__assert_func>
 8014bf4:	2301      	movs	r3, #1
 8014bf6:	6145      	str	r5, [r0, #20]
 8014bf8:	6103      	str	r3, [r0, #16]
 8014bfa:	0010      	movs	r0, r2
 8014bfc:	b007      	add	sp, #28
 8014bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c00:	2301      	movs	r3, #1
 8014c02:	9301      	str	r3, [sp, #4]
 8014c04:	2800      	cmp	r0, #0
 8014c06:	db04      	blt.n	8014c12 <__mdiff+0x4a>
 8014c08:	0023      	movs	r3, r4
 8014c0a:	0034      	movs	r4, r6
 8014c0c:	001e      	movs	r6, r3
 8014c0e:	2300      	movs	r3, #0
 8014c10:	9301      	str	r3, [sp, #4]
 8014c12:	0038      	movs	r0, r7
 8014c14:	6861      	ldr	r1, [r4, #4]
 8014c16:	f7ff fceb 	bl	80145f0 <_Balloc>
 8014c1a:	1e02      	subs	r2, r0, #0
 8014c1c:	d103      	bne.n	8014c26 <__mdiff+0x5e>
 8014c1e:	2190      	movs	r1, #144	; 0x90
 8014c20:	4b32      	ldr	r3, [pc, #200]	; (8014cec <__mdiff+0x124>)
 8014c22:	0089      	lsls	r1, r1, #2
 8014c24:	e7e3      	b.n	8014bee <__mdiff+0x26>
 8014c26:	9b01      	ldr	r3, [sp, #4]
 8014c28:	2700      	movs	r7, #0
 8014c2a:	60c3      	str	r3, [r0, #12]
 8014c2c:	6920      	ldr	r0, [r4, #16]
 8014c2e:	3414      	adds	r4, #20
 8014c30:	9401      	str	r4, [sp, #4]
 8014c32:	9b01      	ldr	r3, [sp, #4]
 8014c34:	0084      	lsls	r4, r0, #2
 8014c36:	191b      	adds	r3, r3, r4
 8014c38:	0034      	movs	r4, r6
 8014c3a:	9302      	str	r3, [sp, #8]
 8014c3c:	6933      	ldr	r3, [r6, #16]
 8014c3e:	3414      	adds	r4, #20
 8014c40:	0099      	lsls	r1, r3, #2
 8014c42:	1863      	adds	r3, r4, r1
 8014c44:	9303      	str	r3, [sp, #12]
 8014c46:	0013      	movs	r3, r2
 8014c48:	3314      	adds	r3, #20
 8014c4a:	469c      	mov	ip, r3
 8014c4c:	9305      	str	r3, [sp, #20]
 8014c4e:	9b01      	ldr	r3, [sp, #4]
 8014c50:	9304      	str	r3, [sp, #16]
 8014c52:	9b04      	ldr	r3, [sp, #16]
 8014c54:	cc02      	ldmia	r4!, {r1}
 8014c56:	cb20      	ldmia	r3!, {r5}
 8014c58:	9304      	str	r3, [sp, #16]
 8014c5a:	b2ab      	uxth	r3, r5
 8014c5c:	19df      	adds	r7, r3, r7
 8014c5e:	b28b      	uxth	r3, r1
 8014c60:	1afb      	subs	r3, r7, r3
 8014c62:	0c09      	lsrs	r1, r1, #16
 8014c64:	0c2d      	lsrs	r5, r5, #16
 8014c66:	1a6d      	subs	r5, r5, r1
 8014c68:	1419      	asrs	r1, r3, #16
 8014c6a:	186d      	adds	r5, r5, r1
 8014c6c:	4661      	mov	r1, ip
 8014c6e:	142f      	asrs	r7, r5, #16
 8014c70:	b29b      	uxth	r3, r3
 8014c72:	042d      	lsls	r5, r5, #16
 8014c74:	432b      	orrs	r3, r5
 8014c76:	c108      	stmia	r1!, {r3}
 8014c78:	9b03      	ldr	r3, [sp, #12]
 8014c7a:	468c      	mov	ip, r1
 8014c7c:	42a3      	cmp	r3, r4
 8014c7e:	d8e8      	bhi.n	8014c52 <__mdiff+0x8a>
 8014c80:	0031      	movs	r1, r6
 8014c82:	9c03      	ldr	r4, [sp, #12]
 8014c84:	3115      	adds	r1, #21
 8014c86:	2304      	movs	r3, #4
 8014c88:	428c      	cmp	r4, r1
 8014c8a:	d304      	bcc.n	8014c96 <__mdiff+0xce>
 8014c8c:	1ba3      	subs	r3, r4, r6
 8014c8e:	3b15      	subs	r3, #21
 8014c90:	089b      	lsrs	r3, r3, #2
 8014c92:	3301      	adds	r3, #1
 8014c94:	009b      	lsls	r3, r3, #2
 8014c96:	9901      	ldr	r1, [sp, #4]
 8014c98:	18cc      	adds	r4, r1, r3
 8014c9a:	9905      	ldr	r1, [sp, #20]
 8014c9c:	0026      	movs	r6, r4
 8014c9e:	18cb      	adds	r3, r1, r3
 8014ca0:	469c      	mov	ip, r3
 8014ca2:	9902      	ldr	r1, [sp, #8]
 8014ca4:	428e      	cmp	r6, r1
 8014ca6:	d310      	bcc.n	8014cca <__mdiff+0x102>
 8014ca8:	9e02      	ldr	r6, [sp, #8]
 8014caa:	1ee1      	subs	r1, r4, #3
 8014cac:	2500      	movs	r5, #0
 8014cae:	428e      	cmp	r6, r1
 8014cb0:	d304      	bcc.n	8014cbc <__mdiff+0xf4>
 8014cb2:	0031      	movs	r1, r6
 8014cb4:	3103      	adds	r1, #3
 8014cb6:	1b0c      	subs	r4, r1, r4
 8014cb8:	08a4      	lsrs	r4, r4, #2
 8014cba:	00a5      	lsls	r5, r4, #2
 8014cbc:	195b      	adds	r3, r3, r5
 8014cbe:	3b04      	subs	r3, #4
 8014cc0:	6819      	ldr	r1, [r3, #0]
 8014cc2:	2900      	cmp	r1, #0
 8014cc4:	d00f      	beq.n	8014ce6 <__mdiff+0x11e>
 8014cc6:	6110      	str	r0, [r2, #16]
 8014cc8:	e797      	b.n	8014bfa <__mdiff+0x32>
 8014cca:	ce02      	ldmia	r6!, {r1}
 8014ccc:	b28d      	uxth	r5, r1
 8014cce:	19ed      	adds	r5, r5, r7
 8014cd0:	0c0f      	lsrs	r7, r1, #16
 8014cd2:	1429      	asrs	r1, r5, #16
 8014cd4:	1879      	adds	r1, r7, r1
 8014cd6:	140f      	asrs	r7, r1, #16
 8014cd8:	b2ad      	uxth	r5, r5
 8014cda:	0409      	lsls	r1, r1, #16
 8014cdc:	430d      	orrs	r5, r1
 8014cde:	4661      	mov	r1, ip
 8014ce0:	c120      	stmia	r1!, {r5}
 8014ce2:	468c      	mov	ip, r1
 8014ce4:	e7dd      	b.n	8014ca2 <__mdiff+0xda>
 8014ce6:	3801      	subs	r0, #1
 8014ce8:	e7e9      	b.n	8014cbe <__mdiff+0xf6>
 8014cea:	46c0      	nop			; (mov r8, r8)
 8014cec:	08017a1c 	.word	0x08017a1c
 8014cf0:	00000232 	.word	0x00000232
 8014cf4:	08017b0c 	.word	0x08017b0c

08014cf8 <__ulp>:
 8014cf8:	4b0f      	ldr	r3, [pc, #60]	; (8014d38 <__ulp+0x40>)
 8014cfa:	4019      	ands	r1, r3
 8014cfc:	4b0f      	ldr	r3, [pc, #60]	; (8014d3c <__ulp+0x44>)
 8014cfe:	18c9      	adds	r1, r1, r3
 8014d00:	2900      	cmp	r1, #0
 8014d02:	dd04      	ble.n	8014d0e <__ulp+0x16>
 8014d04:	2200      	movs	r2, #0
 8014d06:	000b      	movs	r3, r1
 8014d08:	0010      	movs	r0, r2
 8014d0a:	0019      	movs	r1, r3
 8014d0c:	4770      	bx	lr
 8014d0e:	4249      	negs	r1, r1
 8014d10:	2200      	movs	r2, #0
 8014d12:	2300      	movs	r3, #0
 8014d14:	1509      	asrs	r1, r1, #20
 8014d16:	2913      	cmp	r1, #19
 8014d18:	dc04      	bgt.n	8014d24 <__ulp+0x2c>
 8014d1a:	2080      	movs	r0, #128	; 0x80
 8014d1c:	0300      	lsls	r0, r0, #12
 8014d1e:	4108      	asrs	r0, r1
 8014d20:	0003      	movs	r3, r0
 8014d22:	e7f1      	b.n	8014d08 <__ulp+0x10>
 8014d24:	3914      	subs	r1, #20
 8014d26:	2001      	movs	r0, #1
 8014d28:	291e      	cmp	r1, #30
 8014d2a:	dc02      	bgt.n	8014d32 <__ulp+0x3a>
 8014d2c:	2080      	movs	r0, #128	; 0x80
 8014d2e:	0600      	lsls	r0, r0, #24
 8014d30:	40c8      	lsrs	r0, r1
 8014d32:	0002      	movs	r2, r0
 8014d34:	e7e8      	b.n	8014d08 <__ulp+0x10>
 8014d36:	46c0      	nop			; (mov r8, r8)
 8014d38:	7ff00000 	.word	0x7ff00000
 8014d3c:	fcc00000 	.word	0xfcc00000

08014d40 <__b2d>:
 8014d40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014d42:	0006      	movs	r6, r0
 8014d44:	6903      	ldr	r3, [r0, #16]
 8014d46:	3614      	adds	r6, #20
 8014d48:	009b      	lsls	r3, r3, #2
 8014d4a:	18f3      	adds	r3, r6, r3
 8014d4c:	1f1d      	subs	r5, r3, #4
 8014d4e:	682c      	ldr	r4, [r5, #0]
 8014d50:	000f      	movs	r7, r1
 8014d52:	0020      	movs	r0, r4
 8014d54:	9301      	str	r3, [sp, #4]
 8014d56:	f7ff fd43 	bl	80147e0 <__hi0bits>
 8014d5a:	2320      	movs	r3, #32
 8014d5c:	1a1b      	subs	r3, r3, r0
 8014d5e:	491f      	ldr	r1, [pc, #124]	; (8014ddc <__b2d+0x9c>)
 8014d60:	603b      	str	r3, [r7, #0]
 8014d62:	280a      	cmp	r0, #10
 8014d64:	dc16      	bgt.n	8014d94 <__b2d+0x54>
 8014d66:	230b      	movs	r3, #11
 8014d68:	0027      	movs	r7, r4
 8014d6a:	1a1b      	subs	r3, r3, r0
 8014d6c:	40df      	lsrs	r7, r3
 8014d6e:	4339      	orrs	r1, r7
 8014d70:	469c      	mov	ip, r3
 8014d72:	000b      	movs	r3, r1
 8014d74:	2100      	movs	r1, #0
 8014d76:	42ae      	cmp	r6, r5
 8014d78:	d202      	bcs.n	8014d80 <__b2d+0x40>
 8014d7a:	9901      	ldr	r1, [sp, #4]
 8014d7c:	3908      	subs	r1, #8
 8014d7e:	6809      	ldr	r1, [r1, #0]
 8014d80:	3015      	adds	r0, #21
 8014d82:	4084      	lsls	r4, r0
 8014d84:	4660      	mov	r0, ip
 8014d86:	40c1      	lsrs	r1, r0
 8014d88:	430c      	orrs	r4, r1
 8014d8a:	0022      	movs	r2, r4
 8014d8c:	0010      	movs	r0, r2
 8014d8e:	0019      	movs	r1, r3
 8014d90:	b003      	add	sp, #12
 8014d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d94:	2700      	movs	r7, #0
 8014d96:	42ae      	cmp	r6, r5
 8014d98:	d202      	bcs.n	8014da0 <__b2d+0x60>
 8014d9a:	9d01      	ldr	r5, [sp, #4]
 8014d9c:	3d08      	subs	r5, #8
 8014d9e:	682f      	ldr	r7, [r5, #0]
 8014da0:	230b      	movs	r3, #11
 8014da2:	425b      	negs	r3, r3
 8014da4:	469c      	mov	ip, r3
 8014da6:	4484      	add	ip, r0
 8014da8:	280b      	cmp	r0, #11
 8014daa:	d013      	beq.n	8014dd4 <__b2d+0x94>
 8014dac:	4663      	mov	r3, ip
 8014dae:	2020      	movs	r0, #32
 8014db0:	409c      	lsls	r4, r3
 8014db2:	1ac0      	subs	r0, r0, r3
 8014db4:	003b      	movs	r3, r7
 8014db6:	40c3      	lsrs	r3, r0
 8014db8:	431c      	orrs	r4, r3
 8014dba:	4321      	orrs	r1, r4
 8014dbc:	000b      	movs	r3, r1
 8014dbe:	2100      	movs	r1, #0
 8014dc0:	42b5      	cmp	r5, r6
 8014dc2:	d901      	bls.n	8014dc8 <__b2d+0x88>
 8014dc4:	3d04      	subs	r5, #4
 8014dc6:	6829      	ldr	r1, [r5, #0]
 8014dc8:	4664      	mov	r4, ip
 8014dca:	40c1      	lsrs	r1, r0
 8014dcc:	40a7      	lsls	r7, r4
 8014dce:	430f      	orrs	r7, r1
 8014dd0:	003a      	movs	r2, r7
 8014dd2:	e7db      	b.n	8014d8c <__b2d+0x4c>
 8014dd4:	4321      	orrs	r1, r4
 8014dd6:	000b      	movs	r3, r1
 8014dd8:	e7fa      	b.n	8014dd0 <__b2d+0x90>
 8014dda:	46c0      	nop			; (mov r8, r8)
 8014ddc:	3ff00000 	.word	0x3ff00000

08014de0 <__d2b>:
 8014de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014de2:	2101      	movs	r1, #1
 8014de4:	0014      	movs	r4, r2
 8014de6:	001e      	movs	r6, r3
 8014de8:	9f08      	ldr	r7, [sp, #32]
 8014dea:	f7ff fc01 	bl	80145f0 <_Balloc>
 8014dee:	1e05      	subs	r5, r0, #0
 8014df0:	d105      	bne.n	8014dfe <__d2b+0x1e>
 8014df2:	0002      	movs	r2, r0
 8014df4:	4b26      	ldr	r3, [pc, #152]	; (8014e90 <__d2b+0xb0>)
 8014df6:	4927      	ldr	r1, [pc, #156]	; (8014e94 <__d2b+0xb4>)
 8014df8:	4827      	ldr	r0, [pc, #156]	; (8014e98 <__d2b+0xb8>)
 8014dfa:	f7fd ff47 	bl	8012c8c <__assert_func>
 8014dfe:	0333      	lsls	r3, r6, #12
 8014e00:	0076      	lsls	r6, r6, #1
 8014e02:	0b1b      	lsrs	r3, r3, #12
 8014e04:	0d76      	lsrs	r6, r6, #21
 8014e06:	d124      	bne.n	8014e52 <__d2b+0x72>
 8014e08:	9301      	str	r3, [sp, #4]
 8014e0a:	2c00      	cmp	r4, #0
 8014e0c:	d027      	beq.n	8014e5e <__d2b+0x7e>
 8014e0e:	4668      	mov	r0, sp
 8014e10:	9400      	str	r4, [sp, #0]
 8014e12:	f7ff fcff 	bl	8014814 <__lo0bits>
 8014e16:	9c00      	ldr	r4, [sp, #0]
 8014e18:	2800      	cmp	r0, #0
 8014e1a:	d01e      	beq.n	8014e5a <__d2b+0x7a>
 8014e1c:	9b01      	ldr	r3, [sp, #4]
 8014e1e:	2120      	movs	r1, #32
 8014e20:	001a      	movs	r2, r3
 8014e22:	1a09      	subs	r1, r1, r0
 8014e24:	408a      	lsls	r2, r1
 8014e26:	40c3      	lsrs	r3, r0
 8014e28:	4322      	orrs	r2, r4
 8014e2a:	616a      	str	r2, [r5, #20]
 8014e2c:	9301      	str	r3, [sp, #4]
 8014e2e:	9c01      	ldr	r4, [sp, #4]
 8014e30:	61ac      	str	r4, [r5, #24]
 8014e32:	1e63      	subs	r3, r4, #1
 8014e34:	419c      	sbcs	r4, r3
 8014e36:	3401      	adds	r4, #1
 8014e38:	612c      	str	r4, [r5, #16]
 8014e3a:	2e00      	cmp	r6, #0
 8014e3c:	d018      	beq.n	8014e70 <__d2b+0x90>
 8014e3e:	4b17      	ldr	r3, [pc, #92]	; (8014e9c <__d2b+0xbc>)
 8014e40:	18f6      	adds	r6, r6, r3
 8014e42:	2335      	movs	r3, #53	; 0x35
 8014e44:	1836      	adds	r6, r6, r0
 8014e46:	1a18      	subs	r0, r3, r0
 8014e48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e4a:	603e      	str	r6, [r7, #0]
 8014e4c:	6018      	str	r0, [r3, #0]
 8014e4e:	0028      	movs	r0, r5
 8014e50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014e52:	2280      	movs	r2, #128	; 0x80
 8014e54:	0352      	lsls	r2, r2, #13
 8014e56:	4313      	orrs	r3, r2
 8014e58:	e7d6      	b.n	8014e08 <__d2b+0x28>
 8014e5a:	616c      	str	r4, [r5, #20]
 8014e5c:	e7e7      	b.n	8014e2e <__d2b+0x4e>
 8014e5e:	a801      	add	r0, sp, #4
 8014e60:	f7ff fcd8 	bl	8014814 <__lo0bits>
 8014e64:	2401      	movs	r4, #1
 8014e66:	9b01      	ldr	r3, [sp, #4]
 8014e68:	612c      	str	r4, [r5, #16]
 8014e6a:	616b      	str	r3, [r5, #20]
 8014e6c:	3020      	adds	r0, #32
 8014e6e:	e7e4      	b.n	8014e3a <__d2b+0x5a>
 8014e70:	4b0b      	ldr	r3, [pc, #44]	; (8014ea0 <__d2b+0xc0>)
 8014e72:	18c0      	adds	r0, r0, r3
 8014e74:	4b0b      	ldr	r3, [pc, #44]	; (8014ea4 <__d2b+0xc4>)
 8014e76:	6038      	str	r0, [r7, #0]
 8014e78:	18e3      	adds	r3, r4, r3
 8014e7a:	009b      	lsls	r3, r3, #2
 8014e7c:	18eb      	adds	r3, r5, r3
 8014e7e:	6958      	ldr	r0, [r3, #20]
 8014e80:	f7ff fcae 	bl	80147e0 <__hi0bits>
 8014e84:	0164      	lsls	r4, r4, #5
 8014e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e88:	1a24      	subs	r4, r4, r0
 8014e8a:	601c      	str	r4, [r3, #0]
 8014e8c:	e7df      	b.n	8014e4e <__d2b+0x6e>
 8014e8e:	46c0      	nop			; (mov r8, r8)
 8014e90:	08017a1c 	.word	0x08017a1c
 8014e94:	0000030a 	.word	0x0000030a
 8014e98:	08017b0c 	.word	0x08017b0c
 8014e9c:	fffffbcd 	.word	0xfffffbcd
 8014ea0:	fffffbce 	.word	0xfffffbce
 8014ea4:	3fffffff 	.word	0x3fffffff

08014ea8 <__ratio>:
 8014ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014eaa:	b087      	sub	sp, #28
 8014eac:	000f      	movs	r7, r1
 8014eae:	a904      	add	r1, sp, #16
 8014eb0:	0006      	movs	r6, r0
 8014eb2:	f7ff ff45 	bl	8014d40 <__b2d>
 8014eb6:	9000      	str	r0, [sp, #0]
 8014eb8:	9101      	str	r1, [sp, #4]
 8014eba:	9c00      	ldr	r4, [sp, #0]
 8014ebc:	9d01      	ldr	r5, [sp, #4]
 8014ebe:	0038      	movs	r0, r7
 8014ec0:	a905      	add	r1, sp, #20
 8014ec2:	f7ff ff3d 	bl	8014d40 <__b2d>
 8014ec6:	9002      	str	r0, [sp, #8]
 8014ec8:	9103      	str	r1, [sp, #12]
 8014eca:	9a02      	ldr	r2, [sp, #8]
 8014ecc:	9b03      	ldr	r3, [sp, #12]
 8014ece:	6931      	ldr	r1, [r6, #16]
 8014ed0:	6938      	ldr	r0, [r7, #16]
 8014ed2:	9e05      	ldr	r6, [sp, #20]
 8014ed4:	1a08      	subs	r0, r1, r0
 8014ed6:	9904      	ldr	r1, [sp, #16]
 8014ed8:	0140      	lsls	r0, r0, #5
 8014eda:	1b89      	subs	r1, r1, r6
 8014edc:	1841      	adds	r1, r0, r1
 8014ede:	0508      	lsls	r0, r1, #20
 8014ee0:	2900      	cmp	r1, #0
 8014ee2:	dd07      	ble.n	8014ef4 <__ratio+0x4c>
 8014ee4:	9901      	ldr	r1, [sp, #4]
 8014ee6:	1845      	adds	r5, r0, r1
 8014ee8:	0020      	movs	r0, r4
 8014eea:	0029      	movs	r1, r5
 8014eec:	f7ec fb42 	bl	8001574 <__aeabi_ddiv>
 8014ef0:	b007      	add	sp, #28
 8014ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ef4:	9903      	ldr	r1, [sp, #12]
 8014ef6:	1a0b      	subs	r3, r1, r0
 8014ef8:	e7f6      	b.n	8014ee8 <__ratio+0x40>

08014efa <__copybits>:
 8014efa:	b570      	push	{r4, r5, r6, lr}
 8014efc:	0014      	movs	r4, r2
 8014efe:	0005      	movs	r5, r0
 8014f00:	3901      	subs	r1, #1
 8014f02:	6913      	ldr	r3, [r2, #16]
 8014f04:	1149      	asrs	r1, r1, #5
 8014f06:	3101      	adds	r1, #1
 8014f08:	0089      	lsls	r1, r1, #2
 8014f0a:	3414      	adds	r4, #20
 8014f0c:	009b      	lsls	r3, r3, #2
 8014f0e:	1841      	adds	r1, r0, r1
 8014f10:	18e3      	adds	r3, r4, r3
 8014f12:	42a3      	cmp	r3, r4
 8014f14:	d80d      	bhi.n	8014f32 <__copybits+0x38>
 8014f16:	0014      	movs	r4, r2
 8014f18:	3411      	adds	r4, #17
 8014f1a:	2500      	movs	r5, #0
 8014f1c:	429c      	cmp	r4, r3
 8014f1e:	d803      	bhi.n	8014f28 <__copybits+0x2e>
 8014f20:	1a9b      	subs	r3, r3, r2
 8014f22:	3b11      	subs	r3, #17
 8014f24:	089b      	lsrs	r3, r3, #2
 8014f26:	009d      	lsls	r5, r3, #2
 8014f28:	2300      	movs	r3, #0
 8014f2a:	1940      	adds	r0, r0, r5
 8014f2c:	4281      	cmp	r1, r0
 8014f2e:	d803      	bhi.n	8014f38 <__copybits+0x3e>
 8014f30:	bd70      	pop	{r4, r5, r6, pc}
 8014f32:	cc40      	ldmia	r4!, {r6}
 8014f34:	c540      	stmia	r5!, {r6}
 8014f36:	e7ec      	b.n	8014f12 <__copybits+0x18>
 8014f38:	c008      	stmia	r0!, {r3}
 8014f3a:	e7f7      	b.n	8014f2c <__copybits+0x32>

08014f3c <__any_on>:
 8014f3c:	0002      	movs	r2, r0
 8014f3e:	6900      	ldr	r0, [r0, #16]
 8014f40:	b510      	push	{r4, lr}
 8014f42:	3214      	adds	r2, #20
 8014f44:	114b      	asrs	r3, r1, #5
 8014f46:	4298      	cmp	r0, r3
 8014f48:	db13      	blt.n	8014f72 <__any_on+0x36>
 8014f4a:	dd0c      	ble.n	8014f66 <__any_on+0x2a>
 8014f4c:	241f      	movs	r4, #31
 8014f4e:	0008      	movs	r0, r1
 8014f50:	4020      	ands	r0, r4
 8014f52:	4221      	tst	r1, r4
 8014f54:	d007      	beq.n	8014f66 <__any_on+0x2a>
 8014f56:	0099      	lsls	r1, r3, #2
 8014f58:	588c      	ldr	r4, [r1, r2]
 8014f5a:	0021      	movs	r1, r4
 8014f5c:	40c1      	lsrs	r1, r0
 8014f5e:	4081      	lsls	r1, r0
 8014f60:	2001      	movs	r0, #1
 8014f62:	428c      	cmp	r4, r1
 8014f64:	d104      	bne.n	8014f70 <__any_on+0x34>
 8014f66:	009b      	lsls	r3, r3, #2
 8014f68:	18d3      	adds	r3, r2, r3
 8014f6a:	4293      	cmp	r3, r2
 8014f6c:	d803      	bhi.n	8014f76 <__any_on+0x3a>
 8014f6e:	2000      	movs	r0, #0
 8014f70:	bd10      	pop	{r4, pc}
 8014f72:	0003      	movs	r3, r0
 8014f74:	e7f7      	b.n	8014f66 <__any_on+0x2a>
 8014f76:	3b04      	subs	r3, #4
 8014f78:	6819      	ldr	r1, [r3, #0]
 8014f7a:	2900      	cmp	r1, #0
 8014f7c:	d0f5      	beq.n	8014f6a <__any_on+0x2e>
 8014f7e:	2001      	movs	r0, #1
 8014f80:	e7f6      	b.n	8014f70 <__any_on+0x34>

08014f82 <_calloc_r>:
 8014f82:	b570      	push	{r4, r5, r6, lr}
 8014f84:	0c13      	lsrs	r3, r2, #16
 8014f86:	0c0d      	lsrs	r5, r1, #16
 8014f88:	d11e      	bne.n	8014fc8 <_calloc_r+0x46>
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d10c      	bne.n	8014fa8 <_calloc_r+0x26>
 8014f8e:	b289      	uxth	r1, r1
 8014f90:	b294      	uxth	r4, r2
 8014f92:	434c      	muls	r4, r1
 8014f94:	0021      	movs	r1, r4
 8014f96:	f000 f88d 	bl	80150b4 <_malloc_r>
 8014f9a:	1e05      	subs	r5, r0, #0
 8014f9c:	d01b      	beq.n	8014fd6 <_calloc_r+0x54>
 8014f9e:	0022      	movs	r2, r4
 8014fa0:	2100      	movs	r1, #0
 8014fa2:	f7fb ff44 	bl	8010e2e <memset>
 8014fa6:	e016      	b.n	8014fd6 <_calloc_r+0x54>
 8014fa8:	1c1d      	adds	r5, r3, #0
 8014faa:	1c0b      	adds	r3, r1, #0
 8014fac:	b292      	uxth	r2, r2
 8014fae:	b289      	uxth	r1, r1
 8014fb0:	b29c      	uxth	r4, r3
 8014fb2:	4351      	muls	r1, r2
 8014fb4:	b2ab      	uxth	r3, r5
 8014fb6:	4363      	muls	r3, r4
 8014fb8:	0c0c      	lsrs	r4, r1, #16
 8014fba:	191c      	adds	r4, r3, r4
 8014fbc:	0c22      	lsrs	r2, r4, #16
 8014fbe:	d107      	bne.n	8014fd0 <_calloc_r+0x4e>
 8014fc0:	0424      	lsls	r4, r4, #16
 8014fc2:	b289      	uxth	r1, r1
 8014fc4:	430c      	orrs	r4, r1
 8014fc6:	e7e5      	b.n	8014f94 <_calloc_r+0x12>
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d101      	bne.n	8014fd0 <_calloc_r+0x4e>
 8014fcc:	1c13      	adds	r3, r2, #0
 8014fce:	e7ed      	b.n	8014fac <_calloc_r+0x2a>
 8014fd0:	230c      	movs	r3, #12
 8014fd2:	2500      	movs	r5, #0
 8014fd4:	6003      	str	r3, [r0, #0]
 8014fd6:	0028      	movs	r0, r5
 8014fd8:	bd70      	pop	{r4, r5, r6, pc}
	...

08014fdc <_free_r>:
 8014fdc:	b570      	push	{r4, r5, r6, lr}
 8014fde:	0005      	movs	r5, r0
 8014fe0:	2900      	cmp	r1, #0
 8014fe2:	d010      	beq.n	8015006 <_free_r+0x2a>
 8014fe4:	1f0c      	subs	r4, r1, #4
 8014fe6:	6823      	ldr	r3, [r4, #0]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	da00      	bge.n	8014fee <_free_r+0x12>
 8014fec:	18e4      	adds	r4, r4, r3
 8014fee:	0028      	movs	r0, r5
 8014ff0:	f000 fc98 	bl	8015924 <__malloc_lock>
 8014ff4:	4a1d      	ldr	r2, [pc, #116]	; (801506c <_free_r+0x90>)
 8014ff6:	6813      	ldr	r3, [r2, #0]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d105      	bne.n	8015008 <_free_r+0x2c>
 8014ffc:	6063      	str	r3, [r4, #4]
 8014ffe:	6014      	str	r4, [r2, #0]
 8015000:	0028      	movs	r0, r5
 8015002:	f000 fc97 	bl	8015934 <__malloc_unlock>
 8015006:	bd70      	pop	{r4, r5, r6, pc}
 8015008:	42a3      	cmp	r3, r4
 801500a:	d908      	bls.n	801501e <_free_r+0x42>
 801500c:	6821      	ldr	r1, [r4, #0]
 801500e:	1860      	adds	r0, r4, r1
 8015010:	4283      	cmp	r3, r0
 8015012:	d1f3      	bne.n	8014ffc <_free_r+0x20>
 8015014:	6818      	ldr	r0, [r3, #0]
 8015016:	685b      	ldr	r3, [r3, #4]
 8015018:	1841      	adds	r1, r0, r1
 801501a:	6021      	str	r1, [r4, #0]
 801501c:	e7ee      	b.n	8014ffc <_free_r+0x20>
 801501e:	001a      	movs	r2, r3
 8015020:	685b      	ldr	r3, [r3, #4]
 8015022:	2b00      	cmp	r3, #0
 8015024:	d001      	beq.n	801502a <_free_r+0x4e>
 8015026:	42a3      	cmp	r3, r4
 8015028:	d9f9      	bls.n	801501e <_free_r+0x42>
 801502a:	6811      	ldr	r1, [r2, #0]
 801502c:	1850      	adds	r0, r2, r1
 801502e:	42a0      	cmp	r0, r4
 8015030:	d10b      	bne.n	801504a <_free_r+0x6e>
 8015032:	6820      	ldr	r0, [r4, #0]
 8015034:	1809      	adds	r1, r1, r0
 8015036:	1850      	adds	r0, r2, r1
 8015038:	6011      	str	r1, [r2, #0]
 801503a:	4283      	cmp	r3, r0
 801503c:	d1e0      	bne.n	8015000 <_free_r+0x24>
 801503e:	6818      	ldr	r0, [r3, #0]
 8015040:	685b      	ldr	r3, [r3, #4]
 8015042:	1841      	adds	r1, r0, r1
 8015044:	6011      	str	r1, [r2, #0]
 8015046:	6053      	str	r3, [r2, #4]
 8015048:	e7da      	b.n	8015000 <_free_r+0x24>
 801504a:	42a0      	cmp	r0, r4
 801504c:	d902      	bls.n	8015054 <_free_r+0x78>
 801504e:	230c      	movs	r3, #12
 8015050:	602b      	str	r3, [r5, #0]
 8015052:	e7d5      	b.n	8015000 <_free_r+0x24>
 8015054:	6821      	ldr	r1, [r4, #0]
 8015056:	1860      	adds	r0, r4, r1
 8015058:	4283      	cmp	r3, r0
 801505a:	d103      	bne.n	8015064 <_free_r+0x88>
 801505c:	6818      	ldr	r0, [r3, #0]
 801505e:	685b      	ldr	r3, [r3, #4]
 8015060:	1841      	adds	r1, r0, r1
 8015062:	6021      	str	r1, [r4, #0]
 8015064:	6063      	str	r3, [r4, #4]
 8015066:	6054      	str	r4, [r2, #4]
 8015068:	e7ca      	b.n	8015000 <_free_r+0x24>
 801506a:	46c0      	nop			; (mov r8, r8)
 801506c:	20000c98 	.word	0x20000c98

08015070 <sbrk_aligned>:
 8015070:	b570      	push	{r4, r5, r6, lr}
 8015072:	4e0f      	ldr	r6, [pc, #60]	; (80150b0 <sbrk_aligned+0x40>)
 8015074:	000d      	movs	r5, r1
 8015076:	6831      	ldr	r1, [r6, #0]
 8015078:	0004      	movs	r4, r0
 801507a:	2900      	cmp	r1, #0
 801507c:	d102      	bne.n	8015084 <sbrk_aligned+0x14>
 801507e:	f000 fb59 	bl	8015734 <_sbrk_r>
 8015082:	6030      	str	r0, [r6, #0]
 8015084:	0029      	movs	r1, r5
 8015086:	0020      	movs	r0, r4
 8015088:	f000 fb54 	bl	8015734 <_sbrk_r>
 801508c:	1c43      	adds	r3, r0, #1
 801508e:	d00a      	beq.n	80150a6 <sbrk_aligned+0x36>
 8015090:	2303      	movs	r3, #3
 8015092:	1cc5      	adds	r5, r0, #3
 8015094:	439d      	bics	r5, r3
 8015096:	42a8      	cmp	r0, r5
 8015098:	d007      	beq.n	80150aa <sbrk_aligned+0x3a>
 801509a:	1a29      	subs	r1, r5, r0
 801509c:	0020      	movs	r0, r4
 801509e:	f000 fb49 	bl	8015734 <_sbrk_r>
 80150a2:	1c43      	adds	r3, r0, #1
 80150a4:	d101      	bne.n	80150aa <sbrk_aligned+0x3a>
 80150a6:	2501      	movs	r5, #1
 80150a8:	426d      	negs	r5, r5
 80150aa:	0028      	movs	r0, r5
 80150ac:	bd70      	pop	{r4, r5, r6, pc}
 80150ae:	46c0      	nop			; (mov r8, r8)
 80150b0:	20000c9c 	.word	0x20000c9c

080150b4 <_malloc_r>:
 80150b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80150b6:	2203      	movs	r2, #3
 80150b8:	1ccb      	adds	r3, r1, #3
 80150ba:	4393      	bics	r3, r2
 80150bc:	3308      	adds	r3, #8
 80150be:	0006      	movs	r6, r0
 80150c0:	001f      	movs	r7, r3
 80150c2:	2b0c      	cmp	r3, #12
 80150c4:	d232      	bcs.n	801512c <_malloc_r+0x78>
 80150c6:	270c      	movs	r7, #12
 80150c8:	42b9      	cmp	r1, r7
 80150ca:	d831      	bhi.n	8015130 <_malloc_r+0x7c>
 80150cc:	0030      	movs	r0, r6
 80150ce:	f000 fc29 	bl	8015924 <__malloc_lock>
 80150d2:	4d32      	ldr	r5, [pc, #200]	; (801519c <_malloc_r+0xe8>)
 80150d4:	682b      	ldr	r3, [r5, #0]
 80150d6:	001c      	movs	r4, r3
 80150d8:	2c00      	cmp	r4, #0
 80150da:	d12e      	bne.n	801513a <_malloc_r+0x86>
 80150dc:	0039      	movs	r1, r7
 80150de:	0030      	movs	r0, r6
 80150e0:	f7ff ffc6 	bl	8015070 <sbrk_aligned>
 80150e4:	0004      	movs	r4, r0
 80150e6:	1c43      	adds	r3, r0, #1
 80150e8:	d11e      	bne.n	8015128 <_malloc_r+0x74>
 80150ea:	682c      	ldr	r4, [r5, #0]
 80150ec:	0025      	movs	r5, r4
 80150ee:	2d00      	cmp	r5, #0
 80150f0:	d14a      	bne.n	8015188 <_malloc_r+0xd4>
 80150f2:	6823      	ldr	r3, [r4, #0]
 80150f4:	0029      	movs	r1, r5
 80150f6:	18e3      	adds	r3, r4, r3
 80150f8:	0030      	movs	r0, r6
 80150fa:	9301      	str	r3, [sp, #4]
 80150fc:	f000 fb1a 	bl	8015734 <_sbrk_r>
 8015100:	9b01      	ldr	r3, [sp, #4]
 8015102:	4283      	cmp	r3, r0
 8015104:	d143      	bne.n	801518e <_malloc_r+0xda>
 8015106:	6823      	ldr	r3, [r4, #0]
 8015108:	3703      	adds	r7, #3
 801510a:	1aff      	subs	r7, r7, r3
 801510c:	2303      	movs	r3, #3
 801510e:	439f      	bics	r7, r3
 8015110:	3708      	adds	r7, #8
 8015112:	2f0c      	cmp	r7, #12
 8015114:	d200      	bcs.n	8015118 <_malloc_r+0x64>
 8015116:	270c      	movs	r7, #12
 8015118:	0039      	movs	r1, r7
 801511a:	0030      	movs	r0, r6
 801511c:	f7ff ffa8 	bl	8015070 <sbrk_aligned>
 8015120:	1c43      	adds	r3, r0, #1
 8015122:	d034      	beq.n	801518e <_malloc_r+0xda>
 8015124:	6823      	ldr	r3, [r4, #0]
 8015126:	19df      	adds	r7, r3, r7
 8015128:	6027      	str	r7, [r4, #0]
 801512a:	e013      	b.n	8015154 <_malloc_r+0xa0>
 801512c:	2b00      	cmp	r3, #0
 801512e:	dacb      	bge.n	80150c8 <_malloc_r+0x14>
 8015130:	230c      	movs	r3, #12
 8015132:	2500      	movs	r5, #0
 8015134:	6033      	str	r3, [r6, #0]
 8015136:	0028      	movs	r0, r5
 8015138:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801513a:	6822      	ldr	r2, [r4, #0]
 801513c:	1bd1      	subs	r1, r2, r7
 801513e:	d420      	bmi.n	8015182 <_malloc_r+0xce>
 8015140:	290b      	cmp	r1, #11
 8015142:	d917      	bls.n	8015174 <_malloc_r+0xc0>
 8015144:	19e2      	adds	r2, r4, r7
 8015146:	6027      	str	r7, [r4, #0]
 8015148:	42a3      	cmp	r3, r4
 801514a:	d111      	bne.n	8015170 <_malloc_r+0xbc>
 801514c:	602a      	str	r2, [r5, #0]
 801514e:	6863      	ldr	r3, [r4, #4]
 8015150:	6011      	str	r1, [r2, #0]
 8015152:	6053      	str	r3, [r2, #4]
 8015154:	0030      	movs	r0, r6
 8015156:	0025      	movs	r5, r4
 8015158:	f000 fbec 	bl	8015934 <__malloc_unlock>
 801515c:	2207      	movs	r2, #7
 801515e:	350b      	adds	r5, #11
 8015160:	1d23      	adds	r3, r4, #4
 8015162:	4395      	bics	r5, r2
 8015164:	1aea      	subs	r2, r5, r3
 8015166:	429d      	cmp	r5, r3
 8015168:	d0e5      	beq.n	8015136 <_malloc_r+0x82>
 801516a:	1b5b      	subs	r3, r3, r5
 801516c:	50a3      	str	r3, [r4, r2]
 801516e:	e7e2      	b.n	8015136 <_malloc_r+0x82>
 8015170:	605a      	str	r2, [r3, #4]
 8015172:	e7ec      	b.n	801514e <_malloc_r+0x9a>
 8015174:	6862      	ldr	r2, [r4, #4]
 8015176:	42a3      	cmp	r3, r4
 8015178:	d101      	bne.n	801517e <_malloc_r+0xca>
 801517a:	602a      	str	r2, [r5, #0]
 801517c:	e7ea      	b.n	8015154 <_malloc_r+0xa0>
 801517e:	605a      	str	r2, [r3, #4]
 8015180:	e7e8      	b.n	8015154 <_malloc_r+0xa0>
 8015182:	0023      	movs	r3, r4
 8015184:	6864      	ldr	r4, [r4, #4]
 8015186:	e7a7      	b.n	80150d8 <_malloc_r+0x24>
 8015188:	002c      	movs	r4, r5
 801518a:	686d      	ldr	r5, [r5, #4]
 801518c:	e7af      	b.n	80150ee <_malloc_r+0x3a>
 801518e:	230c      	movs	r3, #12
 8015190:	0030      	movs	r0, r6
 8015192:	6033      	str	r3, [r6, #0]
 8015194:	f000 fbce 	bl	8015934 <__malloc_unlock>
 8015198:	e7cd      	b.n	8015136 <_malloc_r+0x82>
 801519a:	46c0      	nop			; (mov r8, r8)
 801519c:	20000c98 	.word	0x20000c98

080151a0 <__ssputs_r>:
 80151a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80151a2:	688e      	ldr	r6, [r1, #8]
 80151a4:	b085      	sub	sp, #20
 80151a6:	0007      	movs	r7, r0
 80151a8:	000c      	movs	r4, r1
 80151aa:	9203      	str	r2, [sp, #12]
 80151ac:	9301      	str	r3, [sp, #4]
 80151ae:	429e      	cmp	r6, r3
 80151b0:	d83c      	bhi.n	801522c <__ssputs_r+0x8c>
 80151b2:	2390      	movs	r3, #144	; 0x90
 80151b4:	898a      	ldrh	r2, [r1, #12]
 80151b6:	00db      	lsls	r3, r3, #3
 80151b8:	421a      	tst	r2, r3
 80151ba:	d034      	beq.n	8015226 <__ssputs_r+0x86>
 80151bc:	6909      	ldr	r1, [r1, #16]
 80151be:	6823      	ldr	r3, [r4, #0]
 80151c0:	6960      	ldr	r0, [r4, #20]
 80151c2:	1a5b      	subs	r3, r3, r1
 80151c4:	9302      	str	r3, [sp, #8]
 80151c6:	2303      	movs	r3, #3
 80151c8:	4343      	muls	r3, r0
 80151ca:	0fdd      	lsrs	r5, r3, #31
 80151cc:	18ed      	adds	r5, r5, r3
 80151ce:	9b01      	ldr	r3, [sp, #4]
 80151d0:	9802      	ldr	r0, [sp, #8]
 80151d2:	3301      	adds	r3, #1
 80151d4:	181b      	adds	r3, r3, r0
 80151d6:	106d      	asrs	r5, r5, #1
 80151d8:	42ab      	cmp	r3, r5
 80151da:	d900      	bls.n	80151de <__ssputs_r+0x3e>
 80151dc:	001d      	movs	r5, r3
 80151de:	0553      	lsls	r3, r2, #21
 80151e0:	d532      	bpl.n	8015248 <__ssputs_r+0xa8>
 80151e2:	0029      	movs	r1, r5
 80151e4:	0038      	movs	r0, r7
 80151e6:	f7ff ff65 	bl	80150b4 <_malloc_r>
 80151ea:	1e06      	subs	r6, r0, #0
 80151ec:	d109      	bne.n	8015202 <__ssputs_r+0x62>
 80151ee:	230c      	movs	r3, #12
 80151f0:	603b      	str	r3, [r7, #0]
 80151f2:	2340      	movs	r3, #64	; 0x40
 80151f4:	2001      	movs	r0, #1
 80151f6:	89a2      	ldrh	r2, [r4, #12]
 80151f8:	4240      	negs	r0, r0
 80151fa:	4313      	orrs	r3, r2
 80151fc:	81a3      	strh	r3, [r4, #12]
 80151fe:	b005      	add	sp, #20
 8015200:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015202:	9a02      	ldr	r2, [sp, #8]
 8015204:	6921      	ldr	r1, [r4, #16]
 8015206:	f7fb fe09 	bl	8010e1c <memcpy>
 801520a:	89a3      	ldrh	r3, [r4, #12]
 801520c:	4a14      	ldr	r2, [pc, #80]	; (8015260 <__ssputs_r+0xc0>)
 801520e:	401a      	ands	r2, r3
 8015210:	2380      	movs	r3, #128	; 0x80
 8015212:	4313      	orrs	r3, r2
 8015214:	81a3      	strh	r3, [r4, #12]
 8015216:	9b02      	ldr	r3, [sp, #8]
 8015218:	6126      	str	r6, [r4, #16]
 801521a:	18f6      	adds	r6, r6, r3
 801521c:	6026      	str	r6, [r4, #0]
 801521e:	6165      	str	r5, [r4, #20]
 8015220:	9e01      	ldr	r6, [sp, #4]
 8015222:	1aed      	subs	r5, r5, r3
 8015224:	60a5      	str	r5, [r4, #8]
 8015226:	9b01      	ldr	r3, [sp, #4]
 8015228:	429e      	cmp	r6, r3
 801522a:	d900      	bls.n	801522e <__ssputs_r+0x8e>
 801522c:	9e01      	ldr	r6, [sp, #4]
 801522e:	0032      	movs	r2, r6
 8015230:	9903      	ldr	r1, [sp, #12]
 8015232:	6820      	ldr	r0, [r4, #0]
 8015234:	f000 fb62 	bl	80158fc <memmove>
 8015238:	68a3      	ldr	r3, [r4, #8]
 801523a:	2000      	movs	r0, #0
 801523c:	1b9b      	subs	r3, r3, r6
 801523e:	60a3      	str	r3, [r4, #8]
 8015240:	6823      	ldr	r3, [r4, #0]
 8015242:	199e      	adds	r6, r3, r6
 8015244:	6026      	str	r6, [r4, #0]
 8015246:	e7da      	b.n	80151fe <__ssputs_r+0x5e>
 8015248:	002a      	movs	r2, r5
 801524a:	0038      	movs	r0, r7
 801524c:	f000 fb7a 	bl	8015944 <_realloc_r>
 8015250:	1e06      	subs	r6, r0, #0
 8015252:	d1e0      	bne.n	8015216 <__ssputs_r+0x76>
 8015254:	0038      	movs	r0, r7
 8015256:	6921      	ldr	r1, [r4, #16]
 8015258:	f7ff fec0 	bl	8014fdc <_free_r>
 801525c:	e7c7      	b.n	80151ee <__ssputs_r+0x4e>
 801525e:	46c0      	nop			; (mov r8, r8)
 8015260:	fffffb7f 	.word	0xfffffb7f

08015264 <_svfiprintf_r>:
 8015264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015266:	b0a1      	sub	sp, #132	; 0x84
 8015268:	9003      	str	r0, [sp, #12]
 801526a:	001d      	movs	r5, r3
 801526c:	898b      	ldrh	r3, [r1, #12]
 801526e:	000f      	movs	r7, r1
 8015270:	0016      	movs	r6, r2
 8015272:	061b      	lsls	r3, r3, #24
 8015274:	d511      	bpl.n	801529a <_svfiprintf_r+0x36>
 8015276:	690b      	ldr	r3, [r1, #16]
 8015278:	2b00      	cmp	r3, #0
 801527a:	d10e      	bne.n	801529a <_svfiprintf_r+0x36>
 801527c:	2140      	movs	r1, #64	; 0x40
 801527e:	f7ff ff19 	bl	80150b4 <_malloc_r>
 8015282:	6038      	str	r0, [r7, #0]
 8015284:	6138      	str	r0, [r7, #16]
 8015286:	2800      	cmp	r0, #0
 8015288:	d105      	bne.n	8015296 <_svfiprintf_r+0x32>
 801528a:	230c      	movs	r3, #12
 801528c:	9a03      	ldr	r2, [sp, #12]
 801528e:	3801      	subs	r0, #1
 8015290:	6013      	str	r3, [r2, #0]
 8015292:	b021      	add	sp, #132	; 0x84
 8015294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015296:	2340      	movs	r3, #64	; 0x40
 8015298:	617b      	str	r3, [r7, #20]
 801529a:	2300      	movs	r3, #0
 801529c:	ac08      	add	r4, sp, #32
 801529e:	6163      	str	r3, [r4, #20]
 80152a0:	3320      	adds	r3, #32
 80152a2:	7663      	strb	r3, [r4, #25]
 80152a4:	3310      	adds	r3, #16
 80152a6:	76a3      	strb	r3, [r4, #26]
 80152a8:	9507      	str	r5, [sp, #28]
 80152aa:	0035      	movs	r5, r6
 80152ac:	782b      	ldrb	r3, [r5, #0]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d001      	beq.n	80152b6 <_svfiprintf_r+0x52>
 80152b2:	2b25      	cmp	r3, #37	; 0x25
 80152b4:	d147      	bne.n	8015346 <_svfiprintf_r+0xe2>
 80152b6:	1bab      	subs	r3, r5, r6
 80152b8:	9305      	str	r3, [sp, #20]
 80152ba:	42b5      	cmp	r5, r6
 80152bc:	d00c      	beq.n	80152d8 <_svfiprintf_r+0x74>
 80152be:	0032      	movs	r2, r6
 80152c0:	0039      	movs	r1, r7
 80152c2:	9803      	ldr	r0, [sp, #12]
 80152c4:	f7ff ff6c 	bl	80151a0 <__ssputs_r>
 80152c8:	1c43      	adds	r3, r0, #1
 80152ca:	d100      	bne.n	80152ce <_svfiprintf_r+0x6a>
 80152cc:	e0ae      	b.n	801542c <_svfiprintf_r+0x1c8>
 80152ce:	6962      	ldr	r2, [r4, #20]
 80152d0:	9b05      	ldr	r3, [sp, #20]
 80152d2:	4694      	mov	ip, r2
 80152d4:	4463      	add	r3, ip
 80152d6:	6163      	str	r3, [r4, #20]
 80152d8:	782b      	ldrb	r3, [r5, #0]
 80152da:	2b00      	cmp	r3, #0
 80152dc:	d100      	bne.n	80152e0 <_svfiprintf_r+0x7c>
 80152de:	e0a5      	b.n	801542c <_svfiprintf_r+0x1c8>
 80152e0:	2201      	movs	r2, #1
 80152e2:	2300      	movs	r3, #0
 80152e4:	4252      	negs	r2, r2
 80152e6:	6062      	str	r2, [r4, #4]
 80152e8:	a904      	add	r1, sp, #16
 80152ea:	3254      	adds	r2, #84	; 0x54
 80152ec:	1852      	adds	r2, r2, r1
 80152ee:	1c6e      	adds	r6, r5, #1
 80152f0:	6023      	str	r3, [r4, #0]
 80152f2:	60e3      	str	r3, [r4, #12]
 80152f4:	60a3      	str	r3, [r4, #8]
 80152f6:	7013      	strb	r3, [r2, #0]
 80152f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80152fa:	2205      	movs	r2, #5
 80152fc:	7831      	ldrb	r1, [r6, #0]
 80152fe:	4854      	ldr	r0, [pc, #336]	; (8015450 <_svfiprintf_r+0x1ec>)
 8015300:	f7ff f96a 	bl	80145d8 <memchr>
 8015304:	1c75      	adds	r5, r6, #1
 8015306:	2800      	cmp	r0, #0
 8015308:	d11f      	bne.n	801534a <_svfiprintf_r+0xe6>
 801530a:	6822      	ldr	r2, [r4, #0]
 801530c:	06d3      	lsls	r3, r2, #27
 801530e:	d504      	bpl.n	801531a <_svfiprintf_r+0xb6>
 8015310:	2353      	movs	r3, #83	; 0x53
 8015312:	a904      	add	r1, sp, #16
 8015314:	185b      	adds	r3, r3, r1
 8015316:	2120      	movs	r1, #32
 8015318:	7019      	strb	r1, [r3, #0]
 801531a:	0713      	lsls	r3, r2, #28
 801531c:	d504      	bpl.n	8015328 <_svfiprintf_r+0xc4>
 801531e:	2353      	movs	r3, #83	; 0x53
 8015320:	a904      	add	r1, sp, #16
 8015322:	185b      	adds	r3, r3, r1
 8015324:	212b      	movs	r1, #43	; 0x2b
 8015326:	7019      	strb	r1, [r3, #0]
 8015328:	7833      	ldrb	r3, [r6, #0]
 801532a:	2b2a      	cmp	r3, #42	; 0x2a
 801532c:	d016      	beq.n	801535c <_svfiprintf_r+0xf8>
 801532e:	0035      	movs	r5, r6
 8015330:	2100      	movs	r1, #0
 8015332:	200a      	movs	r0, #10
 8015334:	68e3      	ldr	r3, [r4, #12]
 8015336:	782a      	ldrb	r2, [r5, #0]
 8015338:	1c6e      	adds	r6, r5, #1
 801533a:	3a30      	subs	r2, #48	; 0x30
 801533c:	2a09      	cmp	r2, #9
 801533e:	d94e      	bls.n	80153de <_svfiprintf_r+0x17a>
 8015340:	2900      	cmp	r1, #0
 8015342:	d111      	bne.n	8015368 <_svfiprintf_r+0x104>
 8015344:	e017      	b.n	8015376 <_svfiprintf_r+0x112>
 8015346:	3501      	adds	r5, #1
 8015348:	e7b0      	b.n	80152ac <_svfiprintf_r+0x48>
 801534a:	4b41      	ldr	r3, [pc, #260]	; (8015450 <_svfiprintf_r+0x1ec>)
 801534c:	6822      	ldr	r2, [r4, #0]
 801534e:	1ac0      	subs	r0, r0, r3
 8015350:	2301      	movs	r3, #1
 8015352:	4083      	lsls	r3, r0
 8015354:	4313      	orrs	r3, r2
 8015356:	002e      	movs	r6, r5
 8015358:	6023      	str	r3, [r4, #0]
 801535a:	e7ce      	b.n	80152fa <_svfiprintf_r+0x96>
 801535c:	9b07      	ldr	r3, [sp, #28]
 801535e:	1d19      	adds	r1, r3, #4
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	9107      	str	r1, [sp, #28]
 8015364:	2b00      	cmp	r3, #0
 8015366:	db01      	blt.n	801536c <_svfiprintf_r+0x108>
 8015368:	930b      	str	r3, [sp, #44]	; 0x2c
 801536a:	e004      	b.n	8015376 <_svfiprintf_r+0x112>
 801536c:	425b      	negs	r3, r3
 801536e:	60e3      	str	r3, [r4, #12]
 8015370:	2302      	movs	r3, #2
 8015372:	4313      	orrs	r3, r2
 8015374:	6023      	str	r3, [r4, #0]
 8015376:	782b      	ldrb	r3, [r5, #0]
 8015378:	2b2e      	cmp	r3, #46	; 0x2e
 801537a:	d10a      	bne.n	8015392 <_svfiprintf_r+0x12e>
 801537c:	786b      	ldrb	r3, [r5, #1]
 801537e:	2b2a      	cmp	r3, #42	; 0x2a
 8015380:	d135      	bne.n	80153ee <_svfiprintf_r+0x18a>
 8015382:	9b07      	ldr	r3, [sp, #28]
 8015384:	3502      	adds	r5, #2
 8015386:	1d1a      	adds	r2, r3, #4
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	9207      	str	r2, [sp, #28]
 801538c:	2b00      	cmp	r3, #0
 801538e:	db2b      	blt.n	80153e8 <_svfiprintf_r+0x184>
 8015390:	9309      	str	r3, [sp, #36]	; 0x24
 8015392:	4e30      	ldr	r6, [pc, #192]	; (8015454 <_svfiprintf_r+0x1f0>)
 8015394:	2203      	movs	r2, #3
 8015396:	0030      	movs	r0, r6
 8015398:	7829      	ldrb	r1, [r5, #0]
 801539a:	f7ff f91d 	bl	80145d8 <memchr>
 801539e:	2800      	cmp	r0, #0
 80153a0:	d006      	beq.n	80153b0 <_svfiprintf_r+0x14c>
 80153a2:	2340      	movs	r3, #64	; 0x40
 80153a4:	1b80      	subs	r0, r0, r6
 80153a6:	4083      	lsls	r3, r0
 80153a8:	6822      	ldr	r2, [r4, #0]
 80153aa:	3501      	adds	r5, #1
 80153ac:	4313      	orrs	r3, r2
 80153ae:	6023      	str	r3, [r4, #0]
 80153b0:	7829      	ldrb	r1, [r5, #0]
 80153b2:	2206      	movs	r2, #6
 80153b4:	4828      	ldr	r0, [pc, #160]	; (8015458 <_svfiprintf_r+0x1f4>)
 80153b6:	1c6e      	adds	r6, r5, #1
 80153b8:	7621      	strb	r1, [r4, #24]
 80153ba:	f7ff f90d 	bl	80145d8 <memchr>
 80153be:	2800      	cmp	r0, #0
 80153c0:	d03c      	beq.n	801543c <_svfiprintf_r+0x1d8>
 80153c2:	4b26      	ldr	r3, [pc, #152]	; (801545c <_svfiprintf_r+0x1f8>)
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d125      	bne.n	8015414 <_svfiprintf_r+0x1b0>
 80153c8:	2207      	movs	r2, #7
 80153ca:	9b07      	ldr	r3, [sp, #28]
 80153cc:	3307      	adds	r3, #7
 80153ce:	4393      	bics	r3, r2
 80153d0:	3308      	adds	r3, #8
 80153d2:	9307      	str	r3, [sp, #28]
 80153d4:	6963      	ldr	r3, [r4, #20]
 80153d6:	9a04      	ldr	r2, [sp, #16]
 80153d8:	189b      	adds	r3, r3, r2
 80153da:	6163      	str	r3, [r4, #20]
 80153dc:	e765      	b.n	80152aa <_svfiprintf_r+0x46>
 80153de:	4343      	muls	r3, r0
 80153e0:	0035      	movs	r5, r6
 80153e2:	2101      	movs	r1, #1
 80153e4:	189b      	adds	r3, r3, r2
 80153e6:	e7a6      	b.n	8015336 <_svfiprintf_r+0xd2>
 80153e8:	2301      	movs	r3, #1
 80153ea:	425b      	negs	r3, r3
 80153ec:	e7d0      	b.n	8015390 <_svfiprintf_r+0x12c>
 80153ee:	2300      	movs	r3, #0
 80153f0:	200a      	movs	r0, #10
 80153f2:	001a      	movs	r2, r3
 80153f4:	3501      	adds	r5, #1
 80153f6:	6063      	str	r3, [r4, #4]
 80153f8:	7829      	ldrb	r1, [r5, #0]
 80153fa:	1c6e      	adds	r6, r5, #1
 80153fc:	3930      	subs	r1, #48	; 0x30
 80153fe:	2909      	cmp	r1, #9
 8015400:	d903      	bls.n	801540a <_svfiprintf_r+0x1a6>
 8015402:	2b00      	cmp	r3, #0
 8015404:	d0c5      	beq.n	8015392 <_svfiprintf_r+0x12e>
 8015406:	9209      	str	r2, [sp, #36]	; 0x24
 8015408:	e7c3      	b.n	8015392 <_svfiprintf_r+0x12e>
 801540a:	4342      	muls	r2, r0
 801540c:	0035      	movs	r5, r6
 801540e:	2301      	movs	r3, #1
 8015410:	1852      	adds	r2, r2, r1
 8015412:	e7f1      	b.n	80153f8 <_svfiprintf_r+0x194>
 8015414:	ab07      	add	r3, sp, #28
 8015416:	9300      	str	r3, [sp, #0]
 8015418:	003a      	movs	r2, r7
 801541a:	0021      	movs	r1, r4
 801541c:	4b10      	ldr	r3, [pc, #64]	; (8015460 <_svfiprintf_r+0x1fc>)
 801541e:	9803      	ldr	r0, [sp, #12]
 8015420:	f7fb fdb8 	bl	8010f94 <_printf_float>
 8015424:	9004      	str	r0, [sp, #16]
 8015426:	9b04      	ldr	r3, [sp, #16]
 8015428:	3301      	adds	r3, #1
 801542a:	d1d3      	bne.n	80153d4 <_svfiprintf_r+0x170>
 801542c:	89bb      	ldrh	r3, [r7, #12]
 801542e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8015430:	065b      	lsls	r3, r3, #25
 8015432:	d400      	bmi.n	8015436 <_svfiprintf_r+0x1d2>
 8015434:	e72d      	b.n	8015292 <_svfiprintf_r+0x2e>
 8015436:	2001      	movs	r0, #1
 8015438:	4240      	negs	r0, r0
 801543a:	e72a      	b.n	8015292 <_svfiprintf_r+0x2e>
 801543c:	ab07      	add	r3, sp, #28
 801543e:	9300      	str	r3, [sp, #0]
 8015440:	003a      	movs	r2, r7
 8015442:	0021      	movs	r1, r4
 8015444:	4b06      	ldr	r3, [pc, #24]	; (8015460 <_svfiprintf_r+0x1fc>)
 8015446:	9803      	ldr	r0, [sp, #12]
 8015448:	f7fc f856 	bl	80114f8 <_printf_i>
 801544c:	e7ea      	b.n	8015424 <_svfiprintf_r+0x1c0>
 801544e:	46c0      	nop			; (mov r8, r8)
 8015450:	08017c64 	.word	0x08017c64
 8015454:	08017c6a 	.word	0x08017c6a
 8015458:	08017c6e 	.word	0x08017c6e
 801545c:	08010f95 	.word	0x08010f95
 8015460:	080151a1 	.word	0x080151a1

08015464 <__sfputc_r>:
 8015464:	6893      	ldr	r3, [r2, #8]
 8015466:	b510      	push	{r4, lr}
 8015468:	3b01      	subs	r3, #1
 801546a:	6093      	str	r3, [r2, #8]
 801546c:	2b00      	cmp	r3, #0
 801546e:	da04      	bge.n	801547a <__sfputc_r+0x16>
 8015470:	6994      	ldr	r4, [r2, #24]
 8015472:	42a3      	cmp	r3, r4
 8015474:	db07      	blt.n	8015486 <__sfputc_r+0x22>
 8015476:	290a      	cmp	r1, #10
 8015478:	d005      	beq.n	8015486 <__sfputc_r+0x22>
 801547a:	6813      	ldr	r3, [r2, #0]
 801547c:	1c58      	adds	r0, r3, #1
 801547e:	6010      	str	r0, [r2, #0]
 8015480:	7019      	strb	r1, [r3, #0]
 8015482:	0008      	movs	r0, r1
 8015484:	bd10      	pop	{r4, pc}
 8015486:	f7fd fb33 	bl	8012af0 <__swbuf_r>
 801548a:	0001      	movs	r1, r0
 801548c:	e7f9      	b.n	8015482 <__sfputc_r+0x1e>

0801548e <__sfputs_r>:
 801548e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015490:	0006      	movs	r6, r0
 8015492:	000f      	movs	r7, r1
 8015494:	0014      	movs	r4, r2
 8015496:	18d5      	adds	r5, r2, r3
 8015498:	42ac      	cmp	r4, r5
 801549a:	d101      	bne.n	80154a0 <__sfputs_r+0x12>
 801549c:	2000      	movs	r0, #0
 801549e:	e007      	b.n	80154b0 <__sfputs_r+0x22>
 80154a0:	7821      	ldrb	r1, [r4, #0]
 80154a2:	003a      	movs	r2, r7
 80154a4:	0030      	movs	r0, r6
 80154a6:	f7ff ffdd 	bl	8015464 <__sfputc_r>
 80154aa:	3401      	adds	r4, #1
 80154ac:	1c43      	adds	r3, r0, #1
 80154ae:	d1f3      	bne.n	8015498 <__sfputs_r+0xa>
 80154b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080154b4 <_vfiprintf_r>:
 80154b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154b6:	b0a1      	sub	sp, #132	; 0x84
 80154b8:	0006      	movs	r6, r0
 80154ba:	000c      	movs	r4, r1
 80154bc:	001f      	movs	r7, r3
 80154be:	9203      	str	r2, [sp, #12]
 80154c0:	2800      	cmp	r0, #0
 80154c2:	d004      	beq.n	80154ce <_vfiprintf_r+0x1a>
 80154c4:	6983      	ldr	r3, [r0, #24]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d101      	bne.n	80154ce <_vfiprintf_r+0x1a>
 80154ca:	f7fe fbd1 	bl	8013c70 <__sinit>
 80154ce:	4b8e      	ldr	r3, [pc, #568]	; (8015708 <_vfiprintf_r+0x254>)
 80154d0:	429c      	cmp	r4, r3
 80154d2:	d11c      	bne.n	801550e <_vfiprintf_r+0x5a>
 80154d4:	6874      	ldr	r4, [r6, #4]
 80154d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80154d8:	07db      	lsls	r3, r3, #31
 80154da:	d405      	bmi.n	80154e8 <_vfiprintf_r+0x34>
 80154dc:	89a3      	ldrh	r3, [r4, #12]
 80154de:	059b      	lsls	r3, r3, #22
 80154e0:	d402      	bmi.n	80154e8 <_vfiprintf_r+0x34>
 80154e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80154e4:	f7fe ffed 	bl	80144c2 <__retarget_lock_acquire_recursive>
 80154e8:	89a3      	ldrh	r3, [r4, #12]
 80154ea:	071b      	lsls	r3, r3, #28
 80154ec:	d502      	bpl.n	80154f4 <_vfiprintf_r+0x40>
 80154ee:	6923      	ldr	r3, [r4, #16]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d11d      	bne.n	8015530 <_vfiprintf_r+0x7c>
 80154f4:	0021      	movs	r1, r4
 80154f6:	0030      	movs	r0, r6
 80154f8:	f7fd fb50 	bl	8012b9c <__swsetup_r>
 80154fc:	2800      	cmp	r0, #0
 80154fe:	d017      	beq.n	8015530 <_vfiprintf_r+0x7c>
 8015500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015502:	07db      	lsls	r3, r3, #31
 8015504:	d50d      	bpl.n	8015522 <_vfiprintf_r+0x6e>
 8015506:	2001      	movs	r0, #1
 8015508:	4240      	negs	r0, r0
 801550a:	b021      	add	sp, #132	; 0x84
 801550c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801550e:	4b7f      	ldr	r3, [pc, #508]	; (801570c <_vfiprintf_r+0x258>)
 8015510:	429c      	cmp	r4, r3
 8015512:	d101      	bne.n	8015518 <_vfiprintf_r+0x64>
 8015514:	68b4      	ldr	r4, [r6, #8]
 8015516:	e7de      	b.n	80154d6 <_vfiprintf_r+0x22>
 8015518:	4b7d      	ldr	r3, [pc, #500]	; (8015710 <_vfiprintf_r+0x25c>)
 801551a:	429c      	cmp	r4, r3
 801551c:	d1db      	bne.n	80154d6 <_vfiprintf_r+0x22>
 801551e:	68f4      	ldr	r4, [r6, #12]
 8015520:	e7d9      	b.n	80154d6 <_vfiprintf_r+0x22>
 8015522:	89a3      	ldrh	r3, [r4, #12]
 8015524:	059b      	lsls	r3, r3, #22
 8015526:	d4ee      	bmi.n	8015506 <_vfiprintf_r+0x52>
 8015528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801552a:	f7fe ffcb 	bl	80144c4 <__retarget_lock_release_recursive>
 801552e:	e7ea      	b.n	8015506 <_vfiprintf_r+0x52>
 8015530:	2300      	movs	r3, #0
 8015532:	ad08      	add	r5, sp, #32
 8015534:	616b      	str	r3, [r5, #20]
 8015536:	3320      	adds	r3, #32
 8015538:	766b      	strb	r3, [r5, #25]
 801553a:	3310      	adds	r3, #16
 801553c:	76ab      	strb	r3, [r5, #26]
 801553e:	9707      	str	r7, [sp, #28]
 8015540:	9f03      	ldr	r7, [sp, #12]
 8015542:	783b      	ldrb	r3, [r7, #0]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d001      	beq.n	801554c <_vfiprintf_r+0x98>
 8015548:	2b25      	cmp	r3, #37	; 0x25
 801554a:	d14e      	bne.n	80155ea <_vfiprintf_r+0x136>
 801554c:	9b03      	ldr	r3, [sp, #12]
 801554e:	1afb      	subs	r3, r7, r3
 8015550:	9305      	str	r3, [sp, #20]
 8015552:	9b03      	ldr	r3, [sp, #12]
 8015554:	429f      	cmp	r7, r3
 8015556:	d00d      	beq.n	8015574 <_vfiprintf_r+0xc0>
 8015558:	9b05      	ldr	r3, [sp, #20]
 801555a:	0021      	movs	r1, r4
 801555c:	0030      	movs	r0, r6
 801555e:	9a03      	ldr	r2, [sp, #12]
 8015560:	f7ff ff95 	bl	801548e <__sfputs_r>
 8015564:	1c43      	adds	r3, r0, #1
 8015566:	d100      	bne.n	801556a <_vfiprintf_r+0xb6>
 8015568:	e0b5      	b.n	80156d6 <_vfiprintf_r+0x222>
 801556a:	696a      	ldr	r2, [r5, #20]
 801556c:	9b05      	ldr	r3, [sp, #20]
 801556e:	4694      	mov	ip, r2
 8015570:	4463      	add	r3, ip
 8015572:	616b      	str	r3, [r5, #20]
 8015574:	783b      	ldrb	r3, [r7, #0]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d100      	bne.n	801557c <_vfiprintf_r+0xc8>
 801557a:	e0ac      	b.n	80156d6 <_vfiprintf_r+0x222>
 801557c:	2201      	movs	r2, #1
 801557e:	1c7b      	adds	r3, r7, #1
 8015580:	9303      	str	r3, [sp, #12]
 8015582:	2300      	movs	r3, #0
 8015584:	4252      	negs	r2, r2
 8015586:	606a      	str	r2, [r5, #4]
 8015588:	a904      	add	r1, sp, #16
 801558a:	3254      	adds	r2, #84	; 0x54
 801558c:	1852      	adds	r2, r2, r1
 801558e:	602b      	str	r3, [r5, #0]
 8015590:	60eb      	str	r3, [r5, #12]
 8015592:	60ab      	str	r3, [r5, #8]
 8015594:	7013      	strb	r3, [r2, #0]
 8015596:	65ab      	str	r3, [r5, #88]	; 0x58
 8015598:	9b03      	ldr	r3, [sp, #12]
 801559a:	2205      	movs	r2, #5
 801559c:	7819      	ldrb	r1, [r3, #0]
 801559e:	485d      	ldr	r0, [pc, #372]	; (8015714 <_vfiprintf_r+0x260>)
 80155a0:	f7ff f81a 	bl	80145d8 <memchr>
 80155a4:	9b03      	ldr	r3, [sp, #12]
 80155a6:	1c5f      	adds	r7, r3, #1
 80155a8:	2800      	cmp	r0, #0
 80155aa:	d120      	bne.n	80155ee <_vfiprintf_r+0x13a>
 80155ac:	682a      	ldr	r2, [r5, #0]
 80155ae:	06d3      	lsls	r3, r2, #27
 80155b0:	d504      	bpl.n	80155bc <_vfiprintf_r+0x108>
 80155b2:	2353      	movs	r3, #83	; 0x53
 80155b4:	a904      	add	r1, sp, #16
 80155b6:	185b      	adds	r3, r3, r1
 80155b8:	2120      	movs	r1, #32
 80155ba:	7019      	strb	r1, [r3, #0]
 80155bc:	0713      	lsls	r3, r2, #28
 80155be:	d504      	bpl.n	80155ca <_vfiprintf_r+0x116>
 80155c0:	2353      	movs	r3, #83	; 0x53
 80155c2:	a904      	add	r1, sp, #16
 80155c4:	185b      	adds	r3, r3, r1
 80155c6:	212b      	movs	r1, #43	; 0x2b
 80155c8:	7019      	strb	r1, [r3, #0]
 80155ca:	9b03      	ldr	r3, [sp, #12]
 80155cc:	781b      	ldrb	r3, [r3, #0]
 80155ce:	2b2a      	cmp	r3, #42	; 0x2a
 80155d0:	d016      	beq.n	8015600 <_vfiprintf_r+0x14c>
 80155d2:	2100      	movs	r1, #0
 80155d4:	68eb      	ldr	r3, [r5, #12]
 80155d6:	9f03      	ldr	r7, [sp, #12]
 80155d8:	783a      	ldrb	r2, [r7, #0]
 80155da:	1c78      	adds	r0, r7, #1
 80155dc:	3a30      	subs	r2, #48	; 0x30
 80155de:	4684      	mov	ip, r0
 80155e0:	2a09      	cmp	r2, #9
 80155e2:	d94f      	bls.n	8015684 <_vfiprintf_r+0x1d0>
 80155e4:	2900      	cmp	r1, #0
 80155e6:	d111      	bne.n	801560c <_vfiprintf_r+0x158>
 80155e8:	e017      	b.n	801561a <_vfiprintf_r+0x166>
 80155ea:	3701      	adds	r7, #1
 80155ec:	e7a9      	b.n	8015542 <_vfiprintf_r+0x8e>
 80155ee:	4b49      	ldr	r3, [pc, #292]	; (8015714 <_vfiprintf_r+0x260>)
 80155f0:	682a      	ldr	r2, [r5, #0]
 80155f2:	1ac0      	subs	r0, r0, r3
 80155f4:	2301      	movs	r3, #1
 80155f6:	4083      	lsls	r3, r0
 80155f8:	4313      	orrs	r3, r2
 80155fa:	602b      	str	r3, [r5, #0]
 80155fc:	9703      	str	r7, [sp, #12]
 80155fe:	e7cb      	b.n	8015598 <_vfiprintf_r+0xe4>
 8015600:	9b07      	ldr	r3, [sp, #28]
 8015602:	1d19      	adds	r1, r3, #4
 8015604:	681b      	ldr	r3, [r3, #0]
 8015606:	9107      	str	r1, [sp, #28]
 8015608:	2b00      	cmp	r3, #0
 801560a:	db01      	blt.n	8015610 <_vfiprintf_r+0x15c>
 801560c:	930b      	str	r3, [sp, #44]	; 0x2c
 801560e:	e004      	b.n	801561a <_vfiprintf_r+0x166>
 8015610:	425b      	negs	r3, r3
 8015612:	60eb      	str	r3, [r5, #12]
 8015614:	2302      	movs	r3, #2
 8015616:	4313      	orrs	r3, r2
 8015618:	602b      	str	r3, [r5, #0]
 801561a:	783b      	ldrb	r3, [r7, #0]
 801561c:	2b2e      	cmp	r3, #46	; 0x2e
 801561e:	d10a      	bne.n	8015636 <_vfiprintf_r+0x182>
 8015620:	787b      	ldrb	r3, [r7, #1]
 8015622:	2b2a      	cmp	r3, #42	; 0x2a
 8015624:	d137      	bne.n	8015696 <_vfiprintf_r+0x1e2>
 8015626:	9b07      	ldr	r3, [sp, #28]
 8015628:	3702      	adds	r7, #2
 801562a:	1d1a      	adds	r2, r3, #4
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	9207      	str	r2, [sp, #28]
 8015630:	2b00      	cmp	r3, #0
 8015632:	db2d      	blt.n	8015690 <_vfiprintf_r+0x1dc>
 8015634:	9309      	str	r3, [sp, #36]	; 0x24
 8015636:	2203      	movs	r2, #3
 8015638:	7839      	ldrb	r1, [r7, #0]
 801563a:	4837      	ldr	r0, [pc, #220]	; (8015718 <_vfiprintf_r+0x264>)
 801563c:	f7fe ffcc 	bl	80145d8 <memchr>
 8015640:	2800      	cmp	r0, #0
 8015642:	d007      	beq.n	8015654 <_vfiprintf_r+0x1a0>
 8015644:	4b34      	ldr	r3, [pc, #208]	; (8015718 <_vfiprintf_r+0x264>)
 8015646:	682a      	ldr	r2, [r5, #0]
 8015648:	1ac0      	subs	r0, r0, r3
 801564a:	2340      	movs	r3, #64	; 0x40
 801564c:	4083      	lsls	r3, r0
 801564e:	4313      	orrs	r3, r2
 8015650:	3701      	adds	r7, #1
 8015652:	602b      	str	r3, [r5, #0]
 8015654:	7839      	ldrb	r1, [r7, #0]
 8015656:	1c7b      	adds	r3, r7, #1
 8015658:	2206      	movs	r2, #6
 801565a:	4830      	ldr	r0, [pc, #192]	; (801571c <_vfiprintf_r+0x268>)
 801565c:	9303      	str	r3, [sp, #12]
 801565e:	7629      	strb	r1, [r5, #24]
 8015660:	f7fe ffba 	bl	80145d8 <memchr>
 8015664:	2800      	cmp	r0, #0
 8015666:	d045      	beq.n	80156f4 <_vfiprintf_r+0x240>
 8015668:	4b2d      	ldr	r3, [pc, #180]	; (8015720 <_vfiprintf_r+0x26c>)
 801566a:	2b00      	cmp	r3, #0
 801566c:	d127      	bne.n	80156be <_vfiprintf_r+0x20a>
 801566e:	2207      	movs	r2, #7
 8015670:	9b07      	ldr	r3, [sp, #28]
 8015672:	3307      	adds	r3, #7
 8015674:	4393      	bics	r3, r2
 8015676:	3308      	adds	r3, #8
 8015678:	9307      	str	r3, [sp, #28]
 801567a:	696b      	ldr	r3, [r5, #20]
 801567c:	9a04      	ldr	r2, [sp, #16]
 801567e:	189b      	adds	r3, r3, r2
 8015680:	616b      	str	r3, [r5, #20]
 8015682:	e75d      	b.n	8015540 <_vfiprintf_r+0x8c>
 8015684:	210a      	movs	r1, #10
 8015686:	434b      	muls	r3, r1
 8015688:	4667      	mov	r7, ip
 801568a:	189b      	adds	r3, r3, r2
 801568c:	3909      	subs	r1, #9
 801568e:	e7a3      	b.n	80155d8 <_vfiprintf_r+0x124>
 8015690:	2301      	movs	r3, #1
 8015692:	425b      	negs	r3, r3
 8015694:	e7ce      	b.n	8015634 <_vfiprintf_r+0x180>
 8015696:	2300      	movs	r3, #0
 8015698:	001a      	movs	r2, r3
 801569a:	3701      	adds	r7, #1
 801569c:	606b      	str	r3, [r5, #4]
 801569e:	7839      	ldrb	r1, [r7, #0]
 80156a0:	1c78      	adds	r0, r7, #1
 80156a2:	3930      	subs	r1, #48	; 0x30
 80156a4:	4684      	mov	ip, r0
 80156a6:	2909      	cmp	r1, #9
 80156a8:	d903      	bls.n	80156b2 <_vfiprintf_r+0x1fe>
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d0c3      	beq.n	8015636 <_vfiprintf_r+0x182>
 80156ae:	9209      	str	r2, [sp, #36]	; 0x24
 80156b0:	e7c1      	b.n	8015636 <_vfiprintf_r+0x182>
 80156b2:	230a      	movs	r3, #10
 80156b4:	435a      	muls	r2, r3
 80156b6:	4667      	mov	r7, ip
 80156b8:	1852      	adds	r2, r2, r1
 80156ba:	3b09      	subs	r3, #9
 80156bc:	e7ef      	b.n	801569e <_vfiprintf_r+0x1ea>
 80156be:	ab07      	add	r3, sp, #28
 80156c0:	9300      	str	r3, [sp, #0]
 80156c2:	0022      	movs	r2, r4
 80156c4:	0029      	movs	r1, r5
 80156c6:	0030      	movs	r0, r6
 80156c8:	4b16      	ldr	r3, [pc, #88]	; (8015724 <_vfiprintf_r+0x270>)
 80156ca:	f7fb fc63 	bl	8010f94 <_printf_float>
 80156ce:	9004      	str	r0, [sp, #16]
 80156d0:	9b04      	ldr	r3, [sp, #16]
 80156d2:	3301      	adds	r3, #1
 80156d4:	d1d1      	bne.n	801567a <_vfiprintf_r+0x1c6>
 80156d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80156d8:	07db      	lsls	r3, r3, #31
 80156da:	d405      	bmi.n	80156e8 <_vfiprintf_r+0x234>
 80156dc:	89a3      	ldrh	r3, [r4, #12]
 80156de:	059b      	lsls	r3, r3, #22
 80156e0:	d402      	bmi.n	80156e8 <_vfiprintf_r+0x234>
 80156e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80156e4:	f7fe feee 	bl	80144c4 <__retarget_lock_release_recursive>
 80156e8:	89a3      	ldrh	r3, [r4, #12]
 80156ea:	065b      	lsls	r3, r3, #25
 80156ec:	d500      	bpl.n	80156f0 <_vfiprintf_r+0x23c>
 80156ee:	e70a      	b.n	8015506 <_vfiprintf_r+0x52>
 80156f0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80156f2:	e70a      	b.n	801550a <_vfiprintf_r+0x56>
 80156f4:	ab07      	add	r3, sp, #28
 80156f6:	9300      	str	r3, [sp, #0]
 80156f8:	0022      	movs	r2, r4
 80156fa:	0029      	movs	r1, r5
 80156fc:	0030      	movs	r0, r6
 80156fe:	4b09      	ldr	r3, [pc, #36]	; (8015724 <_vfiprintf_r+0x270>)
 8015700:	f7fb fefa 	bl	80114f8 <_printf_i>
 8015704:	e7e3      	b.n	80156ce <_vfiprintf_r+0x21a>
 8015706:	46c0      	nop			; (mov r8, r8)
 8015708:	08017a50 	.word	0x08017a50
 801570c:	08017a70 	.word	0x08017a70
 8015710:	08017a30 	.word	0x08017a30
 8015714:	08017c64 	.word	0x08017c64
 8015718:	08017c6a 	.word	0x08017c6a
 801571c:	08017c6e 	.word	0x08017c6e
 8015720:	08010f95 	.word	0x08010f95
 8015724:	0801548f 	.word	0x0801548f

08015728 <nan>:
 8015728:	2000      	movs	r0, #0
 801572a:	4901      	ldr	r1, [pc, #4]	; (8015730 <nan+0x8>)
 801572c:	4770      	bx	lr
 801572e:	46c0      	nop			; (mov r8, r8)
 8015730:	7ff80000 	.word	0x7ff80000

08015734 <_sbrk_r>:
 8015734:	2300      	movs	r3, #0
 8015736:	b570      	push	{r4, r5, r6, lr}
 8015738:	4d06      	ldr	r5, [pc, #24]	; (8015754 <_sbrk_r+0x20>)
 801573a:	0004      	movs	r4, r0
 801573c:	0008      	movs	r0, r1
 801573e:	602b      	str	r3, [r5, #0]
 8015740:	f7f3 f9e6 	bl	8008b10 <_sbrk>
 8015744:	1c43      	adds	r3, r0, #1
 8015746:	d103      	bne.n	8015750 <_sbrk_r+0x1c>
 8015748:	682b      	ldr	r3, [r5, #0]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d000      	beq.n	8015750 <_sbrk_r+0x1c>
 801574e:	6023      	str	r3, [r4, #0]
 8015750:	bd70      	pop	{r4, r5, r6, pc}
 8015752:	46c0      	nop			; (mov r8, r8)
 8015754:	20000ca0 	.word	0x20000ca0

08015758 <__sread>:
 8015758:	b570      	push	{r4, r5, r6, lr}
 801575a:	000c      	movs	r4, r1
 801575c:	250e      	movs	r5, #14
 801575e:	5f49      	ldrsh	r1, [r1, r5]
 8015760:	f000 f920 	bl	80159a4 <_read_r>
 8015764:	2800      	cmp	r0, #0
 8015766:	db03      	blt.n	8015770 <__sread+0x18>
 8015768:	6d63      	ldr	r3, [r4, #84]	; 0x54
 801576a:	181b      	adds	r3, r3, r0
 801576c:	6563      	str	r3, [r4, #84]	; 0x54
 801576e:	bd70      	pop	{r4, r5, r6, pc}
 8015770:	89a3      	ldrh	r3, [r4, #12]
 8015772:	4a02      	ldr	r2, [pc, #8]	; (801577c <__sread+0x24>)
 8015774:	4013      	ands	r3, r2
 8015776:	81a3      	strh	r3, [r4, #12]
 8015778:	e7f9      	b.n	801576e <__sread+0x16>
 801577a:	46c0      	nop			; (mov r8, r8)
 801577c:	ffffefff 	.word	0xffffefff

08015780 <__swrite>:
 8015780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015782:	001f      	movs	r7, r3
 8015784:	898b      	ldrh	r3, [r1, #12]
 8015786:	0005      	movs	r5, r0
 8015788:	000c      	movs	r4, r1
 801578a:	0016      	movs	r6, r2
 801578c:	05db      	lsls	r3, r3, #23
 801578e:	d505      	bpl.n	801579c <__swrite+0x1c>
 8015790:	230e      	movs	r3, #14
 8015792:	5ec9      	ldrsh	r1, [r1, r3]
 8015794:	2200      	movs	r2, #0
 8015796:	2302      	movs	r3, #2
 8015798:	f000 f89c 	bl	80158d4 <_lseek_r>
 801579c:	89a3      	ldrh	r3, [r4, #12]
 801579e:	4a05      	ldr	r2, [pc, #20]	; (80157b4 <__swrite+0x34>)
 80157a0:	0028      	movs	r0, r5
 80157a2:	4013      	ands	r3, r2
 80157a4:	81a3      	strh	r3, [r4, #12]
 80157a6:	0032      	movs	r2, r6
 80157a8:	230e      	movs	r3, #14
 80157aa:	5ee1      	ldrsh	r1, [r4, r3]
 80157ac:	003b      	movs	r3, r7
 80157ae:	f000 f83f 	bl	8015830 <_write_r>
 80157b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80157b4:	ffffefff 	.word	0xffffefff

080157b8 <__sseek>:
 80157b8:	b570      	push	{r4, r5, r6, lr}
 80157ba:	000c      	movs	r4, r1
 80157bc:	250e      	movs	r5, #14
 80157be:	5f49      	ldrsh	r1, [r1, r5]
 80157c0:	f000 f888 	bl	80158d4 <_lseek_r>
 80157c4:	89a3      	ldrh	r3, [r4, #12]
 80157c6:	1c42      	adds	r2, r0, #1
 80157c8:	d103      	bne.n	80157d2 <__sseek+0x1a>
 80157ca:	4a05      	ldr	r2, [pc, #20]	; (80157e0 <__sseek+0x28>)
 80157cc:	4013      	ands	r3, r2
 80157ce:	81a3      	strh	r3, [r4, #12]
 80157d0:	bd70      	pop	{r4, r5, r6, pc}
 80157d2:	2280      	movs	r2, #128	; 0x80
 80157d4:	0152      	lsls	r2, r2, #5
 80157d6:	4313      	orrs	r3, r2
 80157d8:	81a3      	strh	r3, [r4, #12]
 80157da:	6560      	str	r0, [r4, #84]	; 0x54
 80157dc:	e7f8      	b.n	80157d0 <__sseek+0x18>
 80157de:	46c0      	nop			; (mov r8, r8)
 80157e0:	ffffefff 	.word	0xffffefff

080157e4 <__sclose>:
 80157e4:	b510      	push	{r4, lr}
 80157e6:	230e      	movs	r3, #14
 80157e8:	5ec9      	ldrsh	r1, [r1, r3]
 80157ea:	f000 f83d 	bl	8015868 <_close_r>
 80157ee:	bd10      	pop	{r4, pc}

080157f0 <strncmp>:
 80157f0:	b530      	push	{r4, r5, lr}
 80157f2:	0005      	movs	r5, r0
 80157f4:	1e10      	subs	r0, r2, #0
 80157f6:	d008      	beq.n	801580a <strncmp+0x1a>
 80157f8:	2400      	movs	r4, #0
 80157fa:	3a01      	subs	r2, #1
 80157fc:	5d2b      	ldrb	r3, [r5, r4]
 80157fe:	5d08      	ldrb	r0, [r1, r4]
 8015800:	4283      	cmp	r3, r0
 8015802:	d101      	bne.n	8015808 <strncmp+0x18>
 8015804:	4294      	cmp	r4, r2
 8015806:	d101      	bne.n	801580c <strncmp+0x1c>
 8015808:	1a18      	subs	r0, r3, r0
 801580a:	bd30      	pop	{r4, r5, pc}
 801580c:	3401      	adds	r4, #1
 801580e:	2b00      	cmp	r3, #0
 8015810:	d1f4      	bne.n	80157fc <strncmp+0xc>
 8015812:	e7f9      	b.n	8015808 <strncmp+0x18>

08015814 <__ascii_wctomb>:
 8015814:	0003      	movs	r3, r0
 8015816:	1e08      	subs	r0, r1, #0
 8015818:	d005      	beq.n	8015826 <__ascii_wctomb+0x12>
 801581a:	2aff      	cmp	r2, #255	; 0xff
 801581c:	d904      	bls.n	8015828 <__ascii_wctomb+0x14>
 801581e:	228a      	movs	r2, #138	; 0x8a
 8015820:	2001      	movs	r0, #1
 8015822:	601a      	str	r2, [r3, #0]
 8015824:	4240      	negs	r0, r0
 8015826:	4770      	bx	lr
 8015828:	2001      	movs	r0, #1
 801582a:	700a      	strb	r2, [r1, #0]
 801582c:	e7fb      	b.n	8015826 <__ascii_wctomb+0x12>
	...

08015830 <_write_r>:
 8015830:	b570      	push	{r4, r5, r6, lr}
 8015832:	0004      	movs	r4, r0
 8015834:	0008      	movs	r0, r1
 8015836:	0011      	movs	r1, r2
 8015838:	001a      	movs	r2, r3
 801583a:	2300      	movs	r3, #0
 801583c:	4d05      	ldr	r5, [pc, #20]	; (8015854 <_write_r+0x24>)
 801583e:	602b      	str	r3, [r5, #0]
 8015840:	f7f3 f91d 	bl	8008a7e <_write>
 8015844:	1c43      	adds	r3, r0, #1
 8015846:	d103      	bne.n	8015850 <_write_r+0x20>
 8015848:	682b      	ldr	r3, [r5, #0]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d000      	beq.n	8015850 <_write_r+0x20>
 801584e:	6023      	str	r3, [r4, #0]
 8015850:	bd70      	pop	{r4, r5, r6, pc}
 8015852:	46c0      	nop			; (mov r8, r8)
 8015854:	20000ca0 	.word	0x20000ca0

08015858 <abort>:
 8015858:	2006      	movs	r0, #6
 801585a:	b510      	push	{r4, lr}
 801585c:	f000 f8e0 	bl	8015a20 <raise>
 8015860:	2001      	movs	r0, #1
 8015862:	f7f3 f8e3 	bl	8008a2c <_exit>
	...

08015868 <_close_r>:
 8015868:	2300      	movs	r3, #0
 801586a:	b570      	push	{r4, r5, r6, lr}
 801586c:	4d06      	ldr	r5, [pc, #24]	; (8015888 <_close_r+0x20>)
 801586e:	0004      	movs	r4, r0
 8015870:	0008      	movs	r0, r1
 8015872:	602b      	str	r3, [r5, #0]
 8015874:	f7f3 f91f 	bl	8008ab6 <_close>
 8015878:	1c43      	adds	r3, r0, #1
 801587a:	d103      	bne.n	8015884 <_close_r+0x1c>
 801587c:	682b      	ldr	r3, [r5, #0]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d000      	beq.n	8015884 <_close_r+0x1c>
 8015882:	6023      	str	r3, [r4, #0]
 8015884:	bd70      	pop	{r4, r5, r6, pc}
 8015886:	46c0      	nop			; (mov r8, r8)
 8015888:	20000ca0 	.word	0x20000ca0

0801588c <_fstat_r>:
 801588c:	2300      	movs	r3, #0
 801588e:	b570      	push	{r4, r5, r6, lr}
 8015890:	4d06      	ldr	r5, [pc, #24]	; (80158ac <_fstat_r+0x20>)
 8015892:	0004      	movs	r4, r0
 8015894:	0008      	movs	r0, r1
 8015896:	0011      	movs	r1, r2
 8015898:	602b      	str	r3, [r5, #0]
 801589a:	f7f3 f916 	bl	8008aca <_fstat>
 801589e:	1c43      	adds	r3, r0, #1
 80158a0:	d103      	bne.n	80158aa <_fstat_r+0x1e>
 80158a2:	682b      	ldr	r3, [r5, #0]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d000      	beq.n	80158aa <_fstat_r+0x1e>
 80158a8:	6023      	str	r3, [r4, #0]
 80158aa:	bd70      	pop	{r4, r5, r6, pc}
 80158ac:	20000ca0 	.word	0x20000ca0

080158b0 <_isatty_r>:
 80158b0:	2300      	movs	r3, #0
 80158b2:	b570      	push	{r4, r5, r6, lr}
 80158b4:	4d06      	ldr	r5, [pc, #24]	; (80158d0 <_isatty_r+0x20>)
 80158b6:	0004      	movs	r4, r0
 80158b8:	0008      	movs	r0, r1
 80158ba:	602b      	str	r3, [r5, #0]
 80158bc:	f7f3 f913 	bl	8008ae6 <_isatty>
 80158c0:	1c43      	adds	r3, r0, #1
 80158c2:	d103      	bne.n	80158cc <_isatty_r+0x1c>
 80158c4:	682b      	ldr	r3, [r5, #0]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d000      	beq.n	80158cc <_isatty_r+0x1c>
 80158ca:	6023      	str	r3, [r4, #0]
 80158cc:	bd70      	pop	{r4, r5, r6, pc}
 80158ce:	46c0      	nop			; (mov r8, r8)
 80158d0:	20000ca0 	.word	0x20000ca0

080158d4 <_lseek_r>:
 80158d4:	b570      	push	{r4, r5, r6, lr}
 80158d6:	0004      	movs	r4, r0
 80158d8:	0008      	movs	r0, r1
 80158da:	0011      	movs	r1, r2
 80158dc:	001a      	movs	r2, r3
 80158de:	2300      	movs	r3, #0
 80158e0:	4d05      	ldr	r5, [pc, #20]	; (80158f8 <_lseek_r+0x24>)
 80158e2:	602b      	str	r3, [r5, #0]
 80158e4:	f7f3 f908 	bl	8008af8 <_lseek>
 80158e8:	1c43      	adds	r3, r0, #1
 80158ea:	d103      	bne.n	80158f4 <_lseek_r+0x20>
 80158ec:	682b      	ldr	r3, [r5, #0]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d000      	beq.n	80158f4 <_lseek_r+0x20>
 80158f2:	6023      	str	r3, [r4, #0]
 80158f4:	bd70      	pop	{r4, r5, r6, pc}
 80158f6:	46c0      	nop			; (mov r8, r8)
 80158f8:	20000ca0 	.word	0x20000ca0

080158fc <memmove>:
 80158fc:	b510      	push	{r4, lr}
 80158fe:	4288      	cmp	r0, r1
 8015900:	d902      	bls.n	8015908 <memmove+0xc>
 8015902:	188b      	adds	r3, r1, r2
 8015904:	4298      	cmp	r0, r3
 8015906:	d303      	bcc.n	8015910 <memmove+0x14>
 8015908:	2300      	movs	r3, #0
 801590a:	e007      	b.n	801591c <memmove+0x20>
 801590c:	5c8b      	ldrb	r3, [r1, r2]
 801590e:	5483      	strb	r3, [r0, r2]
 8015910:	3a01      	subs	r2, #1
 8015912:	d2fb      	bcs.n	801590c <memmove+0x10>
 8015914:	bd10      	pop	{r4, pc}
 8015916:	5ccc      	ldrb	r4, [r1, r3]
 8015918:	54c4      	strb	r4, [r0, r3]
 801591a:	3301      	adds	r3, #1
 801591c:	429a      	cmp	r2, r3
 801591e:	d1fa      	bne.n	8015916 <memmove+0x1a>
 8015920:	e7f8      	b.n	8015914 <memmove+0x18>
	...

08015924 <__malloc_lock>:
 8015924:	b510      	push	{r4, lr}
 8015926:	4802      	ldr	r0, [pc, #8]	; (8015930 <__malloc_lock+0xc>)
 8015928:	f7fe fdcb 	bl	80144c2 <__retarget_lock_acquire_recursive>
 801592c:	bd10      	pop	{r4, pc}
 801592e:	46c0      	nop			; (mov r8, r8)
 8015930:	20000c94 	.word	0x20000c94

08015934 <__malloc_unlock>:
 8015934:	b510      	push	{r4, lr}
 8015936:	4802      	ldr	r0, [pc, #8]	; (8015940 <__malloc_unlock+0xc>)
 8015938:	f7fe fdc4 	bl	80144c4 <__retarget_lock_release_recursive>
 801593c:	bd10      	pop	{r4, pc}
 801593e:	46c0      	nop			; (mov r8, r8)
 8015940:	20000c94 	.word	0x20000c94

08015944 <_realloc_r>:
 8015944:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015946:	0007      	movs	r7, r0
 8015948:	000e      	movs	r6, r1
 801594a:	0014      	movs	r4, r2
 801594c:	2900      	cmp	r1, #0
 801594e:	d105      	bne.n	801595c <_realloc_r+0x18>
 8015950:	0011      	movs	r1, r2
 8015952:	f7ff fbaf 	bl	80150b4 <_malloc_r>
 8015956:	0005      	movs	r5, r0
 8015958:	0028      	movs	r0, r5
 801595a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801595c:	2a00      	cmp	r2, #0
 801595e:	d103      	bne.n	8015968 <_realloc_r+0x24>
 8015960:	f7ff fb3c 	bl	8014fdc <_free_r>
 8015964:	0025      	movs	r5, r4
 8015966:	e7f7      	b.n	8015958 <_realloc_r+0x14>
 8015968:	f000 f87a 	bl	8015a60 <_malloc_usable_size_r>
 801596c:	9001      	str	r0, [sp, #4]
 801596e:	4284      	cmp	r4, r0
 8015970:	d803      	bhi.n	801597a <_realloc_r+0x36>
 8015972:	0035      	movs	r5, r6
 8015974:	0843      	lsrs	r3, r0, #1
 8015976:	42a3      	cmp	r3, r4
 8015978:	d3ee      	bcc.n	8015958 <_realloc_r+0x14>
 801597a:	0021      	movs	r1, r4
 801597c:	0038      	movs	r0, r7
 801597e:	f7ff fb99 	bl	80150b4 <_malloc_r>
 8015982:	1e05      	subs	r5, r0, #0
 8015984:	d0e8      	beq.n	8015958 <_realloc_r+0x14>
 8015986:	9b01      	ldr	r3, [sp, #4]
 8015988:	0022      	movs	r2, r4
 801598a:	429c      	cmp	r4, r3
 801598c:	d900      	bls.n	8015990 <_realloc_r+0x4c>
 801598e:	001a      	movs	r2, r3
 8015990:	0031      	movs	r1, r6
 8015992:	0028      	movs	r0, r5
 8015994:	f7fb fa42 	bl	8010e1c <memcpy>
 8015998:	0031      	movs	r1, r6
 801599a:	0038      	movs	r0, r7
 801599c:	f7ff fb1e 	bl	8014fdc <_free_r>
 80159a0:	e7da      	b.n	8015958 <_realloc_r+0x14>
	...

080159a4 <_read_r>:
 80159a4:	b570      	push	{r4, r5, r6, lr}
 80159a6:	0004      	movs	r4, r0
 80159a8:	0008      	movs	r0, r1
 80159aa:	0011      	movs	r1, r2
 80159ac:	001a      	movs	r2, r3
 80159ae:	2300      	movs	r3, #0
 80159b0:	4d05      	ldr	r5, [pc, #20]	; (80159c8 <_read_r+0x24>)
 80159b2:	602b      	str	r3, [r5, #0]
 80159b4:	f7f3 f846 	bl	8008a44 <_read>
 80159b8:	1c43      	adds	r3, r0, #1
 80159ba:	d103      	bne.n	80159c4 <_read_r+0x20>
 80159bc:	682b      	ldr	r3, [r5, #0]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d000      	beq.n	80159c4 <_read_r+0x20>
 80159c2:	6023      	str	r3, [r4, #0]
 80159c4:	bd70      	pop	{r4, r5, r6, pc}
 80159c6:	46c0      	nop			; (mov r8, r8)
 80159c8:	20000ca0 	.word	0x20000ca0

080159cc <_raise_r>:
 80159cc:	b570      	push	{r4, r5, r6, lr}
 80159ce:	0004      	movs	r4, r0
 80159d0:	000d      	movs	r5, r1
 80159d2:	291f      	cmp	r1, #31
 80159d4:	d904      	bls.n	80159e0 <_raise_r+0x14>
 80159d6:	2316      	movs	r3, #22
 80159d8:	6003      	str	r3, [r0, #0]
 80159da:	2001      	movs	r0, #1
 80159dc:	4240      	negs	r0, r0
 80159de:	bd70      	pop	{r4, r5, r6, pc}
 80159e0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d004      	beq.n	80159f0 <_raise_r+0x24>
 80159e6:	008a      	lsls	r2, r1, #2
 80159e8:	189b      	adds	r3, r3, r2
 80159ea:	681a      	ldr	r2, [r3, #0]
 80159ec:	2a00      	cmp	r2, #0
 80159ee:	d108      	bne.n	8015a02 <_raise_r+0x36>
 80159f0:	0020      	movs	r0, r4
 80159f2:	f000 f831 	bl	8015a58 <_getpid_r>
 80159f6:	002a      	movs	r2, r5
 80159f8:	0001      	movs	r1, r0
 80159fa:	0020      	movs	r0, r4
 80159fc:	f000 f81a 	bl	8015a34 <_kill_r>
 8015a00:	e7ed      	b.n	80159de <_raise_r+0x12>
 8015a02:	2000      	movs	r0, #0
 8015a04:	2a01      	cmp	r2, #1
 8015a06:	d0ea      	beq.n	80159de <_raise_r+0x12>
 8015a08:	1c51      	adds	r1, r2, #1
 8015a0a:	d103      	bne.n	8015a14 <_raise_r+0x48>
 8015a0c:	2316      	movs	r3, #22
 8015a0e:	3001      	adds	r0, #1
 8015a10:	6023      	str	r3, [r4, #0]
 8015a12:	e7e4      	b.n	80159de <_raise_r+0x12>
 8015a14:	2400      	movs	r4, #0
 8015a16:	0028      	movs	r0, r5
 8015a18:	601c      	str	r4, [r3, #0]
 8015a1a:	4790      	blx	r2
 8015a1c:	0020      	movs	r0, r4
 8015a1e:	e7de      	b.n	80159de <_raise_r+0x12>

08015a20 <raise>:
 8015a20:	b510      	push	{r4, lr}
 8015a22:	4b03      	ldr	r3, [pc, #12]	; (8015a30 <raise+0x10>)
 8015a24:	0001      	movs	r1, r0
 8015a26:	6818      	ldr	r0, [r3, #0]
 8015a28:	f7ff ffd0 	bl	80159cc <_raise_r>
 8015a2c:	bd10      	pop	{r4, pc}
 8015a2e:	46c0      	nop			; (mov r8, r8)
 8015a30:	20000180 	.word	0x20000180

08015a34 <_kill_r>:
 8015a34:	2300      	movs	r3, #0
 8015a36:	b570      	push	{r4, r5, r6, lr}
 8015a38:	4d06      	ldr	r5, [pc, #24]	; (8015a54 <_kill_r+0x20>)
 8015a3a:	0004      	movs	r4, r0
 8015a3c:	0008      	movs	r0, r1
 8015a3e:	0011      	movs	r1, r2
 8015a40:	602b      	str	r3, [r5, #0]
 8015a42:	f7f2 ffe3 	bl	8008a0c <_kill>
 8015a46:	1c43      	adds	r3, r0, #1
 8015a48:	d103      	bne.n	8015a52 <_kill_r+0x1e>
 8015a4a:	682b      	ldr	r3, [r5, #0]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d000      	beq.n	8015a52 <_kill_r+0x1e>
 8015a50:	6023      	str	r3, [r4, #0]
 8015a52:	bd70      	pop	{r4, r5, r6, pc}
 8015a54:	20000ca0 	.word	0x20000ca0

08015a58 <_getpid_r>:
 8015a58:	b510      	push	{r4, lr}
 8015a5a:	f7f2 ffd1 	bl	8008a00 <_getpid>
 8015a5e:	bd10      	pop	{r4, pc}

08015a60 <_malloc_usable_size_r>:
 8015a60:	1f0b      	subs	r3, r1, #4
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	1f18      	subs	r0, r3, #4
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	da01      	bge.n	8015a6e <_malloc_usable_size_r+0xe>
 8015a6a:	580b      	ldr	r3, [r1, r0]
 8015a6c:	18c0      	adds	r0, r0, r3
 8015a6e:	4770      	bx	lr

08015a70 <_init>:
 8015a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a72:	46c0      	nop			; (mov r8, r8)
 8015a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a76:	bc08      	pop	{r3}
 8015a78:	469e      	mov	lr, r3
 8015a7a:	4770      	bx	lr

08015a7c <_fini>:
 8015a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a7e:	46c0      	nop			; (mov r8, r8)
 8015a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a82:	bc08      	pop	{r3}
 8015a84:	469e      	mov	lr, r3
 8015a86:	4770      	bx	lr
